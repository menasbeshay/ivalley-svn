
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace GlobalLogistics.DAL
{
	public abstract class _AdsLocations : SqlClientEntity
	{
		public _AdsLocations()
		{
			this.QuerySource = "AdsLocations";
			this.MappingName = "AdsLocations";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_AdsLocationsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AdsLocationID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AdsLocationID, AdsLocationID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_AdsLocationsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AdsLocationID
			{
				get
				{
					return new SqlParameter("@AdsLocationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EnTitle
			{
				get
				{
					return new SqlParameter("@EnTitle", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter ArTitle
			{
				get
				{
					return new SqlParameter("@ArTitle", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter AdsTimeout
			{
				get
				{
					return new SqlParameter("@AdsTimeout", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter AdLocationPhoto
			{
				get
				{
					return new SqlParameter("@AdLocationPhoto", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter Width
			{
				get
				{
					return new SqlParameter("@Width", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Height
			{
				get
				{
					return new SqlParameter("@Height", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AdsLocationID = "AdsLocationID";
            public const string EnTitle = "EnTitle";
            public const string ArTitle = "ArTitle";
            public const string AdsTimeout = "AdsTimeout";
            public const string Description = "Description";
            public const string AdLocationPhoto = "AdLocationPhoto";
            public const string Width = "width";
            public const string Height = "height";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AdsLocationID] = _AdsLocations.PropertyNames.AdsLocationID;
					ht[EnTitle] = _AdsLocations.PropertyNames.EnTitle;
					ht[ArTitle] = _AdsLocations.PropertyNames.ArTitle;
					ht[AdsTimeout] = _AdsLocations.PropertyNames.AdsTimeout;
					ht[Description] = _AdsLocations.PropertyNames.Description;
					ht[AdLocationPhoto] = _AdsLocations.PropertyNames.AdLocationPhoto;
					ht[Width] = _AdsLocations.PropertyNames.Width;
					ht[Height] = _AdsLocations.PropertyNames.Height;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AdsLocationID = "AdsLocationID";
            public const string EnTitle = "EnTitle";
            public const string ArTitle = "ArTitle";
            public const string AdsTimeout = "AdsTimeout";
            public const string Description = "Description";
            public const string AdLocationPhoto = "AdLocationPhoto";
            public const string Width = "Width";
            public const string Height = "Height";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AdsLocationID] = _AdsLocations.ColumnNames.AdsLocationID;
					ht[EnTitle] = _AdsLocations.ColumnNames.EnTitle;
					ht[ArTitle] = _AdsLocations.ColumnNames.ArTitle;
					ht[AdsTimeout] = _AdsLocations.ColumnNames.AdsTimeout;
					ht[Description] = _AdsLocations.ColumnNames.Description;
					ht[AdLocationPhoto] = _AdsLocations.ColumnNames.AdLocationPhoto;
					ht[Width] = _AdsLocations.ColumnNames.Width;
					ht[Height] = _AdsLocations.ColumnNames.Height;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AdsLocationID = "s_AdsLocationID";
            public const string EnTitle = "s_EnTitle";
            public const string ArTitle = "s_ArTitle";
            public const string AdsTimeout = "s_AdsTimeout";
            public const string Description = "s_Description";
            public const string AdLocationPhoto = "s_AdLocationPhoto";
            public const string Width = "s_Width";
            public const string Height = "s_Height";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AdsLocationID
	    {
			get
	        {
				return base.Getint(ColumnNames.AdsLocationID);
			}
			set
	        {
				base.Setint(ColumnNames.AdsLocationID, value);
			}
		}

		public virtual string EnTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.EnTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.EnTitle, value);
			}
		}

		public virtual string ArTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.ArTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.ArTitle, value);
			}
		}

		public virtual int AdsTimeout
	    {
			get
	        {
				return base.Getint(ColumnNames.AdsTimeout);
			}
			set
	        {
				base.Setint(ColumnNames.AdsTimeout, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string AdLocationPhoto
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdLocationPhoto);
			}
			set
	        {
				base.Setstring(ColumnNames.AdLocationPhoto, value);
			}
		}

		public virtual int Width
	    {
			get
	        {
				return base.Getint(ColumnNames.Width);
			}
			set
	        {
				base.Setint(ColumnNames.Width, value);
			}
		}

		public virtual int Height
	    {
			get
	        {
				return base.Getint(ColumnNames.Height);
			}
			set
	        {
				base.Setint(ColumnNames.Height, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AdsLocationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdsLocationID) ? string.Empty : base.GetintAsString(ColumnNames.AdsLocationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdsLocationID);
				else
					this.AdsLocationID = base.SetintAsString(ColumnNames.AdsLocationID, value);
			}
		}

		public virtual string s_EnTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnTitle) ? string.Empty : base.GetstringAsString(ColumnNames.EnTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnTitle);
				else
					this.EnTitle = base.SetstringAsString(ColumnNames.EnTitle, value);
			}
		}

		public virtual string s_ArTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArTitle) ? string.Empty : base.GetstringAsString(ColumnNames.ArTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArTitle);
				else
					this.ArTitle = base.SetstringAsString(ColumnNames.ArTitle, value);
			}
		}

		public virtual string s_AdsTimeout
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdsTimeout) ? string.Empty : base.GetintAsString(ColumnNames.AdsTimeout);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdsTimeout);
				else
					this.AdsTimeout = base.SetintAsString(ColumnNames.AdsTimeout, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_AdLocationPhoto
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdLocationPhoto) ? string.Empty : base.GetstringAsString(ColumnNames.AdLocationPhoto);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdLocationPhoto);
				else
					this.AdLocationPhoto = base.SetstringAsString(ColumnNames.AdLocationPhoto, value);
			}
		}

		public virtual string s_Width
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Width) ? string.Empty : base.GetintAsString(ColumnNames.Width);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Width);
				else
					this.Width = base.SetintAsString(ColumnNames.Width, value);
			}
		}

		public virtual string s_Height
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Height) ? string.Empty : base.GetintAsString(ColumnNames.Height);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Height);
				else
					this.Height = base.SetintAsString(ColumnNames.Height, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AdsLocationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdsLocationID, Parameters.AdsLocationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnTitle, Parameters.EnTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArTitle, Parameters.ArTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdsTimeout
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdsTimeout, Parameters.AdsTimeout);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdLocationPhoto
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdLocationPhoto, Parameters.AdLocationPhoto);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Width
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Height
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AdsLocationID
		    {
				get
		        {
					if(_AdsLocationID_W == null)
	        	    {
						_AdsLocationID_W = TearOff.AdsLocationID;
					}
					return _AdsLocationID_W;
				}
			}

			public WhereParameter EnTitle
		    {
				get
		        {
					if(_EnTitle_W == null)
	        	    {
						_EnTitle_W = TearOff.EnTitle;
					}
					return _EnTitle_W;
				}
			}

			public WhereParameter ArTitle
		    {
				get
		        {
					if(_ArTitle_W == null)
	        	    {
						_ArTitle_W = TearOff.ArTitle;
					}
					return _ArTitle_W;
				}
			}

			public WhereParameter AdsTimeout
		    {
				get
		        {
					if(_AdsTimeout_W == null)
	        	    {
						_AdsTimeout_W = TearOff.AdsTimeout;
					}
					return _AdsTimeout_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter AdLocationPhoto
		    {
				get
		        {
					if(_AdLocationPhoto_W == null)
	        	    {
						_AdLocationPhoto_W = TearOff.AdLocationPhoto;
					}
					return _AdLocationPhoto_W;
				}
			}

			public WhereParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public WhereParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			private WhereParameter _AdsLocationID_W = null;
			private WhereParameter _EnTitle_W = null;
			private WhereParameter _ArTitle_W = null;
			private WhereParameter _AdsTimeout_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _AdLocationPhoto_W = null;
			private WhereParameter _Width_W = null;
			private WhereParameter _Height_W = null;

			public void WhereClauseReset()
			{
				_AdsLocationID_W = null;
				_EnTitle_W = null;
				_ArTitle_W = null;
				_AdsTimeout_W = null;
				_Description_W = null;
				_AdLocationPhoto_W = null;
				_Width_W = null;
				_Height_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AdsLocationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdsLocationID, Parameters.AdsLocationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnTitle, Parameters.EnTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArTitle, Parameters.ArTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdsTimeout
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdsTimeout, Parameters.AdsTimeout);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdLocationPhoto
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdLocationPhoto, Parameters.AdLocationPhoto);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Width
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Height
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Height, Parameters.Height);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AdsLocationID
		    {
				get
		        {
					if(_AdsLocationID_W == null)
	        	    {
						_AdsLocationID_W = TearOff.AdsLocationID;
					}
					return _AdsLocationID_W;
				}
			}

			public AggregateParameter EnTitle
		    {
				get
		        {
					if(_EnTitle_W == null)
	        	    {
						_EnTitle_W = TearOff.EnTitle;
					}
					return _EnTitle_W;
				}
			}

			public AggregateParameter ArTitle
		    {
				get
		        {
					if(_ArTitle_W == null)
	        	    {
						_ArTitle_W = TearOff.ArTitle;
					}
					return _ArTitle_W;
				}
			}

			public AggregateParameter AdsTimeout
		    {
				get
		        {
					if(_AdsTimeout_W == null)
	        	    {
						_AdsTimeout_W = TearOff.AdsTimeout;
					}
					return _AdsTimeout_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter AdLocationPhoto
		    {
				get
		        {
					if(_AdLocationPhoto_W == null)
	        	    {
						_AdLocationPhoto_W = TearOff.AdLocationPhoto;
					}
					return _AdLocationPhoto_W;
				}
			}

			public AggregateParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public AggregateParameter Height
		    {
				get
		        {
					if(_Height_W == null)
	        	    {
						_Height_W = TearOff.Height;
					}
					return _Height_W;
				}
			}

			private AggregateParameter _AdsLocationID_W = null;
			private AggregateParameter _EnTitle_W = null;
			private AggregateParameter _ArTitle_W = null;
			private AggregateParameter _AdsTimeout_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _AdLocationPhoto_W = null;
			private AggregateParameter _Width_W = null;
			private AggregateParameter _Height_W = null;

			public void AggregateClauseReset()
			{
				_AdsLocationID_W = null;
				_EnTitle_W = null;
				_ArTitle_W = null;
				_AdsTimeout_W = null;
				_Description_W = null;
				_AdLocationPhoto_W = null;
				_Width_W = null;
				_Height_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdsLocationsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AdsLocationID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdsLocationsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_AdsLocationsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AdsLocationID);
			p.SourceColumn = ColumnNames.AdsLocationID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AdsLocationID);
			p.SourceColumn = ColumnNames.AdsLocationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnTitle);
			p.SourceColumn = ColumnNames.EnTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArTitle);
			p.SourceColumn = ColumnNames.ArTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdsTimeout);
			p.SourceColumn = ColumnNames.AdsTimeout;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdLocationPhoto);
			p.SourceColumn = ColumnNames.AdLocationPhoto;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Width);
			p.SourceColumn = ColumnNames.Width;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Height);
			p.SourceColumn = ColumnNames.Height;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
