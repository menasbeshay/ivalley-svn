
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.DAL
{
	public abstract class _OrgUser : SqlClientEntity
	{
		public _OrgUser()
		{
			this.QuerySource = "OrgUser";
			this.MappingName = "OrgUser";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrgUserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid UserId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserId, UserId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrgUserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserId
			{
				get
				{
					return new SqlParameter("@UserId", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FatherName
			{
				get
				{
					return new SqlParameter("@FatherName", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter NationalId
			{
				get
				{
					return new SqlParameter("@NationalId", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter HealthOfficeId
			{
				get
				{
					return new SqlParameter("@HealthOfficeId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PhoneNumber
			{
				get
				{
					return new SqlParameter("@PhoneNumber", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter QualificationInfo
			{
				get
				{
					return new SqlParameter("@QualificationInfo", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter GovId
			{
				get
				{
					return new SqlParameter("@GovId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrgID
			{
				get
				{
					return new SqlParameter("@OrgID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CivilId
			{
				get
				{
					return new SqlParameter("@CivilId", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Status
			{
				get
				{
					return new SqlParameter("@Status", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserId = "UserId";
            public const string FirstName = "FirstName";
            public const string FatherName = "FatherName";
            public const string NationalId = "NationalId";
            public const string HealthOfficeId = "HealthOfficeId";
            public const string PhoneNumber = "PhoneNumber";
            public const string QualificationInfo = "QualificationInfo";
            public const string GovId = "GovId";
            public const string OrgID = "OrgID";
            public const string CivilId = "CivilId";
            public const string Status = "Status";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserId] = _OrgUser.PropertyNames.UserId;
					ht[FirstName] = _OrgUser.PropertyNames.FirstName;
					ht[FatherName] = _OrgUser.PropertyNames.FatherName;
					ht[NationalId] = _OrgUser.PropertyNames.NationalId;
					ht[HealthOfficeId] = _OrgUser.PropertyNames.HealthOfficeId;
					ht[PhoneNumber] = _OrgUser.PropertyNames.PhoneNumber;
					ht[QualificationInfo] = _OrgUser.PropertyNames.QualificationInfo;
					ht[GovId] = _OrgUser.PropertyNames.GovId;
					ht[OrgID] = _OrgUser.PropertyNames.OrgID;
					ht[CivilId] = _OrgUser.PropertyNames.CivilId;
					ht[Status] = _OrgUser.PropertyNames.Status;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserId = "UserId";
            public const string FirstName = "FirstName";
            public const string FatherName = "FatherName";
            public const string NationalId = "NationalId";
            public const string HealthOfficeId = "HealthOfficeId";
            public const string PhoneNumber = "PhoneNumber";
            public const string QualificationInfo = "QualificationInfo";
            public const string GovId = "GovId";
            public const string OrgID = "OrgID";
            public const string CivilId = "CivilId";
            public const string Status = "Status";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserId] = _OrgUser.ColumnNames.UserId;
					ht[FirstName] = _OrgUser.ColumnNames.FirstName;
					ht[FatherName] = _OrgUser.ColumnNames.FatherName;
					ht[NationalId] = _OrgUser.ColumnNames.NationalId;
					ht[HealthOfficeId] = _OrgUser.ColumnNames.HealthOfficeId;
					ht[PhoneNumber] = _OrgUser.ColumnNames.PhoneNumber;
					ht[QualificationInfo] = _OrgUser.ColumnNames.QualificationInfo;
					ht[GovId] = _OrgUser.ColumnNames.GovId;
					ht[OrgID] = _OrgUser.ColumnNames.OrgID;
					ht[CivilId] = _OrgUser.ColumnNames.CivilId;
					ht[Status] = _OrgUser.ColumnNames.Status;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserId = "s_UserId";
            public const string FirstName = "s_FirstName";
            public const string FatherName = "s_FatherName";
            public const string NationalId = "s_NationalId";
            public const string HealthOfficeId = "s_HealthOfficeId";
            public const string PhoneNumber = "s_PhoneNumber";
            public const string QualificationInfo = "s_QualificationInfo";
            public const string GovId = "s_GovId";
            public const string OrgID = "s_OrgID";
            public const string CivilId = "s_CivilId";
            public const string Status = "s_Status";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid UserId
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserId);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserId, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string FatherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherName);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherName, value);
			}
		}

		public virtual string NationalId
	    {
			get
	        {
				return base.Getstring(ColumnNames.NationalId);
			}
			set
	        {
				base.Setstring(ColumnNames.NationalId, value);
			}
		}

		public virtual int HealthOfficeId
	    {
			get
	        {
				return base.Getint(ColumnNames.HealthOfficeId);
			}
			set
	        {
				base.Setint(ColumnNames.HealthOfficeId, value);
			}
		}

		public virtual string PhoneNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhoneNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.PhoneNumber, value);
			}
		}

		public virtual string QualificationInfo
	    {
			get
	        {
				return base.Getstring(ColumnNames.QualificationInfo);
			}
			set
	        {
				base.Setstring(ColumnNames.QualificationInfo, value);
			}
		}

		public virtual int GovId
	    {
			get
	        {
				return base.Getint(ColumnNames.GovId);
			}
			set
	        {
				base.Setint(ColumnNames.GovId, value);
			}
		}

		public virtual int OrgID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrgID);
			}
			set
	        {
				base.Setint(ColumnNames.OrgID, value);
			}
		}

		public virtual short CivilId
	    {
			get
	        {
				return base.Getshort(ColumnNames.CivilId);
			}
			set
	        {
				base.Setshort(ColumnNames.CivilId, value);
			}
		}

		public virtual bool Status
	    {
			get
	        {
				return base.Getbool(ColumnNames.Status);
			}
			set
	        {
				base.Setbool(ColumnNames.Status, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserId) ? string.Empty : base.GetGuidAsString(ColumnNames.UserId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserId);
				else
					this.UserId = base.SetGuidAsString(ColumnNames.UserId, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_FatherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherName) ? string.Empty : base.GetstringAsString(ColumnNames.FatherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherName);
				else
					this.FatherName = base.SetstringAsString(ColumnNames.FatherName, value);
			}
		}

		public virtual string s_NationalId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NationalId) ? string.Empty : base.GetstringAsString(ColumnNames.NationalId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NationalId);
				else
					this.NationalId = base.SetstringAsString(ColumnNames.NationalId, value);
			}
		}

		public virtual string s_HealthOfficeId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HealthOfficeId) ? string.Empty : base.GetintAsString(ColumnNames.HealthOfficeId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HealthOfficeId);
				else
					this.HealthOfficeId = base.SetintAsString(ColumnNames.HealthOfficeId, value);
			}
		}

		public virtual string s_PhoneNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhoneNumber) ? string.Empty : base.GetstringAsString(ColumnNames.PhoneNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhoneNumber);
				else
					this.PhoneNumber = base.SetstringAsString(ColumnNames.PhoneNumber, value);
			}
		}

		public virtual string s_QualificationInfo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QualificationInfo) ? string.Empty : base.GetstringAsString(ColumnNames.QualificationInfo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QualificationInfo);
				else
					this.QualificationInfo = base.SetstringAsString(ColumnNames.QualificationInfo, value);
			}
		}

		public virtual string s_GovId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GovId) ? string.Empty : base.GetintAsString(ColumnNames.GovId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GovId);
				else
					this.GovId = base.SetintAsString(ColumnNames.GovId, value);
			}
		}

		public virtual string s_OrgID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrgID) ? string.Empty : base.GetintAsString(ColumnNames.OrgID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrgID);
				else
					this.OrgID = base.SetintAsString(ColumnNames.OrgID, value);
			}
		}

		public virtual string s_CivilId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CivilId) ? string.Empty : base.GetshortAsString(ColumnNames.CivilId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CivilId);
				else
					this.CivilId = base.SetshortAsString(ColumnNames.CivilId, value);
			}
		}

		public virtual string s_Status
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Status) ? string.Empty : base.GetboolAsString(ColumnNames.Status);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Status);
				else
					this.Status = base.SetboolAsString(ColumnNames.Status, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserId, Parameters.UserId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherName, Parameters.FatherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NationalId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NationalId, Parameters.NationalId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HealthOfficeId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HealthOfficeId, Parameters.HealthOfficeId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhoneNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhoneNumber, Parameters.PhoneNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QualificationInfo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QualificationInfo, Parameters.QualificationInfo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GovId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GovId, Parameters.GovId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrgID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrgID, Parameters.OrgID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CivilId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CivilId, Parameters.CivilId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Status
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserId
		    {
				get
		        {
					if(_UserId_W == null)
	        	    {
						_UserId_W = TearOff.UserId;
					}
					return _UserId_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter FatherName
		    {
				get
		        {
					if(_FatherName_W == null)
	        	    {
						_FatherName_W = TearOff.FatherName;
					}
					return _FatherName_W;
				}
			}

			public WhereParameter NationalId
		    {
				get
		        {
					if(_NationalId_W == null)
	        	    {
						_NationalId_W = TearOff.NationalId;
					}
					return _NationalId_W;
				}
			}

			public WhereParameter HealthOfficeId
		    {
				get
		        {
					if(_HealthOfficeId_W == null)
	        	    {
						_HealthOfficeId_W = TearOff.HealthOfficeId;
					}
					return _HealthOfficeId_W;
				}
			}

			public WhereParameter PhoneNumber
		    {
				get
		        {
					if(_PhoneNumber_W == null)
	        	    {
						_PhoneNumber_W = TearOff.PhoneNumber;
					}
					return _PhoneNumber_W;
				}
			}

			public WhereParameter QualificationInfo
		    {
				get
		        {
					if(_QualificationInfo_W == null)
	        	    {
						_QualificationInfo_W = TearOff.QualificationInfo;
					}
					return _QualificationInfo_W;
				}
			}

			public WhereParameter GovId
		    {
				get
		        {
					if(_GovId_W == null)
	        	    {
						_GovId_W = TearOff.GovId;
					}
					return _GovId_W;
				}
			}

			public WhereParameter OrgID
		    {
				get
		        {
					if(_OrgID_W == null)
	        	    {
						_OrgID_W = TearOff.OrgID;
					}
					return _OrgID_W;
				}
			}

			public WhereParameter CivilId
		    {
				get
		        {
					if(_CivilId_W == null)
	        	    {
						_CivilId_W = TearOff.CivilId;
					}
					return _CivilId_W;
				}
			}

			public WhereParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			private WhereParameter _UserId_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _FatherName_W = null;
			private WhereParameter _NationalId_W = null;
			private WhereParameter _HealthOfficeId_W = null;
			private WhereParameter _PhoneNumber_W = null;
			private WhereParameter _QualificationInfo_W = null;
			private WhereParameter _GovId_W = null;
			private WhereParameter _OrgID_W = null;
			private WhereParameter _CivilId_W = null;
			private WhereParameter _Status_W = null;

			public void WhereClauseReset()
			{
				_UserId_W = null;
				_FirstName_W = null;
				_FatherName_W = null;
				_NationalId_W = null;
				_HealthOfficeId_W = null;
				_PhoneNumber_W = null;
				_QualificationInfo_W = null;
				_GovId_W = null;
				_OrgID_W = null;
				_CivilId_W = null;
				_Status_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserId, Parameters.UserId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherName, Parameters.FatherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NationalId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NationalId, Parameters.NationalId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HealthOfficeId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HealthOfficeId, Parameters.HealthOfficeId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhoneNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhoneNumber, Parameters.PhoneNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QualificationInfo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QualificationInfo, Parameters.QualificationInfo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GovId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GovId, Parameters.GovId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrgID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrgID, Parameters.OrgID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CivilId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CivilId, Parameters.CivilId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Status
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserId
		    {
				get
		        {
					if(_UserId_W == null)
	        	    {
						_UserId_W = TearOff.UserId;
					}
					return _UserId_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter FatherName
		    {
				get
		        {
					if(_FatherName_W == null)
	        	    {
						_FatherName_W = TearOff.FatherName;
					}
					return _FatherName_W;
				}
			}

			public AggregateParameter NationalId
		    {
				get
		        {
					if(_NationalId_W == null)
	        	    {
						_NationalId_W = TearOff.NationalId;
					}
					return _NationalId_W;
				}
			}

			public AggregateParameter HealthOfficeId
		    {
				get
		        {
					if(_HealthOfficeId_W == null)
	        	    {
						_HealthOfficeId_W = TearOff.HealthOfficeId;
					}
					return _HealthOfficeId_W;
				}
			}

			public AggregateParameter PhoneNumber
		    {
				get
		        {
					if(_PhoneNumber_W == null)
	        	    {
						_PhoneNumber_W = TearOff.PhoneNumber;
					}
					return _PhoneNumber_W;
				}
			}

			public AggregateParameter QualificationInfo
		    {
				get
		        {
					if(_QualificationInfo_W == null)
	        	    {
						_QualificationInfo_W = TearOff.QualificationInfo;
					}
					return _QualificationInfo_W;
				}
			}

			public AggregateParameter GovId
		    {
				get
		        {
					if(_GovId_W == null)
	        	    {
						_GovId_W = TearOff.GovId;
					}
					return _GovId_W;
				}
			}

			public AggregateParameter OrgID
		    {
				get
		        {
					if(_OrgID_W == null)
	        	    {
						_OrgID_W = TearOff.OrgID;
					}
					return _OrgID_W;
				}
			}

			public AggregateParameter CivilId
		    {
				get
		        {
					if(_CivilId_W == null)
	        	    {
						_CivilId_W = TearOff.CivilId;
					}
					return _CivilId_W;
				}
			}

			public AggregateParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			private AggregateParameter _UserId_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _FatherName_W = null;
			private AggregateParameter _NationalId_W = null;
			private AggregateParameter _HealthOfficeId_W = null;
			private AggregateParameter _PhoneNumber_W = null;
			private AggregateParameter _QualificationInfo_W = null;
			private AggregateParameter _GovId_W = null;
			private AggregateParameter _OrgID_W = null;
			private AggregateParameter _CivilId_W = null;
			private AggregateParameter _Status_W = null;

			public void AggregateClauseReset()
			{
				_UserId_W = null;
				_FirstName_W = null;
				_FatherName_W = null;
				_NationalId_W = null;
				_HealthOfficeId_W = null;
				_PhoneNumber_W = null;
				_QualificationInfo_W = null;
				_GovId_W = null;
				_OrgID_W = null;
				_CivilId_W = null;
				_Status_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrgUserInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrgUserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrgUserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserId);
			p.SourceColumn = ColumnNames.UserId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserId);
			p.SourceColumn = ColumnNames.UserId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherName);
			p.SourceColumn = ColumnNames.FatherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NationalId);
			p.SourceColumn = ColumnNames.NationalId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HealthOfficeId);
			p.SourceColumn = ColumnNames.HealthOfficeId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhoneNumber);
			p.SourceColumn = ColumnNames.PhoneNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QualificationInfo);
			p.SourceColumn = ColumnNames.QualificationInfo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GovId);
			p.SourceColumn = ColumnNames.GovId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrgID);
			p.SourceColumn = ColumnNames.OrgID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CivilId);
			p.SourceColumn = ColumnNames.CivilId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Status);
			p.SourceColumn = ColumnNames.Status;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
