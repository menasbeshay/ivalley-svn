
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.DAL
{
	public abstract class _aspnet_Users : SqlClientEntity
	{
		public _aspnet_Users()
		{
			this.QuerySource = "aspnet_Users";
			this.MappingName = "aspnet_Users";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_aspnet_UsersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid UserId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserId, UserId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_aspnet_UsersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ApplicationId
			{
				get
				{
					return new SqlParameter("@ApplicationId", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter UserId
			{
				get
				{
					return new SqlParameter("@UserId", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 256);
				}
			}
			
			public static SqlParameter LoweredUserName
			{
				get
				{
					return new SqlParameter("@LoweredUserName", SqlDbType.NVarChar, 256);
				}
			}
			
			public static SqlParameter MobileAlias
			{
				get
				{
					return new SqlParameter("@MobileAlias", SqlDbType.NVarChar, 16);
				}
			}
			
			public static SqlParameter IsAnonymous
			{
				get
				{
					return new SqlParameter("@IsAnonymous", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter LastActivityDate
			{
				get
				{
					return new SqlParameter("@LastActivityDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ApplicationId = "ApplicationId";
            public const string UserId = "UserId";
            public const string UserName = "UserName";
            public const string LoweredUserName = "LoweredUserName";
            public const string MobileAlias = "MobileAlias";
            public const string IsAnonymous = "IsAnonymous";
            public const string LastActivityDate = "LastActivityDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationId] = _aspnet_Users.PropertyNames.ApplicationId;
					ht[UserId] = _aspnet_Users.PropertyNames.UserId;
					ht[UserName] = _aspnet_Users.PropertyNames.UserName;
					ht[LoweredUserName] = _aspnet_Users.PropertyNames.LoweredUserName;
					ht[MobileAlias] = _aspnet_Users.PropertyNames.MobileAlias;
					ht[IsAnonymous] = _aspnet_Users.PropertyNames.IsAnonymous;
					ht[LastActivityDate] = _aspnet_Users.PropertyNames.LastActivityDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ApplicationId = "ApplicationId";
            public const string UserId = "UserId";
            public const string UserName = "UserName";
            public const string LoweredUserName = "LoweredUserName";
            public const string MobileAlias = "MobileAlias";
            public const string IsAnonymous = "IsAnonymous";
            public const string LastActivityDate = "LastActivityDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationId] = _aspnet_Users.ColumnNames.ApplicationId;
					ht[UserId] = _aspnet_Users.ColumnNames.UserId;
					ht[UserName] = _aspnet_Users.ColumnNames.UserName;
					ht[LoweredUserName] = _aspnet_Users.ColumnNames.LoweredUserName;
					ht[MobileAlias] = _aspnet_Users.ColumnNames.MobileAlias;
					ht[IsAnonymous] = _aspnet_Users.ColumnNames.IsAnonymous;
					ht[LastActivityDate] = _aspnet_Users.ColumnNames.LastActivityDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ApplicationId = "s_ApplicationId";
            public const string UserId = "s_UserId";
            public const string UserName = "s_UserName";
            public const string LoweredUserName = "s_LoweredUserName";
            public const string MobileAlias = "s_MobileAlias";
            public const string IsAnonymous = "s_IsAnonymous";
            public const string LastActivityDate = "s_LastActivityDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid ApplicationId
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ApplicationId);
			}
			set
	        {
				base.SetGuid(ColumnNames.ApplicationId, value);
			}
		}

		public virtual Guid UserId
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserId);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserId, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string LoweredUserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LoweredUserName);
			}
			set
	        {
				base.Setstring(ColumnNames.LoweredUserName, value);
			}
		}

		public virtual string MobileAlias
	    {
			get
	        {
				return base.Getstring(ColumnNames.MobileAlias);
			}
			set
	        {
				base.Setstring(ColumnNames.MobileAlias, value);
			}
		}

		public virtual bool IsAnonymous
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAnonymous);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAnonymous, value);
			}
		}

		public virtual DateTime LastActivityDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastActivityDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastActivityDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ApplicationId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApplicationId) ? string.Empty : base.GetGuidAsString(ColumnNames.ApplicationId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApplicationId);
				else
					this.ApplicationId = base.SetGuidAsString(ColumnNames.ApplicationId, value);
			}
		}

		public virtual string s_UserId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserId) ? string.Empty : base.GetGuidAsString(ColumnNames.UserId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserId);
				else
					this.UserId = base.SetGuidAsString(ColumnNames.UserId, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_LoweredUserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LoweredUserName) ? string.Empty : base.GetstringAsString(ColumnNames.LoweredUserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LoweredUserName);
				else
					this.LoweredUserName = base.SetstringAsString(ColumnNames.LoweredUserName, value);
			}
		}

		public virtual string s_MobileAlias
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MobileAlias) ? string.Empty : base.GetstringAsString(ColumnNames.MobileAlias);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MobileAlias);
				else
					this.MobileAlias = base.SetstringAsString(ColumnNames.MobileAlias, value);
			}
		}

		public virtual string s_IsAnonymous
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAnonymous) ? string.Empty : base.GetboolAsString(ColumnNames.IsAnonymous);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAnonymous);
				else
					this.IsAnonymous = base.SetboolAsString(ColumnNames.IsAnonymous, value);
			}
		}

		public virtual string s_LastActivityDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastActivityDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastActivityDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastActivityDate);
				else
					this.LastActivityDate = base.SetDateTimeAsString(ColumnNames.LastActivityDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ApplicationId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApplicationId, Parameters.ApplicationId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserId, Parameters.UserId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LoweredUserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LoweredUserName, Parameters.LoweredUserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MobileAlias
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MobileAlias, Parameters.MobileAlias);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAnonymous
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAnonymous, Parameters.IsAnonymous);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastActivityDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastActivityDate, Parameters.LastActivityDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ApplicationId
		    {
				get
		        {
					if(_ApplicationId_W == null)
	        	    {
						_ApplicationId_W = TearOff.ApplicationId;
					}
					return _ApplicationId_W;
				}
			}

			public WhereParameter UserId
		    {
				get
		        {
					if(_UserId_W == null)
	        	    {
						_UserId_W = TearOff.UserId;
					}
					return _UserId_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter LoweredUserName
		    {
				get
		        {
					if(_LoweredUserName_W == null)
	        	    {
						_LoweredUserName_W = TearOff.LoweredUserName;
					}
					return _LoweredUserName_W;
				}
			}

			public WhereParameter MobileAlias
		    {
				get
		        {
					if(_MobileAlias_W == null)
	        	    {
						_MobileAlias_W = TearOff.MobileAlias;
					}
					return _MobileAlias_W;
				}
			}

			public WhereParameter IsAnonymous
		    {
				get
		        {
					if(_IsAnonymous_W == null)
	        	    {
						_IsAnonymous_W = TearOff.IsAnonymous;
					}
					return _IsAnonymous_W;
				}
			}

			public WhereParameter LastActivityDate
		    {
				get
		        {
					if(_LastActivityDate_W == null)
	        	    {
						_LastActivityDate_W = TearOff.LastActivityDate;
					}
					return _LastActivityDate_W;
				}
			}

			private WhereParameter _ApplicationId_W = null;
			private WhereParameter _UserId_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _LoweredUserName_W = null;
			private WhereParameter _MobileAlias_W = null;
			private WhereParameter _IsAnonymous_W = null;
			private WhereParameter _LastActivityDate_W = null;

			public void WhereClauseReset()
			{
				_ApplicationId_W = null;
				_UserId_W = null;
				_UserName_W = null;
				_LoweredUserName_W = null;
				_MobileAlias_W = null;
				_IsAnonymous_W = null;
				_LastActivityDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ApplicationId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApplicationId, Parameters.ApplicationId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserId, Parameters.UserId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LoweredUserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LoweredUserName, Parameters.LoweredUserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MobileAlias
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MobileAlias, Parameters.MobileAlias);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAnonymous
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAnonymous, Parameters.IsAnonymous);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastActivityDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastActivityDate, Parameters.LastActivityDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ApplicationId
		    {
				get
		        {
					if(_ApplicationId_W == null)
	        	    {
						_ApplicationId_W = TearOff.ApplicationId;
					}
					return _ApplicationId_W;
				}
			}

			public AggregateParameter UserId
		    {
				get
		        {
					if(_UserId_W == null)
	        	    {
						_UserId_W = TearOff.UserId;
					}
					return _UserId_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter LoweredUserName
		    {
				get
		        {
					if(_LoweredUserName_W == null)
	        	    {
						_LoweredUserName_W = TearOff.LoweredUserName;
					}
					return _LoweredUserName_W;
				}
			}

			public AggregateParameter MobileAlias
		    {
				get
		        {
					if(_MobileAlias_W == null)
	        	    {
						_MobileAlias_W = TearOff.MobileAlias;
					}
					return _MobileAlias_W;
				}
			}

			public AggregateParameter IsAnonymous
		    {
				get
		        {
					if(_IsAnonymous_W == null)
	        	    {
						_IsAnonymous_W = TearOff.IsAnonymous;
					}
					return _IsAnonymous_W;
				}
			}

			public AggregateParameter LastActivityDate
		    {
				get
		        {
					if(_LastActivityDate_W == null)
	        	    {
						_LastActivityDate_W = TearOff.LastActivityDate;
					}
					return _LastActivityDate_W;
				}
			}

			private AggregateParameter _ApplicationId_W = null;
			private AggregateParameter _UserId_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _LoweredUserName_W = null;
			private AggregateParameter _MobileAlias_W = null;
			private AggregateParameter _IsAnonymous_W = null;
			private AggregateParameter _LastActivityDate_W = null;

			public void AggregateClauseReset()
			{
				_ApplicationId_W = null;
				_UserId_W = null;
				_UserName_W = null;
				_LoweredUserName_W = null;
				_MobileAlias_W = null;
				_IsAnonymous_W = null;
				_LastActivityDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_aspnet_UsersInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_aspnet_UsersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_aspnet_UsersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserId);
			p.SourceColumn = ColumnNames.UserId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ApplicationId);
			p.SourceColumn = ColumnNames.ApplicationId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserId);
			p.SourceColumn = ColumnNames.UserId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LoweredUserName);
			p.SourceColumn = ColumnNames.LoweredUserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MobileAlias);
			p.SourceColumn = ColumnNames.MobileAlias;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAnonymous);
			p.SourceColumn = ColumnNames.IsAnonymous;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastActivityDate);
			p.SourceColumn = ColumnNames.LastActivityDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
