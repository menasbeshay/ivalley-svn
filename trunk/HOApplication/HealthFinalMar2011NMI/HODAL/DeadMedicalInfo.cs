
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.DAL
{
	public abstract class _DeadMedicalInfo : SqlClientEntity
	{
		public _DeadMedicalInfo()
		{
			this.QuerySource = "DeadMedicalInfo";
			this.MappingName = "DeadMedicalInfo";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeadMedicalInfoLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid DeadMedicalInfoID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.DeadMedicalInfoID, DeadMedicalInfoID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeadMedicalInfoLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter DeadMedicalInfoID
			{
				get
				{
					return new SqlParameter("@DeadMedicalInfoID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter DeadEventID
			{
				get
				{
					return new SqlParameter("@DeadEventID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CauseOfDeathA
			{
				get
				{
					return new SqlParameter("@CauseOfDeathA", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter CauseOfDeathAPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathAPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter CauseOfDeathB
			{
				get
				{
					return new SqlParameter("@CauseOfDeathB", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CauseOfDeathBPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathBPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter CauseOfDeathC
			{
				get
				{
					return new SqlParameter("@CauseOfDeathC", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter CauseOfDeathCPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathCPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter CauseOfDeathD
			{
				get
				{
					return new SqlParameter("@CauseOfDeathD", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter CauseOfDeathDPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathDPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter CauseOfDeathNotRelatedA
			{
				get
				{
					return new SqlParameter("@CauseOfDeathNotRelatedA", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter CauseOfDeathNotRelatedAPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathNotRelatedAPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter CauseOfDeathNotRelatedB
			{
				get
				{
					return new SqlParameter("@CauseOfDeathNotRelatedB", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter CauseOfDeathNotRelatedBPeriod
			{
				get
				{
					return new SqlParameter("@CauseOfDeathNotRelatedBPeriod", SqlDbType.Char, 6);
				}
			}
			
			public static SqlParameter IsSmoker
			{
				get
				{
					return new SqlParameter("@IsSmoker", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SmokeType
			{
				get
				{
					return new SqlParameter("@SmokeType", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter SmokePeriod
			{
				get
				{
					return new SqlParameter("@SmokePeriod", SqlDbType.Char, 4);
				}
			}
			
			public static SqlParameter IsCausedByAccedent
			{
				get
				{
					return new SqlParameter("@IsCausedByAccedent", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AccedentCause
			{
				get
				{
					return new SqlParameter("@AccedentCause", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AccedentAnotherCause
			{
				get
				{
					return new SqlParameter("@AccedentAnotherCause", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AccedentPlace
			{
				get
				{
					return new SqlParameter("@AccedentPlace", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter VehicleType
			{
				get
				{
					return new SqlParameter("@VehicleType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter VehicleTypeOther
			{
				get
				{
					return new SqlParameter("@VehicleTypeOther", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter DeadStatus
			{
				get
				{
					return new SqlParameter("@DeadStatus", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HasTumor
			{
				get
				{
					return new SqlParameter("@HasTumor", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter PlaceOfTumor
			{
				get
				{
					return new SqlParameter("@PlaceOfTumor", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter TypeOfTumor
			{
				get
				{
					return new SqlParameter("@TypeOfTumor", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PhaseOfTumor
			{
				get
				{
					return new SqlParameter("@PhaseOfTumor", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeadThroghCarry
			{
				get
				{
					return new SqlParameter("@DeadThroghCarry", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AbortionPast6Weeks
			{
				get
				{
					return new SqlParameter("@AbortionPast6Weeks", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DeadThroghBirth
			{
				get
				{
					return new SqlParameter("@DeadThroghBirth", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BirthPast6Weeks
			{
				get
				{
					return new SqlParameter("@BirthPast6Weeks", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter BirthDate
			{
				get
				{
					return new SqlParameter("@BirthDate", SqlDbType.SmallDateTime, 0);
				}
			}
			
			public static SqlParameter BirthResult
			{
				get
				{
					return new SqlParameter("@BirthResult", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BirthPlace
			{
				get
				{
					return new SqlParameter("@BirthPlace", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter BirthOperator
			{
				get
				{
					return new SqlParameter("@BirthOperator", SqlDbType.NVarChar, 100);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string DeadMedicalInfoID = "DeadMedicalInfoID";
            public const string DeadEventID = "DeadEventID";
            public const string CauseOfDeathA = "CauseOfDeathA";
            public const string CauseOfDeathAPeriod = "CauseOfDeathAPeriod";
            public const string CauseOfDeathB = "CauseOfDeathB";
            public const string CauseOfDeathBPeriod = "CauseOfDeathBPeriod";
            public const string CauseOfDeathC = "CauseOfDeathC";
            public const string CauseOfDeathCPeriod = "CauseOfDeathCPeriod";
            public const string CauseOfDeathD = "CauseOfDeathD";
            public const string CauseOfDeathDPeriod = "CauseOfDeathDPeriod";
            public const string CauseOfDeathNotRelatedA = "CauseOfDeathNotRelatedA";
            public const string CauseOfDeathNotRelatedAPeriod = "CauseOfDeathNotRelatedAPeriod";
            public const string CauseOfDeathNotRelatedB = "CauseOfDeathNotRelatedB";
            public const string CauseOfDeathNotRelatedBPeriod = "CauseOfDeathNotRelatedBPeriod";
            public const string IsSmoker = "IsSmoker";
            public const string SmokeType = "SmokeType";
            public const string SmokePeriod = "SmokePeriod";
            public const string IsCausedByAccedent = "IsCausedByAccedent";
            public const string AccedentCause = "AccedentCause";
            public const string AccedentAnotherCause = "AccedentAnotherCause";
            public const string AccedentPlace = "AccedentPlace";
            public const string VehicleType = "VehicleType";
            public const string VehicleTypeOther = "VehicleTypeOther";
            public const string DeadStatus = "DeadStatus";
            public const string HasTumor = "HasTumor";
            public const string PlaceOfTumor = "PlaceOfTumor";
            public const string TypeOfTumor = "TypeOfTumor";
            public const string PhaseOfTumor = "PhaseOfTumor";
            public const string DeadThroghCarry = "DeadThroghCarry";
            public const string AbortionPast6Weeks = "AbortionPast6Weeks";
            public const string DeadThroghBirth = "DeadThroghBirth";
            public const string BirthPast6Weeks = "BirthPast6Weeks";
            public const string BirthDate = "BirthDate";
            public const string BirthResult = "BirthResult";
            public const string BirthPlace = "BirthPlace";
            public const string BirthOperator = "BirthOperator";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeadMedicalInfoID] = _DeadMedicalInfo.PropertyNames.DeadMedicalInfoID;
					ht[DeadEventID] = _DeadMedicalInfo.PropertyNames.DeadEventID;
					ht[CauseOfDeathA] = _DeadMedicalInfo.PropertyNames.CauseOfDeathA;
					ht[CauseOfDeathAPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathAPeriod;
					ht[CauseOfDeathB] = _DeadMedicalInfo.PropertyNames.CauseOfDeathB;
					ht[CauseOfDeathBPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathBPeriod;
					ht[CauseOfDeathC] = _DeadMedicalInfo.PropertyNames.CauseOfDeathC;
					ht[CauseOfDeathCPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathCPeriod;
					ht[CauseOfDeathD] = _DeadMedicalInfo.PropertyNames.CauseOfDeathD;
					ht[CauseOfDeathDPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathDPeriod;
					ht[CauseOfDeathNotRelatedA] = _DeadMedicalInfo.PropertyNames.CauseOfDeathNotRelatedA;
					ht[CauseOfDeathNotRelatedAPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathNotRelatedAPeriod;
					ht[CauseOfDeathNotRelatedB] = _DeadMedicalInfo.PropertyNames.CauseOfDeathNotRelatedB;
					ht[CauseOfDeathNotRelatedBPeriod] = _DeadMedicalInfo.PropertyNames.CauseOfDeathNotRelatedBPeriod;
					ht[IsSmoker] = _DeadMedicalInfo.PropertyNames.IsSmoker;
					ht[SmokeType] = _DeadMedicalInfo.PropertyNames.SmokeType;
					ht[SmokePeriod] = _DeadMedicalInfo.PropertyNames.SmokePeriod;
					ht[IsCausedByAccedent] = _DeadMedicalInfo.PropertyNames.IsCausedByAccedent;
					ht[AccedentCause] = _DeadMedicalInfo.PropertyNames.AccedentCause;
					ht[AccedentAnotherCause] = _DeadMedicalInfo.PropertyNames.AccedentAnotherCause;
					ht[AccedentPlace] = _DeadMedicalInfo.PropertyNames.AccedentPlace;
					ht[VehicleType] = _DeadMedicalInfo.PropertyNames.VehicleType;
					ht[VehicleTypeOther] = _DeadMedicalInfo.PropertyNames.VehicleTypeOther;
					ht[DeadStatus] = _DeadMedicalInfo.PropertyNames.DeadStatus;
					ht[HasTumor] = _DeadMedicalInfo.PropertyNames.HasTumor;
					ht[PlaceOfTumor] = _DeadMedicalInfo.PropertyNames.PlaceOfTumor;
					ht[TypeOfTumor] = _DeadMedicalInfo.PropertyNames.TypeOfTumor;
					ht[PhaseOfTumor] = _DeadMedicalInfo.PropertyNames.PhaseOfTumor;
					ht[DeadThroghCarry] = _DeadMedicalInfo.PropertyNames.DeadThroghCarry;
					ht[AbortionPast6Weeks] = _DeadMedicalInfo.PropertyNames.AbortionPast6Weeks;
					ht[DeadThroghBirth] = _DeadMedicalInfo.PropertyNames.DeadThroghBirth;
					ht[BirthPast6Weeks] = _DeadMedicalInfo.PropertyNames.BirthPast6Weeks;
					ht[BirthDate] = _DeadMedicalInfo.PropertyNames.BirthDate;
					ht[BirthResult] = _DeadMedicalInfo.PropertyNames.BirthResult;
					ht[BirthPlace] = _DeadMedicalInfo.PropertyNames.BirthPlace;
					ht[BirthOperator] = _DeadMedicalInfo.PropertyNames.BirthOperator;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string DeadMedicalInfoID = "DeadMedicalInfoID";
            public const string DeadEventID = "DeadEventID";
            public const string CauseOfDeathA = "CauseOfDeathA";
            public const string CauseOfDeathAPeriod = "CauseOfDeathAPeriod";
            public const string CauseOfDeathB = "CauseOfDeathB";
            public const string CauseOfDeathBPeriod = "CauseOfDeathBPeriod";
            public const string CauseOfDeathC = "CauseOfDeathC";
            public const string CauseOfDeathCPeriod = "CauseOfDeathCPeriod";
            public const string CauseOfDeathD = "CauseOfDeathD";
            public const string CauseOfDeathDPeriod = "CauseOfDeathDPeriod";
            public const string CauseOfDeathNotRelatedA = "CauseOfDeathNotRelatedA";
            public const string CauseOfDeathNotRelatedAPeriod = "CauseOfDeathNotRelatedAPeriod";
            public const string CauseOfDeathNotRelatedB = "CauseOfDeathNotRelatedB";
            public const string CauseOfDeathNotRelatedBPeriod = "CauseOfDeathNotRelatedBPeriod";
            public const string IsSmoker = "IsSmoker";
            public const string SmokeType = "SmokeType";
            public const string SmokePeriod = "SmokePeriod";
            public const string IsCausedByAccedent = "IsCausedByAccedent";
            public const string AccedentCause = "AccedentCause";
            public const string AccedentAnotherCause = "AccedentAnotherCause";
            public const string AccedentPlace = "AccedentPlace";
            public const string VehicleType = "VehicleType";
            public const string VehicleTypeOther = "VehicleTypeOther";
            public const string DeadStatus = "DeadStatus";
            public const string HasTumor = "HasTumor";
            public const string PlaceOfTumor = "PlaceOfTumor";
            public const string TypeOfTumor = "TypeOfTumor";
            public const string PhaseOfTumor = "PhaseOfTumor";
            public const string DeadThroghCarry = "DeadThroghCarry";
            public const string AbortionPast6Weeks = "AbortionPast6Weeks";
            public const string DeadThroghBirth = "DeadThroghBirth";
            public const string BirthPast6Weeks = "BirthPast6Weeks";
            public const string BirthDate = "BirthDate";
            public const string BirthResult = "BirthResult";
            public const string BirthPlace = "BirthPlace";
            public const string BirthOperator = "BirthOperator";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeadMedicalInfoID] = _DeadMedicalInfo.ColumnNames.DeadMedicalInfoID;
					ht[DeadEventID] = _DeadMedicalInfo.ColumnNames.DeadEventID;
					ht[CauseOfDeathA] = _DeadMedicalInfo.ColumnNames.CauseOfDeathA;
					ht[CauseOfDeathAPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathAPeriod;
					ht[CauseOfDeathB] = _DeadMedicalInfo.ColumnNames.CauseOfDeathB;
					ht[CauseOfDeathBPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathBPeriod;
					ht[CauseOfDeathC] = _DeadMedicalInfo.ColumnNames.CauseOfDeathC;
					ht[CauseOfDeathCPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathCPeriod;
					ht[CauseOfDeathD] = _DeadMedicalInfo.ColumnNames.CauseOfDeathD;
					ht[CauseOfDeathDPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathDPeriod;
					ht[CauseOfDeathNotRelatedA] = _DeadMedicalInfo.ColumnNames.CauseOfDeathNotRelatedA;
					ht[CauseOfDeathNotRelatedAPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathNotRelatedAPeriod;
					ht[CauseOfDeathNotRelatedB] = _DeadMedicalInfo.ColumnNames.CauseOfDeathNotRelatedB;
					ht[CauseOfDeathNotRelatedBPeriod] = _DeadMedicalInfo.ColumnNames.CauseOfDeathNotRelatedBPeriod;
					ht[IsSmoker] = _DeadMedicalInfo.ColumnNames.IsSmoker;
					ht[SmokeType] = _DeadMedicalInfo.ColumnNames.SmokeType;
					ht[SmokePeriod] = _DeadMedicalInfo.ColumnNames.SmokePeriod;
					ht[IsCausedByAccedent] = _DeadMedicalInfo.ColumnNames.IsCausedByAccedent;
					ht[AccedentCause] = _DeadMedicalInfo.ColumnNames.AccedentCause;
					ht[AccedentAnotherCause] = _DeadMedicalInfo.ColumnNames.AccedentAnotherCause;
					ht[AccedentPlace] = _DeadMedicalInfo.ColumnNames.AccedentPlace;
					ht[VehicleType] = _DeadMedicalInfo.ColumnNames.VehicleType;
					ht[VehicleTypeOther] = _DeadMedicalInfo.ColumnNames.VehicleTypeOther;
					ht[DeadStatus] = _DeadMedicalInfo.ColumnNames.DeadStatus;
					ht[HasTumor] = _DeadMedicalInfo.ColumnNames.HasTumor;
					ht[PlaceOfTumor] = _DeadMedicalInfo.ColumnNames.PlaceOfTumor;
					ht[TypeOfTumor] = _DeadMedicalInfo.ColumnNames.TypeOfTumor;
					ht[PhaseOfTumor] = _DeadMedicalInfo.ColumnNames.PhaseOfTumor;
					ht[DeadThroghCarry] = _DeadMedicalInfo.ColumnNames.DeadThroghCarry;
					ht[AbortionPast6Weeks] = _DeadMedicalInfo.ColumnNames.AbortionPast6Weeks;
					ht[DeadThroghBirth] = _DeadMedicalInfo.ColumnNames.DeadThroghBirth;
					ht[BirthPast6Weeks] = _DeadMedicalInfo.ColumnNames.BirthPast6Weeks;
					ht[BirthDate] = _DeadMedicalInfo.ColumnNames.BirthDate;
					ht[BirthResult] = _DeadMedicalInfo.ColumnNames.BirthResult;
					ht[BirthPlace] = _DeadMedicalInfo.ColumnNames.BirthPlace;
					ht[BirthOperator] = _DeadMedicalInfo.ColumnNames.BirthOperator;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string DeadMedicalInfoID = "s_DeadMedicalInfoID";
            public const string DeadEventID = "s_DeadEventID";
            public const string CauseOfDeathA = "s_CauseOfDeathA";
            public const string CauseOfDeathAPeriod = "s_CauseOfDeathAPeriod";
            public const string CauseOfDeathB = "s_CauseOfDeathB";
            public const string CauseOfDeathBPeriod = "s_CauseOfDeathBPeriod";
            public const string CauseOfDeathC = "s_CauseOfDeathC";
            public const string CauseOfDeathCPeriod = "s_CauseOfDeathCPeriod";
            public const string CauseOfDeathD = "s_CauseOfDeathD";
            public const string CauseOfDeathDPeriod = "s_CauseOfDeathDPeriod";
            public const string CauseOfDeathNotRelatedA = "s_CauseOfDeathNotRelatedA";
            public const string CauseOfDeathNotRelatedAPeriod = "s_CauseOfDeathNotRelatedAPeriod";
            public const string CauseOfDeathNotRelatedB = "s_CauseOfDeathNotRelatedB";
            public const string CauseOfDeathNotRelatedBPeriod = "s_CauseOfDeathNotRelatedBPeriod";
            public const string IsSmoker = "s_IsSmoker";
            public const string SmokeType = "s_SmokeType";
            public const string SmokePeriod = "s_SmokePeriod";
            public const string IsCausedByAccedent = "s_IsCausedByAccedent";
            public const string AccedentCause = "s_AccedentCause";
            public const string AccedentAnotherCause = "s_AccedentAnotherCause";
            public const string AccedentPlace = "s_AccedentPlace";
            public const string VehicleType = "s_VehicleType";
            public const string VehicleTypeOther = "s_VehicleTypeOther";
            public const string DeadStatus = "s_DeadStatus";
            public const string HasTumor = "s_HasTumor";
            public const string PlaceOfTumor = "s_PlaceOfTumor";
            public const string TypeOfTumor = "s_TypeOfTumor";
            public const string PhaseOfTumor = "s_PhaseOfTumor";
            public const string DeadThroghCarry = "s_DeadThroghCarry";
            public const string AbortionPast6Weeks = "s_AbortionPast6Weeks";
            public const string DeadThroghBirth = "s_DeadThroghBirth";
            public const string BirthPast6Weeks = "s_BirthPast6Weeks";
            public const string BirthDate = "s_BirthDate";
            public const string BirthResult = "s_BirthResult";
            public const string BirthPlace = "s_BirthPlace";
            public const string BirthOperator = "s_BirthOperator";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid DeadMedicalInfoID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.DeadMedicalInfoID);
			}
			set
	        {
				base.SetGuid(ColumnNames.DeadMedicalInfoID, value);
			}
		}

		public virtual Guid DeadEventID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.DeadEventID);
			}
			set
	        {
				base.SetGuid(ColumnNames.DeadEventID, value);
			}
		}

		public virtual string CauseOfDeathA
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathA);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathA, value);
			}
		}

		public virtual string CauseOfDeathAPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathAPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathAPeriod, value);
			}
		}

		public virtual int CauseOfDeathB
	    {
			get
	        {
				return base.Getint(ColumnNames.CauseOfDeathB);
			}
			set
	        {
				base.Setint(ColumnNames.CauseOfDeathB, value);
			}
		}

		public virtual string CauseOfDeathBPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathBPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathBPeriod, value);
			}
		}

		public virtual string CauseOfDeathC
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathC);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathC, value);
			}
		}

		public virtual string CauseOfDeathCPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathCPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathCPeriod, value);
			}
		}

		public virtual string CauseOfDeathD
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathD);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathD, value);
			}
		}

		public virtual string CauseOfDeathDPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathDPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathDPeriod, value);
			}
		}

		public virtual string CauseOfDeathNotRelatedA
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathNotRelatedA);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathNotRelatedA, value);
			}
		}

		public virtual string CauseOfDeathNotRelatedAPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathNotRelatedAPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathNotRelatedAPeriod, value);
			}
		}

		public virtual string CauseOfDeathNotRelatedB
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathNotRelatedB);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathNotRelatedB, value);
			}
		}

		public virtual string CauseOfDeathNotRelatedBPeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.CauseOfDeathNotRelatedBPeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.CauseOfDeathNotRelatedBPeriod, value);
			}
		}

		public virtual bool IsSmoker
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsSmoker);
			}
			set
	        {
				base.Setbool(ColumnNames.IsSmoker, value);
			}
		}

		public virtual string SmokeType
	    {
			get
	        {
				return base.Getstring(ColumnNames.SmokeType);
			}
			set
	        {
				base.Setstring(ColumnNames.SmokeType, value);
			}
		}

		public virtual string SmokePeriod
	    {
			get
	        {
				return base.Getstring(ColumnNames.SmokePeriod);
			}
			set
	        {
				base.Setstring(ColumnNames.SmokePeriod, value);
			}
		}

		public virtual bool IsCausedByAccedent
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCausedByAccedent);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCausedByAccedent, value);
			}
		}

		public virtual int AccedentCause
	    {
			get
	        {
				return base.Getint(ColumnNames.AccedentCause);
			}
			set
	        {
				base.Setint(ColumnNames.AccedentCause, value);
			}
		}

		public virtual string AccedentAnotherCause
	    {
			get
	        {
				return base.Getstring(ColumnNames.AccedentAnotherCause);
			}
			set
	        {
				base.Setstring(ColumnNames.AccedentAnotherCause, value);
			}
		}

		public virtual string AccedentPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.AccedentPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.AccedentPlace, value);
			}
		}

		public virtual int VehicleType
	    {
			get
	        {
				return base.Getint(ColumnNames.VehicleType);
			}
			set
	        {
				base.Setint(ColumnNames.VehicleType, value);
			}
		}

		public virtual string VehicleTypeOther
	    {
			get
	        {
				return base.Getstring(ColumnNames.VehicleTypeOther);
			}
			set
	        {
				base.Setstring(ColumnNames.VehicleTypeOther, value);
			}
		}

		public virtual int DeadStatus
	    {
			get
	        {
				return base.Getint(ColumnNames.DeadStatus);
			}
			set
	        {
				base.Setint(ColumnNames.DeadStatus, value);
			}
		}

		public virtual bool HasTumor
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasTumor);
			}
			set
	        {
				base.Setbool(ColumnNames.HasTumor, value);
			}
		}

		public virtual string PlaceOfTumor
	    {
			get
	        {
				return base.Getstring(ColumnNames.PlaceOfTumor);
			}
			set
	        {
				base.Setstring(ColumnNames.PlaceOfTumor, value);
			}
		}

		public virtual int TypeOfTumor
	    {
			get
	        {
				return base.Getint(ColumnNames.TypeOfTumor);
			}
			set
	        {
				base.Setint(ColumnNames.TypeOfTumor, value);
			}
		}

		public virtual int PhaseOfTumor
	    {
			get
	        {
				return base.Getint(ColumnNames.PhaseOfTumor);
			}
			set
	        {
				base.Setint(ColumnNames.PhaseOfTumor, value);
			}
		}

		public virtual bool DeadThroghCarry
	    {
			get
	        {
				return base.Getbool(ColumnNames.DeadThroghCarry);
			}
			set
	        {
				base.Setbool(ColumnNames.DeadThroghCarry, value);
			}
		}

		public virtual bool AbortionPast6Weeks
	    {
			get
	        {
				return base.Getbool(ColumnNames.AbortionPast6Weeks);
			}
			set
	        {
				base.Setbool(ColumnNames.AbortionPast6Weeks, value);
			}
		}

		public virtual bool DeadThroghBirth
	    {
			get
	        {
				return base.Getbool(ColumnNames.DeadThroghBirth);
			}
			set
	        {
				base.Setbool(ColumnNames.DeadThroghBirth, value);
			}
		}

		public virtual bool BirthPast6Weeks
	    {
			get
	        {
				return base.Getbool(ColumnNames.BirthPast6Weeks);
			}
			set
	        {
				base.Setbool(ColumnNames.BirthPast6Weeks, value);
			}
		}

		public virtual DateTime BirthDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BirthDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BirthDate, value);
			}
		}

		public virtual int BirthResult
	    {
			get
	        {
				return base.Getint(ColumnNames.BirthResult);
			}
			set
	        {
				base.Setint(ColumnNames.BirthResult, value);
			}
		}

		public virtual string BirthPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.BirthPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.BirthPlace, value);
			}
		}

		public virtual string BirthOperator
	    {
			get
	        {
				return base.Getstring(ColumnNames.BirthOperator);
			}
			set
	        {
				base.Setstring(ColumnNames.BirthOperator, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_DeadMedicalInfoID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadMedicalInfoID) ? string.Empty : base.GetGuidAsString(ColumnNames.DeadMedicalInfoID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadMedicalInfoID);
				else
					this.DeadMedicalInfoID = base.SetGuidAsString(ColumnNames.DeadMedicalInfoID, value);
			}
		}

		public virtual string s_DeadEventID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadEventID) ? string.Empty : base.GetGuidAsString(ColumnNames.DeadEventID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadEventID);
				else
					this.DeadEventID = base.SetGuidAsString(ColumnNames.DeadEventID, value);
			}
		}

		public virtual string s_CauseOfDeathA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathA) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathA);
				else
					this.CauseOfDeathA = base.SetstringAsString(ColumnNames.CauseOfDeathA, value);
			}
		}

		public virtual string s_CauseOfDeathAPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathAPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathAPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathAPeriod);
				else
					this.CauseOfDeathAPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathAPeriod, value);
			}
		}

		public virtual string s_CauseOfDeathB
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathB) ? string.Empty : base.GetintAsString(ColumnNames.CauseOfDeathB);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathB);
				else
					this.CauseOfDeathB = base.SetintAsString(ColumnNames.CauseOfDeathB, value);
			}
		}

		public virtual string s_CauseOfDeathBPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathBPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathBPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathBPeriod);
				else
					this.CauseOfDeathBPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathBPeriod, value);
			}
		}

		public virtual string s_CauseOfDeathC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathC) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathC);
				else
					this.CauseOfDeathC = base.SetstringAsString(ColumnNames.CauseOfDeathC, value);
			}
		}

		public virtual string s_CauseOfDeathCPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathCPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathCPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathCPeriod);
				else
					this.CauseOfDeathCPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathCPeriod, value);
			}
		}

		public virtual string s_CauseOfDeathD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathD) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathD);
				else
					this.CauseOfDeathD = base.SetstringAsString(ColumnNames.CauseOfDeathD, value);
			}
		}

		public virtual string s_CauseOfDeathDPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathDPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathDPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathDPeriod);
				else
					this.CauseOfDeathDPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathDPeriod, value);
			}
		}

		public virtual string s_CauseOfDeathNotRelatedA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathNotRelatedA) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathNotRelatedA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathNotRelatedA);
				else
					this.CauseOfDeathNotRelatedA = base.SetstringAsString(ColumnNames.CauseOfDeathNotRelatedA, value);
			}
		}

		public virtual string s_CauseOfDeathNotRelatedAPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathNotRelatedAPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathNotRelatedAPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathNotRelatedAPeriod);
				else
					this.CauseOfDeathNotRelatedAPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathNotRelatedAPeriod, value);
			}
		}

		public virtual string s_CauseOfDeathNotRelatedB
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathNotRelatedB) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathNotRelatedB);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathNotRelatedB);
				else
					this.CauseOfDeathNotRelatedB = base.SetstringAsString(ColumnNames.CauseOfDeathNotRelatedB, value);
			}
		}

		public virtual string s_CauseOfDeathNotRelatedBPeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CauseOfDeathNotRelatedBPeriod) ? string.Empty : base.GetstringAsString(ColumnNames.CauseOfDeathNotRelatedBPeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CauseOfDeathNotRelatedBPeriod);
				else
					this.CauseOfDeathNotRelatedBPeriod = base.SetstringAsString(ColumnNames.CauseOfDeathNotRelatedBPeriod, value);
			}
		}

		public virtual string s_IsSmoker
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsSmoker) ? string.Empty : base.GetboolAsString(ColumnNames.IsSmoker);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsSmoker);
				else
					this.IsSmoker = base.SetboolAsString(ColumnNames.IsSmoker, value);
			}
		}

		public virtual string s_SmokeType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SmokeType) ? string.Empty : base.GetstringAsString(ColumnNames.SmokeType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SmokeType);
				else
					this.SmokeType = base.SetstringAsString(ColumnNames.SmokeType, value);
			}
		}

		public virtual string s_SmokePeriod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SmokePeriod) ? string.Empty : base.GetstringAsString(ColumnNames.SmokePeriod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SmokePeriod);
				else
					this.SmokePeriod = base.SetstringAsString(ColumnNames.SmokePeriod, value);
			}
		}

		public virtual string s_IsCausedByAccedent
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCausedByAccedent) ? string.Empty : base.GetboolAsString(ColumnNames.IsCausedByAccedent);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCausedByAccedent);
				else
					this.IsCausedByAccedent = base.SetboolAsString(ColumnNames.IsCausedByAccedent, value);
			}
		}

		public virtual string s_AccedentCause
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AccedentCause) ? string.Empty : base.GetintAsString(ColumnNames.AccedentCause);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AccedentCause);
				else
					this.AccedentCause = base.SetintAsString(ColumnNames.AccedentCause, value);
			}
		}

		public virtual string s_AccedentAnotherCause
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AccedentAnotherCause) ? string.Empty : base.GetstringAsString(ColumnNames.AccedentAnotherCause);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AccedentAnotherCause);
				else
					this.AccedentAnotherCause = base.SetstringAsString(ColumnNames.AccedentAnotherCause, value);
			}
		}

		public virtual string s_AccedentPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AccedentPlace) ? string.Empty : base.GetstringAsString(ColumnNames.AccedentPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AccedentPlace);
				else
					this.AccedentPlace = base.SetstringAsString(ColumnNames.AccedentPlace, value);
			}
		}

		public virtual string s_VehicleType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VehicleType) ? string.Empty : base.GetintAsString(ColumnNames.VehicleType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VehicleType);
				else
					this.VehicleType = base.SetintAsString(ColumnNames.VehicleType, value);
			}
		}

		public virtual string s_VehicleTypeOther
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VehicleTypeOther) ? string.Empty : base.GetstringAsString(ColumnNames.VehicleTypeOther);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VehicleTypeOther);
				else
					this.VehicleTypeOther = base.SetstringAsString(ColumnNames.VehicleTypeOther, value);
			}
		}

		public virtual string s_DeadStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadStatus) ? string.Empty : base.GetintAsString(ColumnNames.DeadStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadStatus);
				else
					this.DeadStatus = base.SetintAsString(ColumnNames.DeadStatus, value);
			}
		}

		public virtual string s_HasTumor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasTumor) ? string.Empty : base.GetboolAsString(ColumnNames.HasTumor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasTumor);
				else
					this.HasTumor = base.SetboolAsString(ColumnNames.HasTumor, value);
			}
		}

		public virtual string s_PlaceOfTumor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PlaceOfTumor) ? string.Empty : base.GetstringAsString(ColumnNames.PlaceOfTumor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PlaceOfTumor);
				else
					this.PlaceOfTumor = base.SetstringAsString(ColumnNames.PlaceOfTumor, value);
			}
		}

		public virtual string s_TypeOfTumor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TypeOfTumor) ? string.Empty : base.GetintAsString(ColumnNames.TypeOfTumor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TypeOfTumor);
				else
					this.TypeOfTumor = base.SetintAsString(ColumnNames.TypeOfTumor, value);
			}
		}

		public virtual string s_PhaseOfTumor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhaseOfTumor) ? string.Empty : base.GetintAsString(ColumnNames.PhaseOfTumor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhaseOfTumor);
				else
					this.PhaseOfTumor = base.SetintAsString(ColumnNames.PhaseOfTumor, value);
			}
		}

		public virtual string s_DeadThroghCarry
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadThroghCarry) ? string.Empty : base.GetboolAsString(ColumnNames.DeadThroghCarry);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadThroghCarry);
				else
					this.DeadThroghCarry = base.SetboolAsString(ColumnNames.DeadThroghCarry, value);
			}
		}

		public virtual string s_AbortionPast6Weeks
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AbortionPast6Weeks) ? string.Empty : base.GetboolAsString(ColumnNames.AbortionPast6Weeks);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AbortionPast6Weeks);
				else
					this.AbortionPast6Weeks = base.SetboolAsString(ColumnNames.AbortionPast6Weeks, value);
			}
		}

		public virtual string s_DeadThroghBirth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadThroghBirth) ? string.Empty : base.GetboolAsString(ColumnNames.DeadThroghBirth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadThroghBirth);
				else
					this.DeadThroghBirth = base.SetboolAsString(ColumnNames.DeadThroghBirth, value);
			}
		}

		public virtual string s_BirthPast6Weeks
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthPast6Weeks) ? string.Empty : base.GetboolAsString(ColumnNames.BirthPast6Weeks);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthPast6Weeks);
				else
					this.BirthPast6Weeks = base.SetboolAsString(ColumnNames.BirthPast6Weeks, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BirthDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthDate);
				else
					this.BirthDate = base.SetDateTimeAsString(ColumnNames.BirthDate, value);
			}
		}

		public virtual string s_BirthResult
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthResult) ? string.Empty : base.GetintAsString(ColumnNames.BirthResult);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthResult);
				else
					this.BirthResult = base.SetintAsString(ColumnNames.BirthResult, value);
			}
		}

		public virtual string s_BirthPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthPlace) ? string.Empty : base.GetstringAsString(ColumnNames.BirthPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthPlace);
				else
					this.BirthPlace = base.SetstringAsString(ColumnNames.BirthPlace, value);
			}
		}

		public virtual string s_BirthOperator
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthOperator) ? string.Empty : base.GetstringAsString(ColumnNames.BirthOperator);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthOperator);
				else
					this.BirthOperator = base.SetstringAsString(ColumnNames.BirthOperator, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter DeadMedicalInfoID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadMedicalInfoID, Parameters.DeadMedicalInfoID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeadEventID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadEventID, Parameters.DeadEventID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathA, Parameters.CauseOfDeathA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathAPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathAPeriod, Parameters.CauseOfDeathAPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathB
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathB, Parameters.CauseOfDeathB);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathBPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathBPeriod, Parameters.CauseOfDeathBPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathC, Parameters.CauseOfDeathC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathCPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathCPeriod, Parameters.CauseOfDeathCPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathD, Parameters.CauseOfDeathD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathDPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathDPeriod, Parameters.CauseOfDeathDPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathNotRelatedA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathNotRelatedA, Parameters.CauseOfDeathNotRelatedA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathNotRelatedAPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathNotRelatedAPeriod, Parameters.CauseOfDeathNotRelatedAPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathNotRelatedB
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathNotRelatedB, Parameters.CauseOfDeathNotRelatedB);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CauseOfDeathNotRelatedBPeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CauseOfDeathNotRelatedBPeriod, Parameters.CauseOfDeathNotRelatedBPeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsSmoker
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsSmoker, Parameters.IsSmoker);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SmokeType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SmokeType, Parameters.SmokeType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SmokePeriod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SmokePeriod, Parameters.SmokePeriod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCausedByAccedent
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCausedByAccedent, Parameters.IsCausedByAccedent);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AccedentCause
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AccedentCause, Parameters.AccedentCause);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AccedentAnotherCause
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AccedentAnotherCause, Parameters.AccedentAnotherCause);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AccedentPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AccedentPlace, Parameters.AccedentPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VehicleType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VehicleType, Parameters.VehicleType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VehicleTypeOther
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VehicleTypeOther, Parameters.VehicleTypeOther);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeadStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadStatus, Parameters.DeadStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasTumor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasTumor, Parameters.HasTumor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PlaceOfTumor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PlaceOfTumor, Parameters.PlaceOfTumor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TypeOfTumor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TypeOfTumor, Parameters.TypeOfTumor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhaseOfTumor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhaseOfTumor, Parameters.PhaseOfTumor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeadThroghCarry
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadThroghCarry, Parameters.DeadThroghCarry);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AbortionPast6Weeks
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AbortionPast6Weeks, Parameters.AbortionPast6Weeks);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeadThroghBirth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadThroghBirth, Parameters.DeadThroghBirth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthPast6Weeks
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthPast6Weeks, Parameters.BirthPast6Weeks);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthResult
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthResult, Parameters.BirthResult);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthPlace, Parameters.BirthPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthOperator
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthOperator, Parameters.BirthOperator);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter DeadMedicalInfoID
		    {
				get
		        {
					if(_DeadMedicalInfoID_W == null)
	        	    {
						_DeadMedicalInfoID_W = TearOff.DeadMedicalInfoID;
					}
					return _DeadMedicalInfoID_W;
				}
			}

			public WhereParameter DeadEventID
		    {
				get
		        {
					if(_DeadEventID_W == null)
	        	    {
						_DeadEventID_W = TearOff.DeadEventID;
					}
					return _DeadEventID_W;
				}
			}

			public WhereParameter CauseOfDeathA
		    {
				get
		        {
					if(_CauseOfDeathA_W == null)
	        	    {
						_CauseOfDeathA_W = TearOff.CauseOfDeathA;
					}
					return _CauseOfDeathA_W;
				}
			}

			public WhereParameter CauseOfDeathAPeriod
		    {
				get
		        {
					if(_CauseOfDeathAPeriod_W == null)
	        	    {
						_CauseOfDeathAPeriod_W = TearOff.CauseOfDeathAPeriod;
					}
					return _CauseOfDeathAPeriod_W;
				}
			}

			public WhereParameter CauseOfDeathB
		    {
				get
		        {
					if(_CauseOfDeathB_W == null)
	        	    {
						_CauseOfDeathB_W = TearOff.CauseOfDeathB;
					}
					return _CauseOfDeathB_W;
				}
			}

			public WhereParameter CauseOfDeathBPeriod
		    {
				get
		        {
					if(_CauseOfDeathBPeriod_W == null)
	        	    {
						_CauseOfDeathBPeriod_W = TearOff.CauseOfDeathBPeriod;
					}
					return _CauseOfDeathBPeriod_W;
				}
			}

			public WhereParameter CauseOfDeathC
		    {
				get
		        {
					if(_CauseOfDeathC_W == null)
	        	    {
						_CauseOfDeathC_W = TearOff.CauseOfDeathC;
					}
					return _CauseOfDeathC_W;
				}
			}

			public WhereParameter CauseOfDeathCPeriod
		    {
				get
		        {
					if(_CauseOfDeathCPeriod_W == null)
	        	    {
						_CauseOfDeathCPeriod_W = TearOff.CauseOfDeathCPeriod;
					}
					return _CauseOfDeathCPeriod_W;
				}
			}

			public WhereParameter CauseOfDeathD
		    {
				get
		        {
					if(_CauseOfDeathD_W == null)
	        	    {
						_CauseOfDeathD_W = TearOff.CauseOfDeathD;
					}
					return _CauseOfDeathD_W;
				}
			}

			public WhereParameter CauseOfDeathDPeriod
		    {
				get
		        {
					if(_CauseOfDeathDPeriod_W == null)
	        	    {
						_CauseOfDeathDPeriod_W = TearOff.CauseOfDeathDPeriod;
					}
					return _CauseOfDeathDPeriod_W;
				}
			}

			public WhereParameter CauseOfDeathNotRelatedA
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedA_W == null)
	        	    {
						_CauseOfDeathNotRelatedA_W = TearOff.CauseOfDeathNotRelatedA;
					}
					return _CauseOfDeathNotRelatedA_W;
				}
			}

			public WhereParameter CauseOfDeathNotRelatedAPeriod
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedAPeriod_W == null)
	        	    {
						_CauseOfDeathNotRelatedAPeriod_W = TearOff.CauseOfDeathNotRelatedAPeriod;
					}
					return _CauseOfDeathNotRelatedAPeriod_W;
				}
			}

			public WhereParameter CauseOfDeathNotRelatedB
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedB_W == null)
	        	    {
						_CauseOfDeathNotRelatedB_W = TearOff.CauseOfDeathNotRelatedB;
					}
					return _CauseOfDeathNotRelatedB_W;
				}
			}

			public WhereParameter CauseOfDeathNotRelatedBPeriod
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedBPeriod_W == null)
	        	    {
						_CauseOfDeathNotRelatedBPeriod_W = TearOff.CauseOfDeathNotRelatedBPeriod;
					}
					return _CauseOfDeathNotRelatedBPeriod_W;
				}
			}

			public WhereParameter IsSmoker
		    {
				get
		        {
					if(_IsSmoker_W == null)
	        	    {
						_IsSmoker_W = TearOff.IsSmoker;
					}
					return _IsSmoker_W;
				}
			}

			public WhereParameter SmokeType
		    {
				get
		        {
					if(_SmokeType_W == null)
	        	    {
						_SmokeType_W = TearOff.SmokeType;
					}
					return _SmokeType_W;
				}
			}

			public WhereParameter SmokePeriod
		    {
				get
		        {
					if(_SmokePeriod_W == null)
	        	    {
						_SmokePeriod_W = TearOff.SmokePeriod;
					}
					return _SmokePeriod_W;
				}
			}

			public WhereParameter IsCausedByAccedent
		    {
				get
		        {
					if(_IsCausedByAccedent_W == null)
	        	    {
						_IsCausedByAccedent_W = TearOff.IsCausedByAccedent;
					}
					return _IsCausedByAccedent_W;
				}
			}

			public WhereParameter AccedentCause
		    {
				get
		        {
					if(_AccedentCause_W == null)
	        	    {
						_AccedentCause_W = TearOff.AccedentCause;
					}
					return _AccedentCause_W;
				}
			}

			public WhereParameter AccedentAnotherCause
		    {
				get
		        {
					if(_AccedentAnotherCause_W == null)
	        	    {
						_AccedentAnotherCause_W = TearOff.AccedentAnotherCause;
					}
					return _AccedentAnotherCause_W;
				}
			}

			public WhereParameter AccedentPlace
		    {
				get
		        {
					if(_AccedentPlace_W == null)
	        	    {
						_AccedentPlace_W = TearOff.AccedentPlace;
					}
					return _AccedentPlace_W;
				}
			}

			public WhereParameter VehicleType
		    {
				get
		        {
					if(_VehicleType_W == null)
	        	    {
						_VehicleType_W = TearOff.VehicleType;
					}
					return _VehicleType_W;
				}
			}

			public WhereParameter VehicleTypeOther
		    {
				get
		        {
					if(_VehicleTypeOther_W == null)
	        	    {
						_VehicleTypeOther_W = TearOff.VehicleTypeOther;
					}
					return _VehicleTypeOther_W;
				}
			}

			public WhereParameter DeadStatus
		    {
				get
		        {
					if(_DeadStatus_W == null)
	        	    {
						_DeadStatus_W = TearOff.DeadStatus;
					}
					return _DeadStatus_W;
				}
			}

			public WhereParameter HasTumor
		    {
				get
		        {
					if(_HasTumor_W == null)
	        	    {
						_HasTumor_W = TearOff.HasTumor;
					}
					return _HasTumor_W;
				}
			}

			public WhereParameter PlaceOfTumor
		    {
				get
		        {
					if(_PlaceOfTumor_W == null)
	        	    {
						_PlaceOfTumor_W = TearOff.PlaceOfTumor;
					}
					return _PlaceOfTumor_W;
				}
			}

			public WhereParameter TypeOfTumor
		    {
				get
		        {
					if(_TypeOfTumor_W == null)
	        	    {
						_TypeOfTumor_W = TearOff.TypeOfTumor;
					}
					return _TypeOfTumor_W;
				}
			}

			public WhereParameter PhaseOfTumor
		    {
				get
		        {
					if(_PhaseOfTumor_W == null)
	        	    {
						_PhaseOfTumor_W = TearOff.PhaseOfTumor;
					}
					return _PhaseOfTumor_W;
				}
			}

			public WhereParameter DeadThroghCarry
		    {
				get
		        {
					if(_DeadThroghCarry_W == null)
	        	    {
						_DeadThroghCarry_W = TearOff.DeadThroghCarry;
					}
					return _DeadThroghCarry_W;
				}
			}

			public WhereParameter AbortionPast6Weeks
		    {
				get
		        {
					if(_AbortionPast6Weeks_W == null)
	        	    {
						_AbortionPast6Weeks_W = TearOff.AbortionPast6Weeks;
					}
					return _AbortionPast6Weeks_W;
				}
			}

			public WhereParameter DeadThroghBirth
		    {
				get
		        {
					if(_DeadThroghBirth_W == null)
	        	    {
						_DeadThroghBirth_W = TearOff.DeadThroghBirth;
					}
					return _DeadThroghBirth_W;
				}
			}

			public WhereParameter BirthPast6Weeks
		    {
				get
		        {
					if(_BirthPast6Weeks_W == null)
	        	    {
						_BirthPast6Weeks_W = TearOff.BirthPast6Weeks;
					}
					return _BirthPast6Weeks_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter BirthResult
		    {
				get
		        {
					if(_BirthResult_W == null)
	        	    {
						_BirthResult_W = TearOff.BirthResult;
					}
					return _BirthResult_W;
				}
			}

			public WhereParameter BirthPlace
		    {
				get
		        {
					if(_BirthPlace_W == null)
	        	    {
						_BirthPlace_W = TearOff.BirthPlace;
					}
					return _BirthPlace_W;
				}
			}

			public WhereParameter BirthOperator
		    {
				get
		        {
					if(_BirthOperator_W == null)
	        	    {
						_BirthOperator_W = TearOff.BirthOperator;
					}
					return _BirthOperator_W;
				}
			}

			private WhereParameter _DeadMedicalInfoID_W = null;
			private WhereParameter _DeadEventID_W = null;
			private WhereParameter _CauseOfDeathA_W = null;
			private WhereParameter _CauseOfDeathAPeriod_W = null;
			private WhereParameter _CauseOfDeathB_W = null;
			private WhereParameter _CauseOfDeathBPeriod_W = null;
			private WhereParameter _CauseOfDeathC_W = null;
			private WhereParameter _CauseOfDeathCPeriod_W = null;
			private WhereParameter _CauseOfDeathD_W = null;
			private WhereParameter _CauseOfDeathDPeriod_W = null;
			private WhereParameter _CauseOfDeathNotRelatedA_W = null;
			private WhereParameter _CauseOfDeathNotRelatedAPeriod_W = null;
			private WhereParameter _CauseOfDeathNotRelatedB_W = null;
			private WhereParameter _CauseOfDeathNotRelatedBPeriod_W = null;
			private WhereParameter _IsSmoker_W = null;
			private WhereParameter _SmokeType_W = null;
			private WhereParameter _SmokePeriod_W = null;
			private WhereParameter _IsCausedByAccedent_W = null;
			private WhereParameter _AccedentCause_W = null;
			private WhereParameter _AccedentAnotherCause_W = null;
			private WhereParameter _AccedentPlace_W = null;
			private WhereParameter _VehicleType_W = null;
			private WhereParameter _VehicleTypeOther_W = null;
			private WhereParameter _DeadStatus_W = null;
			private WhereParameter _HasTumor_W = null;
			private WhereParameter _PlaceOfTumor_W = null;
			private WhereParameter _TypeOfTumor_W = null;
			private WhereParameter _PhaseOfTumor_W = null;
			private WhereParameter _DeadThroghCarry_W = null;
			private WhereParameter _AbortionPast6Weeks_W = null;
			private WhereParameter _DeadThroghBirth_W = null;
			private WhereParameter _BirthPast6Weeks_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _BirthResult_W = null;
			private WhereParameter _BirthPlace_W = null;
			private WhereParameter _BirthOperator_W = null;

			public void WhereClauseReset()
			{
				_DeadMedicalInfoID_W = null;
				_DeadEventID_W = null;
				_CauseOfDeathA_W = null;
				_CauseOfDeathAPeriod_W = null;
				_CauseOfDeathB_W = null;
				_CauseOfDeathBPeriod_W = null;
				_CauseOfDeathC_W = null;
				_CauseOfDeathCPeriod_W = null;
				_CauseOfDeathD_W = null;
				_CauseOfDeathDPeriod_W = null;
				_CauseOfDeathNotRelatedA_W = null;
				_CauseOfDeathNotRelatedAPeriod_W = null;
				_CauseOfDeathNotRelatedB_W = null;
				_CauseOfDeathNotRelatedBPeriod_W = null;
				_IsSmoker_W = null;
				_SmokeType_W = null;
				_SmokePeriod_W = null;
				_IsCausedByAccedent_W = null;
				_AccedentCause_W = null;
				_AccedentAnotherCause_W = null;
				_AccedentPlace_W = null;
				_VehicleType_W = null;
				_VehicleTypeOther_W = null;
				_DeadStatus_W = null;
				_HasTumor_W = null;
				_PlaceOfTumor_W = null;
				_TypeOfTumor_W = null;
				_PhaseOfTumor_W = null;
				_DeadThroghCarry_W = null;
				_AbortionPast6Weeks_W = null;
				_DeadThroghBirth_W = null;
				_BirthPast6Weeks_W = null;
				_BirthDate_W = null;
				_BirthResult_W = null;
				_BirthPlace_W = null;
				_BirthOperator_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter DeadMedicalInfoID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadMedicalInfoID, Parameters.DeadMedicalInfoID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeadEventID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadEventID, Parameters.DeadEventID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathA, Parameters.CauseOfDeathA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathAPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathAPeriod, Parameters.CauseOfDeathAPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathB
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathB, Parameters.CauseOfDeathB);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathBPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathBPeriod, Parameters.CauseOfDeathBPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathC, Parameters.CauseOfDeathC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathCPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathCPeriod, Parameters.CauseOfDeathCPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathD, Parameters.CauseOfDeathD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathDPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathDPeriod, Parameters.CauseOfDeathDPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathNotRelatedA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathNotRelatedA, Parameters.CauseOfDeathNotRelatedA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathNotRelatedAPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathNotRelatedAPeriod, Parameters.CauseOfDeathNotRelatedAPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathNotRelatedB
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathNotRelatedB, Parameters.CauseOfDeathNotRelatedB);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CauseOfDeathNotRelatedBPeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CauseOfDeathNotRelatedBPeriod, Parameters.CauseOfDeathNotRelatedBPeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsSmoker
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsSmoker, Parameters.IsSmoker);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SmokeType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SmokeType, Parameters.SmokeType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SmokePeriod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SmokePeriod, Parameters.SmokePeriod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCausedByAccedent
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCausedByAccedent, Parameters.IsCausedByAccedent);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AccedentCause
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AccedentCause, Parameters.AccedentCause);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AccedentAnotherCause
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AccedentAnotherCause, Parameters.AccedentAnotherCause);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AccedentPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AccedentPlace, Parameters.AccedentPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VehicleType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VehicleType, Parameters.VehicleType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VehicleTypeOther
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VehicleTypeOther, Parameters.VehicleTypeOther);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeadStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadStatus, Parameters.DeadStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasTumor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasTumor, Parameters.HasTumor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PlaceOfTumor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PlaceOfTumor, Parameters.PlaceOfTumor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TypeOfTumor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TypeOfTumor, Parameters.TypeOfTumor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhaseOfTumor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhaseOfTumor, Parameters.PhaseOfTumor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeadThroghCarry
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadThroghCarry, Parameters.DeadThroghCarry);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AbortionPast6Weeks
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AbortionPast6Weeks, Parameters.AbortionPast6Weeks);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeadThroghBirth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadThroghBirth, Parameters.DeadThroghBirth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthPast6Weeks
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthPast6Weeks, Parameters.BirthPast6Weeks);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthResult
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthResult, Parameters.BirthResult);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthPlace, Parameters.BirthPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthOperator
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthOperator, Parameters.BirthOperator);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter DeadMedicalInfoID
		    {
				get
		        {
					if(_DeadMedicalInfoID_W == null)
	        	    {
						_DeadMedicalInfoID_W = TearOff.DeadMedicalInfoID;
					}
					return _DeadMedicalInfoID_W;
				}
			}

			public AggregateParameter DeadEventID
		    {
				get
		        {
					if(_DeadEventID_W == null)
	        	    {
						_DeadEventID_W = TearOff.DeadEventID;
					}
					return _DeadEventID_W;
				}
			}

			public AggregateParameter CauseOfDeathA
		    {
				get
		        {
					if(_CauseOfDeathA_W == null)
	        	    {
						_CauseOfDeathA_W = TearOff.CauseOfDeathA;
					}
					return _CauseOfDeathA_W;
				}
			}

			public AggregateParameter CauseOfDeathAPeriod
		    {
				get
		        {
					if(_CauseOfDeathAPeriod_W == null)
	        	    {
						_CauseOfDeathAPeriod_W = TearOff.CauseOfDeathAPeriod;
					}
					return _CauseOfDeathAPeriod_W;
				}
			}

			public AggregateParameter CauseOfDeathB
		    {
				get
		        {
					if(_CauseOfDeathB_W == null)
	        	    {
						_CauseOfDeathB_W = TearOff.CauseOfDeathB;
					}
					return _CauseOfDeathB_W;
				}
			}

			public AggregateParameter CauseOfDeathBPeriod
		    {
				get
		        {
					if(_CauseOfDeathBPeriod_W == null)
	        	    {
						_CauseOfDeathBPeriod_W = TearOff.CauseOfDeathBPeriod;
					}
					return _CauseOfDeathBPeriod_W;
				}
			}

			public AggregateParameter CauseOfDeathC
		    {
				get
		        {
					if(_CauseOfDeathC_W == null)
	        	    {
						_CauseOfDeathC_W = TearOff.CauseOfDeathC;
					}
					return _CauseOfDeathC_W;
				}
			}

			public AggregateParameter CauseOfDeathCPeriod
		    {
				get
		        {
					if(_CauseOfDeathCPeriod_W == null)
	        	    {
						_CauseOfDeathCPeriod_W = TearOff.CauseOfDeathCPeriod;
					}
					return _CauseOfDeathCPeriod_W;
				}
			}

			public AggregateParameter CauseOfDeathD
		    {
				get
		        {
					if(_CauseOfDeathD_W == null)
	        	    {
						_CauseOfDeathD_W = TearOff.CauseOfDeathD;
					}
					return _CauseOfDeathD_W;
				}
			}

			public AggregateParameter CauseOfDeathDPeriod
		    {
				get
		        {
					if(_CauseOfDeathDPeriod_W == null)
	        	    {
						_CauseOfDeathDPeriod_W = TearOff.CauseOfDeathDPeriod;
					}
					return _CauseOfDeathDPeriod_W;
				}
			}

			public AggregateParameter CauseOfDeathNotRelatedA
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedA_W == null)
	        	    {
						_CauseOfDeathNotRelatedA_W = TearOff.CauseOfDeathNotRelatedA;
					}
					return _CauseOfDeathNotRelatedA_W;
				}
			}

			public AggregateParameter CauseOfDeathNotRelatedAPeriod
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedAPeriod_W == null)
	        	    {
						_CauseOfDeathNotRelatedAPeriod_W = TearOff.CauseOfDeathNotRelatedAPeriod;
					}
					return _CauseOfDeathNotRelatedAPeriod_W;
				}
			}

			public AggregateParameter CauseOfDeathNotRelatedB
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedB_W == null)
	        	    {
						_CauseOfDeathNotRelatedB_W = TearOff.CauseOfDeathNotRelatedB;
					}
					return _CauseOfDeathNotRelatedB_W;
				}
			}

			public AggregateParameter CauseOfDeathNotRelatedBPeriod
		    {
				get
		        {
					if(_CauseOfDeathNotRelatedBPeriod_W == null)
	        	    {
						_CauseOfDeathNotRelatedBPeriod_W = TearOff.CauseOfDeathNotRelatedBPeriod;
					}
					return _CauseOfDeathNotRelatedBPeriod_W;
				}
			}

			public AggregateParameter IsSmoker
		    {
				get
		        {
					if(_IsSmoker_W == null)
	        	    {
						_IsSmoker_W = TearOff.IsSmoker;
					}
					return _IsSmoker_W;
				}
			}

			public AggregateParameter SmokeType
		    {
				get
		        {
					if(_SmokeType_W == null)
	        	    {
						_SmokeType_W = TearOff.SmokeType;
					}
					return _SmokeType_W;
				}
			}

			public AggregateParameter SmokePeriod
		    {
				get
		        {
					if(_SmokePeriod_W == null)
	        	    {
						_SmokePeriod_W = TearOff.SmokePeriod;
					}
					return _SmokePeriod_W;
				}
			}

			public AggregateParameter IsCausedByAccedent
		    {
				get
		        {
					if(_IsCausedByAccedent_W == null)
	        	    {
						_IsCausedByAccedent_W = TearOff.IsCausedByAccedent;
					}
					return _IsCausedByAccedent_W;
				}
			}

			public AggregateParameter AccedentCause
		    {
				get
		        {
					if(_AccedentCause_W == null)
	        	    {
						_AccedentCause_W = TearOff.AccedentCause;
					}
					return _AccedentCause_W;
				}
			}

			public AggregateParameter AccedentAnotherCause
		    {
				get
		        {
					if(_AccedentAnotherCause_W == null)
	        	    {
						_AccedentAnotherCause_W = TearOff.AccedentAnotherCause;
					}
					return _AccedentAnotherCause_W;
				}
			}

			public AggregateParameter AccedentPlace
		    {
				get
		        {
					if(_AccedentPlace_W == null)
	        	    {
						_AccedentPlace_W = TearOff.AccedentPlace;
					}
					return _AccedentPlace_W;
				}
			}

			public AggregateParameter VehicleType
		    {
				get
		        {
					if(_VehicleType_W == null)
	        	    {
						_VehicleType_W = TearOff.VehicleType;
					}
					return _VehicleType_W;
				}
			}

			public AggregateParameter VehicleTypeOther
		    {
				get
		        {
					if(_VehicleTypeOther_W == null)
	        	    {
						_VehicleTypeOther_W = TearOff.VehicleTypeOther;
					}
					return _VehicleTypeOther_W;
				}
			}

			public AggregateParameter DeadStatus
		    {
				get
		        {
					if(_DeadStatus_W == null)
	        	    {
						_DeadStatus_W = TearOff.DeadStatus;
					}
					return _DeadStatus_W;
				}
			}

			public AggregateParameter HasTumor
		    {
				get
		        {
					if(_HasTumor_W == null)
	        	    {
						_HasTumor_W = TearOff.HasTumor;
					}
					return _HasTumor_W;
				}
			}

			public AggregateParameter PlaceOfTumor
		    {
				get
		        {
					if(_PlaceOfTumor_W == null)
	        	    {
						_PlaceOfTumor_W = TearOff.PlaceOfTumor;
					}
					return _PlaceOfTumor_W;
				}
			}

			public AggregateParameter TypeOfTumor
		    {
				get
		        {
					if(_TypeOfTumor_W == null)
	        	    {
						_TypeOfTumor_W = TearOff.TypeOfTumor;
					}
					return _TypeOfTumor_W;
				}
			}

			public AggregateParameter PhaseOfTumor
		    {
				get
		        {
					if(_PhaseOfTumor_W == null)
	        	    {
						_PhaseOfTumor_W = TearOff.PhaseOfTumor;
					}
					return _PhaseOfTumor_W;
				}
			}

			public AggregateParameter DeadThroghCarry
		    {
				get
		        {
					if(_DeadThroghCarry_W == null)
	        	    {
						_DeadThroghCarry_W = TearOff.DeadThroghCarry;
					}
					return _DeadThroghCarry_W;
				}
			}

			public AggregateParameter AbortionPast6Weeks
		    {
				get
		        {
					if(_AbortionPast6Weeks_W == null)
	        	    {
						_AbortionPast6Weeks_W = TearOff.AbortionPast6Weeks;
					}
					return _AbortionPast6Weeks_W;
				}
			}

			public AggregateParameter DeadThroghBirth
		    {
				get
		        {
					if(_DeadThroghBirth_W == null)
	        	    {
						_DeadThroghBirth_W = TearOff.DeadThroghBirth;
					}
					return _DeadThroghBirth_W;
				}
			}

			public AggregateParameter BirthPast6Weeks
		    {
				get
		        {
					if(_BirthPast6Weeks_W == null)
	        	    {
						_BirthPast6Weeks_W = TearOff.BirthPast6Weeks;
					}
					return _BirthPast6Weeks_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter BirthResult
		    {
				get
		        {
					if(_BirthResult_W == null)
	        	    {
						_BirthResult_W = TearOff.BirthResult;
					}
					return _BirthResult_W;
				}
			}

			public AggregateParameter BirthPlace
		    {
				get
		        {
					if(_BirthPlace_W == null)
	        	    {
						_BirthPlace_W = TearOff.BirthPlace;
					}
					return _BirthPlace_W;
				}
			}

			public AggregateParameter BirthOperator
		    {
				get
		        {
					if(_BirthOperator_W == null)
	        	    {
						_BirthOperator_W = TearOff.BirthOperator;
					}
					return _BirthOperator_W;
				}
			}

			private AggregateParameter _DeadMedicalInfoID_W = null;
			private AggregateParameter _DeadEventID_W = null;
			private AggregateParameter _CauseOfDeathA_W = null;
			private AggregateParameter _CauseOfDeathAPeriod_W = null;
			private AggregateParameter _CauseOfDeathB_W = null;
			private AggregateParameter _CauseOfDeathBPeriod_W = null;
			private AggregateParameter _CauseOfDeathC_W = null;
			private AggregateParameter _CauseOfDeathCPeriod_W = null;
			private AggregateParameter _CauseOfDeathD_W = null;
			private AggregateParameter _CauseOfDeathDPeriod_W = null;
			private AggregateParameter _CauseOfDeathNotRelatedA_W = null;
			private AggregateParameter _CauseOfDeathNotRelatedAPeriod_W = null;
			private AggregateParameter _CauseOfDeathNotRelatedB_W = null;
			private AggregateParameter _CauseOfDeathNotRelatedBPeriod_W = null;
			private AggregateParameter _IsSmoker_W = null;
			private AggregateParameter _SmokeType_W = null;
			private AggregateParameter _SmokePeriod_W = null;
			private AggregateParameter _IsCausedByAccedent_W = null;
			private AggregateParameter _AccedentCause_W = null;
			private AggregateParameter _AccedentAnotherCause_W = null;
			private AggregateParameter _AccedentPlace_W = null;
			private AggregateParameter _VehicleType_W = null;
			private AggregateParameter _VehicleTypeOther_W = null;
			private AggregateParameter _DeadStatus_W = null;
			private AggregateParameter _HasTumor_W = null;
			private AggregateParameter _PlaceOfTumor_W = null;
			private AggregateParameter _TypeOfTumor_W = null;
			private AggregateParameter _PhaseOfTumor_W = null;
			private AggregateParameter _DeadThroghCarry_W = null;
			private AggregateParameter _AbortionPast6Weeks_W = null;
			private AggregateParameter _DeadThroghBirth_W = null;
			private AggregateParameter _BirthPast6Weeks_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _BirthResult_W = null;
			private AggregateParameter _BirthPlace_W = null;
			private AggregateParameter _BirthOperator_W = null;

			public void AggregateClauseReset()
			{
				_DeadMedicalInfoID_W = null;
				_DeadEventID_W = null;
				_CauseOfDeathA_W = null;
				_CauseOfDeathAPeriod_W = null;
				_CauseOfDeathB_W = null;
				_CauseOfDeathBPeriod_W = null;
				_CauseOfDeathC_W = null;
				_CauseOfDeathCPeriod_W = null;
				_CauseOfDeathD_W = null;
				_CauseOfDeathDPeriod_W = null;
				_CauseOfDeathNotRelatedA_W = null;
				_CauseOfDeathNotRelatedAPeriod_W = null;
				_CauseOfDeathNotRelatedB_W = null;
				_CauseOfDeathNotRelatedBPeriod_W = null;
				_IsSmoker_W = null;
				_SmokeType_W = null;
				_SmokePeriod_W = null;
				_IsCausedByAccedent_W = null;
				_AccedentCause_W = null;
				_AccedentAnotherCause_W = null;
				_AccedentPlace_W = null;
				_VehicleType_W = null;
				_VehicleTypeOther_W = null;
				_DeadStatus_W = null;
				_HasTumor_W = null;
				_PlaceOfTumor_W = null;
				_TypeOfTumor_W = null;
				_PhaseOfTumor_W = null;
				_DeadThroghCarry_W = null;
				_AbortionPast6Weeks_W = null;
				_DeadThroghBirth_W = null;
				_BirthPast6Weeks_W = null;
				_BirthDate_W = null;
				_BirthResult_W = null;
				_BirthPlace_W = null;
				_BirthOperator_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeadMedicalInfoInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeadMedicalInfoUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeadMedicalInfoDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.DeadMedicalInfoID);
			p.SourceColumn = ColumnNames.DeadMedicalInfoID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.DeadMedicalInfoID);
			p.SourceColumn = ColumnNames.DeadMedicalInfoID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeadEventID);
			p.SourceColumn = ColumnNames.DeadEventID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathA);
			p.SourceColumn = ColumnNames.CauseOfDeathA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathAPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathAPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathB);
			p.SourceColumn = ColumnNames.CauseOfDeathB;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathBPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathBPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathC);
			p.SourceColumn = ColumnNames.CauseOfDeathC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathCPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathCPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathD);
			p.SourceColumn = ColumnNames.CauseOfDeathD;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathDPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathDPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathNotRelatedA);
			p.SourceColumn = ColumnNames.CauseOfDeathNotRelatedA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathNotRelatedAPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathNotRelatedAPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathNotRelatedB);
			p.SourceColumn = ColumnNames.CauseOfDeathNotRelatedB;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CauseOfDeathNotRelatedBPeriod);
			p.SourceColumn = ColumnNames.CauseOfDeathNotRelatedBPeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsSmoker);
			p.SourceColumn = ColumnNames.IsSmoker;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SmokeType);
			p.SourceColumn = ColumnNames.SmokeType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SmokePeriod);
			p.SourceColumn = ColumnNames.SmokePeriod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCausedByAccedent);
			p.SourceColumn = ColumnNames.IsCausedByAccedent;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AccedentCause);
			p.SourceColumn = ColumnNames.AccedentCause;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AccedentAnotherCause);
			p.SourceColumn = ColumnNames.AccedentAnotherCause;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AccedentPlace);
			p.SourceColumn = ColumnNames.AccedentPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VehicleType);
			p.SourceColumn = ColumnNames.VehicleType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VehicleTypeOther);
			p.SourceColumn = ColumnNames.VehicleTypeOther;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeadStatus);
			p.SourceColumn = ColumnNames.DeadStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasTumor);
			p.SourceColumn = ColumnNames.HasTumor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PlaceOfTumor);
			p.SourceColumn = ColumnNames.PlaceOfTumor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TypeOfTumor);
			p.SourceColumn = ColumnNames.TypeOfTumor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhaseOfTumor);
			p.SourceColumn = ColumnNames.PhaseOfTumor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeadThroghCarry);
			p.SourceColumn = ColumnNames.DeadThroghCarry;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AbortionPast6Weeks);
			p.SourceColumn = ColumnNames.AbortionPast6Weeks;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeadThroghBirth);
			p.SourceColumn = ColumnNames.DeadThroghBirth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthPast6Weeks);
			p.SourceColumn = ColumnNames.BirthPast6Weeks;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthDate);
			p.SourceColumn = ColumnNames.BirthDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthResult);
			p.SourceColumn = ColumnNames.BirthResult;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthPlace);
			p.SourceColumn = ColumnNames.BirthPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthOperator);
			p.SourceColumn = ColumnNames.BirthOperator;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
