/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.BLL
{
	public class V_Police_Gove : SqlClientEntity
	{
		public V_Police_Gove()
		{
			this.QuerySource = "V_Police_Gove";
			this.MappingName = "V_Police_Gove";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PoliceID
			{
				get
				{
					return new SqlParameter("@PoliceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GoveID
			{
				get
				{
					return new SqlParameter("@GoveID", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter GovName
			{
				get
				{
					return new SqlParameter("@GovName", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter PoliceName
			{
				get
				{
					return new SqlParameter("@PoliceName", SqlDbType.Char, 30);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PoliceID = "PoliceID";
            public const string GoveID = "GoveID";
            public const string GovName = "GovName";
            public const string PoliceName = "PoliceName";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PoliceID] = V_Police_Gove.PropertyNames.PoliceID;
					ht[GoveID] = V_Police_Gove.PropertyNames.GoveID;
					ht[GovName] = V_Police_Gove.PropertyNames.GovName;
					ht[PoliceName] = V_Police_Gove.PropertyNames.PoliceName;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PoliceID = "PoliceID";
            public const string GoveID = "GoveID";
            public const string GovName = "GovName";
            public const string PoliceName = "PoliceName";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PoliceID] = V_Police_Gove.ColumnNames.PoliceID;
					ht[GoveID] = V_Police_Gove.ColumnNames.GoveID;
					ht[GovName] = V_Police_Gove.ColumnNames.GovName;
					ht[PoliceName] = V_Police_Gove.ColumnNames.PoliceName;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PoliceID = "s_PoliceID";
            public const string GoveID = "s_GoveID";
            public const string GovName = "s_GovName";
            public const string PoliceName = "s_PoliceName";

		}
		#endregion	
		
		#region Properties
			public virtual int PoliceID
	    {
			get
	        {
				return base.Getint(ColumnNames.PoliceID);
			}
			set
	        {
				base.Setint(ColumnNames.PoliceID, value);
			}
		}

		public virtual short GoveID
	    {
			get
	        {
				return base.Getshort(ColumnNames.GoveID);
			}
			set
	        {
				base.Setshort(ColumnNames.GoveID, value);
			}
		}

		public virtual string GovName
	    {
			get
	        {
				return base.Getstring(ColumnNames.GovName);
			}
			set
	        {
				base.Setstring(ColumnNames.GovName, value);
			}
		}

		public virtual string PoliceName
	    {
			get
	        {
				return base.Getstring(ColumnNames.PoliceName);
			}
			set
	        {
				base.Setstring(ColumnNames.PoliceName, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PoliceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PoliceID) ? string.Empty : base.GetintAsString(ColumnNames.PoliceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PoliceID);
				else
					this.PoliceID = base.SetintAsString(ColumnNames.PoliceID, value);
			}
		}

		public virtual string s_GoveID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoveID) ? string.Empty : base.GetshortAsString(ColumnNames.GoveID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoveID);
				else
					this.GoveID = base.SetshortAsString(ColumnNames.GoveID, value);
			}
		}

		public virtual string s_GovName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GovName) ? string.Empty : base.GetstringAsString(ColumnNames.GovName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GovName);
				else
					this.GovName = base.SetstringAsString(ColumnNames.GovName, value);
			}
		}

		public virtual string s_PoliceName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PoliceName) ? string.Empty : base.GetstringAsString(ColumnNames.PoliceName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PoliceName);
				else
					this.PoliceName = base.SetstringAsString(ColumnNames.PoliceName, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PoliceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PoliceID, Parameters.PoliceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoveID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoveID, Parameters.GoveID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GovName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GovName, Parameters.GovName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PoliceName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PoliceName, Parameters.PoliceName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PoliceID
		    {
				get
		        {
					if(_PoliceID_W == null)
	        	    {
						_PoliceID_W = TearOff.PoliceID;
					}
					return _PoliceID_W;
				}
			}

			public WhereParameter GoveID
		    {
				get
		        {
					if(_GoveID_W == null)
	        	    {
						_GoveID_W = TearOff.GoveID;
					}
					return _GoveID_W;
				}
			}

			public WhereParameter GovName
		    {
				get
		        {
					if(_GovName_W == null)
	        	    {
						_GovName_W = TearOff.GovName;
					}
					return _GovName_W;
				}
			}

			public WhereParameter PoliceName
		    {
				get
		        {
					if(_PoliceName_W == null)
	        	    {
						_PoliceName_W = TearOff.PoliceName;
					}
					return _PoliceName_W;
				}
			}

			private WhereParameter _PoliceID_W = null;
			private WhereParameter _GoveID_W = null;
			private WhereParameter _GovName_W = null;
			private WhereParameter _PoliceName_W = null;

			public void WhereClauseReset()
			{
				_PoliceID_W = null;
				_GoveID_W = null;
				_GovName_W = null;
				_PoliceName_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PoliceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PoliceID, Parameters.PoliceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoveID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoveID, Parameters.GoveID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GovName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GovName, Parameters.GovName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PoliceName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PoliceName, Parameters.PoliceName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PoliceID
		    {
				get
		        {
					if(_PoliceID_W == null)
	        	    {
						_PoliceID_W = TearOff.PoliceID;
					}
					return _PoliceID_W;
				}
			}

			public AggregateParameter GoveID
		    {
				get
		        {
					if(_GoveID_W == null)
	        	    {
						_GoveID_W = TearOff.GoveID;
					}
					return _GoveID_W;
				}
			}

			public AggregateParameter GovName
		    {
				get
		        {
					if(_GovName_W == null)
	        	    {
						_GovName_W = TearOff.GovName;
					}
					return _GovName_W;
				}
			}

			public AggregateParameter PoliceName
		    {
				get
		        {
					if(_PoliceName_W == null)
	        	    {
						_PoliceName_W = TearOff.PoliceName;
					}
					return _PoliceName_W;
				}
			}

			private AggregateParameter _PoliceID_W = null;
			private AggregateParameter _GoveID_W = null;
			private AggregateParameter _GovName_W = null;
			private AggregateParameter _PoliceName_W = null;

			public void AggregateClauseReset()
			{
				_PoliceID_W = null;
				_GoveID_W = null;
				_GovName_W = null;
				_PoliceName_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
