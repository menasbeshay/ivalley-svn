
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.DAL
{
	public abstract class _BornMedicalInfo : SqlClientEntity
	{
		public _BornMedicalInfo()
		{
			this.QuerySource = "BornMedicalInfo";
			this.MappingName = "BornMedicalInfo";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BornMedicalInfoLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid BornMedicalInfoID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.BornMedicalInfoID, BornMedicalInfoID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BornMedicalInfoLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter BornMedicalInfoID
			{
				get
				{
					return new SqlParameter("@BornMedicalInfoID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter BornEventID
			{
				get
				{
					return new SqlParameter("@BornEventID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter BirthPlace
			{
				get
				{
					return new SqlParameter("@BirthPlace", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter BornWeightKG
			{
				get
				{
					return new SqlParameter("@BornWeightKG", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BornWeightGram
			{
				get
				{
					return new SqlParameter("@BornWeightGram", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MarriageDurationYears
			{
				get
				{
					return new SqlParameter("@MarriageDurationYears", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MarriageDurationMonth
			{
				get
				{
					return new SqlParameter("@MarriageDurationMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter XMarriageDurationYears
			{
				get
				{
					return new SqlParameter("@XMarriageDurationYears", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter XMarriageDurationMonth
			{
				get
				{
					return new SqlParameter("@XMarriageDurationMonth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TwinsNo
			{
				get
				{
					return new SqlParameter("@TwinsNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OlderBornNo
			{
				get
				{
					return new SqlParameter("@OlderBornNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter XOlderBornNo
			{
				get
				{
					return new SqlParameter("@XOlderBornNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeadBornNo
			{
				get
				{
					return new SqlParameter("@DeadBornNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ObstetricsNID
			{
				get
				{
					return new SqlParameter("@ObstetricsNID", SqlDbType.Char, 14);
				}
			}
			
			public static SqlParameter ObstetricsFName
			{
				get
				{
					return new SqlParameter("@ObstetricsFName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter ObstetricsLName
			{
				get
				{
					return new SqlParameter("@ObstetricsLName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter ObstetricsRelation
			{
				get
				{
					return new SqlParameter("@ObstetricsRelation", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string BornMedicalInfoID = "BornMedicalInfoID";
            public const string BornEventID = "BornEventID";
            public const string BirthPlace = "BirthPlace";
            public const string BornWeightKG = "BornWeightKG";
            public const string BornWeightGram = "BornWeightGram";
            public const string MarriageDurationYears = "MarriageDurationYears";
            public const string MarriageDurationMonth = "MarriageDurationMonth";
            public const string XMarriageDurationYears = "XMarriageDurationYears";
            public const string XMarriageDurationMonth = "XMarriageDurationMonth";
            public const string TwinsNo = "TwinsNo";
            public const string OlderBornNo = "OlderBornNo";
            public const string XOlderBornNo = "XOlderBornNo";
            public const string DeadBornNo = "DeadBornNo";
            public const string ObstetricsNID = "ObstetricsNID";
            public const string ObstetricsFName = "ObstetricsFName";
            public const string ObstetricsLName = "ObstetricsLName";
            public const string ObstetricsRelation = "ObstetricsRelation";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BornMedicalInfoID] = _BornMedicalInfo.PropertyNames.BornMedicalInfoID;
					ht[BornEventID] = _BornMedicalInfo.PropertyNames.BornEventID;
					ht[BirthPlace] = _BornMedicalInfo.PropertyNames.BirthPlace;
					ht[BornWeightKG] = _BornMedicalInfo.PropertyNames.BornWeightKG;
					ht[BornWeightGram] = _BornMedicalInfo.PropertyNames.BornWeightGram;
					ht[MarriageDurationYears] = _BornMedicalInfo.PropertyNames.MarriageDurationYears;
					ht[MarriageDurationMonth] = _BornMedicalInfo.PropertyNames.MarriageDurationMonth;
					ht[XMarriageDurationYears] = _BornMedicalInfo.PropertyNames.XMarriageDurationYears;
					ht[XMarriageDurationMonth] = _BornMedicalInfo.PropertyNames.XMarriageDurationMonth;
					ht[TwinsNo] = _BornMedicalInfo.PropertyNames.TwinsNo;
					ht[OlderBornNo] = _BornMedicalInfo.PropertyNames.OlderBornNo;
					ht[XOlderBornNo] = _BornMedicalInfo.PropertyNames.XOlderBornNo;
					ht[DeadBornNo] = _BornMedicalInfo.PropertyNames.DeadBornNo;
					ht[ObstetricsNID] = _BornMedicalInfo.PropertyNames.ObstetricsNID;
					ht[ObstetricsFName] = _BornMedicalInfo.PropertyNames.ObstetricsFName;
					ht[ObstetricsLName] = _BornMedicalInfo.PropertyNames.ObstetricsLName;
					ht[ObstetricsRelation] = _BornMedicalInfo.PropertyNames.ObstetricsRelation;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string BornMedicalInfoID = "BornMedicalInfoID";
            public const string BornEventID = "BornEventID";
            public const string BirthPlace = "BirthPlace";
            public const string BornWeightKG = "BornWeightKG";
            public const string BornWeightGram = "BornWeightGram";
            public const string MarriageDurationYears = "MarriageDurationYears";
            public const string MarriageDurationMonth = "MarriageDurationMonth";
            public const string XMarriageDurationYears = "XMarriageDurationYears";
            public const string XMarriageDurationMonth = "XMarriageDurationMonth";
            public const string TwinsNo = "TwinsNo";
            public const string OlderBornNo = "OlderBornNo";
            public const string XOlderBornNo = "XOlderBornNo";
            public const string DeadBornNo = "DeadBornNo";
            public const string ObstetricsNID = "ObstetricsNID";
            public const string ObstetricsFName = "ObstetricsFName";
            public const string ObstetricsLName = "ObstetricsLName";
            public const string ObstetricsRelation = "ObstetricsRelation";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BornMedicalInfoID] = _BornMedicalInfo.ColumnNames.BornMedicalInfoID;
					ht[BornEventID] = _BornMedicalInfo.ColumnNames.BornEventID;
					ht[BirthPlace] = _BornMedicalInfo.ColumnNames.BirthPlace;
					ht[BornWeightKG] = _BornMedicalInfo.ColumnNames.BornWeightKG;
					ht[BornWeightGram] = _BornMedicalInfo.ColumnNames.BornWeightGram;
					ht[MarriageDurationYears] = _BornMedicalInfo.ColumnNames.MarriageDurationYears;
					ht[MarriageDurationMonth] = _BornMedicalInfo.ColumnNames.MarriageDurationMonth;
					ht[XMarriageDurationYears] = _BornMedicalInfo.ColumnNames.XMarriageDurationYears;
					ht[XMarriageDurationMonth] = _BornMedicalInfo.ColumnNames.XMarriageDurationMonth;
					ht[TwinsNo] = _BornMedicalInfo.ColumnNames.TwinsNo;
					ht[OlderBornNo] = _BornMedicalInfo.ColumnNames.OlderBornNo;
					ht[XOlderBornNo] = _BornMedicalInfo.ColumnNames.XOlderBornNo;
					ht[DeadBornNo] = _BornMedicalInfo.ColumnNames.DeadBornNo;
					ht[ObstetricsNID] = _BornMedicalInfo.ColumnNames.ObstetricsNID;
					ht[ObstetricsFName] = _BornMedicalInfo.ColumnNames.ObstetricsFName;
					ht[ObstetricsLName] = _BornMedicalInfo.ColumnNames.ObstetricsLName;
					ht[ObstetricsRelation] = _BornMedicalInfo.ColumnNames.ObstetricsRelation;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string BornMedicalInfoID = "s_BornMedicalInfoID";
            public const string BornEventID = "s_BornEventID";
            public const string BirthPlace = "s_BirthPlace";
            public const string BornWeightKG = "s_BornWeightKG";
            public const string BornWeightGram = "s_BornWeightGram";
            public const string MarriageDurationYears = "s_MarriageDurationYears";
            public const string MarriageDurationMonth = "s_MarriageDurationMonth";
            public const string XMarriageDurationYears = "s_XMarriageDurationYears";
            public const string XMarriageDurationMonth = "s_XMarriageDurationMonth";
            public const string TwinsNo = "s_TwinsNo";
            public const string OlderBornNo = "s_OlderBornNo";
            public const string XOlderBornNo = "s_XOlderBornNo";
            public const string DeadBornNo = "s_DeadBornNo";
            public const string ObstetricsNID = "s_ObstetricsNID";
            public const string ObstetricsFName = "s_ObstetricsFName";
            public const string ObstetricsLName = "s_ObstetricsLName";
            public const string ObstetricsRelation = "s_ObstetricsRelation";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid BornMedicalInfoID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.BornMedicalInfoID);
			}
			set
	        {
				base.SetGuid(ColumnNames.BornMedicalInfoID, value);
			}
		}

		public virtual Guid BornEventID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.BornEventID);
			}
			set
	        {
				base.SetGuid(ColumnNames.BornEventID, value);
			}
		}

		public virtual string BirthPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.BirthPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.BirthPlace, value);
			}
		}

		public virtual int BornWeightKG
	    {
			get
	        {
				return base.Getint(ColumnNames.BornWeightKG);
			}
			set
	        {
				base.Setint(ColumnNames.BornWeightKG, value);
			}
		}

		public virtual int BornWeightGram
	    {
			get
	        {
				return base.Getint(ColumnNames.BornWeightGram);
			}
			set
	        {
				base.Setint(ColumnNames.BornWeightGram, value);
			}
		}

		public virtual int MarriageDurationYears
	    {
			get
	        {
				return base.Getint(ColumnNames.MarriageDurationYears);
			}
			set
	        {
				base.Setint(ColumnNames.MarriageDurationYears, value);
			}
		}

		public virtual int MarriageDurationMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.MarriageDurationMonth);
			}
			set
	        {
				base.Setint(ColumnNames.MarriageDurationMonth, value);
			}
		}

		public virtual int XMarriageDurationYears
	    {
			get
	        {
				return base.Getint(ColumnNames.XMarriageDurationYears);
			}
			set
	        {
				base.Setint(ColumnNames.XMarriageDurationYears, value);
			}
		}

		public virtual int XMarriageDurationMonth
	    {
			get
	        {
				return base.Getint(ColumnNames.XMarriageDurationMonth);
			}
			set
	        {
				base.Setint(ColumnNames.XMarriageDurationMonth, value);
			}
		}

		public virtual int TwinsNo
	    {
			get
	        {
				return base.Getint(ColumnNames.TwinsNo);
			}
			set
	        {
				base.Setint(ColumnNames.TwinsNo, value);
			}
		}

		public virtual int OlderBornNo
	    {
			get
	        {
				return base.Getint(ColumnNames.OlderBornNo);
			}
			set
	        {
				base.Setint(ColumnNames.OlderBornNo, value);
			}
		}

		public virtual int XOlderBornNo
	    {
			get
	        {
				return base.Getint(ColumnNames.XOlderBornNo);
			}
			set
	        {
				base.Setint(ColumnNames.XOlderBornNo, value);
			}
		}

		public virtual int DeadBornNo
	    {
			get
	        {
				return base.Getint(ColumnNames.DeadBornNo);
			}
			set
	        {
				base.Setint(ColumnNames.DeadBornNo, value);
			}
		}

		public virtual string ObstetricsNID
	    {
			get
	        {
				return base.Getstring(ColumnNames.ObstetricsNID);
			}
			set
	        {
				base.Setstring(ColumnNames.ObstetricsNID, value);
			}
		}

		public virtual string ObstetricsFName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ObstetricsFName);
			}
			set
	        {
				base.Setstring(ColumnNames.ObstetricsFName, value);
			}
		}

		public virtual string ObstetricsLName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ObstetricsLName);
			}
			set
	        {
				base.Setstring(ColumnNames.ObstetricsLName, value);
			}
		}

		public virtual int ObstetricsRelation
	    {
			get
	        {
				return base.Getint(ColumnNames.ObstetricsRelation);
			}
			set
	        {
				base.Setint(ColumnNames.ObstetricsRelation, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_BornMedicalInfoID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornMedicalInfoID) ? string.Empty : base.GetGuidAsString(ColumnNames.BornMedicalInfoID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornMedicalInfoID);
				else
					this.BornMedicalInfoID = base.SetGuidAsString(ColumnNames.BornMedicalInfoID, value);
			}
		}

		public virtual string s_BornEventID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornEventID) ? string.Empty : base.GetGuidAsString(ColumnNames.BornEventID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornEventID);
				else
					this.BornEventID = base.SetGuidAsString(ColumnNames.BornEventID, value);
			}
		}

		public virtual string s_BirthPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthPlace) ? string.Empty : base.GetstringAsString(ColumnNames.BirthPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthPlace);
				else
					this.BirthPlace = base.SetstringAsString(ColumnNames.BirthPlace, value);
			}
		}

		public virtual string s_BornWeightKG
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornWeightKG) ? string.Empty : base.GetintAsString(ColumnNames.BornWeightKG);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornWeightKG);
				else
					this.BornWeightKG = base.SetintAsString(ColumnNames.BornWeightKG, value);
			}
		}

		public virtual string s_BornWeightGram
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornWeightGram) ? string.Empty : base.GetintAsString(ColumnNames.BornWeightGram);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornWeightGram);
				else
					this.BornWeightGram = base.SetintAsString(ColumnNames.BornWeightGram, value);
			}
		}

		public virtual string s_MarriageDurationYears
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MarriageDurationYears) ? string.Empty : base.GetintAsString(ColumnNames.MarriageDurationYears);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MarriageDurationYears);
				else
					this.MarriageDurationYears = base.SetintAsString(ColumnNames.MarriageDurationYears, value);
			}
		}

		public virtual string s_MarriageDurationMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MarriageDurationMonth) ? string.Empty : base.GetintAsString(ColumnNames.MarriageDurationMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MarriageDurationMonth);
				else
					this.MarriageDurationMonth = base.SetintAsString(ColumnNames.MarriageDurationMonth, value);
			}
		}

		public virtual string s_XMarriageDurationYears
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.XMarriageDurationYears) ? string.Empty : base.GetintAsString(ColumnNames.XMarriageDurationYears);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.XMarriageDurationYears);
				else
					this.XMarriageDurationYears = base.SetintAsString(ColumnNames.XMarriageDurationYears, value);
			}
		}

		public virtual string s_XMarriageDurationMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.XMarriageDurationMonth) ? string.Empty : base.GetintAsString(ColumnNames.XMarriageDurationMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.XMarriageDurationMonth);
				else
					this.XMarriageDurationMonth = base.SetintAsString(ColumnNames.XMarriageDurationMonth, value);
			}
		}

		public virtual string s_TwinsNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TwinsNo) ? string.Empty : base.GetintAsString(ColumnNames.TwinsNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TwinsNo);
				else
					this.TwinsNo = base.SetintAsString(ColumnNames.TwinsNo, value);
			}
		}

		public virtual string s_OlderBornNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OlderBornNo) ? string.Empty : base.GetintAsString(ColumnNames.OlderBornNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OlderBornNo);
				else
					this.OlderBornNo = base.SetintAsString(ColumnNames.OlderBornNo, value);
			}
		}

		public virtual string s_XOlderBornNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.XOlderBornNo) ? string.Empty : base.GetintAsString(ColumnNames.XOlderBornNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.XOlderBornNo);
				else
					this.XOlderBornNo = base.SetintAsString(ColumnNames.XOlderBornNo, value);
			}
		}

		public virtual string s_DeadBornNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeadBornNo) ? string.Empty : base.GetintAsString(ColumnNames.DeadBornNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeadBornNo);
				else
					this.DeadBornNo = base.SetintAsString(ColumnNames.DeadBornNo, value);
			}
		}

		public virtual string s_ObstetricsNID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ObstetricsNID) ? string.Empty : base.GetstringAsString(ColumnNames.ObstetricsNID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ObstetricsNID);
				else
					this.ObstetricsNID = base.SetstringAsString(ColumnNames.ObstetricsNID, value);
			}
		}

		public virtual string s_ObstetricsFName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ObstetricsFName) ? string.Empty : base.GetstringAsString(ColumnNames.ObstetricsFName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ObstetricsFName);
				else
					this.ObstetricsFName = base.SetstringAsString(ColumnNames.ObstetricsFName, value);
			}
		}

		public virtual string s_ObstetricsLName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ObstetricsLName) ? string.Empty : base.GetstringAsString(ColumnNames.ObstetricsLName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ObstetricsLName);
				else
					this.ObstetricsLName = base.SetstringAsString(ColumnNames.ObstetricsLName, value);
			}
		}

		public virtual string s_ObstetricsRelation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ObstetricsRelation) ? string.Empty : base.GetintAsString(ColumnNames.ObstetricsRelation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ObstetricsRelation);
				else
					this.ObstetricsRelation = base.SetintAsString(ColumnNames.ObstetricsRelation, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter BornMedicalInfoID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornMedicalInfoID, Parameters.BornMedicalInfoID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornEventID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornEventID, Parameters.BornEventID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthPlace, Parameters.BirthPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornWeightKG
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornWeightKG, Parameters.BornWeightKG);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornWeightGram
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornWeightGram, Parameters.BornWeightGram);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MarriageDurationYears
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MarriageDurationYears, Parameters.MarriageDurationYears);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MarriageDurationMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MarriageDurationMonth, Parameters.MarriageDurationMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter XMarriageDurationYears
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.XMarriageDurationYears, Parameters.XMarriageDurationYears);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter XMarriageDurationMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.XMarriageDurationMonth, Parameters.XMarriageDurationMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TwinsNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TwinsNo, Parameters.TwinsNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OlderBornNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OlderBornNo, Parameters.OlderBornNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter XOlderBornNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.XOlderBornNo, Parameters.XOlderBornNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeadBornNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeadBornNo, Parameters.DeadBornNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ObstetricsNID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ObstetricsNID, Parameters.ObstetricsNID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ObstetricsFName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ObstetricsFName, Parameters.ObstetricsFName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ObstetricsLName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ObstetricsLName, Parameters.ObstetricsLName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ObstetricsRelation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ObstetricsRelation, Parameters.ObstetricsRelation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter BornMedicalInfoID
		    {
				get
		        {
					if(_BornMedicalInfoID_W == null)
	        	    {
						_BornMedicalInfoID_W = TearOff.BornMedicalInfoID;
					}
					return _BornMedicalInfoID_W;
				}
			}

			public WhereParameter BornEventID
		    {
				get
		        {
					if(_BornEventID_W == null)
	        	    {
						_BornEventID_W = TearOff.BornEventID;
					}
					return _BornEventID_W;
				}
			}

			public WhereParameter BirthPlace
		    {
				get
		        {
					if(_BirthPlace_W == null)
	        	    {
						_BirthPlace_W = TearOff.BirthPlace;
					}
					return _BirthPlace_W;
				}
			}

			public WhereParameter BornWeightKG
		    {
				get
		        {
					if(_BornWeightKG_W == null)
	        	    {
						_BornWeightKG_W = TearOff.BornWeightKG;
					}
					return _BornWeightKG_W;
				}
			}

			public WhereParameter BornWeightGram
		    {
				get
		        {
					if(_BornWeightGram_W == null)
	        	    {
						_BornWeightGram_W = TearOff.BornWeightGram;
					}
					return _BornWeightGram_W;
				}
			}

			public WhereParameter MarriageDurationYears
		    {
				get
		        {
					if(_MarriageDurationYears_W == null)
	        	    {
						_MarriageDurationYears_W = TearOff.MarriageDurationYears;
					}
					return _MarriageDurationYears_W;
				}
			}

			public WhereParameter MarriageDurationMonth
		    {
				get
		        {
					if(_MarriageDurationMonth_W == null)
	        	    {
						_MarriageDurationMonth_W = TearOff.MarriageDurationMonth;
					}
					return _MarriageDurationMonth_W;
				}
			}

			public WhereParameter XMarriageDurationYears
		    {
				get
		        {
					if(_XMarriageDurationYears_W == null)
	        	    {
						_XMarriageDurationYears_W = TearOff.XMarriageDurationYears;
					}
					return _XMarriageDurationYears_W;
				}
			}

			public WhereParameter XMarriageDurationMonth
		    {
				get
		        {
					if(_XMarriageDurationMonth_W == null)
	        	    {
						_XMarriageDurationMonth_W = TearOff.XMarriageDurationMonth;
					}
					return _XMarriageDurationMonth_W;
				}
			}

			public WhereParameter TwinsNo
		    {
				get
		        {
					if(_TwinsNo_W == null)
	        	    {
						_TwinsNo_W = TearOff.TwinsNo;
					}
					return _TwinsNo_W;
				}
			}

			public WhereParameter OlderBornNo
		    {
				get
		        {
					if(_OlderBornNo_W == null)
	        	    {
						_OlderBornNo_W = TearOff.OlderBornNo;
					}
					return _OlderBornNo_W;
				}
			}

			public WhereParameter XOlderBornNo
		    {
				get
		        {
					if(_XOlderBornNo_W == null)
	        	    {
						_XOlderBornNo_W = TearOff.XOlderBornNo;
					}
					return _XOlderBornNo_W;
				}
			}

			public WhereParameter DeadBornNo
		    {
				get
		        {
					if(_DeadBornNo_W == null)
	        	    {
						_DeadBornNo_W = TearOff.DeadBornNo;
					}
					return _DeadBornNo_W;
				}
			}

			public WhereParameter ObstetricsNID
		    {
				get
		        {
					if(_ObstetricsNID_W == null)
	        	    {
						_ObstetricsNID_W = TearOff.ObstetricsNID;
					}
					return _ObstetricsNID_W;
				}
			}

			public WhereParameter ObstetricsFName
		    {
				get
		        {
					if(_ObstetricsFName_W == null)
	        	    {
						_ObstetricsFName_W = TearOff.ObstetricsFName;
					}
					return _ObstetricsFName_W;
				}
			}

			public WhereParameter ObstetricsLName
		    {
				get
		        {
					if(_ObstetricsLName_W == null)
	        	    {
						_ObstetricsLName_W = TearOff.ObstetricsLName;
					}
					return _ObstetricsLName_W;
				}
			}

			public WhereParameter ObstetricsRelation
		    {
				get
		        {
					if(_ObstetricsRelation_W == null)
	        	    {
						_ObstetricsRelation_W = TearOff.ObstetricsRelation;
					}
					return _ObstetricsRelation_W;
				}
			}

			private WhereParameter _BornMedicalInfoID_W = null;
			private WhereParameter _BornEventID_W = null;
			private WhereParameter _BirthPlace_W = null;
			private WhereParameter _BornWeightKG_W = null;
			private WhereParameter _BornWeightGram_W = null;
			private WhereParameter _MarriageDurationYears_W = null;
			private WhereParameter _MarriageDurationMonth_W = null;
			private WhereParameter _XMarriageDurationYears_W = null;
			private WhereParameter _XMarriageDurationMonth_W = null;
			private WhereParameter _TwinsNo_W = null;
			private WhereParameter _OlderBornNo_W = null;
			private WhereParameter _XOlderBornNo_W = null;
			private WhereParameter _DeadBornNo_W = null;
			private WhereParameter _ObstetricsNID_W = null;
			private WhereParameter _ObstetricsFName_W = null;
			private WhereParameter _ObstetricsLName_W = null;
			private WhereParameter _ObstetricsRelation_W = null;

			public void WhereClauseReset()
			{
				_BornMedicalInfoID_W = null;
				_BornEventID_W = null;
				_BirthPlace_W = null;
				_BornWeightKG_W = null;
				_BornWeightGram_W = null;
				_MarriageDurationYears_W = null;
				_MarriageDurationMonth_W = null;
				_XMarriageDurationYears_W = null;
				_XMarriageDurationMonth_W = null;
				_TwinsNo_W = null;
				_OlderBornNo_W = null;
				_XOlderBornNo_W = null;
				_DeadBornNo_W = null;
				_ObstetricsNID_W = null;
				_ObstetricsFName_W = null;
				_ObstetricsLName_W = null;
				_ObstetricsRelation_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter BornMedicalInfoID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornMedicalInfoID, Parameters.BornMedicalInfoID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornEventID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornEventID, Parameters.BornEventID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthPlace, Parameters.BirthPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornWeightKG
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornWeightKG, Parameters.BornWeightKG);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornWeightGram
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornWeightGram, Parameters.BornWeightGram);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MarriageDurationYears
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MarriageDurationYears, Parameters.MarriageDurationYears);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MarriageDurationMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MarriageDurationMonth, Parameters.MarriageDurationMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter XMarriageDurationYears
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.XMarriageDurationYears, Parameters.XMarriageDurationYears);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter XMarriageDurationMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.XMarriageDurationMonth, Parameters.XMarriageDurationMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TwinsNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TwinsNo, Parameters.TwinsNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OlderBornNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OlderBornNo, Parameters.OlderBornNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter XOlderBornNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.XOlderBornNo, Parameters.XOlderBornNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeadBornNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeadBornNo, Parameters.DeadBornNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ObstetricsNID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ObstetricsNID, Parameters.ObstetricsNID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ObstetricsFName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ObstetricsFName, Parameters.ObstetricsFName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ObstetricsLName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ObstetricsLName, Parameters.ObstetricsLName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ObstetricsRelation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ObstetricsRelation, Parameters.ObstetricsRelation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter BornMedicalInfoID
		    {
				get
		        {
					if(_BornMedicalInfoID_W == null)
	        	    {
						_BornMedicalInfoID_W = TearOff.BornMedicalInfoID;
					}
					return _BornMedicalInfoID_W;
				}
			}

			public AggregateParameter BornEventID
		    {
				get
		        {
					if(_BornEventID_W == null)
	        	    {
						_BornEventID_W = TearOff.BornEventID;
					}
					return _BornEventID_W;
				}
			}

			public AggregateParameter BirthPlace
		    {
				get
		        {
					if(_BirthPlace_W == null)
	        	    {
						_BirthPlace_W = TearOff.BirthPlace;
					}
					return _BirthPlace_W;
				}
			}

			public AggregateParameter BornWeightKG
		    {
				get
		        {
					if(_BornWeightKG_W == null)
	        	    {
						_BornWeightKG_W = TearOff.BornWeightKG;
					}
					return _BornWeightKG_W;
				}
			}

			public AggregateParameter BornWeightGram
		    {
				get
		        {
					if(_BornWeightGram_W == null)
	        	    {
						_BornWeightGram_W = TearOff.BornWeightGram;
					}
					return _BornWeightGram_W;
				}
			}

			public AggregateParameter MarriageDurationYears
		    {
				get
		        {
					if(_MarriageDurationYears_W == null)
	        	    {
						_MarriageDurationYears_W = TearOff.MarriageDurationYears;
					}
					return _MarriageDurationYears_W;
				}
			}

			public AggregateParameter MarriageDurationMonth
		    {
				get
		        {
					if(_MarriageDurationMonth_W == null)
	        	    {
						_MarriageDurationMonth_W = TearOff.MarriageDurationMonth;
					}
					return _MarriageDurationMonth_W;
				}
			}

			public AggregateParameter XMarriageDurationYears
		    {
				get
		        {
					if(_XMarriageDurationYears_W == null)
	        	    {
						_XMarriageDurationYears_W = TearOff.XMarriageDurationYears;
					}
					return _XMarriageDurationYears_W;
				}
			}

			public AggregateParameter XMarriageDurationMonth
		    {
				get
		        {
					if(_XMarriageDurationMonth_W == null)
	        	    {
						_XMarriageDurationMonth_W = TearOff.XMarriageDurationMonth;
					}
					return _XMarriageDurationMonth_W;
				}
			}

			public AggregateParameter TwinsNo
		    {
				get
		        {
					if(_TwinsNo_W == null)
	        	    {
						_TwinsNo_W = TearOff.TwinsNo;
					}
					return _TwinsNo_W;
				}
			}

			public AggregateParameter OlderBornNo
		    {
				get
		        {
					if(_OlderBornNo_W == null)
	        	    {
						_OlderBornNo_W = TearOff.OlderBornNo;
					}
					return _OlderBornNo_W;
				}
			}

			public AggregateParameter XOlderBornNo
		    {
				get
		        {
					if(_XOlderBornNo_W == null)
	        	    {
						_XOlderBornNo_W = TearOff.XOlderBornNo;
					}
					return _XOlderBornNo_W;
				}
			}

			public AggregateParameter DeadBornNo
		    {
				get
		        {
					if(_DeadBornNo_W == null)
	        	    {
						_DeadBornNo_W = TearOff.DeadBornNo;
					}
					return _DeadBornNo_W;
				}
			}

			public AggregateParameter ObstetricsNID
		    {
				get
		        {
					if(_ObstetricsNID_W == null)
	        	    {
						_ObstetricsNID_W = TearOff.ObstetricsNID;
					}
					return _ObstetricsNID_W;
				}
			}

			public AggregateParameter ObstetricsFName
		    {
				get
		        {
					if(_ObstetricsFName_W == null)
	        	    {
						_ObstetricsFName_W = TearOff.ObstetricsFName;
					}
					return _ObstetricsFName_W;
				}
			}

			public AggregateParameter ObstetricsLName
		    {
				get
		        {
					if(_ObstetricsLName_W == null)
	        	    {
						_ObstetricsLName_W = TearOff.ObstetricsLName;
					}
					return _ObstetricsLName_W;
				}
			}

			public AggregateParameter ObstetricsRelation
		    {
				get
		        {
					if(_ObstetricsRelation_W == null)
	        	    {
						_ObstetricsRelation_W = TearOff.ObstetricsRelation;
					}
					return _ObstetricsRelation_W;
				}
			}

			private AggregateParameter _BornMedicalInfoID_W = null;
			private AggregateParameter _BornEventID_W = null;
			private AggregateParameter _BirthPlace_W = null;
			private AggregateParameter _BornWeightKG_W = null;
			private AggregateParameter _BornWeightGram_W = null;
			private AggregateParameter _MarriageDurationYears_W = null;
			private AggregateParameter _MarriageDurationMonth_W = null;
			private AggregateParameter _XMarriageDurationYears_W = null;
			private AggregateParameter _XMarriageDurationMonth_W = null;
			private AggregateParameter _TwinsNo_W = null;
			private AggregateParameter _OlderBornNo_W = null;
			private AggregateParameter _XOlderBornNo_W = null;
			private AggregateParameter _DeadBornNo_W = null;
			private AggregateParameter _ObstetricsNID_W = null;
			private AggregateParameter _ObstetricsFName_W = null;
			private AggregateParameter _ObstetricsLName_W = null;
			private AggregateParameter _ObstetricsRelation_W = null;

			public void AggregateClauseReset()
			{
				_BornMedicalInfoID_W = null;
				_BornEventID_W = null;
				_BirthPlace_W = null;
				_BornWeightKG_W = null;
				_BornWeightGram_W = null;
				_MarriageDurationYears_W = null;
				_MarriageDurationMonth_W = null;
				_XMarriageDurationYears_W = null;
				_XMarriageDurationMonth_W = null;
				_TwinsNo_W = null;
				_OlderBornNo_W = null;
				_XOlderBornNo_W = null;
				_DeadBornNo_W = null;
				_ObstetricsNID_W = null;
				_ObstetricsFName_W = null;
				_ObstetricsLName_W = null;
				_ObstetricsRelation_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornMedicalInfoInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornMedicalInfoUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornMedicalInfoDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.BornMedicalInfoID);
			p.SourceColumn = ColumnNames.BornMedicalInfoID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.BornMedicalInfoID);
			p.SourceColumn = ColumnNames.BornMedicalInfoID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornEventID);
			p.SourceColumn = ColumnNames.BornEventID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthPlace);
			p.SourceColumn = ColumnNames.BirthPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornWeightKG);
			p.SourceColumn = ColumnNames.BornWeightKG;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornWeightGram);
			p.SourceColumn = ColumnNames.BornWeightGram;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MarriageDurationYears);
			p.SourceColumn = ColumnNames.MarriageDurationYears;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MarriageDurationMonth);
			p.SourceColumn = ColumnNames.MarriageDurationMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.XMarriageDurationYears);
			p.SourceColumn = ColumnNames.XMarriageDurationYears;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.XMarriageDurationMonth);
			p.SourceColumn = ColumnNames.XMarriageDurationMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TwinsNo);
			p.SourceColumn = ColumnNames.TwinsNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OlderBornNo);
			p.SourceColumn = ColumnNames.OlderBornNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.XOlderBornNo);
			p.SourceColumn = ColumnNames.XOlderBornNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeadBornNo);
			p.SourceColumn = ColumnNames.DeadBornNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ObstetricsNID);
			p.SourceColumn = ColumnNames.ObstetricsNID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ObstetricsFName);
			p.SourceColumn = ColumnNames.ObstetricsFName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ObstetricsLName);
			p.SourceColumn = ColumnNames.ObstetricsLName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ObstetricsRelation);
			p.SourceColumn = ColumnNames.ObstetricsRelation;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
