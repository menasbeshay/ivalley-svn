
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MHO.DAL
{
	public abstract class _Born : SqlClientEntity
	{
		public _Born()
		{
			this.QuerySource = "Born";
			this.MappingName = "Born";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BornLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid BornEventID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.BornEventID, BornEventID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BornLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter BornEventID
			{
				get
				{
					return new SqlParameter("@BornEventID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter BornName
			{
				get
				{
					return new SqlParameter("@BornName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter BornGender
			{
				get
				{
					return new SqlParameter("@BornGender", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BirthDate
			{
				get
				{
					return new SqlParameter("@BirthDate", SqlDbType.SmallDateTime, 0);
				}
			}
			
			public static SqlParameter BornGovernorate
			{
				get
				{
					return new SqlParameter("@BornGovernorate", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BornSection
			{
				get
				{
					return new SqlParameter("@BornSection", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BornArea
			{
				get
				{
					return new SqlParameter("@BornArea", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FatherNID
			{
				get
				{
					return new SqlParameter("@FatherNID", SqlDbType.Char, 14);
				}
			}
			
			public static SqlParameter FirstFatherName
			{
				get
				{
					return new SqlParameter("@FirstFatherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter SecondFatherName
			{
				get
				{
					return new SqlParameter("@SecondFatherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FamilyFatherName
			{
				get
				{
					return new SqlParameter("@FamilyFatherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FatherSureName
			{
				get
				{
					return new SqlParameter("@FatherSureName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FatherNationality
			{
				get
				{
					return new SqlParameter("@FatherNationality", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FatherReligion
			{
				get
				{
					return new SqlParameter("@FatherReligion", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FatherProveNo
			{
				get
				{
					return new SqlParameter("@FatherProveNo", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter FatherProveType
			{
				get
				{
					return new SqlParameter("@FatherProveType", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter FatherJob
			{
				get
				{
					return new SqlParameter("@FatherJob", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MotherNID
			{
				get
				{
					return new SqlParameter("@MotherNID", SqlDbType.Char, 14);
				}
			}
			
			public static SqlParameter FirstMotherName
			{
				get
				{
					return new SqlParameter("@FirstMotherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter SecondMotherName
			{
				get
				{
					return new SqlParameter("@SecondMotherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FamilyMotherName
			{
				get
				{
					return new SqlParameter("@FamilyMotherName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter MotherSureName
			{
				get
				{
					return new SqlParameter("@MotherSureName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter MotherNationality
			{
				get
				{
					return new SqlParameter("@MotherNationality", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MotherReligion
			{
				get
				{
					return new SqlParameter("@MotherReligion", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MotherProveNo
			{
				get
				{
					return new SqlParameter("@MotherProveNo", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter MotherProveType
			{
				get
				{
					return new SqlParameter("@MotherProveType", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter MotherJob
			{
				get
				{
					return new SqlParameter("@MotherJob", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter InformerRelation
			{
				get
				{
					return new SqlParameter("@InformerRelation", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InformerNID
			{
				get
				{
					return new SqlParameter("@InformerNID", SqlDbType.Char, 14);
				}
			}
			
			public static SqlParameter InformerFirstName
			{
				get
				{
					return new SqlParameter("@InformerFirstName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter InformerSecondName
			{
				get
				{
					return new SqlParameter("@InformerSecondName", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter InformerPhone
			{
				get
				{
					return new SqlParameter("@InformerPhone", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter RegisterID
			{
				get
				{
					return new SqlParameter("@RegisterID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter RegisterNo
			{
				get
				{
					return new SqlParameter("@RegisterNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RegisterDate
			{
				get
				{
					return new SqlParameter("@RegisterDate", SqlDbType.SmallDateTime, 0);
				}
			}
			
			public static SqlParameter BornDecisionNo
			{
				get
				{
					return new SqlParameter("@BornDecisionNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter BornDecisionDirection
			{
				get
				{
					return new SqlParameter("@BornDecisionDirection", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter BornDecisionDate
			{
				get
				{
					return new SqlParameter("@BornDecisionDate", SqlDbType.SmallDateTime, 0);
				}
			}
			
			public static SqlParameter BornDecisionNotes
			{
				get
				{
					return new SqlParameter("@BornDecisionNotes", SqlDbType.NVarChar, 25);
				}
			}
			
			public static SqlParameter OrgID
			{
				get
				{
					return new SqlParameter("@OrgID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Approved
			{
				get
				{
					return new SqlParameter("@Approved", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsFound
			{
				get
				{
					return new SqlParameter("@IsFound", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string BornEventID = "BornEventID";
            public const string BornName = "BornName";
            public const string BornGender = "BornGender";
            public const string BirthDate = "BirthDate";
            public const string BornGovernorate = "BornGovernorate";
            public const string BornSection = "BornSection";
            public const string BornArea = "BornArea";
            public const string FatherNID = "FatherNID";
            public const string FirstFatherName = "FirstFatherName";
            public const string SecondFatherName = "SecondFatherName";
            public const string FamilyFatherName = "FamilyFatherName";
            public const string FatherSureName = "FatherSureName";
            public const string FatherNationality = "FatherNationality";
            public const string FatherReligion = "FatherReligion";
            public const string FatherProveNo = "FatherProveNo";
            public const string FatherProveType = "FatherProveType";
            public const string FatherJob = "FatherJob";
            public const string MotherNID = "MotherNID";
            public const string FirstMotherName = "FirstMotherName";
            public const string SecondMotherName = "SecondMotherName";
            public const string FamilyMotherName = "FamilyMotherName";
            public const string MotherSureName = "MotherSureName";
            public const string MotherNationality = "MotherNationality";
            public const string MotherReligion = "MotherReligion";
            public const string MotherProveNo = "MotherProveNo";
            public const string MotherProveType = "MotherProveType";
            public const string MotherJob = "MotherJob";
            public const string InformerRelation = "InformerRelation";
            public const string InformerNID = "InformerNID";
            public const string InformerFirstName = "InformerFirstName";
            public const string InformerSecondName = "InformerSecondName";
            public const string InformerPhone = "InformerPhone";
            public const string RegisterID = "RegisterID";
            public const string RegisterNo = "RegisterNo";
            public const string RegisterDate = "RegisterDate";
            public const string BornDecisionNo = "BornDecisionNo";
            public const string BornDecisionDirection = "BornDecisionDirection";
            public const string BornDecisionDate = "BornDecisionDate";
            public const string BornDecisionNotes = "BornDecisionNotes";
            public const string OrgID = "OrgID";
            public const string Approved = "Approved";
            public const string IsFound = "IsFound";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BornEventID] = _Born.PropertyNames.BornEventID;
					ht[BornName] = _Born.PropertyNames.BornName;
					ht[BornGender] = _Born.PropertyNames.BornGender;
					ht[BirthDate] = _Born.PropertyNames.BirthDate;
					ht[BornGovernorate] = _Born.PropertyNames.BornGovernorate;
					ht[BornSection] = _Born.PropertyNames.BornSection;
					ht[BornArea] = _Born.PropertyNames.BornArea;
					ht[FatherNID] = _Born.PropertyNames.FatherNID;
					ht[FirstFatherName] = _Born.PropertyNames.FirstFatherName;
					ht[SecondFatherName] = _Born.PropertyNames.SecondFatherName;
					ht[FamilyFatherName] = _Born.PropertyNames.FamilyFatherName;
					ht[FatherSureName] = _Born.PropertyNames.FatherSureName;
					ht[FatherNationality] = _Born.PropertyNames.FatherNationality;
					ht[FatherReligion] = _Born.PropertyNames.FatherReligion;
					ht[FatherProveNo] = _Born.PropertyNames.FatherProveNo;
					ht[FatherProveType] = _Born.PropertyNames.FatherProveType;
					ht[FatherJob] = _Born.PropertyNames.FatherJob;
					ht[MotherNID] = _Born.PropertyNames.MotherNID;
					ht[FirstMotherName] = _Born.PropertyNames.FirstMotherName;
					ht[SecondMotherName] = _Born.PropertyNames.SecondMotherName;
					ht[FamilyMotherName] = _Born.PropertyNames.FamilyMotherName;
					ht[MotherSureName] = _Born.PropertyNames.MotherSureName;
					ht[MotherNationality] = _Born.PropertyNames.MotherNationality;
					ht[MotherReligion] = _Born.PropertyNames.MotherReligion;
					ht[MotherProveNo] = _Born.PropertyNames.MotherProveNo;
					ht[MotherProveType] = _Born.PropertyNames.MotherProveType;
					ht[MotherJob] = _Born.PropertyNames.MotherJob;
					ht[InformerRelation] = _Born.PropertyNames.InformerRelation;
					ht[InformerNID] = _Born.PropertyNames.InformerNID;
					ht[InformerFirstName] = _Born.PropertyNames.InformerFirstName;
					ht[InformerSecondName] = _Born.PropertyNames.InformerSecondName;
					ht[InformerPhone] = _Born.PropertyNames.InformerPhone;
					ht[RegisterID] = _Born.PropertyNames.RegisterID;
					ht[RegisterNo] = _Born.PropertyNames.RegisterNo;
					ht[RegisterDate] = _Born.PropertyNames.RegisterDate;
					ht[BornDecisionNo] = _Born.PropertyNames.BornDecisionNo;
					ht[BornDecisionDirection] = _Born.PropertyNames.BornDecisionDirection;
					ht[BornDecisionDate] = _Born.PropertyNames.BornDecisionDate;
					ht[BornDecisionNotes] = _Born.PropertyNames.BornDecisionNotes;
					ht[OrgID] = _Born.PropertyNames.OrgID;
					ht[Approved] = _Born.PropertyNames.Approved;
					ht[IsFound] = _Born.PropertyNames.IsFound;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string BornEventID = "BornEventID";
            public const string BornName = "BornName";
            public const string BornGender = "BornGender";
            public const string BirthDate = "BirthDate";
            public const string BornGovernorate = "BornGovernorate";
            public const string BornSection = "BornSection";
            public const string BornArea = "BornArea";
            public const string FatherNID = "FatherNID";
            public const string FirstFatherName = "FirstFatherName";
            public const string SecondFatherName = "SecondFatherName";
            public const string FamilyFatherName = "FamilyFatherName";
            public const string FatherSureName = "FatherSureName";
            public const string FatherNationality = "FatherNationality";
            public const string FatherReligion = "FatherReligion";
            public const string FatherProveNo = "FatherProveNo";
            public const string FatherProveType = "FatherProveType";
            public const string FatherJob = "FatherJob";
            public const string MotherNID = "MotherNID";
            public const string FirstMotherName = "FirstMotherName";
            public const string SecondMotherName = "SecondMotherName";
            public const string FamilyMotherName = "FamilyMotherName";
            public const string MotherSureName = "MotherSureName";
            public const string MotherNationality = "MotherNationality";
            public const string MotherReligion = "MotherReligion";
            public const string MotherProveNo = "MotherProveNo";
            public const string MotherProveType = "MotherProveType";
            public const string MotherJob = "MotherJob";
            public const string InformerRelation = "InformerRelation";
            public const string InformerNID = "InformerNID";
            public const string InformerFirstName = "InformerFirstName";
            public const string InformerSecondName = "InformerSecondName";
            public const string InformerPhone = "InformerPhone";
            public const string RegisterID = "RegisterID";
            public const string RegisterNo = "RegisterNo";
            public const string RegisterDate = "RegisterDate";
            public const string BornDecisionNo = "BornDecisionNo";
            public const string BornDecisionDirection = "BornDecisionDirection";
            public const string BornDecisionDate = "BornDecisionDate";
            public const string BornDecisionNotes = "BornDecisionNotes";
            public const string OrgID = "OrgID";
            public const string Approved = "Approved";
            public const string IsFound = "IsFound";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BornEventID] = _Born.ColumnNames.BornEventID;
					ht[BornName] = _Born.ColumnNames.BornName;
					ht[BornGender] = _Born.ColumnNames.BornGender;
					ht[BirthDate] = _Born.ColumnNames.BirthDate;
					ht[BornGovernorate] = _Born.ColumnNames.BornGovernorate;
					ht[BornSection] = _Born.ColumnNames.BornSection;
					ht[BornArea] = _Born.ColumnNames.BornArea;
					ht[FatherNID] = _Born.ColumnNames.FatherNID;
					ht[FirstFatherName] = _Born.ColumnNames.FirstFatherName;
					ht[SecondFatherName] = _Born.ColumnNames.SecondFatherName;
					ht[FamilyFatherName] = _Born.ColumnNames.FamilyFatherName;
					ht[FatherSureName] = _Born.ColumnNames.FatherSureName;
					ht[FatherNationality] = _Born.ColumnNames.FatherNationality;
					ht[FatherReligion] = _Born.ColumnNames.FatherReligion;
					ht[FatherProveNo] = _Born.ColumnNames.FatherProveNo;
					ht[FatherProveType] = _Born.ColumnNames.FatherProveType;
					ht[FatherJob] = _Born.ColumnNames.FatherJob;
					ht[MotherNID] = _Born.ColumnNames.MotherNID;
					ht[FirstMotherName] = _Born.ColumnNames.FirstMotherName;
					ht[SecondMotherName] = _Born.ColumnNames.SecondMotherName;
					ht[FamilyMotherName] = _Born.ColumnNames.FamilyMotherName;
					ht[MotherSureName] = _Born.ColumnNames.MotherSureName;
					ht[MotherNationality] = _Born.ColumnNames.MotherNationality;
					ht[MotherReligion] = _Born.ColumnNames.MotherReligion;
					ht[MotherProveNo] = _Born.ColumnNames.MotherProveNo;
					ht[MotherProveType] = _Born.ColumnNames.MotherProveType;
					ht[MotherJob] = _Born.ColumnNames.MotherJob;
					ht[InformerRelation] = _Born.ColumnNames.InformerRelation;
					ht[InformerNID] = _Born.ColumnNames.InformerNID;
					ht[InformerFirstName] = _Born.ColumnNames.InformerFirstName;
					ht[InformerSecondName] = _Born.ColumnNames.InformerSecondName;
					ht[InformerPhone] = _Born.ColumnNames.InformerPhone;
					ht[RegisterID] = _Born.ColumnNames.RegisterID;
					ht[RegisterNo] = _Born.ColumnNames.RegisterNo;
					ht[RegisterDate] = _Born.ColumnNames.RegisterDate;
					ht[BornDecisionNo] = _Born.ColumnNames.BornDecisionNo;
					ht[BornDecisionDirection] = _Born.ColumnNames.BornDecisionDirection;
					ht[BornDecisionDate] = _Born.ColumnNames.BornDecisionDate;
					ht[BornDecisionNotes] = _Born.ColumnNames.BornDecisionNotes;
					ht[OrgID] = _Born.ColumnNames.OrgID;
					ht[Approved] = _Born.ColumnNames.Approved;
					ht[IsFound] = _Born.ColumnNames.IsFound;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string BornEventID = "s_BornEventID";
            public const string BornName = "s_BornName";
            public const string BornGender = "s_BornGender";
            public const string BirthDate = "s_BirthDate";
            public const string BornGovernorate = "s_BornGovernorate";
            public const string BornSection = "s_BornSection";
            public const string BornArea = "s_BornArea";
            public const string FatherNID = "s_FatherNID";
            public const string FirstFatherName = "s_FirstFatherName";
            public const string SecondFatherName = "s_SecondFatherName";
            public const string FamilyFatherName = "s_FamilyFatherName";
            public const string FatherSureName = "s_FatherSureName";
            public const string FatherNationality = "s_FatherNationality";
            public const string FatherReligion = "s_FatherReligion";
            public const string FatherProveNo = "s_FatherProveNo";
            public const string FatherProveType = "s_FatherProveType";
            public const string FatherJob = "s_FatherJob";
            public const string MotherNID = "s_MotherNID";
            public const string FirstMotherName = "s_FirstMotherName";
            public const string SecondMotherName = "s_SecondMotherName";
            public const string FamilyMotherName = "s_FamilyMotherName";
            public const string MotherSureName = "s_MotherSureName";
            public const string MotherNationality = "s_MotherNationality";
            public const string MotherReligion = "s_MotherReligion";
            public const string MotherProveNo = "s_MotherProveNo";
            public const string MotherProveType = "s_MotherProveType";
            public const string MotherJob = "s_MotherJob";
            public const string InformerRelation = "s_InformerRelation";
            public const string InformerNID = "s_InformerNID";
            public const string InformerFirstName = "s_InformerFirstName";
            public const string InformerSecondName = "s_InformerSecondName";
            public const string InformerPhone = "s_InformerPhone";
            public const string RegisterID = "s_RegisterID";
            public const string RegisterNo = "s_RegisterNo";
            public const string RegisterDate = "s_RegisterDate";
            public const string BornDecisionNo = "s_BornDecisionNo";
            public const string BornDecisionDirection = "s_BornDecisionDirection";
            public const string BornDecisionDate = "s_BornDecisionDate";
            public const string BornDecisionNotes = "s_BornDecisionNotes";
            public const string OrgID = "s_OrgID";
            public const string Approved = "s_Approved";
            public const string IsFound = "s_IsFound";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid BornEventID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.BornEventID);
			}
			set
	        {
				base.SetGuid(ColumnNames.BornEventID, value);
			}
		}

		public virtual string BornName
	    {
			get
	        {
				return base.Getstring(ColumnNames.BornName);
			}
			set
	        {
				base.Setstring(ColumnNames.BornName, value);
			}
		}

		public virtual int BornGender
	    {
			get
	        {
				return base.Getint(ColumnNames.BornGender);
			}
			set
	        {
				base.Setint(ColumnNames.BornGender, value);
			}
		}

		public virtual DateTime BirthDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BirthDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BirthDate, value);
			}
		}

		public virtual int BornGovernorate
	    {
			get
	        {
				return base.Getint(ColumnNames.BornGovernorate);
			}
			set
	        {
				base.Setint(ColumnNames.BornGovernorate, value);
			}
		}

		public virtual int BornSection
	    {
			get
	        {
				return base.Getint(ColumnNames.BornSection);
			}
			set
	        {
				base.Setint(ColumnNames.BornSection, value);
			}
		}

		public virtual int BornArea
	    {
			get
	        {
				return base.Getint(ColumnNames.BornArea);
			}
			set
	        {
				base.Setint(ColumnNames.BornArea, value);
			}
		}

		public virtual string FatherNID
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherNID);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherNID, value);
			}
		}

		public virtual string FirstFatherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstFatherName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstFatherName, value);
			}
		}

		public virtual string SecondFatherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecondFatherName);
			}
			set
	        {
				base.Setstring(ColumnNames.SecondFatherName, value);
			}
		}

		public virtual string FamilyFatherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FamilyFatherName);
			}
			set
	        {
				base.Setstring(ColumnNames.FamilyFatherName, value);
			}
		}

		public virtual string FatherSureName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherSureName);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherSureName, value);
			}
		}

		public virtual int FatherNationality
	    {
			get
	        {
				return base.Getint(ColumnNames.FatherNationality);
			}
			set
	        {
				base.Setint(ColumnNames.FatherNationality, value);
			}
		}

		public virtual int FatherReligion
	    {
			get
	        {
				return base.Getint(ColumnNames.FatherReligion);
			}
			set
	        {
				base.Setint(ColumnNames.FatherReligion, value);
			}
		}

		public virtual string FatherProveNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherProveNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherProveNo, value);
			}
		}

		public virtual string FatherProveType
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherProveType);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherProveType, value);
			}
		}

		public virtual string FatherJob
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherJob);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherJob, value);
			}
		}

		public virtual string MotherNID
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherNID);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherNID, value);
			}
		}

		public virtual string FirstMotherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstMotherName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstMotherName, value);
			}
		}

		public virtual string SecondMotherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecondMotherName);
			}
			set
	        {
				base.Setstring(ColumnNames.SecondMotherName, value);
			}
		}

		public virtual string FamilyMotherName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FamilyMotherName);
			}
			set
	        {
				base.Setstring(ColumnNames.FamilyMotherName, value);
			}
		}

		public virtual string MotherSureName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherSureName);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherSureName, value);
			}
		}

		public virtual int MotherNationality
	    {
			get
	        {
				return base.Getint(ColumnNames.MotherNationality);
			}
			set
	        {
				base.Setint(ColumnNames.MotherNationality, value);
			}
		}

		public virtual int MotherReligion
	    {
			get
	        {
				return base.Getint(ColumnNames.MotherReligion);
			}
			set
	        {
				base.Setint(ColumnNames.MotherReligion, value);
			}
		}

		public virtual string MotherProveNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherProveNo);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherProveNo, value);
			}
		}

		public virtual string MotherProveType
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherProveType);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherProveType, value);
			}
		}

		public virtual string MotherJob
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherJob);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherJob, value);
			}
		}

		public virtual int InformerRelation
	    {
			get
	        {
				return base.Getint(ColumnNames.InformerRelation);
			}
			set
	        {
				base.Setint(ColumnNames.InformerRelation, value);
			}
		}

		public virtual string InformerNID
	    {
			get
	        {
				return base.Getstring(ColumnNames.InformerNID);
			}
			set
	        {
				base.Setstring(ColumnNames.InformerNID, value);
			}
		}

		public virtual string InformerFirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.InformerFirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.InformerFirstName, value);
			}
		}

		public virtual string InformerSecondName
	    {
			get
	        {
				return base.Getstring(ColumnNames.InformerSecondName);
			}
			set
	        {
				base.Setstring(ColumnNames.InformerSecondName, value);
			}
		}

		public virtual string InformerPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.InformerPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.InformerPhone, value);
			}
		}

		public virtual Guid RegisterID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.RegisterID);
			}
			set
	        {
				base.SetGuid(ColumnNames.RegisterID, value);
			}
		}

		public virtual int RegisterNo
	    {
			get
	        {
				return base.Getint(ColumnNames.RegisterNo);
			}
			set
	        {
				base.Setint(ColumnNames.RegisterNo, value);
			}
		}

		public virtual DateTime RegisterDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RegisterDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RegisterDate, value);
			}
		}

		public virtual string BornDecisionNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.BornDecisionNo);
			}
			set
	        {
				base.Setstring(ColumnNames.BornDecisionNo, value);
			}
		}

		public virtual string BornDecisionDirection
	    {
			get
	        {
				return base.Getstring(ColumnNames.BornDecisionDirection);
			}
			set
	        {
				base.Setstring(ColumnNames.BornDecisionDirection, value);
			}
		}

		public virtual DateTime BornDecisionDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BornDecisionDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BornDecisionDate, value);
			}
		}

		public virtual string BornDecisionNotes
	    {
			get
	        {
				return base.Getstring(ColumnNames.BornDecisionNotes);
			}
			set
	        {
				base.Setstring(ColumnNames.BornDecisionNotes, value);
			}
		}

		public virtual int OrgID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrgID);
			}
			set
	        {
				base.Setint(ColumnNames.OrgID, value);
			}
		}

		public virtual bool Approved
	    {
			get
	        {
				return base.Getbool(ColumnNames.Approved);
			}
			set
	        {
				base.Setbool(ColumnNames.Approved, value);
			}
		}

		public virtual bool IsFound
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsFound);
			}
			set
	        {
				base.Setbool(ColumnNames.IsFound, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_BornEventID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornEventID) ? string.Empty : base.GetGuidAsString(ColumnNames.BornEventID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornEventID);
				else
					this.BornEventID = base.SetGuidAsString(ColumnNames.BornEventID, value);
			}
		}

		public virtual string s_BornName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornName) ? string.Empty : base.GetstringAsString(ColumnNames.BornName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornName);
				else
					this.BornName = base.SetstringAsString(ColumnNames.BornName, value);
			}
		}

		public virtual string s_BornGender
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornGender) ? string.Empty : base.GetintAsString(ColumnNames.BornGender);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornGender);
				else
					this.BornGender = base.SetintAsString(ColumnNames.BornGender, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BirthDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthDate);
				else
					this.BirthDate = base.SetDateTimeAsString(ColumnNames.BirthDate, value);
			}
		}

		public virtual string s_BornGovernorate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornGovernorate) ? string.Empty : base.GetintAsString(ColumnNames.BornGovernorate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornGovernorate);
				else
					this.BornGovernorate = base.SetintAsString(ColumnNames.BornGovernorate, value);
			}
		}

		public virtual string s_BornSection
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornSection) ? string.Empty : base.GetintAsString(ColumnNames.BornSection);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornSection);
				else
					this.BornSection = base.SetintAsString(ColumnNames.BornSection, value);
			}
		}

		public virtual string s_BornArea
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornArea) ? string.Empty : base.GetintAsString(ColumnNames.BornArea);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornArea);
				else
					this.BornArea = base.SetintAsString(ColumnNames.BornArea, value);
			}
		}

		public virtual string s_FatherNID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherNID) ? string.Empty : base.GetstringAsString(ColumnNames.FatherNID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherNID);
				else
					this.FatherNID = base.SetstringAsString(ColumnNames.FatherNID, value);
			}
		}

		public virtual string s_FirstFatherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstFatherName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstFatherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstFatherName);
				else
					this.FirstFatherName = base.SetstringAsString(ColumnNames.FirstFatherName, value);
			}
		}

		public virtual string s_SecondFatherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecondFatherName) ? string.Empty : base.GetstringAsString(ColumnNames.SecondFatherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecondFatherName);
				else
					this.SecondFatherName = base.SetstringAsString(ColumnNames.SecondFatherName, value);
			}
		}

		public virtual string s_FamilyFatherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FamilyFatherName) ? string.Empty : base.GetstringAsString(ColumnNames.FamilyFatherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FamilyFatherName);
				else
					this.FamilyFatherName = base.SetstringAsString(ColumnNames.FamilyFatherName, value);
			}
		}

		public virtual string s_FatherSureName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherSureName) ? string.Empty : base.GetstringAsString(ColumnNames.FatherSureName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherSureName);
				else
					this.FatherSureName = base.SetstringAsString(ColumnNames.FatherSureName, value);
			}
		}

		public virtual string s_FatherNationality
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherNationality) ? string.Empty : base.GetintAsString(ColumnNames.FatherNationality);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherNationality);
				else
					this.FatherNationality = base.SetintAsString(ColumnNames.FatherNationality, value);
			}
		}

		public virtual string s_FatherReligion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherReligion) ? string.Empty : base.GetintAsString(ColumnNames.FatherReligion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherReligion);
				else
					this.FatherReligion = base.SetintAsString(ColumnNames.FatherReligion, value);
			}
		}

		public virtual string s_FatherProveNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherProveNo) ? string.Empty : base.GetstringAsString(ColumnNames.FatherProveNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherProveNo);
				else
					this.FatherProveNo = base.SetstringAsString(ColumnNames.FatherProveNo, value);
			}
		}

		public virtual string s_FatherProveType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherProveType) ? string.Empty : base.GetstringAsString(ColumnNames.FatherProveType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherProveType);
				else
					this.FatherProveType = base.SetstringAsString(ColumnNames.FatherProveType, value);
			}
		}

		public virtual string s_FatherJob
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherJob) ? string.Empty : base.GetstringAsString(ColumnNames.FatherJob);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherJob);
				else
					this.FatherJob = base.SetstringAsString(ColumnNames.FatherJob, value);
			}
		}

		public virtual string s_MotherNID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherNID) ? string.Empty : base.GetstringAsString(ColumnNames.MotherNID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherNID);
				else
					this.MotherNID = base.SetstringAsString(ColumnNames.MotherNID, value);
			}
		}

		public virtual string s_FirstMotherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstMotherName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstMotherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstMotherName);
				else
					this.FirstMotherName = base.SetstringAsString(ColumnNames.FirstMotherName, value);
			}
		}

		public virtual string s_SecondMotherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecondMotherName) ? string.Empty : base.GetstringAsString(ColumnNames.SecondMotherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecondMotherName);
				else
					this.SecondMotherName = base.SetstringAsString(ColumnNames.SecondMotherName, value);
			}
		}

		public virtual string s_FamilyMotherName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FamilyMotherName) ? string.Empty : base.GetstringAsString(ColumnNames.FamilyMotherName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FamilyMotherName);
				else
					this.FamilyMotherName = base.SetstringAsString(ColumnNames.FamilyMotherName, value);
			}
		}

		public virtual string s_MotherSureName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherSureName) ? string.Empty : base.GetstringAsString(ColumnNames.MotherSureName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherSureName);
				else
					this.MotherSureName = base.SetstringAsString(ColumnNames.MotherSureName, value);
			}
		}

		public virtual string s_MotherNationality
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherNationality) ? string.Empty : base.GetintAsString(ColumnNames.MotherNationality);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherNationality);
				else
					this.MotherNationality = base.SetintAsString(ColumnNames.MotherNationality, value);
			}
		}

		public virtual string s_MotherReligion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherReligion) ? string.Empty : base.GetintAsString(ColumnNames.MotherReligion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherReligion);
				else
					this.MotherReligion = base.SetintAsString(ColumnNames.MotherReligion, value);
			}
		}

		public virtual string s_MotherProveNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherProveNo) ? string.Empty : base.GetstringAsString(ColumnNames.MotherProveNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherProveNo);
				else
					this.MotherProveNo = base.SetstringAsString(ColumnNames.MotherProveNo, value);
			}
		}

		public virtual string s_MotherProveType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherProveType) ? string.Empty : base.GetstringAsString(ColumnNames.MotherProveType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherProveType);
				else
					this.MotherProveType = base.SetstringAsString(ColumnNames.MotherProveType, value);
			}
		}

		public virtual string s_MotherJob
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherJob) ? string.Empty : base.GetstringAsString(ColumnNames.MotherJob);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherJob);
				else
					this.MotherJob = base.SetstringAsString(ColumnNames.MotherJob, value);
			}
		}

		public virtual string s_InformerRelation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InformerRelation) ? string.Empty : base.GetintAsString(ColumnNames.InformerRelation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InformerRelation);
				else
					this.InformerRelation = base.SetintAsString(ColumnNames.InformerRelation, value);
			}
		}

		public virtual string s_InformerNID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InformerNID) ? string.Empty : base.GetstringAsString(ColumnNames.InformerNID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InformerNID);
				else
					this.InformerNID = base.SetstringAsString(ColumnNames.InformerNID, value);
			}
		}

		public virtual string s_InformerFirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InformerFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.InformerFirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InformerFirstName);
				else
					this.InformerFirstName = base.SetstringAsString(ColumnNames.InformerFirstName, value);
			}
		}

		public virtual string s_InformerSecondName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InformerSecondName) ? string.Empty : base.GetstringAsString(ColumnNames.InformerSecondName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InformerSecondName);
				else
					this.InformerSecondName = base.SetstringAsString(ColumnNames.InformerSecondName, value);
			}
		}

		public virtual string s_InformerPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InformerPhone) ? string.Empty : base.GetstringAsString(ColumnNames.InformerPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InformerPhone);
				else
					this.InformerPhone = base.SetstringAsString(ColumnNames.InformerPhone, value);
			}
		}

		public virtual string s_RegisterID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegisterID) ? string.Empty : base.GetGuidAsString(ColumnNames.RegisterID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegisterID);
				else
					this.RegisterID = base.SetGuidAsString(ColumnNames.RegisterID, value);
			}
		}

		public virtual string s_RegisterNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegisterNo) ? string.Empty : base.GetintAsString(ColumnNames.RegisterNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegisterNo);
				else
					this.RegisterNo = base.SetintAsString(ColumnNames.RegisterNo, value);
			}
		}

		public virtual string s_RegisterDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegisterDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RegisterDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegisterDate);
				else
					this.RegisterDate = base.SetDateTimeAsString(ColumnNames.RegisterDate, value);
			}
		}

		public virtual string s_BornDecisionNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornDecisionNo) ? string.Empty : base.GetstringAsString(ColumnNames.BornDecisionNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornDecisionNo);
				else
					this.BornDecisionNo = base.SetstringAsString(ColumnNames.BornDecisionNo, value);
			}
		}

		public virtual string s_BornDecisionDirection
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornDecisionDirection) ? string.Empty : base.GetstringAsString(ColumnNames.BornDecisionDirection);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornDecisionDirection);
				else
					this.BornDecisionDirection = base.SetstringAsString(ColumnNames.BornDecisionDirection, value);
			}
		}

		public virtual string s_BornDecisionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornDecisionDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BornDecisionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornDecisionDate);
				else
					this.BornDecisionDate = base.SetDateTimeAsString(ColumnNames.BornDecisionDate, value);
			}
		}

		public virtual string s_BornDecisionNotes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BornDecisionNotes) ? string.Empty : base.GetstringAsString(ColumnNames.BornDecisionNotes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BornDecisionNotes);
				else
					this.BornDecisionNotes = base.SetstringAsString(ColumnNames.BornDecisionNotes, value);
			}
		}

		public virtual string s_OrgID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrgID) ? string.Empty : base.GetintAsString(ColumnNames.OrgID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrgID);
				else
					this.OrgID = base.SetintAsString(ColumnNames.OrgID, value);
			}
		}

		public virtual string s_Approved
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Approved) ? string.Empty : base.GetboolAsString(ColumnNames.Approved);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Approved);
				else
					this.Approved = base.SetboolAsString(ColumnNames.Approved, value);
			}
		}

		public virtual string s_IsFound
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsFound) ? string.Empty : base.GetboolAsString(ColumnNames.IsFound);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsFound);
				else
					this.IsFound = base.SetboolAsString(ColumnNames.IsFound, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter BornEventID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornEventID, Parameters.BornEventID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornName, Parameters.BornName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornGender
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornGender, Parameters.BornGender);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornGovernorate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornGovernorate, Parameters.BornGovernorate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornSection
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornSection, Parameters.BornSection);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornArea
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornArea, Parameters.BornArea);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherNID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherNID, Parameters.FatherNID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstFatherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstFatherName, Parameters.FirstFatherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecondFatherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecondFatherName, Parameters.SecondFatherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FamilyFatherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FamilyFatherName, Parameters.FamilyFatherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherSureName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherSureName, Parameters.FatherSureName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherNationality
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherNationality, Parameters.FatherNationality);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherReligion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherReligion, Parameters.FatherReligion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherProveNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherProveNo, Parameters.FatherProveNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherProveType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherProveType, Parameters.FatherProveType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherJob
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherJob, Parameters.FatherJob);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherNID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherNID, Parameters.MotherNID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstMotherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstMotherName, Parameters.FirstMotherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecondMotherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecondMotherName, Parameters.SecondMotherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FamilyMotherName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FamilyMotherName, Parameters.FamilyMotherName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherSureName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherSureName, Parameters.MotherSureName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherNationality
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherNationality, Parameters.MotherNationality);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherReligion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherReligion, Parameters.MotherReligion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherProveNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherProveNo, Parameters.MotherProveNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherProveType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherProveType, Parameters.MotherProveType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherJob
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherJob, Parameters.MotherJob);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InformerRelation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InformerRelation, Parameters.InformerRelation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InformerNID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InformerNID, Parameters.InformerNID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InformerFirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InformerFirstName, Parameters.InformerFirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InformerSecondName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InformerSecondName, Parameters.InformerSecondName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InformerPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InformerPhone, Parameters.InformerPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegisterID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegisterID, Parameters.RegisterID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegisterNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegisterNo, Parameters.RegisterNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegisterDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegisterDate, Parameters.RegisterDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornDecisionNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornDecisionNo, Parameters.BornDecisionNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornDecisionDirection
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornDecisionDirection, Parameters.BornDecisionDirection);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornDecisionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornDecisionDate, Parameters.BornDecisionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BornDecisionNotes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BornDecisionNotes, Parameters.BornDecisionNotes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrgID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrgID, Parameters.OrgID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Approved
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Approved, Parameters.Approved);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsFound
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsFound, Parameters.IsFound);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter BornEventID
		    {
				get
		        {
					if(_BornEventID_W == null)
	        	    {
						_BornEventID_W = TearOff.BornEventID;
					}
					return _BornEventID_W;
				}
			}

			public WhereParameter BornName
		    {
				get
		        {
					if(_BornName_W == null)
	        	    {
						_BornName_W = TearOff.BornName;
					}
					return _BornName_W;
				}
			}

			public WhereParameter BornGender
		    {
				get
		        {
					if(_BornGender_W == null)
	        	    {
						_BornGender_W = TearOff.BornGender;
					}
					return _BornGender_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter BornGovernorate
		    {
				get
		        {
					if(_BornGovernorate_W == null)
	        	    {
						_BornGovernorate_W = TearOff.BornGovernorate;
					}
					return _BornGovernorate_W;
				}
			}

			public WhereParameter BornSection
		    {
				get
		        {
					if(_BornSection_W == null)
	        	    {
						_BornSection_W = TearOff.BornSection;
					}
					return _BornSection_W;
				}
			}

			public WhereParameter BornArea
		    {
				get
		        {
					if(_BornArea_W == null)
	        	    {
						_BornArea_W = TearOff.BornArea;
					}
					return _BornArea_W;
				}
			}

			public WhereParameter FatherNID
		    {
				get
		        {
					if(_FatherNID_W == null)
	        	    {
						_FatherNID_W = TearOff.FatherNID;
					}
					return _FatherNID_W;
				}
			}

			public WhereParameter FirstFatherName
		    {
				get
		        {
					if(_FirstFatherName_W == null)
	        	    {
						_FirstFatherName_W = TearOff.FirstFatherName;
					}
					return _FirstFatherName_W;
				}
			}

			public WhereParameter SecondFatherName
		    {
				get
		        {
					if(_SecondFatherName_W == null)
	        	    {
						_SecondFatherName_W = TearOff.SecondFatherName;
					}
					return _SecondFatherName_W;
				}
			}

			public WhereParameter FamilyFatherName
		    {
				get
		        {
					if(_FamilyFatherName_W == null)
	        	    {
						_FamilyFatherName_W = TearOff.FamilyFatherName;
					}
					return _FamilyFatherName_W;
				}
			}

			public WhereParameter FatherSureName
		    {
				get
		        {
					if(_FatherSureName_W == null)
	        	    {
						_FatherSureName_W = TearOff.FatherSureName;
					}
					return _FatherSureName_W;
				}
			}

			public WhereParameter FatherNationality
		    {
				get
		        {
					if(_FatherNationality_W == null)
	        	    {
						_FatherNationality_W = TearOff.FatherNationality;
					}
					return _FatherNationality_W;
				}
			}

			public WhereParameter FatherReligion
		    {
				get
		        {
					if(_FatherReligion_W == null)
	        	    {
						_FatherReligion_W = TearOff.FatherReligion;
					}
					return _FatherReligion_W;
				}
			}

			public WhereParameter FatherProveNo
		    {
				get
		        {
					if(_FatherProveNo_W == null)
	        	    {
						_FatherProveNo_W = TearOff.FatherProveNo;
					}
					return _FatherProveNo_W;
				}
			}

			public WhereParameter FatherProveType
		    {
				get
		        {
					if(_FatherProveType_W == null)
	        	    {
						_FatherProveType_W = TearOff.FatherProveType;
					}
					return _FatherProveType_W;
				}
			}

			public WhereParameter FatherJob
		    {
				get
		        {
					if(_FatherJob_W == null)
	        	    {
						_FatherJob_W = TearOff.FatherJob;
					}
					return _FatherJob_W;
				}
			}

			public WhereParameter MotherNID
		    {
				get
		        {
					if(_MotherNID_W == null)
	        	    {
						_MotherNID_W = TearOff.MotherNID;
					}
					return _MotherNID_W;
				}
			}

			public WhereParameter FirstMotherName
		    {
				get
		        {
					if(_FirstMotherName_W == null)
	        	    {
						_FirstMotherName_W = TearOff.FirstMotherName;
					}
					return _FirstMotherName_W;
				}
			}

			public WhereParameter SecondMotherName
		    {
				get
		        {
					if(_SecondMotherName_W == null)
	        	    {
						_SecondMotherName_W = TearOff.SecondMotherName;
					}
					return _SecondMotherName_W;
				}
			}

			public WhereParameter FamilyMotherName
		    {
				get
		        {
					if(_FamilyMotherName_W == null)
	        	    {
						_FamilyMotherName_W = TearOff.FamilyMotherName;
					}
					return _FamilyMotherName_W;
				}
			}

			public WhereParameter MotherSureName
		    {
				get
		        {
					if(_MotherSureName_W == null)
	        	    {
						_MotherSureName_W = TearOff.MotherSureName;
					}
					return _MotherSureName_W;
				}
			}

			public WhereParameter MotherNationality
		    {
				get
		        {
					if(_MotherNationality_W == null)
	        	    {
						_MotherNationality_W = TearOff.MotherNationality;
					}
					return _MotherNationality_W;
				}
			}

			public WhereParameter MotherReligion
		    {
				get
		        {
					if(_MotherReligion_W == null)
	        	    {
						_MotherReligion_W = TearOff.MotherReligion;
					}
					return _MotherReligion_W;
				}
			}

			public WhereParameter MotherProveNo
		    {
				get
		        {
					if(_MotherProveNo_W == null)
	        	    {
						_MotherProveNo_W = TearOff.MotherProveNo;
					}
					return _MotherProveNo_W;
				}
			}

			public WhereParameter MotherProveType
		    {
				get
		        {
					if(_MotherProveType_W == null)
	        	    {
						_MotherProveType_W = TearOff.MotherProveType;
					}
					return _MotherProveType_W;
				}
			}

			public WhereParameter MotherJob
		    {
				get
		        {
					if(_MotherJob_W == null)
	        	    {
						_MotherJob_W = TearOff.MotherJob;
					}
					return _MotherJob_W;
				}
			}

			public WhereParameter InformerRelation
		    {
				get
		        {
					if(_InformerRelation_W == null)
	        	    {
						_InformerRelation_W = TearOff.InformerRelation;
					}
					return _InformerRelation_W;
				}
			}

			public WhereParameter InformerNID
		    {
				get
		        {
					if(_InformerNID_W == null)
	        	    {
						_InformerNID_W = TearOff.InformerNID;
					}
					return _InformerNID_W;
				}
			}

			public WhereParameter InformerFirstName
		    {
				get
		        {
					if(_InformerFirstName_W == null)
	        	    {
						_InformerFirstName_W = TearOff.InformerFirstName;
					}
					return _InformerFirstName_W;
				}
			}

			public WhereParameter InformerSecondName
		    {
				get
		        {
					if(_InformerSecondName_W == null)
	        	    {
						_InformerSecondName_W = TearOff.InformerSecondName;
					}
					return _InformerSecondName_W;
				}
			}

			public WhereParameter InformerPhone
		    {
				get
		        {
					if(_InformerPhone_W == null)
	        	    {
						_InformerPhone_W = TearOff.InformerPhone;
					}
					return _InformerPhone_W;
				}
			}

			public WhereParameter RegisterID
		    {
				get
		        {
					if(_RegisterID_W == null)
	        	    {
						_RegisterID_W = TearOff.RegisterID;
					}
					return _RegisterID_W;
				}
			}

			public WhereParameter RegisterNo
		    {
				get
		        {
					if(_RegisterNo_W == null)
	        	    {
						_RegisterNo_W = TearOff.RegisterNo;
					}
					return _RegisterNo_W;
				}
			}

			public WhereParameter RegisterDate
		    {
				get
		        {
					if(_RegisterDate_W == null)
	        	    {
						_RegisterDate_W = TearOff.RegisterDate;
					}
					return _RegisterDate_W;
				}
			}

			public WhereParameter BornDecisionNo
		    {
				get
		        {
					if(_BornDecisionNo_W == null)
	        	    {
						_BornDecisionNo_W = TearOff.BornDecisionNo;
					}
					return _BornDecisionNo_W;
				}
			}

			public WhereParameter BornDecisionDirection
		    {
				get
		        {
					if(_BornDecisionDirection_W == null)
	        	    {
						_BornDecisionDirection_W = TearOff.BornDecisionDirection;
					}
					return _BornDecisionDirection_W;
				}
			}

			public WhereParameter BornDecisionDate
		    {
				get
		        {
					if(_BornDecisionDate_W == null)
	        	    {
						_BornDecisionDate_W = TearOff.BornDecisionDate;
					}
					return _BornDecisionDate_W;
				}
			}

			public WhereParameter BornDecisionNotes
		    {
				get
		        {
					if(_BornDecisionNotes_W == null)
	        	    {
						_BornDecisionNotes_W = TearOff.BornDecisionNotes;
					}
					return _BornDecisionNotes_W;
				}
			}

			public WhereParameter OrgID
		    {
				get
		        {
					if(_OrgID_W == null)
	        	    {
						_OrgID_W = TearOff.OrgID;
					}
					return _OrgID_W;
				}
			}

			public WhereParameter Approved
		    {
				get
		        {
					if(_Approved_W == null)
	        	    {
						_Approved_W = TearOff.Approved;
					}
					return _Approved_W;
				}
			}

			public WhereParameter IsFound
		    {
				get
		        {
					if(_IsFound_W == null)
	        	    {
						_IsFound_W = TearOff.IsFound;
					}
					return _IsFound_W;
				}
			}

			private WhereParameter _BornEventID_W = null;
			private WhereParameter _BornName_W = null;
			private WhereParameter _BornGender_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _BornGovernorate_W = null;
			private WhereParameter _BornSection_W = null;
			private WhereParameter _BornArea_W = null;
			private WhereParameter _FatherNID_W = null;
			private WhereParameter _FirstFatherName_W = null;
			private WhereParameter _SecondFatherName_W = null;
			private WhereParameter _FamilyFatherName_W = null;
			private WhereParameter _FatherSureName_W = null;
			private WhereParameter _FatherNationality_W = null;
			private WhereParameter _FatherReligion_W = null;
			private WhereParameter _FatherProveNo_W = null;
			private WhereParameter _FatherProveType_W = null;
			private WhereParameter _FatherJob_W = null;
			private WhereParameter _MotherNID_W = null;
			private WhereParameter _FirstMotherName_W = null;
			private WhereParameter _SecondMotherName_W = null;
			private WhereParameter _FamilyMotherName_W = null;
			private WhereParameter _MotherSureName_W = null;
			private WhereParameter _MotherNationality_W = null;
			private WhereParameter _MotherReligion_W = null;
			private WhereParameter _MotherProveNo_W = null;
			private WhereParameter _MotherProveType_W = null;
			private WhereParameter _MotherJob_W = null;
			private WhereParameter _InformerRelation_W = null;
			private WhereParameter _InformerNID_W = null;
			private WhereParameter _InformerFirstName_W = null;
			private WhereParameter _InformerSecondName_W = null;
			private WhereParameter _InformerPhone_W = null;
			private WhereParameter _RegisterID_W = null;
			private WhereParameter _RegisterNo_W = null;
			private WhereParameter _RegisterDate_W = null;
			private WhereParameter _BornDecisionNo_W = null;
			private WhereParameter _BornDecisionDirection_W = null;
			private WhereParameter _BornDecisionDate_W = null;
			private WhereParameter _BornDecisionNotes_W = null;
			private WhereParameter _OrgID_W = null;
			private WhereParameter _Approved_W = null;
			private WhereParameter _IsFound_W = null;

			public void WhereClauseReset()
			{
				_BornEventID_W = null;
				_BornName_W = null;
				_BornGender_W = null;
				_BirthDate_W = null;
				_BornGovernorate_W = null;
				_BornSection_W = null;
				_BornArea_W = null;
				_FatherNID_W = null;
				_FirstFatherName_W = null;
				_SecondFatherName_W = null;
				_FamilyFatherName_W = null;
				_FatherSureName_W = null;
				_FatherNationality_W = null;
				_FatherReligion_W = null;
				_FatherProveNo_W = null;
				_FatherProveType_W = null;
				_FatherJob_W = null;
				_MotherNID_W = null;
				_FirstMotherName_W = null;
				_SecondMotherName_W = null;
				_FamilyMotherName_W = null;
				_MotherSureName_W = null;
				_MotherNationality_W = null;
				_MotherReligion_W = null;
				_MotherProveNo_W = null;
				_MotherProveType_W = null;
				_MotherJob_W = null;
				_InformerRelation_W = null;
				_InformerNID_W = null;
				_InformerFirstName_W = null;
				_InformerSecondName_W = null;
				_InformerPhone_W = null;
				_RegisterID_W = null;
				_RegisterNo_W = null;
				_RegisterDate_W = null;
				_BornDecisionNo_W = null;
				_BornDecisionDirection_W = null;
				_BornDecisionDate_W = null;
				_BornDecisionNotes_W = null;
				_OrgID_W = null;
				_Approved_W = null;
				_IsFound_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter BornEventID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornEventID, Parameters.BornEventID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornName, Parameters.BornName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornGender
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornGender, Parameters.BornGender);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornGovernorate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornGovernorate, Parameters.BornGovernorate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornSection
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornSection, Parameters.BornSection);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornArea
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornArea, Parameters.BornArea);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherNID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherNID, Parameters.FatherNID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstFatherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstFatherName, Parameters.FirstFatherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecondFatherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecondFatherName, Parameters.SecondFatherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FamilyFatherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FamilyFatherName, Parameters.FamilyFatherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherSureName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherSureName, Parameters.FatherSureName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherNationality
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherNationality, Parameters.FatherNationality);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherReligion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherReligion, Parameters.FatherReligion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherProveNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherProveNo, Parameters.FatherProveNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherProveType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherProveType, Parameters.FatherProveType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherJob
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherJob, Parameters.FatherJob);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherNID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherNID, Parameters.MotherNID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstMotherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstMotherName, Parameters.FirstMotherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecondMotherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecondMotherName, Parameters.SecondMotherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FamilyMotherName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FamilyMotherName, Parameters.FamilyMotherName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherSureName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherSureName, Parameters.MotherSureName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherNationality
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherNationality, Parameters.MotherNationality);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherReligion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherReligion, Parameters.MotherReligion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherProveNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherProveNo, Parameters.MotherProveNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherProveType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherProveType, Parameters.MotherProveType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherJob
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherJob, Parameters.MotherJob);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InformerRelation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InformerRelation, Parameters.InformerRelation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InformerNID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InformerNID, Parameters.InformerNID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InformerFirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InformerFirstName, Parameters.InformerFirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InformerSecondName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InformerSecondName, Parameters.InformerSecondName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InformerPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InformerPhone, Parameters.InformerPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegisterID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegisterID, Parameters.RegisterID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegisterNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegisterNo, Parameters.RegisterNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegisterDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegisterDate, Parameters.RegisterDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornDecisionNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornDecisionNo, Parameters.BornDecisionNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornDecisionDirection
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornDecisionDirection, Parameters.BornDecisionDirection);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornDecisionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornDecisionDate, Parameters.BornDecisionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BornDecisionNotes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BornDecisionNotes, Parameters.BornDecisionNotes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrgID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrgID, Parameters.OrgID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Approved
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Approved, Parameters.Approved);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsFound
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsFound, Parameters.IsFound);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter BornEventID
		    {
				get
		        {
					if(_BornEventID_W == null)
	        	    {
						_BornEventID_W = TearOff.BornEventID;
					}
					return _BornEventID_W;
				}
			}

			public AggregateParameter BornName
		    {
				get
		        {
					if(_BornName_W == null)
	        	    {
						_BornName_W = TearOff.BornName;
					}
					return _BornName_W;
				}
			}

			public AggregateParameter BornGender
		    {
				get
		        {
					if(_BornGender_W == null)
	        	    {
						_BornGender_W = TearOff.BornGender;
					}
					return _BornGender_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter BornGovernorate
		    {
				get
		        {
					if(_BornGovernorate_W == null)
	        	    {
						_BornGovernorate_W = TearOff.BornGovernorate;
					}
					return _BornGovernorate_W;
				}
			}

			public AggregateParameter BornSection
		    {
				get
		        {
					if(_BornSection_W == null)
	        	    {
						_BornSection_W = TearOff.BornSection;
					}
					return _BornSection_W;
				}
			}

			public AggregateParameter BornArea
		    {
				get
		        {
					if(_BornArea_W == null)
	        	    {
						_BornArea_W = TearOff.BornArea;
					}
					return _BornArea_W;
				}
			}

			public AggregateParameter FatherNID
		    {
				get
		        {
					if(_FatherNID_W == null)
	        	    {
						_FatherNID_W = TearOff.FatherNID;
					}
					return _FatherNID_W;
				}
			}

			public AggregateParameter FirstFatherName
		    {
				get
		        {
					if(_FirstFatherName_W == null)
	        	    {
						_FirstFatherName_W = TearOff.FirstFatherName;
					}
					return _FirstFatherName_W;
				}
			}

			public AggregateParameter SecondFatherName
		    {
				get
		        {
					if(_SecondFatherName_W == null)
	        	    {
						_SecondFatherName_W = TearOff.SecondFatherName;
					}
					return _SecondFatherName_W;
				}
			}

			public AggregateParameter FamilyFatherName
		    {
				get
		        {
					if(_FamilyFatherName_W == null)
	        	    {
						_FamilyFatherName_W = TearOff.FamilyFatherName;
					}
					return _FamilyFatherName_W;
				}
			}

			public AggregateParameter FatherSureName
		    {
				get
		        {
					if(_FatherSureName_W == null)
	        	    {
						_FatherSureName_W = TearOff.FatherSureName;
					}
					return _FatherSureName_W;
				}
			}

			public AggregateParameter FatherNationality
		    {
				get
		        {
					if(_FatherNationality_W == null)
	        	    {
						_FatherNationality_W = TearOff.FatherNationality;
					}
					return _FatherNationality_W;
				}
			}

			public AggregateParameter FatherReligion
		    {
				get
		        {
					if(_FatherReligion_W == null)
	        	    {
						_FatherReligion_W = TearOff.FatherReligion;
					}
					return _FatherReligion_W;
				}
			}

			public AggregateParameter FatherProveNo
		    {
				get
		        {
					if(_FatherProveNo_W == null)
	        	    {
						_FatherProveNo_W = TearOff.FatherProveNo;
					}
					return _FatherProveNo_W;
				}
			}

			public AggregateParameter FatherProveType
		    {
				get
		        {
					if(_FatherProveType_W == null)
	        	    {
						_FatherProveType_W = TearOff.FatherProveType;
					}
					return _FatherProveType_W;
				}
			}

			public AggregateParameter FatherJob
		    {
				get
		        {
					if(_FatherJob_W == null)
	        	    {
						_FatherJob_W = TearOff.FatherJob;
					}
					return _FatherJob_W;
				}
			}

			public AggregateParameter MotherNID
		    {
				get
		        {
					if(_MotherNID_W == null)
	        	    {
						_MotherNID_W = TearOff.MotherNID;
					}
					return _MotherNID_W;
				}
			}

			public AggregateParameter FirstMotherName
		    {
				get
		        {
					if(_FirstMotherName_W == null)
	        	    {
						_FirstMotherName_W = TearOff.FirstMotherName;
					}
					return _FirstMotherName_W;
				}
			}

			public AggregateParameter SecondMotherName
		    {
				get
		        {
					if(_SecondMotherName_W == null)
	        	    {
						_SecondMotherName_W = TearOff.SecondMotherName;
					}
					return _SecondMotherName_W;
				}
			}

			public AggregateParameter FamilyMotherName
		    {
				get
		        {
					if(_FamilyMotherName_W == null)
	        	    {
						_FamilyMotherName_W = TearOff.FamilyMotherName;
					}
					return _FamilyMotherName_W;
				}
			}

			public AggregateParameter MotherSureName
		    {
				get
		        {
					if(_MotherSureName_W == null)
	        	    {
						_MotherSureName_W = TearOff.MotherSureName;
					}
					return _MotherSureName_W;
				}
			}

			public AggregateParameter MotherNationality
		    {
				get
		        {
					if(_MotherNationality_W == null)
	        	    {
						_MotherNationality_W = TearOff.MotherNationality;
					}
					return _MotherNationality_W;
				}
			}

			public AggregateParameter MotherReligion
		    {
				get
		        {
					if(_MotherReligion_W == null)
	        	    {
						_MotherReligion_W = TearOff.MotherReligion;
					}
					return _MotherReligion_W;
				}
			}

			public AggregateParameter MotherProveNo
		    {
				get
		        {
					if(_MotherProveNo_W == null)
	        	    {
						_MotherProveNo_W = TearOff.MotherProveNo;
					}
					return _MotherProveNo_W;
				}
			}

			public AggregateParameter MotherProveType
		    {
				get
		        {
					if(_MotherProveType_W == null)
	        	    {
						_MotherProveType_W = TearOff.MotherProveType;
					}
					return _MotherProveType_W;
				}
			}

			public AggregateParameter MotherJob
		    {
				get
		        {
					if(_MotherJob_W == null)
	        	    {
						_MotherJob_W = TearOff.MotherJob;
					}
					return _MotherJob_W;
				}
			}

			public AggregateParameter InformerRelation
		    {
				get
		        {
					if(_InformerRelation_W == null)
	        	    {
						_InformerRelation_W = TearOff.InformerRelation;
					}
					return _InformerRelation_W;
				}
			}

			public AggregateParameter InformerNID
		    {
				get
		        {
					if(_InformerNID_W == null)
	        	    {
						_InformerNID_W = TearOff.InformerNID;
					}
					return _InformerNID_W;
				}
			}

			public AggregateParameter InformerFirstName
		    {
				get
		        {
					if(_InformerFirstName_W == null)
	        	    {
						_InformerFirstName_W = TearOff.InformerFirstName;
					}
					return _InformerFirstName_W;
				}
			}

			public AggregateParameter InformerSecondName
		    {
				get
		        {
					if(_InformerSecondName_W == null)
	        	    {
						_InformerSecondName_W = TearOff.InformerSecondName;
					}
					return _InformerSecondName_W;
				}
			}

			public AggregateParameter InformerPhone
		    {
				get
		        {
					if(_InformerPhone_W == null)
	        	    {
						_InformerPhone_W = TearOff.InformerPhone;
					}
					return _InformerPhone_W;
				}
			}

			public AggregateParameter RegisterID
		    {
				get
		        {
					if(_RegisterID_W == null)
	        	    {
						_RegisterID_W = TearOff.RegisterID;
					}
					return _RegisterID_W;
				}
			}

			public AggregateParameter RegisterNo
		    {
				get
		        {
					if(_RegisterNo_W == null)
	        	    {
						_RegisterNo_W = TearOff.RegisterNo;
					}
					return _RegisterNo_W;
				}
			}

			public AggregateParameter RegisterDate
		    {
				get
		        {
					if(_RegisterDate_W == null)
	        	    {
						_RegisterDate_W = TearOff.RegisterDate;
					}
					return _RegisterDate_W;
				}
			}

			public AggregateParameter BornDecisionNo
		    {
				get
		        {
					if(_BornDecisionNo_W == null)
	        	    {
						_BornDecisionNo_W = TearOff.BornDecisionNo;
					}
					return _BornDecisionNo_W;
				}
			}

			public AggregateParameter BornDecisionDirection
		    {
				get
		        {
					if(_BornDecisionDirection_W == null)
	        	    {
						_BornDecisionDirection_W = TearOff.BornDecisionDirection;
					}
					return _BornDecisionDirection_W;
				}
			}

			public AggregateParameter BornDecisionDate
		    {
				get
		        {
					if(_BornDecisionDate_W == null)
	        	    {
						_BornDecisionDate_W = TearOff.BornDecisionDate;
					}
					return _BornDecisionDate_W;
				}
			}

			public AggregateParameter BornDecisionNotes
		    {
				get
		        {
					if(_BornDecisionNotes_W == null)
	        	    {
						_BornDecisionNotes_W = TearOff.BornDecisionNotes;
					}
					return _BornDecisionNotes_W;
				}
			}

			public AggregateParameter OrgID
		    {
				get
		        {
					if(_OrgID_W == null)
	        	    {
						_OrgID_W = TearOff.OrgID;
					}
					return _OrgID_W;
				}
			}

			public AggregateParameter Approved
		    {
				get
		        {
					if(_Approved_W == null)
	        	    {
						_Approved_W = TearOff.Approved;
					}
					return _Approved_W;
				}
			}

			public AggregateParameter IsFound
		    {
				get
		        {
					if(_IsFound_W == null)
	        	    {
						_IsFound_W = TearOff.IsFound;
					}
					return _IsFound_W;
				}
			}

			private AggregateParameter _BornEventID_W = null;
			private AggregateParameter _BornName_W = null;
			private AggregateParameter _BornGender_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _BornGovernorate_W = null;
			private AggregateParameter _BornSection_W = null;
			private AggregateParameter _BornArea_W = null;
			private AggregateParameter _FatherNID_W = null;
			private AggregateParameter _FirstFatherName_W = null;
			private AggregateParameter _SecondFatherName_W = null;
			private AggregateParameter _FamilyFatherName_W = null;
			private AggregateParameter _FatherSureName_W = null;
			private AggregateParameter _FatherNationality_W = null;
			private AggregateParameter _FatherReligion_W = null;
			private AggregateParameter _FatherProveNo_W = null;
			private AggregateParameter _FatherProveType_W = null;
			private AggregateParameter _FatherJob_W = null;
			private AggregateParameter _MotherNID_W = null;
			private AggregateParameter _FirstMotherName_W = null;
			private AggregateParameter _SecondMotherName_W = null;
			private AggregateParameter _FamilyMotherName_W = null;
			private AggregateParameter _MotherSureName_W = null;
			private AggregateParameter _MotherNationality_W = null;
			private AggregateParameter _MotherReligion_W = null;
			private AggregateParameter _MotherProveNo_W = null;
			private AggregateParameter _MotherProveType_W = null;
			private AggregateParameter _MotherJob_W = null;
			private AggregateParameter _InformerRelation_W = null;
			private AggregateParameter _InformerNID_W = null;
			private AggregateParameter _InformerFirstName_W = null;
			private AggregateParameter _InformerSecondName_W = null;
			private AggregateParameter _InformerPhone_W = null;
			private AggregateParameter _RegisterID_W = null;
			private AggregateParameter _RegisterNo_W = null;
			private AggregateParameter _RegisterDate_W = null;
			private AggregateParameter _BornDecisionNo_W = null;
			private AggregateParameter _BornDecisionDirection_W = null;
			private AggregateParameter _BornDecisionDate_W = null;
			private AggregateParameter _BornDecisionNotes_W = null;
			private AggregateParameter _OrgID_W = null;
			private AggregateParameter _Approved_W = null;
			private AggregateParameter _IsFound_W = null;

			public void AggregateClauseReset()
			{
				_BornEventID_W = null;
				_BornName_W = null;
				_BornGender_W = null;
				_BirthDate_W = null;
				_BornGovernorate_W = null;
				_BornSection_W = null;
				_BornArea_W = null;
				_FatherNID_W = null;
				_FirstFatherName_W = null;
				_SecondFatherName_W = null;
				_FamilyFatherName_W = null;
				_FatherSureName_W = null;
				_FatherNationality_W = null;
				_FatherReligion_W = null;
				_FatherProveNo_W = null;
				_FatherProveType_W = null;
				_FatherJob_W = null;
				_MotherNID_W = null;
				_FirstMotherName_W = null;
				_SecondMotherName_W = null;
				_FamilyMotherName_W = null;
				_MotherSureName_W = null;
				_MotherNationality_W = null;
				_MotherReligion_W = null;
				_MotherProveNo_W = null;
				_MotherProveType_W = null;
				_MotherJob_W = null;
				_InformerRelation_W = null;
				_InformerNID_W = null;
				_InformerFirstName_W = null;
				_InformerSecondName_W = null;
				_InformerPhone_W = null;
				_RegisterID_W = null;
				_RegisterNo_W = null;
				_RegisterDate_W = null;
				_BornDecisionNo_W = null;
				_BornDecisionDirection_W = null;
				_BornDecisionDate_W = null;
				_BornDecisionNotes_W = null;
				_OrgID_W = null;
				_Approved_W = null;
				_IsFound_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BornDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.BornEventID);
			p.SourceColumn = ColumnNames.BornEventID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.BornEventID);
			p.SourceColumn = ColumnNames.BornEventID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornName);
			p.SourceColumn = ColumnNames.BornName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornGender);
			p.SourceColumn = ColumnNames.BornGender;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthDate);
			p.SourceColumn = ColumnNames.BirthDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornGovernorate);
			p.SourceColumn = ColumnNames.BornGovernorate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornSection);
			p.SourceColumn = ColumnNames.BornSection;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornArea);
			p.SourceColumn = ColumnNames.BornArea;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherNID);
			p.SourceColumn = ColumnNames.FatherNID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstFatherName);
			p.SourceColumn = ColumnNames.FirstFatherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecondFatherName);
			p.SourceColumn = ColumnNames.SecondFatherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FamilyFatherName);
			p.SourceColumn = ColumnNames.FamilyFatherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherSureName);
			p.SourceColumn = ColumnNames.FatherSureName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherNationality);
			p.SourceColumn = ColumnNames.FatherNationality;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherReligion);
			p.SourceColumn = ColumnNames.FatherReligion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherProveNo);
			p.SourceColumn = ColumnNames.FatherProveNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherProveType);
			p.SourceColumn = ColumnNames.FatherProveType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherJob);
			p.SourceColumn = ColumnNames.FatherJob;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherNID);
			p.SourceColumn = ColumnNames.MotherNID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstMotherName);
			p.SourceColumn = ColumnNames.FirstMotherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecondMotherName);
			p.SourceColumn = ColumnNames.SecondMotherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FamilyMotherName);
			p.SourceColumn = ColumnNames.FamilyMotherName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherSureName);
			p.SourceColumn = ColumnNames.MotherSureName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherNationality);
			p.SourceColumn = ColumnNames.MotherNationality;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherReligion);
			p.SourceColumn = ColumnNames.MotherReligion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherProveNo);
			p.SourceColumn = ColumnNames.MotherProveNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherProveType);
			p.SourceColumn = ColumnNames.MotherProveType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherJob);
			p.SourceColumn = ColumnNames.MotherJob;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InformerRelation);
			p.SourceColumn = ColumnNames.InformerRelation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InformerNID);
			p.SourceColumn = ColumnNames.InformerNID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InformerFirstName);
			p.SourceColumn = ColumnNames.InformerFirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InformerSecondName);
			p.SourceColumn = ColumnNames.InformerSecondName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InformerPhone);
			p.SourceColumn = ColumnNames.InformerPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegisterID);
			p.SourceColumn = ColumnNames.RegisterID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegisterNo);
			p.SourceColumn = ColumnNames.RegisterNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegisterDate);
			p.SourceColumn = ColumnNames.RegisterDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornDecisionNo);
			p.SourceColumn = ColumnNames.BornDecisionNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornDecisionDirection);
			p.SourceColumn = ColumnNames.BornDecisionDirection;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornDecisionDate);
			p.SourceColumn = ColumnNames.BornDecisionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BornDecisionNotes);
			p.SourceColumn = ColumnNames.BornDecisionNotes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrgID);
			p.SourceColumn = ColumnNames.OrgID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Approved);
			p.SourceColumn = ColumnNames.Approved;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsFound);
			p.SourceColumn = ColumnNames.IsFound;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
