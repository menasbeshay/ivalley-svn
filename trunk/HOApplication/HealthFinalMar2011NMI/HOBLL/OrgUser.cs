
// Generated by MyGeneration Version # (1.2.0.7)

using System;
using MHO.DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Specialized;

namespace MHO.BLL
{
	public class OrgUser : _OrgUser
	{
		public OrgUser()
		{
		
		}
        public void DeleteUser(Guid userId)
        {
            LoadByPrimaryKey(userId);
            DeleteAll();
            Save();
        }
        public DataTable GetUserDetails(Guid roleId, int govId, int civilId, int healthOfficeId,string userNationalID)
        {
            SqlDataReader searchResult = null;
            ListDictionary parm = new ListDictionary();
            parm.Add("@RoleId", roleId);
            if (govId != -1)
                parm.Add("@GovId", govId);
            if (civilId != -1)
                parm.Add("@CivilId", civilId);
            if (healthOfficeId != -1)
                parm.Add("@HealthOfficeId", healthOfficeId);
            if (userNationalID != "")
                parm.Add("@UserNationalID", userNationalID);

            searchResult = LoadFromSqlReader("GetUserDetails", parm) as SqlDataReader;
            DataTable ResultTable = new DataTable();
            newAdapter da = new newAdapter();
            if (searchResult != null && searchResult.HasRows)
            {
                da.FillFromReader(ResultTable, searchResult);
            }

            return ResultTable;
        }
        public void Insert(Guid userId, string firstName, string fatherName, string nationalId,
            int govId, int civilId, int healthOfficeId, string phoneNumber, string qualificationInfo,bool status)
        {
            AddNew();
            UserId = userId;
            FirstName = firstName;
            FatherName = fatherName;
            NationalId = nationalId;
            if(govId!=-1)
            GovId = govId;
            else
            SetColumnNull("GovId");
            if(civilId!=-1)
            CivilId = (short)civilId;
            else
            SetColumnNull("CivilId");
            if(healthOfficeId!=-1)
            HealthOfficeId = healthOfficeId;
            else
            SetColumnNull("HealthOfficeId");
            PhoneNumber = phoneNumber;
            QualificationInfo = qualificationInfo;
            Status = status;
                Save();
        }
        public void Update(Guid userId, string firstName, string fatherName, string nationalId,
          int govId, int civilId, int healthOfficeId, string phoneNumber, string qualificationInfo, bool status)
        {
            LoadByPrimaryKey(userId);
            
            FirstName = firstName;
            FatherName = fatherName;
            NationalId = nationalId;
            if (govId != -1)
                GovId = govId;
            else
                SetColumnNull("GovId");
            if (civilId != -1)
                CivilId = (short)civilId;
            else
                SetColumnNull("CivilId");
            if (healthOfficeId != -1)
                HealthOfficeId = healthOfficeId;
            else
                SetColumnNull("HealthOfficeId");
            PhoneNumber = phoneNumber;
            QualificationInfo = qualificationInfo;
            Status = status;
            Save();
        }
        /// <summary>
        /// Update user details
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="roleId"></param>
        /// <param name="username"></param>
        /// <param name="email"></param>
        public void UpdateUserDetails(Guid userId, Guid roleId, string username, string email)
        {
            SqlDataReader searchResult = null;
            ListDictionary parm = new ListDictionary();
            parm.Add("@userId", userId);
            parm.Add("@RoleId", roleId);
            parm.Add("@Email", email);
            parm.Add("@UserName", username);
            parm.Add("@LowerUserName", username.ToLower());

            searchResult = LoadFromSqlReader("UpdateUserData", parm) as SqlDataReader;
            DataTable ResultTable = new DataTable();
            newAdapter da = new newAdapter();
            if (searchResult != null && searchResult.HasRows)
            {
                da.FillFromReader(ResultTable, searchResult);
            }
        }

        public bool ValidateUserIPStatus(Guid _userID, string _currentIP)
        {
            SqlDataReader searchResult = null;
            ListDictionary parm = new ListDictionary();
            parm.Add("@userID", _userID);
            parm.Add("@orgIpstr", _currentIP);
            searchResult = LoadFromSqlReader("ValidateUserMachineIPandStatus", parm) as SqlDataReader;
            DataTable ResultTable = new DataTable();
            newAdapter da = new newAdapter();
            if (searchResult != null && searchResult.HasRows)
            {
                da.FillFromReader(ResultTable, searchResult);
            }

            return ResultTable.Rows.Count > 0;
        }
	}
}
