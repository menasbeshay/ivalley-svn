
// Generated by MyGeneration Version # (1.2.0.7)

using System;
using MHO.DAL;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Specialized;
using System.Globalization;

namespace MHO.BLL
{
	public class Dead : _Dead
	{
		public Dead()
		{
		
		}

        public DataTable FilterDead(string conn, int _orgID, string _deadName, string _deadNID, string iNID,
                                 string _dateFrom, string _dateTo)
        {
            try
            {

                SqlDataAdapter adp = new SqlDataAdapter();
                DataTable dtRes = new DataTable();
                SqlConnection conection = new SqlConnection(conn);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "Mho_Gui_Filter_Dead";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Connection = conection;
                SqlParameter parm1 = new SqlParameter("@deadName", _deadName);
                SqlParameter parm2 = new SqlParameter("@deadNid", _deadNID);
                SqlParameter parm3 = new SqlParameter("informerNid", iNID);
                SqlParameter parm6 = new SqlParameter("orgID", _orgID);

                if (!string.IsNullOrEmpty(_dateFrom) && !string.IsNullOrEmpty(_dateTo))
                {
                    System.Globalization.DateTimeFormatInfo dateInfo = new System.Globalization.DateTimeFormatInfo() ;
                    dateInfo.ShortDatePattern = "dd/MM/yyyy";

                    DateTime strdateFrom = Convert.ToDateTime(_dateFrom, dateInfo);
                    DateTime strdateTo = Convert.ToDateTime(_dateTo, dateInfo);
                    SqlParameter parm7 = new SqlParameter("dateFrom", strdateFrom.Month.ToString().PadLeft(2, '0') + "/" + strdateFrom.Day.ToString().PadLeft(2, '0') + "/" + strdateFrom.Year);
                    SqlParameter parm8 = new SqlParameter("dateto", strdateTo.Month.ToString().PadLeft(2, '0') + "/" + strdateTo.Day.ToString().PadLeft(2, '0') + "/" + strdateTo.Year);
                    cmd.Parameters.Add(parm7);
                    cmd.Parameters.Add(parm8);
                }
                cmd.Parameters.Add(parm1);
                cmd.Parameters.Add(parm2);
                cmd.Parameters.Add(parm3);
                cmd.Parameters.Add(parm6);

                adp.SelectCommand = cmd;
                adp.Fill(dtRes);
                return dtRes;
            }
            catch
            {
                return new DataTable();
            }

        }

        public DataTable ListDeadAprrovedCount(string _dateFrom,string _dateTo)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@StartDate", DateTime.Parse(_dateFrom).ToString("MM/yyyy/dd"));
                parm.Add("@EndDate", DateTime.Parse(_dateTo).ToString("MM/yyyy/dd"));
                /*parm.Add("@GovID", GovID);
                parm.Add("@CivilID", CivilID);
                parm.Add("@HealthOfficeID", HealthOfficeID);*/
                searchResult = LoadFromSqlReader("Rpt_ListDeadAprrovedCount", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable;
            }
            catch
            {
                return new DataTable();
            }
        }

        public DataTable ListDeadAprrovedCountGov(string _dateFrom, string _dateTo, int GovID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@StartDate", DateTime.Parse(_dateFrom).ToString("MM/yyyy/dd"));
                parm.Add("@EndDate", DateTime.Parse(_dateTo).ToString("MM/yyyy/dd"));
                parm.Add("@GovID", GovID);                

                searchResult = LoadFromSqlReader("Rpt_ListDeadAprrovedCountGov", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable;
            }
            catch
            {
                return new DataTable();
            }
        }

        public DataTable ListDeadAprrovedCountCivil(string _dateFrom, string _dateTo, int GovID, int CivilID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@StartDate", DateTime.Parse(_dateFrom).ToString("MM/yyyy/dd"));
                parm.Add("@EndDate", DateTime.Parse(_dateTo).ToString("MM/yyyy/dd"));
                parm.Add("@GovID", GovID);
                parm.Add("@CivilID", CivilID);
                
                searchResult = LoadFromSqlReader("Rpt_ListDeadAprrovedCountCivil", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable;
            }
            catch
            {
                return new DataTable();
            }
        }

        public DataTable ListDeadAprrovedCountHealthOffice(string _dateFrom, string _dateTo, int GovID, int CivilID, int HealthOfficeID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@StartDate", DateTime.Parse(_dateFrom).ToString("MM/yyyy/dd"));
                parm.Add("@EndDate", DateTime.Parse(_dateTo).ToString("MM/yyyy/dd"));
                parm.Add("@GovID", GovID);
                parm.Add("@CivilID", CivilID);
                parm.Add("@HealthOfficeID", HealthOfficeID);
                searchResult = LoadFromSqlReader("Rpt_ListDeadAprrovedCountHealthOffice", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable;
            }
            catch
            {
                return new DataTable();
            }
        }
        public DataTable ListDeadStatistcs(string _dateFrom, string _dateTo)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@StartDate", DateTime.Parse(_dateFrom).ToString("MM/yyyy/dd"));
                parm.Add("@EndDate", DateTime.Parse(_dateTo).ToString("MM/yyyy/dd"));
                searchResult = LoadFromSqlReader("Rpt_ListDeadStatistcs", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable;
            }
            catch
            {
                return new DataTable();
            }
        }
        

        public bool ApproveDeadInfo(Guid deadID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@deadID", deadID);
                searchResult = LoadFromSqlReader("Mho_Gui_Approve_Dead", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        public bool IsDeathCaseExist(string _nid,string _fname,string _sname,string _grandName,string _familyName,string _chkDate)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@Nid", _nid);
                parm.Add("@fName", _fname);
                parm.Add("@Sname", _sname);
                parm.Add("@GrandName", _grandName);
                parm.Add("@FamilyName", _familyName);
                parm.Add("@checkDate", _chkDate);
                
                searchResult = LoadFromSqlReader("CheckDeathCaseExist", parm) as SqlDataReader;
                DataTable ResultTable = new DataTable();
                newAdapter da = new newAdapter();
                if (searchResult != null && searchResult.HasRows)
                {
                    da.FillFromReader(ResultTable, searchResult);
                }
                return ResultTable.Rows.Count > 0;
            }
            catch
            {
                return false;
            }
        }

        public bool UpdateDeadDoctor(Guid _currentuserID, Guid _deadID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@deadCaseID", _deadID);
                parm.Add("@doctorID", _currentuserID);
                searchResult = LoadFromSqlReader("GUI_UpdateDeadDoctor", parm) as SqlDataReader;
                return true;
            }
            catch
            {
                return false;
            }
        }

        public bool UpdateDeadWriter(Guid _currentuserID, Guid _deadID)
        {
            try
            {
                SqlDataReader searchResult = null;
                ListDictionary parm = new ListDictionary();
                parm.Add("@deadCaseID", _deadID);
                parm.Add("@writerID", _currentuserID);
                searchResult = LoadFromSqlReader("GUI_UpdateDeadWriter", parm) as SqlDataReader;
                return true;
            }
            catch
            {
                return false;
            }
        }
	}
}
