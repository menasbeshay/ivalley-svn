
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Collections.Specialized;
using System.Data;
using System.Data.SqlClient;
using DAL;
namespace BLL
{
	public class Room : _Room
	{
		public Room()
		{
		
		}

        public virtual bool GetRoomsByCreatorID(int CreatedBy)
        {
            return LoadFromRawSql(@"select R.* , C.Name CategoryName , SC.Name SubCategoryName
                                    from Room R
                                    LEFT JOIN RoomType on RoomType.RoomID=R.RoomID
                                    LEFT Join RoomTypeSpecDuration ON RoomTypeSpecDuration.ID=RoomType.RoomTypeSpecDurationID
                                    LEFT JOIN RoomTypeSpec ON RoomTypeSpec.ID=RoomTypeSpecDuration.RoomTypeSpecID
                                    Left JOIN Category C ON R.CategoryID = C.CategoryID
                                    Left JOIN SubCategory SC ON R.SubCategoryID = SC.SubCategoryID
                                    where R.CreatedBy = {0} AND ISNULL(R.RowStatusID,{1})={1} 
                                    order by ISNULL(RoomTypeSpec.OrderInRoomList,10000) ASC , R.Name Asc", CreatedBy,(int)Helper.Enums.RowStatus.Enabled);

        }

        public virtual bool GetPremiumRooms()
        {
            return this.LoadFromRawSql(@"Select * FROM Room
                                        INNER JOIN RoomType ON RoomType.RoomID=Room.RoomID
                                        INNER JOIN RoomTypeSpecDuration ON RoomType.RoomTypeSpecDurationID=RoomTypeSpecDuration.ID
                                        INNER JOIN RoomTypeSpec ON RoomTypeSpec.ID=RoomTypeSpecDuration.RoomTypeSpecID
                                        WHERE RoomTypeSpec.ID={0} AND ISNULL(Room.RowStatusID,{1})={1}
                                        ORDER BY CategoryID ASC,SubCategoryID ASC,Room.Name ASC", Helper.Defaults.VIPRoomTypeSpecID,(int)Helper.Enums.RowStatus.Enabled);
        }

        public virtual bool GetRoomsByCategoryID(int CategoryID)
        {
            return LoadFromRawSql(@"select R.* , count(RM.MemberID) MemberCount
                                    from Room R
                                    LEFT JOIN RoomType on RoomType.RoomID=R.RoomID
                                    LEFT Join RoomTypeSpecDuration ON RoomTypeSpecDuration.ID=RoomType.RoomTypeSpecDurationID
                                    LEFT JOIN RoomTypeSpec ON RoomTypeSpec.ID=RoomTypeSpecDuration.RoomTypeSpecID
                                    Left JOIN Category C ON R.CategoryID = C.CategoryID
                                    Left Join RoomMember RM on RM.RoomID = R.RoomID
                                    Left join Member M on M.MemberID = RM.MemberID
                                    where R.CategoryID = {0} AND ISNULL(R.RowStatusID,{1})={1}
                                    Group By  R.RoomID,  R.CategoryID,  R.SubCategoryID,  R.Name,  R.IconPath,   R.CreatedDate,  R.WelcomeText,  R.RoomPassword,  R.RoomPasswordenabled,  R.EnableCam,  R.EnableMic,  R.EnableMicForAdminsOnly,  R.MarkOnLoginWithWrite,  R.MarkOnLoginWithoutWrite,  R.CreatedBy,  R.EnableOneMic,  R.EnableTwoMic,  R.EnableThreeMic,  R.RoomAdminPassword, R.RowStatusID, R.OpenCams, R.RoomTopic,R.fbURL,R.utURL,R.tURL, RoomTypeSpec.OrderInRoomList
                                    order by ISNULL(RoomTypeSpec.OrderInRoomList,10000) ASC , R.Name Asc", CategoryID, (int)Helper.Enums.RowStatus.Enabled);

        }

        public virtual bool GetRoomsBySubCategoryID(int SubCategoryID)
        {
            return LoadFromRawSql(@"select R.* , count(RM.MemberID) MemberCount
                                    from Room R
                                    Inner JOIN Category C ON R.CategoryID = C.CategoryID
                                    Inner Join SubCategory SC on C.CategoryID = SC.CategoryID
                                    Left Join RoomMember RM on RM.RoomID = R.RoomID
                                    Left join Member M on M.MemberID = RM.MemberID
                                    LEFT JOIN RoomType RT on RT.RoomID=R.RoomID
                                    LEFT JOIN RoomTypeSpecDuration  ON RT.RoomTypeSpecDurationID=RoomTypeSpecDuration.ID
                                    LEFT JOIN RoomTypeSpec ON RoomTypeSpec.ID=RoomTypeSpecDuration.RoomTypeSpecID
                                    where R.SubCategoryID = {0}  AND ISNULL(R.RowStatusID,{1})={1}
                                    Group By  R.RoomID,  R.CategoryID,  R.SubCategoryID,  R.Name,  R.IconPath,  R.CreatedDate,  R.WelcomeText,  R.RoomPassword,  R.RoomPasswordenabled,  R.EnableCam,  R.EnableMic,  R.EnableMicForAdminsOnly,  R.MarkOnLoginWithWrite,  R.MarkOnLoginWithoutWrite,  R.CreatedBy,  R.EnableOneMic,  R.EnableTwoMic,  R.EnableThreeMic,  R.RoomAdminPassword, R.RowStatusID, R.OpenCams, R.RoomTopic,R.fbURL,R.utURL,R.tURL,RoomTypeSpec.OrderInRoomList
                                    order by ISNULL(RoomTypeSpec.OrderInRoomList,10000) ASC , R.Name Asc", SubCategoryID, (int)Helper.Enums.RowStatus.Enabled);

        }

        public virtual bool GetFavRoomsByCreatorID(int CreatedBy)
        {
            return LoadFromRawSql(@"select R.* , C.Name CategoryName , SC.Name SubCategoryName
                                    from Room R
                                    LEFT JOIN RoomType on RoomType.RoomID=R.RoomID
                                    LEFT Join RoomTypeSpecDuration ON RoomTypeSpecDuration.ID=RoomType.RoomTypeSpecDurationID
                                    LEFT JOIN RoomTypeSpec ON RoomTypeSpec.ID=RoomTypeSpecDuration.RoomTypeSpecID
                                    Left JOIN Category C ON R.CategoryID = C.CategoryID
                                    Left JOIN SubCategory SC ON R.SubCategoryID = SC.SubCategoryID
                                    Inner Join FavRoom F on F.RoomID = R.RoomID 
                                    where F.MemberID = {0} AND ISNULL(R.RowStatusID,{1})={1}
                                    order by ISNULL(RoomTypeSpec.OrderInRoomList,10000) ASC , R.Name Asc", CreatedBy,(int)Helper.Enums.RowStatus.Enabled);

        }

        public virtual bool GetRoomRateByRoomID(int RoomID)
        {
            ListDictionary parameters = new ListDictionary();

            parameters.Add(new SqlParameter("@RoomID", SqlDbType.Int, 0), RoomID);

            return LoadFromSql("GetRoomRateByRoomID", parameters);
        }

        #region override properties reading
        public override bool EnableCam
        {
            get
            {
                if (this.IsColumnNull(Room.ColumnNames.EnableCam))
                    return false;
                return base.EnableCam;
            }
            set
            {
                base.EnableCam = value;
            }
        }
        public override bool EnableMic
        {
            get
            {
                if (this.IsColumnNull(Room.ColumnNames.EnableMic))
                    return false;
                return base.EnableMic;
            }
            set
            {
                base.EnableMic = value;
            }
        }

        #endregion
        private Member _createdByMember;
        public Member CreatedByMember
        {
            get
            {
                if (_createdByMember == null)
                {
                    _createdByMember = new Member();
                    _createdByMember.LoadByPrimaryKey(this.CreatedBy);
                }
                return _createdByMember;
            }
        }

        private RoomType _RoomType;
        public RoomType RoomType
        {
            get
            {
                if (_RoomType == null)
                {
                    _RoomType = new RoomType();
                    _RoomType.LoadByRoomID(this.RoomID);
                }
                if (_RoomType.RoomID != this.RoomID)
                {
                    _RoomType.LoadByRoomID(this.RoomID);
                }
                return _RoomType;
            }
        }

    }
}
