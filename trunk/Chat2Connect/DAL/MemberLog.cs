
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MemberLog : SqlClientEntity
	{
		public _MemberLog()
		{
			this.QuerySource = "MemberLog";
			this.MappingName = "MemberLog";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberLogLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(long ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberLogLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LogTypeID
			{
				get
				{
					return new SqlParameter("@LogTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LogDetails
			{
				get
				{
					return new SqlParameter("@LogDetails", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter RelatedRoomID
			{
				get
				{
					return new SqlParameter("@RelatedRoomID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RelatedMemberID
			{
				get
				{
					return new SqlParameter("@RelatedMemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string MemberID = "MemberID";
            public const string LogTypeID = "LogTypeID";
            public const string LogDetails = "LogDetails";
            public const string RelatedRoomID = "RelatedRoomID";
            public const string RelatedMemberID = "RelatedMemberID";
            public const string CreateDate = "CreateDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MemberLog.PropertyNames.ID;
					ht[MemberID] = _MemberLog.PropertyNames.MemberID;
					ht[LogTypeID] = _MemberLog.PropertyNames.LogTypeID;
					ht[LogDetails] = _MemberLog.PropertyNames.LogDetails;
					ht[RelatedRoomID] = _MemberLog.PropertyNames.RelatedRoomID;
					ht[RelatedMemberID] = _MemberLog.PropertyNames.RelatedMemberID;
					ht[CreateDate] = _MemberLog.PropertyNames.CreateDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string MemberID = "MemberID";
            public const string LogTypeID = "LogTypeID";
            public const string LogDetails = "LogDetails";
            public const string RelatedRoomID = "RelatedRoomID";
            public const string RelatedMemberID = "RelatedMemberID";
            public const string CreateDate = "CreateDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MemberLog.ColumnNames.ID;
					ht[MemberID] = _MemberLog.ColumnNames.MemberID;
					ht[LogTypeID] = _MemberLog.ColumnNames.LogTypeID;
					ht[LogDetails] = _MemberLog.ColumnNames.LogDetails;
					ht[RelatedRoomID] = _MemberLog.ColumnNames.RelatedRoomID;
					ht[RelatedMemberID] = _MemberLog.ColumnNames.RelatedMemberID;
					ht[CreateDate] = _MemberLog.ColumnNames.CreateDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string MemberID = "s_MemberID";
            public const string LogTypeID = "s_LogTypeID";
            public const string LogDetails = "s_LogDetails";
            public const string RelatedRoomID = "s_RelatedRoomID";
            public const string RelatedMemberID = "s_RelatedMemberID";
            public const string CreateDate = "s_CreateDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual long ID
	    {
			get
	        {
				return base.Getlong(ColumnNames.ID);
			}
			set
	        {
				base.Setlong(ColumnNames.ID, value);
			}
		}

		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual int LogTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.LogTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.LogTypeID, value);
			}
		}

		public virtual string LogDetails
	    {
			get
	        {
				return base.Getstring(ColumnNames.LogDetails);
			}
			set
	        {
				base.Setstring(ColumnNames.LogDetails, value);
			}
		}

		public virtual int RelatedRoomID
	    {
			get
	        {
				return base.Getint(ColumnNames.RelatedRoomID);
			}
			set
	        {
				base.Setint(ColumnNames.RelatedRoomID, value);
			}
		}

		public virtual int RelatedMemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.RelatedMemberID);
			}
			set
	        {
				base.Setint(ColumnNames.RelatedMemberID, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetlongAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetlongAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_LogTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogTypeID) ? string.Empty : base.GetintAsString(ColumnNames.LogTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogTypeID);
				else
					this.LogTypeID = base.SetintAsString(ColumnNames.LogTypeID, value);
			}
		}

		public virtual string s_LogDetails
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogDetails) ? string.Empty : base.GetstringAsString(ColumnNames.LogDetails);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogDetails);
				else
					this.LogDetails = base.SetstringAsString(ColumnNames.LogDetails, value);
			}
		}

		public virtual string s_RelatedRoomID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RelatedRoomID) ? string.Empty : base.GetintAsString(ColumnNames.RelatedRoomID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RelatedRoomID);
				else
					this.RelatedRoomID = base.SetintAsString(ColumnNames.RelatedRoomID, value);
			}
		}

		public virtual string s_RelatedMemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RelatedMemberID) ? string.Empty : base.GetintAsString(ColumnNames.RelatedMemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RelatedMemberID);
				else
					this.RelatedMemberID = base.SetintAsString(ColumnNames.RelatedMemberID, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LogTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogTypeID, Parameters.LogTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LogDetails
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogDetails, Parameters.LogDetails);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RelatedRoomID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RelatedRoomID, Parameters.RelatedRoomID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RelatedMemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RelatedMemberID, Parameters.RelatedMemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter LogTypeID
		    {
				get
		        {
					if(_LogTypeID_W == null)
	        	    {
						_LogTypeID_W = TearOff.LogTypeID;
					}
					return _LogTypeID_W;
				}
			}

			public WhereParameter LogDetails
		    {
				get
		        {
					if(_LogDetails_W == null)
	        	    {
						_LogDetails_W = TearOff.LogDetails;
					}
					return _LogDetails_W;
				}
			}

			public WhereParameter RelatedRoomID
		    {
				get
		        {
					if(_RelatedRoomID_W == null)
	        	    {
						_RelatedRoomID_W = TearOff.RelatedRoomID;
					}
					return _RelatedRoomID_W;
				}
			}

			public WhereParameter RelatedMemberID
		    {
				get
		        {
					if(_RelatedMemberID_W == null)
	        	    {
						_RelatedMemberID_W = TearOff.RelatedMemberID;
					}
					return _RelatedMemberID_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _MemberID_W = null;
			private WhereParameter _LogTypeID_W = null;
			private WhereParameter _LogDetails_W = null;
			private WhereParameter _RelatedRoomID_W = null;
			private WhereParameter _RelatedMemberID_W = null;
			private WhereParameter _CreateDate_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_MemberID_W = null;
				_LogTypeID_W = null;
				_LogDetails_W = null;
				_RelatedRoomID_W = null;
				_RelatedMemberID_W = null;
				_CreateDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LogTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogTypeID, Parameters.LogTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LogDetails
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogDetails, Parameters.LogDetails);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RelatedRoomID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RelatedRoomID, Parameters.RelatedRoomID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RelatedMemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RelatedMemberID, Parameters.RelatedMemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter LogTypeID
		    {
				get
		        {
					if(_LogTypeID_W == null)
	        	    {
						_LogTypeID_W = TearOff.LogTypeID;
					}
					return _LogTypeID_W;
				}
			}

			public AggregateParameter LogDetails
		    {
				get
		        {
					if(_LogDetails_W == null)
	        	    {
						_LogDetails_W = TearOff.LogDetails;
					}
					return _LogDetails_W;
				}
			}

			public AggregateParameter RelatedRoomID
		    {
				get
		        {
					if(_RelatedRoomID_W == null)
	        	    {
						_RelatedRoomID_W = TearOff.RelatedRoomID;
					}
					return _RelatedRoomID_W;
				}
			}

			public AggregateParameter RelatedMemberID
		    {
				get
		        {
					if(_RelatedMemberID_W == null)
	        	    {
						_RelatedMemberID_W = TearOff.RelatedMemberID;
					}
					return _RelatedMemberID_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _LogTypeID_W = null;
			private AggregateParameter _LogDetails_W = null;
			private AggregateParameter _RelatedRoomID_W = null;
			private AggregateParameter _RelatedMemberID_W = null;
			private AggregateParameter _CreateDate_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_MemberID_W = null;
				_LogTypeID_W = null;
				_LogDetails_W = null;
				_RelatedRoomID_W = null;
				_RelatedMemberID_W = null;
				_CreateDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberLogInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberLogUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberLogDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LogTypeID);
			p.SourceColumn = ColumnNames.LogTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LogDetails);
			p.SourceColumn = ColumnNames.LogDetails;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RelatedRoomID);
			p.SourceColumn = ColumnNames.RelatedRoomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RelatedMemberID);
			p.SourceColumn = ColumnNames.RelatedMemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
