
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MailAds : SqlClientEntity
	{
		public _MailAds()
		{
			this.QuerySource = "MailAds";
			this.MappingName = "MailAds";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MailAdsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MailAdsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AdText
			{
				get
				{
					return new SqlParameter("@AdText", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter AdImage
			{
				get
				{
					return new SqlParameter("@AdImage", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter RowStatusID
			{
				get
				{
					return new SqlParameter("@RowStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MemberTypes
			{
				get
				{
					return new SqlParameter("@MemberTypes", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter NumOfDays
			{
				get
				{
					return new SqlParameter("@NumOfDays", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NuOfHours
			{
				get
				{
					return new SqlParameter("@NuOfHours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Timestamp
			{
				get
				{
					return new SqlParameter("@Timestamp", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string AdText = "AdText";
            public const string AdImage = "AdImage";
            public const string RowStatusID = "RowStatusID";
            public const string StartDate = "StartDate";
            public const string MemberTypes = "MemberTypes";
            public const string NumOfDays = "NumOfDays";
            public const string NuOfHours = "NuOfHours";
            public const string Timestamp = "Timestamp";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MailAds.PropertyNames.ID;
					ht[AdText] = _MailAds.PropertyNames.AdText;
					ht[AdImage] = _MailAds.PropertyNames.AdImage;
					ht[RowStatusID] = _MailAds.PropertyNames.RowStatusID;
					ht[StartDate] = _MailAds.PropertyNames.StartDate;
					ht[MemberTypes] = _MailAds.PropertyNames.MemberTypes;
					ht[NumOfDays] = _MailAds.PropertyNames.NumOfDays;
					ht[NuOfHours] = _MailAds.PropertyNames.NuOfHours;
					ht[Timestamp] = _MailAds.PropertyNames.Timestamp;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string AdText = "AdText";
            public const string AdImage = "AdImage";
            public const string RowStatusID = "RowStatusID";
            public const string StartDate = "StartDate";
            public const string MemberTypes = "MemberTypes";
            public const string NumOfDays = "NumOfDays";
            public const string NuOfHours = "NuOfHours";
            public const string Timestamp = "Timestamp";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MailAds.ColumnNames.ID;
					ht[AdText] = _MailAds.ColumnNames.AdText;
					ht[AdImage] = _MailAds.ColumnNames.AdImage;
					ht[RowStatusID] = _MailAds.ColumnNames.RowStatusID;
					ht[StartDate] = _MailAds.ColumnNames.StartDate;
					ht[MemberTypes] = _MailAds.ColumnNames.MemberTypes;
					ht[NumOfDays] = _MailAds.ColumnNames.NumOfDays;
					ht[NuOfHours] = _MailAds.ColumnNames.NuOfHours;
					ht[Timestamp] = _MailAds.ColumnNames.Timestamp;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string AdText = "s_AdText";
            public const string AdImage = "s_AdImage";
            public const string RowStatusID = "s_RowStatusID";
            public const string StartDate = "s_StartDate";
            public const string MemberTypes = "s_MemberTypes";
            public const string NumOfDays = "s_NumOfDays";
            public const string NuOfHours = "s_NuOfHours";
            public const string Timestamp = "s_Timestamp";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string AdText
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdText);
			}
			set
	        {
				base.Setstring(ColumnNames.AdText, value);
			}
		}

		public virtual string AdImage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdImage);
			}
			set
	        {
				base.Setstring(ColumnNames.AdImage, value);
			}
		}

		public virtual int RowStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.RowStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.RowStatusID, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual string MemberTypes
	    {
			get
	        {
				return base.Getstring(ColumnNames.MemberTypes);
			}
			set
	        {
				base.Setstring(ColumnNames.MemberTypes, value);
			}
		}

		public virtual int NumOfDays
	    {
			get
	        {
				return base.Getint(ColumnNames.NumOfDays);
			}
			set
	        {
				base.Setint(ColumnNames.NumOfDays, value);
			}
		}

		public virtual int NuOfHours
	    {
			get
	        {
				return base.Getint(ColumnNames.NuOfHours);
			}
			set
	        {
				base.Setint(ColumnNames.NuOfHours, value);
			}
		}

		public virtual DateTime Timestamp
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Timestamp);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Timestamp, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_AdText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdText) ? string.Empty : base.GetstringAsString(ColumnNames.AdText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdText);
				else
					this.AdText = base.SetstringAsString(ColumnNames.AdText, value);
			}
		}

		public virtual string s_AdImage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdImage) ? string.Empty : base.GetstringAsString(ColumnNames.AdImage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdImage);
				else
					this.AdImage = base.SetstringAsString(ColumnNames.AdImage, value);
			}
		}

		public virtual string s_RowStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RowStatusID) ? string.Empty : base.GetintAsString(ColumnNames.RowStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RowStatusID);
				else
					this.RowStatusID = base.SetintAsString(ColumnNames.RowStatusID, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_MemberTypes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberTypes) ? string.Empty : base.GetstringAsString(ColumnNames.MemberTypes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberTypes);
				else
					this.MemberTypes = base.SetstringAsString(ColumnNames.MemberTypes, value);
			}
		}

		public virtual string s_NumOfDays
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NumOfDays) ? string.Empty : base.GetintAsString(ColumnNames.NumOfDays);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NumOfDays);
				else
					this.NumOfDays = base.SetintAsString(ColumnNames.NumOfDays, value);
			}
		}

		public virtual string s_NuOfHours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NuOfHours) ? string.Empty : base.GetintAsString(ColumnNames.NuOfHours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NuOfHours);
				else
					this.NuOfHours = base.SetintAsString(ColumnNames.NuOfHours, value);
			}
		}

		public virtual string s_Timestamp
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Timestamp) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Timestamp);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Timestamp);
				else
					this.Timestamp = base.SetDateTimeAsString(ColumnNames.Timestamp, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdText, Parameters.AdText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdImage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdImage, Parameters.AdImage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RowStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RowStatusID, Parameters.RowStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberTypes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberTypes, Parameters.MemberTypes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NumOfDays
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NumOfDays, Parameters.NumOfDays);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NuOfHours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NuOfHours, Parameters.NuOfHours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Timestamp
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Timestamp, Parameters.Timestamp);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter AdText
		    {
				get
		        {
					if(_AdText_W == null)
	        	    {
						_AdText_W = TearOff.AdText;
					}
					return _AdText_W;
				}
			}

			public WhereParameter AdImage
		    {
				get
		        {
					if(_AdImage_W == null)
	        	    {
						_AdImage_W = TearOff.AdImage;
					}
					return _AdImage_W;
				}
			}

			public WhereParameter RowStatusID
		    {
				get
		        {
					if(_RowStatusID_W == null)
	        	    {
						_RowStatusID_W = TearOff.RowStatusID;
					}
					return _RowStatusID_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter MemberTypes
		    {
				get
		        {
					if(_MemberTypes_W == null)
	        	    {
						_MemberTypes_W = TearOff.MemberTypes;
					}
					return _MemberTypes_W;
				}
			}

			public WhereParameter NumOfDays
		    {
				get
		        {
					if(_NumOfDays_W == null)
	        	    {
						_NumOfDays_W = TearOff.NumOfDays;
					}
					return _NumOfDays_W;
				}
			}

			public WhereParameter NuOfHours
		    {
				get
		        {
					if(_NuOfHours_W == null)
	        	    {
						_NuOfHours_W = TearOff.NuOfHours;
					}
					return _NuOfHours_W;
				}
			}

			public WhereParameter Timestamp
		    {
				get
		        {
					if(_Timestamp_W == null)
	        	    {
						_Timestamp_W = TearOff.Timestamp;
					}
					return _Timestamp_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _AdText_W = null;
			private WhereParameter _AdImage_W = null;
			private WhereParameter _RowStatusID_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _MemberTypes_W = null;
			private WhereParameter _NumOfDays_W = null;
			private WhereParameter _NuOfHours_W = null;
			private WhereParameter _Timestamp_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_AdText_W = null;
				_AdImage_W = null;
				_RowStatusID_W = null;
				_StartDate_W = null;
				_MemberTypes_W = null;
				_NumOfDays_W = null;
				_NuOfHours_W = null;
				_Timestamp_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdText, Parameters.AdText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdImage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdImage, Parameters.AdImage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RowStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RowStatusID, Parameters.RowStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberTypes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberTypes, Parameters.MemberTypes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NumOfDays
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NumOfDays, Parameters.NumOfDays);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NuOfHours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NuOfHours, Parameters.NuOfHours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Timestamp
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Timestamp, Parameters.Timestamp);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter AdText
		    {
				get
		        {
					if(_AdText_W == null)
	        	    {
						_AdText_W = TearOff.AdText;
					}
					return _AdText_W;
				}
			}

			public AggregateParameter AdImage
		    {
				get
		        {
					if(_AdImage_W == null)
	        	    {
						_AdImage_W = TearOff.AdImage;
					}
					return _AdImage_W;
				}
			}

			public AggregateParameter RowStatusID
		    {
				get
		        {
					if(_RowStatusID_W == null)
	        	    {
						_RowStatusID_W = TearOff.RowStatusID;
					}
					return _RowStatusID_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter MemberTypes
		    {
				get
		        {
					if(_MemberTypes_W == null)
	        	    {
						_MemberTypes_W = TearOff.MemberTypes;
					}
					return _MemberTypes_W;
				}
			}

			public AggregateParameter NumOfDays
		    {
				get
		        {
					if(_NumOfDays_W == null)
	        	    {
						_NumOfDays_W = TearOff.NumOfDays;
					}
					return _NumOfDays_W;
				}
			}

			public AggregateParameter NuOfHours
		    {
				get
		        {
					if(_NuOfHours_W == null)
	        	    {
						_NuOfHours_W = TearOff.NuOfHours;
					}
					return _NuOfHours_W;
				}
			}

			public AggregateParameter Timestamp
		    {
				get
		        {
					if(_Timestamp_W == null)
	        	    {
						_Timestamp_W = TearOff.Timestamp;
					}
					return _Timestamp_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _AdText_W = null;
			private AggregateParameter _AdImage_W = null;
			private AggregateParameter _RowStatusID_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _MemberTypes_W = null;
			private AggregateParameter _NumOfDays_W = null;
			private AggregateParameter _NuOfHours_W = null;
			private AggregateParameter _Timestamp_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_AdText_W = null;
				_AdImage_W = null;
				_RowStatusID_W = null;
				_StartDate_W = null;
				_MemberTypes_W = null;
				_NumOfDays_W = null;
				_NuOfHours_W = null;
				_Timestamp_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MailAdsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MailAdsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MailAdsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdText);
			p.SourceColumn = ColumnNames.AdText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdImage);
			p.SourceColumn = ColumnNames.AdImage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RowStatusID);
			p.SourceColumn = ColumnNames.RowStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberTypes);
			p.SourceColumn = ColumnNames.MemberTypes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NumOfDays);
			p.SourceColumn = ColumnNames.NumOfDays;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NuOfHours);
			p.SourceColumn = ColumnNames.NuOfHours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Timestamp);
			p.SourceColumn = ColumnNames.Timestamp;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
