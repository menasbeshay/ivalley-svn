
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _RoomMemberSetting : SqlClientEntity
	{
		public _RoomMemberSetting()
		{
			this.QuerySource = "RoomMemberSetting";
			this.MappingName = "RoomMemberSetting";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomMemberSettingLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int RoomID, int MemberID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.RoomID, RoomID);

parameters.Add(Parameters.MemberID, MemberID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomMemberSettingLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter RoomID
			{
				get
				{
					return new SqlParameter("@RoomID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NotifyOnFriendsLogOn
			{
				get
				{
					return new SqlParameter("@NotifyOnFriendsLogOn", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnFriendsLogOff
			{
				get
				{
					return new SqlParameter("@NotifyOnFriendsLogOff", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnMicOn
			{
				get
				{
					return new SqlParameter("@NotifyOnMicOn", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnMicOff
			{
				get
				{
					return new SqlParameter("@NotifyOnMicOff", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnOpenCam
			{
				get
				{
					return new SqlParameter("@NotifyOnOpenCam", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnCloseCam
			{
				get
				{
					return new SqlParameter("@NotifyOnCloseCam", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string RoomID = "RoomID";
            public const string MemberID = "MemberID";
            public const string NotifyOnFriendsLogOn = "NotifyOnFriendsLogOn";
            public const string NotifyOnFriendsLogOff = "NotifyOnFriendsLogOff";
            public const string NotifyOnMicOn = "NotifyOnMicOn";
            public const string NotifyOnMicOff = "NotifyOnMicOff";
            public const string NotifyOnOpenCam = "NotifyOnOpenCam";
            public const string NotifyOnCloseCam = "NotifyOnCloseCam";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoomID] = _RoomMemberSetting.PropertyNames.RoomID;
					ht[MemberID] = _RoomMemberSetting.PropertyNames.MemberID;
					ht[NotifyOnFriendsLogOn] = _RoomMemberSetting.PropertyNames.NotifyOnFriendsLogOn;
					ht[NotifyOnFriendsLogOff] = _RoomMemberSetting.PropertyNames.NotifyOnFriendsLogOff;
					ht[NotifyOnMicOn] = _RoomMemberSetting.PropertyNames.NotifyOnMicOn;
					ht[NotifyOnMicOff] = _RoomMemberSetting.PropertyNames.NotifyOnMicOff;
					ht[NotifyOnOpenCam] = _RoomMemberSetting.PropertyNames.NotifyOnOpenCam;
					ht[NotifyOnCloseCam] = _RoomMemberSetting.PropertyNames.NotifyOnCloseCam;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string RoomID = "RoomID";
            public const string MemberID = "MemberID";
            public const string NotifyOnFriendsLogOn = "NotifyOnFriendsLogOn";
            public const string NotifyOnFriendsLogOff = "NotifyOnFriendsLogOff";
            public const string NotifyOnMicOn = "NotifyOnMicOn";
            public const string NotifyOnMicOff = "NotifyOnMicOff";
            public const string NotifyOnOpenCam = "NotifyOnOpenCam";
            public const string NotifyOnCloseCam = "NotifyOnCloseCam";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoomID] = _RoomMemberSetting.ColumnNames.RoomID;
					ht[MemberID] = _RoomMemberSetting.ColumnNames.MemberID;
					ht[NotifyOnFriendsLogOn] = _RoomMemberSetting.ColumnNames.NotifyOnFriendsLogOn;
					ht[NotifyOnFriendsLogOff] = _RoomMemberSetting.ColumnNames.NotifyOnFriendsLogOff;
					ht[NotifyOnMicOn] = _RoomMemberSetting.ColumnNames.NotifyOnMicOn;
					ht[NotifyOnMicOff] = _RoomMemberSetting.ColumnNames.NotifyOnMicOff;
					ht[NotifyOnOpenCam] = _RoomMemberSetting.ColumnNames.NotifyOnOpenCam;
					ht[NotifyOnCloseCam] = _RoomMemberSetting.ColumnNames.NotifyOnCloseCam;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string RoomID = "s_RoomID";
            public const string MemberID = "s_MemberID";
            public const string NotifyOnFriendsLogOn = "s_NotifyOnFriendsLogOn";
            public const string NotifyOnFriendsLogOff = "s_NotifyOnFriendsLogOff";
            public const string NotifyOnMicOn = "s_NotifyOnMicOn";
            public const string NotifyOnMicOff = "s_NotifyOnMicOff";
            public const string NotifyOnOpenCam = "s_NotifyOnOpenCam";
            public const string NotifyOnCloseCam = "s_NotifyOnCloseCam";

		}
		#endregion		
		
		#region Properties
	
		public virtual int RoomID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoomID);
			}
			set
	        {
				base.Setint(ColumnNames.RoomID, value);
			}
		}

		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual bool NotifyOnFriendsLogOn
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnFriendsLogOn);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnFriendsLogOn, value);
			}
		}

		public virtual bool NotifyOnFriendsLogOff
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnFriendsLogOff);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnFriendsLogOff, value);
			}
		}

		public virtual bool NotifyOnMicOn
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnMicOn);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnMicOn, value);
			}
		}

		public virtual bool NotifyOnMicOff
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnMicOff);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnMicOff, value);
			}
		}

		public virtual bool NotifyOnOpenCam
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnOpenCam);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnOpenCam, value);
			}
		}

		public virtual bool NotifyOnCloseCam
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnCloseCam);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnCloseCam, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_RoomID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomID) ? string.Empty : base.GetintAsString(ColumnNames.RoomID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomID);
				else
					this.RoomID = base.SetintAsString(ColumnNames.RoomID, value);
			}
		}

		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_NotifyOnFriendsLogOn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnFriendsLogOn) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnFriendsLogOn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnFriendsLogOn);
				else
					this.NotifyOnFriendsLogOn = base.SetboolAsString(ColumnNames.NotifyOnFriendsLogOn, value);
			}
		}

		public virtual string s_NotifyOnFriendsLogOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnFriendsLogOff) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnFriendsLogOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnFriendsLogOff);
				else
					this.NotifyOnFriendsLogOff = base.SetboolAsString(ColumnNames.NotifyOnFriendsLogOff, value);
			}
		}

		public virtual string s_NotifyOnMicOn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnMicOn) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnMicOn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnMicOn);
				else
					this.NotifyOnMicOn = base.SetboolAsString(ColumnNames.NotifyOnMicOn, value);
			}
		}

		public virtual string s_NotifyOnMicOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnMicOff) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnMicOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnMicOff);
				else
					this.NotifyOnMicOff = base.SetboolAsString(ColumnNames.NotifyOnMicOff, value);
			}
		}

		public virtual string s_NotifyOnOpenCam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnOpenCam) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnOpenCam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnOpenCam);
				else
					this.NotifyOnOpenCam = base.SetboolAsString(ColumnNames.NotifyOnOpenCam, value);
			}
		}

		public virtual string s_NotifyOnCloseCam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnCloseCam) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnCloseCam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnCloseCam);
				else
					this.NotifyOnCloseCam = base.SetboolAsString(ColumnNames.NotifyOnCloseCam, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RoomID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnFriendsLogOn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnFriendsLogOn, Parameters.NotifyOnFriendsLogOn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnFriendsLogOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnFriendsLogOff, Parameters.NotifyOnFriendsLogOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnMicOn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnMicOn, Parameters.NotifyOnMicOn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnMicOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnMicOff, Parameters.NotifyOnMicOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnOpenCam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnOpenCam, Parameters.NotifyOnOpenCam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnCloseCam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnCloseCam, Parameters.NotifyOnCloseCam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter NotifyOnFriendsLogOn
		    {
				get
		        {
					if(_NotifyOnFriendsLogOn_W == null)
	        	    {
						_NotifyOnFriendsLogOn_W = TearOff.NotifyOnFriendsLogOn;
					}
					return _NotifyOnFriendsLogOn_W;
				}
			}

			public WhereParameter NotifyOnFriendsLogOff
		    {
				get
		        {
					if(_NotifyOnFriendsLogOff_W == null)
	        	    {
						_NotifyOnFriendsLogOff_W = TearOff.NotifyOnFriendsLogOff;
					}
					return _NotifyOnFriendsLogOff_W;
				}
			}

			public WhereParameter NotifyOnMicOn
		    {
				get
		        {
					if(_NotifyOnMicOn_W == null)
	        	    {
						_NotifyOnMicOn_W = TearOff.NotifyOnMicOn;
					}
					return _NotifyOnMicOn_W;
				}
			}

			public WhereParameter NotifyOnMicOff
		    {
				get
		        {
					if(_NotifyOnMicOff_W == null)
	        	    {
						_NotifyOnMicOff_W = TearOff.NotifyOnMicOff;
					}
					return _NotifyOnMicOff_W;
				}
			}

			public WhereParameter NotifyOnOpenCam
		    {
				get
		        {
					if(_NotifyOnOpenCam_W == null)
	        	    {
						_NotifyOnOpenCam_W = TearOff.NotifyOnOpenCam;
					}
					return _NotifyOnOpenCam_W;
				}
			}

			public WhereParameter NotifyOnCloseCam
		    {
				get
		        {
					if(_NotifyOnCloseCam_W == null)
	        	    {
						_NotifyOnCloseCam_W = TearOff.NotifyOnCloseCam;
					}
					return _NotifyOnCloseCam_W;
				}
			}

			private WhereParameter _RoomID_W = null;
			private WhereParameter _MemberID_W = null;
			private WhereParameter _NotifyOnFriendsLogOn_W = null;
			private WhereParameter _NotifyOnFriendsLogOff_W = null;
			private WhereParameter _NotifyOnMicOn_W = null;
			private WhereParameter _NotifyOnMicOff_W = null;
			private WhereParameter _NotifyOnOpenCam_W = null;
			private WhereParameter _NotifyOnCloseCam_W = null;

			public void WhereClauseReset()
			{
				_RoomID_W = null;
				_MemberID_W = null;
				_NotifyOnFriendsLogOn_W = null;
				_NotifyOnFriendsLogOff_W = null;
				_NotifyOnMicOn_W = null;
				_NotifyOnMicOff_W = null;
				_NotifyOnOpenCam_W = null;
				_NotifyOnCloseCam_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter RoomID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnFriendsLogOn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnFriendsLogOn, Parameters.NotifyOnFriendsLogOn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnFriendsLogOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnFriendsLogOff, Parameters.NotifyOnFriendsLogOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnMicOn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnMicOn, Parameters.NotifyOnMicOn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnMicOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnMicOff, Parameters.NotifyOnMicOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnOpenCam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnOpenCam, Parameters.NotifyOnOpenCam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnCloseCam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnCloseCam, Parameters.NotifyOnCloseCam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter NotifyOnFriendsLogOn
		    {
				get
		        {
					if(_NotifyOnFriendsLogOn_W == null)
	        	    {
						_NotifyOnFriendsLogOn_W = TearOff.NotifyOnFriendsLogOn;
					}
					return _NotifyOnFriendsLogOn_W;
				}
			}

			public AggregateParameter NotifyOnFriendsLogOff
		    {
				get
		        {
					if(_NotifyOnFriendsLogOff_W == null)
	        	    {
						_NotifyOnFriendsLogOff_W = TearOff.NotifyOnFriendsLogOff;
					}
					return _NotifyOnFriendsLogOff_W;
				}
			}

			public AggregateParameter NotifyOnMicOn
		    {
				get
		        {
					if(_NotifyOnMicOn_W == null)
	        	    {
						_NotifyOnMicOn_W = TearOff.NotifyOnMicOn;
					}
					return _NotifyOnMicOn_W;
				}
			}

			public AggregateParameter NotifyOnMicOff
		    {
				get
		        {
					if(_NotifyOnMicOff_W == null)
	        	    {
						_NotifyOnMicOff_W = TearOff.NotifyOnMicOff;
					}
					return _NotifyOnMicOff_W;
				}
			}

			public AggregateParameter NotifyOnOpenCam
		    {
				get
		        {
					if(_NotifyOnOpenCam_W == null)
	        	    {
						_NotifyOnOpenCam_W = TearOff.NotifyOnOpenCam;
					}
					return _NotifyOnOpenCam_W;
				}
			}

			public AggregateParameter NotifyOnCloseCam
		    {
				get
		        {
					if(_NotifyOnCloseCam_W == null)
	        	    {
						_NotifyOnCloseCam_W = TearOff.NotifyOnCloseCam;
					}
					return _NotifyOnCloseCam_W;
				}
			}

			private AggregateParameter _RoomID_W = null;
			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _NotifyOnFriendsLogOn_W = null;
			private AggregateParameter _NotifyOnFriendsLogOff_W = null;
			private AggregateParameter _NotifyOnMicOn_W = null;
			private AggregateParameter _NotifyOnMicOff_W = null;
			private AggregateParameter _NotifyOnOpenCam_W = null;
			private AggregateParameter _NotifyOnCloseCam_W = null;

			public void AggregateClauseReset()
			{
				_RoomID_W = null;
				_MemberID_W = null;
				_NotifyOnFriendsLogOn_W = null;
				_NotifyOnFriendsLogOff_W = null;
				_NotifyOnMicOn_W = null;
				_NotifyOnMicOff_W = null;
				_NotifyOnOpenCam_W = null;
				_NotifyOnCloseCam_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberSettingInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberSettingUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberSettingDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnFriendsLogOn);
			p.SourceColumn = ColumnNames.NotifyOnFriendsLogOn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnFriendsLogOff);
			p.SourceColumn = ColumnNames.NotifyOnFriendsLogOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnMicOn);
			p.SourceColumn = ColumnNames.NotifyOnMicOn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnMicOff);
			p.SourceColumn = ColumnNames.NotifyOnMicOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnOpenCam);
			p.SourceColumn = ColumnNames.NotifyOnOpenCam;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnCloseCam);
			p.SourceColumn = ColumnNames.NotifyOnCloseCam;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
