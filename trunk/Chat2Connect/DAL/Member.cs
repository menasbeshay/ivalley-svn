
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Member : SqlClientEntity
	{
		public _Member()
		{
			this.QuerySource = "Member";
			this.MappingName = "Member";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MemberID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MemberID, MemberID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter IsOnLine
			{
				get
				{
					return new SqlParameter("@IsOnLine", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Credit_Point
			{
				get
				{
					return new SqlParameter("@Credit_Point", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Credit_Money
			{
				get
				{
					return new SqlParameter("@Credit_Money", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter PicPath
			{
				get
				{
					return new SqlParameter("@PicPath", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter BirthDate
			{
				get
				{
					return new SqlParameter("@BirthDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReligionID
			{
				get
				{
					return new SqlParameter("@ReligionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobTitle
			{
				get
				{
					return new SqlParameter("@JobTitle", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Interests
			{
				get
				{
					return new SqlParameter("@Interests", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter BestTeam
			{
				get
				{
					return new SqlParameter("@BestTeam", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter BestFood
			{
				get
				{
					return new SqlParameter("@BestFood", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter BestCar
			{
				get
				{
					return new SqlParameter("@BestCar", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter BestCounrty
			{
				get
				{
					return new SqlParameter("@BestCounrty", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter MoreData
			{
				get
				{
					return new SqlParameter("@MoreData", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter MemberStatus
			{
				get
				{
					return new SqlParameter("@MemberStatus", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter MemberTypeExpiryDate
			{
				get
				{
					return new SqlParameter("@MemberTypeExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ProfilePic
			{
				get
				{
					return new SqlParameter("@ProfilePic", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter LikeCount
			{
				get
				{
					return new SqlParameter("@LikeCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StatusMsg
			{
				get
				{
					return new SqlParameter("@StatusMsg", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Answer
			{
				get
				{
					return new SqlParameter("@Answer", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Religion
			{
				get
				{
					return new SqlParameter("@Religion", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FbURL
			{
				get
				{
					return new SqlParameter("@FbURL", SqlDbType.NVarChar, 400);
				}
			}
			
			public static SqlParameter TURL
			{
				get
				{
					return new SqlParameter("@TURL", SqlDbType.NVarChar, 400);
				}
			}
			
			public static SqlParameter YtURL
			{
				get
				{
					return new SqlParameter("@YtURL", SqlDbType.NVarChar, 400);
				}
			}
			
			public static SqlParameter Status
			{
				get
				{
					return new SqlParameter("@Status", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IP
			{
				get
				{
					return new SqlParameter("@IP", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter RowStatusID
			{
				get
				{
					return new SqlParameter("@RowStatusID", SqlDbType.TinyInt, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MemberID = "MemberID";
            public const string UserID = "UserID";
            public const string IsOnLine = "IsOnLine";
            public const string Name = "Name";
            public const string Credit_Point = "Credit_Point";
            public const string Credit_Money = "Credit_Money";
            public const string PicPath = "PicPath";
            public const string BirthDate = "BirthDate";
            public const string ReligionID = "ReligionID";
            public const string CountryID = "CountryID";
            public const string JobTitle = "JobTitle";
            public const string Interests = "Interests";
            public const string BestTeam = "BestTeam";
            public const string BestFood = "BestFood";
            public const string BestCar = "BestCar";
            public const string BestCounrty = "BestCounrty";
            public const string MoreData = "MoreData";
            public const string MemberStatus = "MemberStatus";
            public const string MemberTypeExpiryDate = "MemberTypeExpiryDate";
            public const string ProfilePic = "ProfilePic";
            public const string LikeCount = "likeCount";
            public const string StatusMsg = "StatusMsg";
            public const string Answer = "Answer";
            public const string Religion = "Religion";
            public const string FbURL = "fbURL";
            public const string TURL = "tURL";
            public const string YtURL = "ytURL";
            public const string Status = "Status";
            public const string IP = "IP";
            public const string RowStatusID = "RowStatusID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberID] = _Member.PropertyNames.MemberID;
					ht[UserID] = _Member.PropertyNames.UserID;
					ht[IsOnLine] = _Member.PropertyNames.IsOnLine;
					ht[Name] = _Member.PropertyNames.Name;
					ht[Credit_Point] = _Member.PropertyNames.Credit_Point;
					ht[Credit_Money] = _Member.PropertyNames.Credit_Money;
					ht[PicPath] = _Member.PropertyNames.PicPath;
					ht[BirthDate] = _Member.PropertyNames.BirthDate;
					ht[ReligionID] = _Member.PropertyNames.ReligionID;
					ht[CountryID] = _Member.PropertyNames.CountryID;
					ht[JobTitle] = _Member.PropertyNames.JobTitle;
					ht[Interests] = _Member.PropertyNames.Interests;
					ht[BestTeam] = _Member.PropertyNames.BestTeam;
					ht[BestFood] = _Member.PropertyNames.BestFood;
					ht[BestCar] = _Member.PropertyNames.BestCar;
					ht[BestCounrty] = _Member.PropertyNames.BestCounrty;
					ht[MoreData] = _Member.PropertyNames.MoreData;
					ht[MemberStatus] = _Member.PropertyNames.MemberStatus;
					ht[MemberTypeExpiryDate] = _Member.PropertyNames.MemberTypeExpiryDate;
					ht[ProfilePic] = _Member.PropertyNames.ProfilePic;
					ht[LikeCount] = _Member.PropertyNames.LikeCount;
					ht[StatusMsg] = _Member.PropertyNames.StatusMsg;
					ht[Answer] = _Member.PropertyNames.Answer;
					ht[Religion] = _Member.PropertyNames.Religion;
					ht[FbURL] = _Member.PropertyNames.FbURL;
					ht[TURL] = _Member.PropertyNames.TURL;
					ht[YtURL] = _Member.PropertyNames.YtURL;
					ht[Status] = _Member.PropertyNames.Status;
					ht[IP] = _Member.PropertyNames.IP;
					ht[RowStatusID] = _Member.PropertyNames.RowStatusID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MemberID = "MemberID";
            public const string UserID = "UserID";
            public const string IsOnLine = "IsOnLine";
            public const string Name = "Name";
            public const string Credit_Point = "Credit_Point";
            public const string Credit_Money = "Credit_Money";
            public const string PicPath = "PicPath";
            public const string BirthDate = "BirthDate";
            public const string ReligionID = "ReligionID";
            public const string CountryID = "CountryID";
            public const string JobTitle = "JobTitle";
            public const string Interests = "Interests";
            public const string BestTeam = "BestTeam";
            public const string BestFood = "BestFood";
            public const string BestCar = "BestCar";
            public const string BestCounrty = "BestCounrty";
            public const string MoreData = "MoreData";
            public const string MemberStatus = "MemberStatus";
            public const string MemberTypeExpiryDate = "MemberTypeExpiryDate";
            public const string ProfilePic = "ProfilePic";
            public const string LikeCount = "LikeCount";
            public const string StatusMsg = "StatusMsg";
            public const string Answer = "Answer";
            public const string Religion = "Religion";
            public const string FbURL = "FbURL";
            public const string TURL = "TURL";
            public const string YtURL = "YtURL";
            public const string Status = "Status";
            public const string IP = "IP";
            public const string RowStatusID = "RowStatusID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberID] = _Member.ColumnNames.MemberID;
					ht[UserID] = _Member.ColumnNames.UserID;
					ht[IsOnLine] = _Member.ColumnNames.IsOnLine;
					ht[Name] = _Member.ColumnNames.Name;
					ht[Credit_Point] = _Member.ColumnNames.Credit_Point;
					ht[Credit_Money] = _Member.ColumnNames.Credit_Money;
					ht[PicPath] = _Member.ColumnNames.PicPath;
					ht[BirthDate] = _Member.ColumnNames.BirthDate;
					ht[ReligionID] = _Member.ColumnNames.ReligionID;
					ht[CountryID] = _Member.ColumnNames.CountryID;
					ht[JobTitle] = _Member.ColumnNames.JobTitle;
					ht[Interests] = _Member.ColumnNames.Interests;
					ht[BestTeam] = _Member.ColumnNames.BestTeam;
					ht[BestFood] = _Member.ColumnNames.BestFood;
					ht[BestCar] = _Member.ColumnNames.BestCar;
					ht[BestCounrty] = _Member.ColumnNames.BestCounrty;
					ht[MoreData] = _Member.ColumnNames.MoreData;
					ht[MemberStatus] = _Member.ColumnNames.MemberStatus;
					ht[MemberTypeExpiryDate] = _Member.ColumnNames.MemberTypeExpiryDate;
					ht[ProfilePic] = _Member.ColumnNames.ProfilePic;
					ht[LikeCount] = _Member.ColumnNames.LikeCount;
					ht[StatusMsg] = _Member.ColumnNames.StatusMsg;
					ht[Answer] = _Member.ColumnNames.Answer;
					ht[Religion] = _Member.ColumnNames.Religion;
					ht[FbURL] = _Member.ColumnNames.FbURL;
					ht[TURL] = _Member.ColumnNames.TURL;
					ht[YtURL] = _Member.ColumnNames.YtURL;
					ht[Status] = _Member.ColumnNames.Status;
					ht[IP] = _Member.ColumnNames.IP;
					ht[RowStatusID] = _Member.ColumnNames.RowStatusID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MemberID = "s_MemberID";
            public const string UserID = "s_UserID";
            public const string IsOnLine = "s_IsOnLine";
            public const string Name = "s_Name";
            public const string Credit_Point = "s_Credit_Point";
            public const string Credit_Money = "s_Credit_Money";
            public const string PicPath = "s_PicPath";
            public const string BirthDate = "s_BirthDate";
            public const string ReligionID = "s_ReligionID";
            public const string CountryID = "s_CountryID";
            public const string JobTitle = "s_JobTitle";
            public const string Interests = "s_Interests";
            public const string BestTeam = "s_BestTeam";
            public const string BestFood = "s_BestFood";
            public const string BestCar = "s_BestCar";
            public const string BestCounrty = "s_BestCounrty";
            public const string MoreData = "s_MoreData";
            public const string MemberStatus = "s_MemberStatus";
            public const string MemberTypeExpiryDate = "s_MemberTypeExpiryDate";
            public const string ProfilePic = "s_ProfilePic";
            public const string LikeCount = "s_LikeCount";
            public const string StatusMsg = "s_StatusMsg";
            public const string Answer = "s_Answer";
            public const string Religion = "s_Religion";
            public const string FbURL = "s_FbURL";
            public const string TURL = "s_TURL";
            public const string YtURL = "s_YtURL";
            public const string Status = "s_Status";
            public const string IP = "s_IP";
            public const string RowStatusID = "s_RowStatusID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual Guid UserID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserID);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserID, value);
			}
		}

		public virtual bool IsOnLine
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsOnLine);
			}
			set
	        {
				base.Setbool(ColumnNames.IsOnLine, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual int Credit_Point
	    {
			get
	        {
				return base.Getint(ColumnNames.Credit_Point);
			}
			set
	        {
				base.Setint(ColumnNames.Credit_Point, value);
			}
		}

		public virtual decimal Credit_Money
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Credit_Money);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Credit_Money, value);
			}
		}

		public virtual string PicPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.PicPath);
			}
			set
	        {
				base.Setstring(ColumnNames.PicPath, value);
			}
		}

		public virtual DateTime BirthDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BirthDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BirthDate, value);
			}
		}

		public virtual int ReligionID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReligionID);
			}
			set
	        {
				base.Setint(ColumnNames.ReligionID, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual string JobTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.JobTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.JobTitle, value);
			}
		}

		public virtual string Interests
	    {
			get
	        {
				return base.Getstring(ColumnNames.Interests);
			}
			set
	        {
				base.Setstring(ColumnNames.Interests, value);
			}
		}

		public virtual string BestTeam
	    {
			get
	        {
				return base.Getstring(ColumnNames.BestTeam);
			}
			set
	        {
				base.Setstring(ColumnNames.BestTeam, value);
			}
		}

		public virtual string BestFood
	    {
			get
	        {
				return base.Getstring(ColumnNames.BestFood);
			}
			set
	        {
				base.Setstring(ColumnNames.BestFood, value);
			}
		}

		public virtual string BestCar
	    {
			get
	        {
				return base.Getstring(ColumnNames.BestCar);
			}
			set
	        {
				base.Setstring(ColumnNames.BestCar, value);
			}
		}

		public virtual string BestCounrty
	    {
			get
	        {
				return base.Getstring(ColumnNames.BestCounrty);
			}
			set
	        {
				base.Setstring(ColumnNames.BestCounrty, value);
			}
		}

		public virtual string MoreData
	    {
			get
	        {
				return base.Getstring(ColumnNames.MoreData);
			}
			set
	        {
				base.Setstring(ColumnNames.MoreData, value);
			}
		}

		public virtual string MemberStatus
	    {
			get
	        {
				return base.Getstring(ColumnNames.MemberStatus);
			}
			set
	        {
				base.Setstring(ColumnNames.MemberStatus, value);
			}
		}

		public virtual DateTime MemberTypeExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MemberTypeExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MemberTypeExpiryDate, value);
			}
		}

		public virtual string ProfilePic
	    {
			get
	        {
				return base.Getstring(ColumnNames.ProfilePic);
			}
			set
	        {
				base.Setstring(ColumnNames.ProfilePic, value);
			}
		}

		public virtual int LikeCount
	    {
			get
	        {
				return base.Getint(ColumnNames.LikeCount);
			}
			set
	        {
				base.Setint(ColumnNames.LikeCount, value);
			}
		}

		public virtual string StatusMsg
	    {
			get
	        {
				return base.Getstring(ColumnNames.StatusMsg);
			}
			set
	        {
				base.Setstring(ColumnNames.StatusMsg, value);
			}
		}

		public virtual string Answer
	    {
			get
	        {
				return base.Getstring(ColumnNames.Answer);
			}
			set
	        {
				base.Setstring(ColumnNames.Answer, value);
			}
		}

		public virtual string Religion
	    {
			get
	        {
				return base.Getstring(ColumnNames.Religion);
			}
			set
	        {
				base.Setstring(ColumnNames.Religion, value);
			}
		}

		public virtual string FbURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.FbURL);
			}
			set
	        {
				base.Setstring(ColumnNames.FbURL, value);
			}
		}

		public virtual string TURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.TURL);
			}
			set
	        {
				base.Setstring(ColumnNames.TURL, value);
			}
		}

		public virtual string YtURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.YtURL);
			}
			set
	        {
				base.Setstring(ColumnNames.YtURL, value);
			}
		}

		public virtual int Status
	    {
			get
	        {
				return base.Getint(ColumnNames.Status);
			}
			set
	        {
				base.Setint(ColumnNames.Status, value);
			}
		}

		public virtual string IP
	    {
			get
	        {
				return base.Getstring(ColumnNames.IP);
			}
			set
	        {
				base.Setstring(ColumnNames.IP, value);
			}
		}

		public virtual byte RowStatusID
	    {
			get
	        {
				return base.Getbyte(ColumnNames.RowStatusID);
			}
			set
	        {
				base.Setbyte(ColumnNames.RowStatusID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetGuidAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetGuidAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_IsOnLine
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsOnLine) ? string.Empty : base.GetboolAsString(ColumnNames.IsOnLine);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsOnLine);
				else
					this.IsOnLine = base.SetboolAsString(ColumnNames.IsOnLine, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Credit_Point
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Credit_Point) ? string.Empty : base.GetintAsString(ColumnNames.Credit_Point);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Credit_Point);
				else
					this.Credit_Point = base.SetintAsString(ColumnNames.Credit_Point, value);
			}
		}

		public virtual string s_Credit_Money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Credit_Money) ? string.Empty : base.GetdecimalAsString(ColumnNames.Credit_Money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Credit_Money);
				else
					this.Credit_Money = base.SetdecimalAsString(ColumnNames.Credit_Money, value);
			}
		}

		public virtual string s_PicPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PicPath) ? string.Empty : base.GetstringAsString(ColumnNames.PicPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PicPath);
				else
					this.PicPath = base.SetstringAsString(ColumnNames.PicPath, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BirthDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthDate);
				else
					this.BirthDate = base.SetDateTimeAsString(ColumnNames.BirthDate, value);
			}
		}

		public virtual string s_ReligionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReligionID) ? string.Empty : base.GetintAsString(ColumnNames.ReligionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReligionID);
				else
					this.ReligionID = base.SetintAsString(ColumnNames.ReligionID, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_JobTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitle) ? string.Empty : base.GetstringAsString(ColumnNames.JobTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitle);
				else
					this.JobTitle = base.SetstringAsString(ColumnNames.JobTitle, value);
			}
		}

		public virtual string s_Interests
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Interests) ? string.Empty : base.GetstringAsString(ColumnNames.Interests);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Interests);
				else
					this.Interests = base.SetstringAsString(ColumnNames.Interests, value);
			}
		}

		public virtual string s_BestTeam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestTeam) ? string.Empty : base.GetstringAsString(ColumnNames.BestTeam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestTeam);
				else
					this.BestTeam = base.SetstringAsString(ColumnNames.BestTeam, value);
			}
		}

		public virtual string s_BestFood
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestFood) ? string.Empty : base.GetstringAsString(ColumnNames.BestFood);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestFood);
				else
					this.BestFood = base.SetstringAsString(ColumnNames.BestFood, value);
			}
		}

		public virtual string s_BestCar
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestCar) ? string.Empty : base.GetstringAsString(ColumnNames.BestCar);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestCar);
				else
					this.BestCar = base.SetstringAsString(ColumnNames.BestCar, value);
			}
		}

		public virtual string s_BestCounrty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BestCounrty) ? string.Empty : base.GetstringAsString(ColumnNames.BestCounrty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BestCounrty);
				else
					this.BestCounrty = base.SetstringAsString(ColumnNames.BestCounrty, value);
			}
		}

		public virtual string s_MoreData
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MoreData) ? string.Empty : base.GetstringAsString(ColumnNames.MoreData);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MoreData);
				else
					this.MoreData = base.SetstringAsString(ColumnNames.MoreData, value);
			}
		}

		public virtual string s_MemberStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberStatus) ? string.Empty : base.GetstringAsString(ColumnNames.MemberStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberStatus);
				else
					this.MemberStatus = base.SetstringAsString(ColumnNames.MemberStatus, value);
			}
		}

		public virtual string s_MemberTypeExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberTypeExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MemberTypeExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberTypeExpiryDate);
				else
					this.MemberTypeExpiryDate = base.SetDateTimeAsString(ColumnNames.MemberTypeExpiryDate, value);
			}
		}

		public virtual string s_ProfilePic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProfilePic) ? string.Empty : base.GetstringAsString(ColumnNames.ProfilePic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProfilePic);
				else
					this.ProfilePic = base.SetstringAsString(ColumnNames.ProfilePic, value);
			}
		}

		public virtual string s_LikeCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LikeCount) ? string.Empty : base.GetintAsString(ColumnNames.LikeCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LikeCount);
				else
					this.LikeCount = base.SetintAsString(ColumnNames.LikeCount, value);
			}
		}

		public virtual string s_StatusMsg
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusMsg) ? string.Empty : base.GetstringAsString(ColumnNames.StatusMsg);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusMsg);
				else
					this.StatusMsg = base.SetstringAsString(ColumnNames.StatusMsg, value);
			}
		}

		public virtual string s_Answer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Answer) ? string.Empty : base.GetstringAsString(ColumnNames.Answer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Answer);
				else
					this.Answer = base.SetstringAsString(ColumnNames.Answer, value);
			}
		}

		public virtual string s_Religion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Religion) ? string.Empty : base.GetstringAsString(ColumnNames.Religion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Religion);
				else
					this.Religion = base.SetstringAsString(ColumnNames.Religion, value);
			}
		}

		public virtual string s_FbURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FbURL) ? string.Empty : base.GetstringAsString(ColumnNames.FbURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FbURL);
				else
					this.FbURL = base.SetstringAsString(ColumnNames.FbURL, value);
			}
		}

		public virtual string s_TURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TURL) ? string.Empty : base.GetstringAsString(ColumnNames.TURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TURL);
				else
					this.TURL = base.SetstringAsString(ColumnNames.TURL, value);
			}
		}

		public virtual string s_YtURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.YtURL) ? string.Empty : base.GetstringAsString(ColumnNames.YtURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.YtURL);
				else
					this.YtURL = base.SetstringAsString(ColumnNames.YtURL, value);
			}
		}

		public virtual string s_Status
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Status) ? string.Empty : base.GetintAsString(ColumnNames.Status);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Status);
				else
					this.Status = base.SetintAsString(ColumnNames.Status, value);
			}
		}

		public virtual string s_IP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IP) ? string.Empty : base.GetstringAsString(ColumnNames.IP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IP);
				else
					this.IP = base.SetstringAsString(ColumnNames.IP, value);
			}
		}

		public virtual string s_RowStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RowStatusID) ? string.Empty : base.GetbyteAsString(ColumnNames.RowStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RowStatusID);
				else
					this.RowStatusID = base.SetbyteAsString(ColumnNames.RowStatusID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsOnLine
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsOnLine, Parameters.IsOnLine);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Credit_Point
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Credit_Point, Parameters.Credit_Point);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Credit_Money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Credit_Money, Parameters.Credit_Money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PicPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PicPath, Parameters.PicPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReligionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReligionID, Parameters.ReligionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Interests
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Interests, Parameters.Interests);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestTeam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestTeam, Parameters.BestTeam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestFood
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestFood, Parameters.BestFood);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestCar
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestCar, Parameters.BestCar);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BestCounrty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BestCounrty, Parameters.BestCounrty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MoreData
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MoreData, Parameters.MoreData);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberStatus, Parameters.MemberStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberTypeExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberTypeExpiryDate, Parameters.MemberTypeExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProfilePic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProfilePic, Parameters.ProfilePic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LikeCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LikeCount, Parameters.LikeCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusMsg
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusMsg, Parameters.StatusMsg);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Answer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Answer, Parameters.Answer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Religion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Religion, Parameters.Religion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FbURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FbURL, Parameters.FbURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TURL, Parameters.TURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter YtURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.YtURL, Parameters.YtURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Status
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IP, Parameters.IP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RowStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RowStatusID, Parameters.RowStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter IsOnLine
		    {
				get
		        {
					if(_IsOnLine_W == null)
	        	    {
						_IsOnLine_W = TearOff.IsOnLine;
					}
					return _IsOnLine_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Credit_Point
		    {
				get
		        {
					if(_Credit_Point_W == null)
	        	    {
						_Credit_Point_W = TearOff.Credit_Point;
					}
					return _Credit_Point_W;
				}
			}

			public WhereParameter Credit_Money
		    {
				get
		        {
					if(_Credit_Money_W == null)
	        	    {
						_Credit_Money_W = TearOff.Credit_Money;
					}
					return _Credit_Money_W;
				}
			}

			public WhereParameter PicPath
		    {
				get
		        {
					if(_PicPath_W == null)
	        	    {
						_PicPath_W = TearOff.PicPath;
					}
					return _PicPath_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter ReligionID
		    {
				get
		        {
					if(_ReligionID_W == null)
	        	    {
						_ReligionID_W = TearOff.ReligionID;
					}
					return _ReligionID_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public WhereParameter Interests
		    {
				get
		        {
					if(_Interests_W == null)
	        	    {
						_Interests_W = TearOff.Interests;
					}
					return _Interests_W;
				}
			}

			public WhereParameter BestTeam
		    {
				get
		        {
					if(_BestTeam_W == null)
	        	    {
						_BestTeam_W = TearOff.BestTeam;
					}
					return _BestTeam_W;
				}
			}

			public WhereParameter BestFood
		    {
				get
		        {
					if(_BestFood_W == null)
	        	    {
						_BestFood_W = TearOff.BestFood;
					}
					return _BestFood_W;
				}
			}

			public WhereParameter BestCar
		    {
				get
		        {
					if(_BestCar_W == null)
	        	    {
						_BestCar_W = TearOff.BestCar;
					}
					return _BestCar_W;
				}
			}

			public WhereParameter BestCounrty
		    {
				get
		        {
					if(_BestCounrty_W == null)
	        	    {
						_BestCounrty_W = TearOff.BestCounrty;
					}
					return _BestCounrty_W;
				}
			}

			public WhereParameter MoreData
		    {
				get
		        {
					if(_MoreData_W == null)
	        	    {
						_MoreData_W = TearOff.MoreData;
					}
					return _MoreData_W;
				}
			}

			public WhereParameter MemberStatus
		    {
				get
		        {
					if(_MemberStatus_W == null)
	        	    {
						_MemberStatus_W = TearOff.MemberStatus;
					}
					return _MemberStatus_W;
				}
			}

			public WhereParameter MemberTypeExpiryDate
		    {
				get
		        {
					if(_MemberTypeExpiryDate_W == null)
	        	    {
						_MemberTypeExpiryDate_W = TearOff.MemberTypeExpiryDate;
					}
					return _MemberTypeExpiryDate_W;
				}
			}

			public WhereParameter ProfilePic
		    {
				get
		        {
					if(_ProfilePic_W == null)
	        	    {
						_ProfilePic_W = TearOff.ProfilePic;
					}
					return _ProfilePic_W;
				}
			}

			public WhereParameter LikeCount
		    {
				get
		        {
					if(_LikeCount_W == null)
	        	    {
						_LikeCount_W = TearOff.LikeCount;
					}
					return _LikeCount_W;
				}
			}

			public WhereParameter StatusMsg
		    {
				get
		        {
					if(_StatusMsg_W == null)
	        	    {
						_StatusMsg_W = TearOff.StatusMsg;
					}
					return _StatusMsg_W;
				}
			}

			public WhereParameter Answer
		    {
				get
		        {
					if(_Answer_W == null)
	        	    {
						_Answer_W = TearOff.Answer;
					}
					return _Answer_W;
				}
			}

			public WhereParameter Religion
		    {
				get
		        {
					if(_Religion_W == null)
	        	    {
						_Religion_W = TearOff.Religion;
					}
					return _Religion_W;
				}
			}

			public WhereParameter FbURL
		    {
				get
		        {
					if(_FbURL_W == null)
	        	    {
						_FbURL_W = TearOff.FbURL;
					}
					return _FbURL_W;
				}
			}

			public WhereParameter TURL
		    {
				get
		        {
					if(_TURL_W == null)
	        	    {
						_TURL_W = TearOff.TURL;
					}
					return _TURL_W;
				}
			}

			public WhereParameter YtURL
		    {
				get
		        {
					if(_YtURL_W == null)
	        	    {
						_YtURL_W = TearOff.YtURL;
					}
					return _YtURL_W;
				}
			}

			public WhereParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public WhereParameter IP
		    {
				get
		        {
					if(_IP_W == null)
	        	    {
						_IP_W = TearOff.IP;
					}
					return _IP_W;
				}
			}

			public WhereParameter RowStatusID
		    {
				get
		        {
					if(_RowStatusID_W == null)
	        	    {
						_RowStatusID_W = TearOff.RowStatusID;
					}
					return _RowStatusID_W;
				}
			}

			private WhereParameter _MemberID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _IsOnLine_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Credit_Point_W = null;
			private WhereParameter _Credit_Money_W = null;
			private WhereParameter _PicPath_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _ReligionID_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _JobTitle_W = null;
			private WhereParameter _Interests_W = null;
			private WhereParameter _BestTeam_W = null;
			private WhereParameter _BestFood_W = null;
			private WhereParameter _BestCar_W = null;
			private WhereParameter _BestCounrty_W = null;
			private WhereParameter _MoreData_W = null;
			private WhereParameter _MemberStatus_W = null;
			private WhereParameter _MemberTypeExpiryDate_W = null;
			private WhereParameter _ProfilePic_W = null;
			private WhereParameter _LikeCount_W = null;
			private WhereParameter _StatusMsg_W = null;
			private WhereParameter _Answer_W = null;
			private WhereParameter _Religion_W = null;
			private WhereParameter _FbURL_W = null;
			private WhereParameter _TURL_W = null;
			private WhereParameter _YtURL_W = null;
			private WhereParameter _Status_W = null;
			private WhereParameter _IP_W = null;
			private WhereParameter _RowStatusID_W = null;

			public void WhereClauseReset()
			{
				_MemberID_W = null;
				_UserID_W = null;
				_IsOnLine_W = null;
				_Name_W = null;
				_Credit_Point_W = null;
				_Credit_Money_W = null;
				_PicPath_W = null;
				_BirthDate_W = null;
				_ReligionID_W = null;
				_CountryID_W = null;
				_JobTitle_W = null;
				_Interests_W = null;
				_BestTeam_W = null;
				_BestFood_W = null;
				_BestCar_W = null;
				_BestCounrty_W = null;
				_MoreData_W = null;
				_MemberStatus_W = null;
				_MemberTypeExpiryDate_W = null;
				_ProfilePic_W = null;
				_LikeCount_W = null;
				_StatusMsg_W = null;
				_Answer_W = null;
				_Religion_W = null;
				_FbURL_W = null;
				_TURL_W = null;
				_YtURL_W = null;
				_Status_W = null;
				_IP_W = null;
				_RowStatusID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsOnLine
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsOnLine, Parameters.IsOnLine);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Credit_Point
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Credit_Point, Parameters.Credit_Point);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Credit_Money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Credit_Money, Parameters.Credit_Money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PicPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PicPath, Parameters.PicPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReligionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReligionID, Parameters.ReligionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Interests
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Interests, Parameters.Interests);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestTeam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestTeam, Parameters.BestTeam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestFood
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestFood, Parameters.BestFood);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestCar
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestCar, Parameters.BestCar);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BestCounrty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BestCounrty, Parameters.BestCounrty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MoreData
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MoreData, Parameters.MoreData);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberStatus, Parameters.MemberStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberTypeExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberTypeExpiryDate, Parameters.MemberTypeExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProfilePic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProfilePic, Parameters.ProfilePic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LikeCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LikeCount, Parameters.LikeCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusMsg
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusMsg, Parameters.StatusMsg);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Answer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Answer, Parameters.Answer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Religion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Religion, Parameters.Religion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FbURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FbURL, Parameters.FbURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TURL, Parameters.TURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter YtURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.YtURL, Parameters.YtURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Status
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IP, Parameters.IP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RowStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RowStatusID, Parameters.RowStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter IsOnLine
		    {
				get
		        {
					if(_IsOnLine_W == null)
	        	    {
						_IsOnLine_W = TearOff.IsOnLine;
					}
					return _IsOnLine_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Credit_Point
		    {
				get
		        {
					if(_Credit_Point_W == null)
	        	    {
						_Credit_Point_W = TearOff.Credit_Point;
					}
					return _Credit_Point_W;
				}
			}

			public AggregateParameter Credit_Money
		    {
				get
		        {
					if(_Credit_Money_W == null)
	        	    {
						_Credit_Money_W = TearOff.Credit_Money;
					}
					return _Credit_Money_W;
				}
			}

			public AggregateParameter PicPath
		    {
				get
		        {
					if(_PicPath_W == null)
	        	    {
						_PicPath_W = TearOff.PicPath;
					}
					return _PicPath_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter ReligionID
		    {
				get
		        {
					if(_ReligionID_W == null)
	        	    {
						_ReligionID_W = TearOff.ReligionID;
					}
					return _ReligionID_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public AggregateParameter Interests
		    {
				get
		        {
					if(_Interests_W == null)
	        	    {
						_Interests_W = TearOff.Interests;
					}
					return _Interests_W;
				}
			}

			public AggregateParameter BestTeam
		    {
				get
		        {
					if(_BestTeam_W == null)
	        	    {
						_BestTeam_W = TearOff.BestTeam;
					}
					return _BestTeam_W;
				}
			}

			public AggregateParameter BestFood
		    {
				get
		        {
					if(_BestFood_W == null)
	        	    {
						_BestFood_W = TearOff.BestFood;
					}
					return _BestFood_W;
				}
			}

			public AggregateParameter BestCar
		    {
				get
		        {
					if(_BestCar_W == null)
	        	    {
						_BestCar_W = TearOff.BestCar;
					}
					return _BestCar_W;
				}
			}

			public AggregateParameter BestCounrty
		    {
				get
		        {
					if(_BestCounrty_W == null)
	        	    {
						_BestCounrty_W = TearOff.BestCounrty;
					}
					return _BestCounrty_W;
				}
			}

			public AggregateParameter MoreData
		    {
				get
		        {
					if(_MoreData_W == null)
	        	    {
						_MoreData_W = TearOff.MoreData;
					}
					return _MoreData_W;
				}
			}

			public AggregateParameter MemberStatus
		    {
				get
		        {
					if(_MemberStatus_W == null)
	        	    {
						_MemberStatus_W = TearOff.MemberStatus;
					}
					return _MemberStatus_W;
				}
			}

			public AggregateParameter MemberTypeExpiryDate
		    {
				get
		        {
					if(_MemberTypeExpiryDate_W == null)
	        	    {
						_MemberTypeExpiryDate_W = TearOff.MemberTypeExpiryDate;
					}
					return _MemberTypeExpiryDate_W;
				}
			}

			public AggregateParameter ProfilePic
		    {
				get
		        {
					if(_ProfilePic_W == null)
	        	    {
						_ProfilePic_W = TearOff.ProfilePic;
					}
					return _ProfilePic_W;
				}
			}

			public AggregateParameter LikeCount
		    {
				get
		        {
					if(_LikeCount_W == null)
	        	    {
						_LikeCount_W = TearOff.LikeCount;
					}
					return _LikeCount_W;
				}
			}

			public AggregateParameter StatusMsg
		    {
				get
		        {
					if(_StatusMsg_W == null)
	        	    {
						_StatusMsg_W = TearOff.StatusMsg;
					}
					return _StatusMsg_W;
				}
			}

			public AggregateParameter Answer
		    {
				get
		        {
					if(_Answer_W == null)
	        	    {
						_Answer_W = TearOff.Answer;
					}
					return _Answer_W;
				}
			}

			public AggregateParameter Religion
		    {
				get
		        {
					if(_Religion_W == null)
	        	    {
						_Religion_W = TearOff.Religion;
					}
					return _Religion_W;
				}
			}

			public AggregateParameter FbURL
		    {
				get
		        {
					if(_FbURL_W == null)
	        	    {
						_FbURL_W = TearOff.FbURL;
					}
					return _FbURL_W;
				}
			}

			public AggregateParameter TURL
		    {
				get
		        {
					if(_TURL_W == null)
	        	    {
						_TURL_W = TearOff.TURL;
					}
					return _TURL_W;
				}
			}

			public AggregateParameter YtURL
		    {
				get
		        {
					if(_YtURL_W == null)
	        	    {
						_YtURL_W = TearOff.YtURL;
					}
					return _YtURL_W;
				}
			}

			public AggregateParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public AggregateParameter IP
		    {
				get
		        {
					if(_IP_W == null)
	        	    {
						_IP_W = TearOff.IP;
					}
					return _IP_W;
				}
			}

			public AggregateParameter RowStatusID
		    {
				get
		        {
					if(_RowStatusID_W == null)
	        	    {
						_RowStatusID_W = TearOff.RowStatusID;
					}
					return _RowStatusID_W;
				}
			}

			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _IsOnLine_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Credit_Point_W = null;
			private AggregateParameter _Credit_Money_W = null;
			private AggregateParameter _PicPath_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _ReligionID_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _JobTitle_W = null;
			private AggregateParameter _Interests_W = null;
			private AggregateParameter _BestTeam_W = null;
			private AggregateParameter _BestFood_W = null;
			private AggregateParameter _BestCar_W = null;
			private AggregateParameter _BestCounrty_W = null;
			private AggregateParameter _MoreData_W = null;
			private AggregateParameter _MemberStatus_W = null;
			private AggregateParameter _MemberTypeExpiryDate_W = null;
			private AggregateParameter _ProfilePic_W = null;
			private AggregateParameter _LikeCount_W = null;
			private AggregateParameter _StatusMsg_W = null;
			private AggregateParameter _Answer_W = null;
			private AggregateParameter _Religion_W = null;
			private AggregateParameter _FbURL_W = null;
			private AggregateParameter _TURL_W = null;
			private AggregateParameter _YtURL_W = null;
			private AggregateParameter _Status_W = null;
			private AggregateParameter _IP_W = null;
			private AggregateParameter _RowStatusID_W = null;

			public void AggregateClauseReset()
			{
				_MemberID_W = null;
				_UserID_W = null;
				_IsOnLine_W = null;
				_Name_W = null;
				_Credit_Point_W = null;
				_Credit_Money_W = null;
				_PicPath_W = null;
				_BirthDate_W = null;
				_ReligionID_W = null;
				_CountryID_W = null;
				_JobTitle_W = null;
				_Interests_W = null;
				_BestTeam_W = null;
				_BestFood_W = null;
				_BestCar_W = null;
				_BestCounrty_W = null;
				_MoreData_W = null;
				_MemberStatus_W = null;
				_MemberTypeExpiryDate_W = null;
				_ProfilePic_W = null;
				_LikeCount_W = null;
				_StatusMsg_W = null;
				_Answer_W = null;
				_Religion_W = null;
				_FbURL_W = null;
				_TURL_W = null;
				_YtURL_W = null;
				_Status_W = null;
				_IP_W = null;
				_RowStatusID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.MemberID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsOnLine);
			p.SourceColumn = ColumnNames.IsOnLine;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Credit_Point);
			p.SourceColumn = ColumnNames.Credit_Point;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Credit_Money);
			p.SourceColumn = ColumnNames.Credit_Money;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PicPath);
			p.SourceColumn = ColumnNames.PicPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthDate);
			p.SourceColumn = ColumnNames.BirthDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReligionID);
			p.SourceColumn = ColumnNames.ReligionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitle);
			p.SourceColumn = ColumnNames.JobTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Interests);
			p.SourceColumn = ColumnNames.Interests;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestTeam);
			p.SourceColumn = ColumnNames.BestTeam;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestFood);
			p.SourceColumn = ColumnNames.BestFood;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestCar);
			p.SourceColumn = ColumnNames.BestCar;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BestCounrty);
			p.SourceColumn = ColumnNames.BestCounrty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MoreData);
			p.SourceColumn = ColumnNames.MoreData;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberStatus);
			p.SourceColumn = ColumnNames.MemberStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberTypeExpiryDate);
			p.SourceColumn = ColumnNames.MemberTypeExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProfilePic);
			p.SourceColumn = ColumnNames.ProfilePic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LikeCount);
			p.SourceColumn = ColumnNames.LikeCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusMsg);
			p.SourceColumn = ColumnNames.StatusMsg;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Answer);
			p.SourceColumn = ColumnNames.Answer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Religion);
			p.SourceColumn = ColumnNames.Religion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FbURL);
			p.SourceColumn = ColumnNames.FbURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TURL);
			p.SourceColumn = ColumnNames.TURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.YtURL);
			p.SourceColumn = ColumnNames.YtURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Status);
			p.SourceColumn = ColumnNames.Status;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IP);
			p.SourceColumn = ColumnNames.IP;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RowStatusID);
			p.SourceColumn = ColumnNames.RowStatusID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
