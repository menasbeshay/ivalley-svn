
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MemberMessage : SqlClientEntity
	{
		public _MemberMessage()
		{
			this.QuerySource = "MemberMessage";
			this.MappingName = "MemberMessage";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberMessageLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MemberMessageID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MemberMessageID, MemberMessageID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberMessageLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MemberMessageID
			{
				get
				{
					return new SqlParameter("@MemberMessageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MessageFolderID
			{
				get
				{
					return new SqlParameter("@MessageFolderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SenderID
			{
				get
				{
					return new SqlParameter("@SenderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SendDate
			{
				get
				{
					return new SqlParameter("@SendDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MessageSubject
			{
				get
				{
					return new SqlParameter("@MessageSubject", SqlDbType.NVarChar, 3000);
				}
			}
			
			public static SqlParameter MessageContent
			{
				get
				{
					return new SqlParameter("@MessageContent", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MemberMessageID = "MemberMessageID";
            public const string MemberID = "MemberID";
            public const string MessageFolderID = "MessageFolderID";
            public const string SenderID = "SenderID";
            public const string SendDate = "SendDate";
            public const string MessageSubject = "MessageSubject";
            public const string MessageContent = "MessageContent";
            public const string IsDeleted = "IsDeleted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberMessageID] = _MemberMessage.PropertyNames.MemberMessageID;
					ht[MemberID] = _MemberMessage.PropertyNames.MemberID;
					ht[MessageFolderID] = _MemberMessage.PropertyNames.MessageFolderID;
					ht[SenderID] = _MemberMessage.PropertyNames.SenderID;
					ht[SendDate] = _MemberMessage.PropertyNames.SendDate;
					ht[MessageSubject] = _MemberMessage.PropertyNames.MessageSubject;
					ht[MessageContent] = _MemberMessage.PropertyNames.MessageContent;
					ht[IsDeleted] = _MemberMessage.PropertyNames.IsDeleted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MemberMessageID = "MemberMessageID";
            public const string MemberID = "MemberID";
            public const string MessageFolderID = "MessageFolderID";
            public const string SenderID = "SenderID";
            public const string SendDate = "SendDate";
            public const string MessageSubject = "MessageSubject";
            public const string MessageContent = "MessageContent";
            public const string IsDeleted = "IsDeleted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberMessageID] = _MemberMessage.ColumnNames.MemberMessageID;
					ht[MemberID] = _MemberMessage.ColumnNames.MemberID;
					ht[MessageFolderID] = _MemberMessage.ColumnNames.MessageFolderID;
					ht[SenderID] = _MemberMessage.ColumnNames.SenderID;
					ht[SendDate] = _MemberMessage.ColumnNames.SendDate;
					ht[MessageSubject] = _MemberMessage.ColumnNames.MessageSubject;
					ht[MessageContent] = _MemberMessage.ColumnNames.MessageContent;
					ht[IsDeleted] = _MemberMessage.ColumnNames.IsDeleted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MemberMessageID = "s_MemberMessageID";
            public const string MemberID = "s_MemberID";
            public const string MessageFolderID = "s_MessageFolderID";
            public const string SenderID = "s_SenderID";
            public const string SendDate = "s_SendDate";
            public const string MessageSubject = "s_MessageSubject";
            public const string MessageContent = "s_MessageContent";
            public const string IsDeleted = "s_IsDeleted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MemberMessageID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberMessageID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberMessageID, value);
			}
		}

		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual int MessageFolderID
	    {
			get
	        {
				return base.Getint(ColumnNames.MessageFolderID);
			}
			set
	        {
				base.Setint(ColumnNames.MessageFolderID, value);
			}
		}

		public virtual int SenderID
	    {
			get
	        {
				return base.Getint(ColumnNames.SenderID);
			}
			set
	        {
				base.Setint(ColumnNames.SenderID, value);
			}
		}

		public virtual DateTime SendDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SendDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SendDate, value);
			}
		}

		public virtual string MessageSubject
	    {
			get
	        {
				return base.Getstring(ColumnNames.MessageSubject);
			}
			set
	        {
				base.Setstring(ColumnNames.MessageSubject, value);
			}
		}

		public virtual string MessageContent
	    {
			get
	        {
				return base.Getstring(ColumnNames.MessageContent);
			}
			set
	        {
				base.Setstring(ColumnNames.MessageContent, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MemberMessageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberMessageID) ? string.Empty : base.GetintAsString(ColumnNames.MemberMessageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberMessageID);
				else
					this.MemberMessageID = base.SetintAsString(ColumnNames.MemberMessageID, value);
			}
		}

		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_MessageFolderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MessageFolderID) ? string.Empty : base.GetintAsString(ColumnNames.MessageFolderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MessageFolderID);
				else
					this.MessageFolderID = base.SetintAsString(ColumnNames.MessageFolderID, value);
			}
		}

		public virtual string s_SenderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SenderID) ? string.Empty : base.GetintAsString(ColumnNames.SenderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SenderID);
				else
					this.SenderID = base.SetintAsString(ColumnNames.SenderID, value);
			}
		}

		public virtual string s_SendDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SendDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SendDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SendDate);
				else
					this.SendDate = base.SetDateTimeAsString(ColumnNames.SendDate, value);
			}
		}

		public virtual string s_MessageSubject
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MessageSubject) ? string.Empty : base.GetstringAsString(ColumnNames.MessageSubject);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MessageSubject);
				else
					this.MessageSubject = base.SetstringAsString(ColumnNames.MessageSubject, value);
			}
		}

		public virtual string s_MessageContent
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MessageContent) ? string.Empty : base.GetstringAsString(ColumnNames.MessageContent);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MessageContent);
				else
					this.MessageContent = base.SetstringAsString(ColumnNames.MessageContent, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MemberMessageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberMessageID, Parameters.MemberMessageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MessageFolderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MessageFolderID, Parameters.MessageFolderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SenderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SenderID, Parameters.SenderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SendDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SendDate, Parameters.SendDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MessageSubject
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MessageSubject, Parameters.MessageSubject);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MessageContent
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MessageContent, Parameters.MessageContent);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MemberMessageID
		    {
				get
		        {
					if(_MemberMessageID_W == null)
	        	    {
						_MemberMessageID_W = TearOff.MemberMessageID;
					}
					return _MemberMessageID_W;
				}
			}

			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter MessageFolderID
		    {
				get
		        {
					if(_MessageFolderID_W == null)
	        	    {
						_MessageFolderID_W = TearOff.MessageFolderID;
					}
					return _MessageFolderID_W;
				}
			}

			public WhereParameter SenderID
		    {
				get
		        {
					if(_SenderID_W == null)
	        	    {
						_SenderID_W = TearOff.SenderID;
					}
					return _SenderID_W;
				}
			}

			public WhereParameter SendDate
		    {
				get
		        {
					if(_SendDate_W == null)
	        	    {
						_SendDate_W = TearOff.SendDate;
					}
					return _SendDate_W;
				}
			}

			public WhereParameter MessageSubject
		    {
				get
		        {
					if(_MessageSubject_W == null)
	        	    {
						_MessageSubject_W = TearOff.MessageSubject;
					}
					return _MessageSubject_W;
				}
			}

			public WhereParameter MessageContent
		    {
				get
		        {
					if(_MessageContent_W == null)
	        	    {
						_MessageContent_W = TearOff.MessageContent;
					}
					return _MessageContent_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private WhereParameter _MemberMessageID_W = null;
			private WhereParameter _MemberID_W = null;
			private WhereParameter _MessageFolderID_W = null;
			private WhereParameter _SenderID_W = null;
			private WhereParameter _SendDate_W = null;
			private WhereParameter _MessageSubject_W = null;
			private WhereParameter _MessageContent_W = null;
			private WhereParameter _IsDeleted_W = null;

			public void WhereClauseReset()
			{
				_MemberMessageID_W = null;
				_MemberID_W = null;
				_MessageFolderID_W = null;
				_SenderID_W = null;
				_SendDate_W = null;
				_MessageSubject_W = null;
				_MessageContent_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MemberMessageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberMessageID, Parameters.MemberMessageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MessageFolderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MessageFolderID, Parameters.MessageFolderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SenderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SenderID, Parameters.SenderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SendDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SendDate, Parameters.SendDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MessageSubject
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MessageSubject, Parameters.MessageSubject);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MessageContent
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MessageContent, Parameters.MessageContent);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MemberMessageID
		    {
				get
		        {
					if(_MemberMessageID_W == null)
	        	    {
						_MemberMessageID_W = TearOff.MemberMessageID;
					}
					return _MemberMessageID_W;
				}
			}

			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter MessageFolderID
		    {
				get
		        {
					if(_MessageFolderID_W == null)
	        	    {
						_MessageFolderID_W = TearOff.MessageFolderID;
					}
					return _MessageFolderID_W;
				}
			}

			public AggregateParameter SenderID
		    {
				get
		        {
					if(_SenderID_W == null)
	        	    {
						_SenderID_W = TearOff.SenderID;
					}
					return _SenderID_W;
				}
			}

			public AggregateParameter SendDate
		    {
				get
		        {
					if(_SendDate_W == null)
	        	    {
						_SendDate_W = TearOff.SendDate;
					}
					return _SendDate_W;
				}
			}

			public AggregateParameter MessageSubject
		    {
				get
		        {
					if(_MessageSubject_W == null)
	        	    {
						_MessageSubject_W = TearOff.MessageSubject;
					}
					return _MessageSubject_W;
				}
			}

			public AggregateParameter MessageContent
		    {
				get
		        {
					if(_MessageContent_W == null)
	        	    {
						_MessageContent_W = TearOff.MessageContent;
					}
					return _MessageContent_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private AggregateParameter _MemberMessageID_W = null;
			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _MessageFolderID_W = null;
			private AggregateParameter _SenderID_W = null;
			private AggregateParameter _SendDate_W = null;
			private AggregateParameter _MessageSubject_W = null;
			private AggregateParameter _MessageContent_W = null;
			private AggregateParameter _IsDeleted_W = null;

			public void AggregateClauseReset()
			{
				_MemberMessageID_W = null;
				_MemberID_W = null;
				_MessageFolderID_W = null;
				_SenderID_W = null;
				_SendDate_W = null;
				_MessageSubject_W = null;
				_MessageContent_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberMessageInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.MemberMessageID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberMessageUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberMessageDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MemberMessageID);
			p.SourceColumn = ColumnNames.MemberMessageID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MemberMessageID);
			p.SourceColumn = ColumnNames.MemberMessageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MessageFolderID);
			p.SourceColumn = ColumnNames.MessageFolderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SenderID);
			p.SourceColumn = ColumnNames.SenderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SendDate);
			p.SourceColumn = ColumnNames.SendDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MessageSubject);
			p.SourceColumn = ColumnNames.MessageSubject;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MessageContent);
			p.SourceColumn = ColumnNames.MessageContent;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
