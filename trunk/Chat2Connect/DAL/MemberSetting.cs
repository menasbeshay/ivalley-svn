
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MemberSetting : SqlClientEntity
	{
		public _MemberSetting()
		{
			this.QuerySource = "MemberSetting";
			this.MappingName = "MemberSetting";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberSettingLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MemberSettingID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MemberSettingID, MemberSettingID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberSettingLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MemberSettingID
			{
				get
				{
					return new SqlParameter("@MemberSettingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HidePics
			{
				get
				{
					return new SqlParameter("@HidePics", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HideRoomPics
			{
				get
				{
					return new SqlParameter("@HideRoomPics", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HideProfile
			{
				get
				{
					return new SqlParameter("@HideProfile", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnPrivateChat
			{
				get
				{
					return new SqlParameter("@NotifyOnPrivateChat", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnFriendsOnOff
			{
				get
				{
					return new SqlParameter("@NotifyOnFriendsOnOff", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnFriendChangeStatus
			{
				get
				{
					return new SqlParameter("@NotifyOnFriendChangeStatus", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnGetMsg
			{
				get
				{
					return new SqlParameter("@NotifyOnGetMsg", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter NotifyOnVoiceMail
			{
				get
				{
					return new SqlParameter("@NotifyOnVoiceMail", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SearchMeByMail
			{
				get
				{
					return new SqlParameter("@SearchMeByMail", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter VoiceNotfication
			{
				get
				{
					return new SqlParameter("@VoiceNotfication", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptPM
			{
				get
				{
					return new SqlParameter("@AcceptPM", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptSMS
			{
				get
				{
					return new SqlParameter("@AcceptSMS", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptMSG
			{
				get
				{
					return new SqlParameter("@AcceptMSG", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptVoiceMail
			{
				get
				{
					return new SqlParameter("@AcceptVoiceMail", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptFiles
			{
				get
				{
					return new SqlParameter("@AcceptFiles", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AcceptInvitations
			{
				get
				{
					return new SqlParameter("@AcceptInvitations", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ChangeMyStatus
			{
				get
				{
					return new SqlParameter("@ChangeMyStatus", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ChangeMyStatusMin
			{
				get
				{
					return new SqlParameter("@ChangeMyStatusMin", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MemberSettingID = "MemberSettingID";
            public const string MemberID = "MemberID";
            public const string HidePics = "HidePics";
            public const string HideRoomPics = "HideRoomPics";
            public const string HideProfile = "HideProfile";
            public const string NotifyOnPrivateChat = "NotifyOnPrivateChat";
            public const string NotifyOnFriendsOnOff = "NotifyOnFriendsOnOff";
            public const string NotifyOnFriendChangeStatus = "NotifyOnFriendChangeStatus";
            public const string NotifyOnGetMsg = "NotifyOnGetMsg";
            public const string NotifyOnVoiceMail = "NotifyOnVoiceMail";
            public const string SearchMeByMail = "SearchMeByMail";
            public const string VoiceNotfication = "VoiceNotfication";
            public const string AcceptPM = "AcceptPM";
            public const string AcceptSMS = "AcceptSMS";
            public const string AcceptMSG = "AcceptMSG";
            public const string AcceptVoiceMail = "AcceptVoiceMail";
            public const string AcceptFiles = "AcceptFiles";
            public const string AcceptInvitations = "AcceptInvitations";
            public const string ChangeMyStatus = "ChangeMyStatus";
            public const string ChangeMyStatusMin = "ChangeMyStatusMin";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberSettingID] = _MemberSetting.PropertyNames.MemberSettingID;
					ht[MemberID] = _MemberSetting.PropertyNames.MemberID;
					ht[HidePics] = _MemberSetting.PropertyNames.HidePics;
					ht[HideRoomPics] = _MemberSetting.PropertyNames.HideRoomPics;
					ht[HideProfile] = _MemberSetting.PropertyNames.HideProfile;
					ht[NotifyOnPrivateChat] = _MemberSetting.PropertyNames.NotifyOnPrivateChat;
					ht[NotifyOnFriendsOnOff] = _MemberSetting.PropertyNames.NotifyOnFriendsOnOff;
					ht[NotifyOnFriendChangeStatus] = _MemberSetting.PropertyNames.NotifyOnFriendChangeStatus;
					ht[NotifyOnGetMsg] = _MemberSetting.PropertyNames.NotifyOnGetMsg;
					ht[NotifyOnVoiceMail] = _MemberSetting.PropertyNames.NotifyOnVoiceMail;
					ht[SearchMeByMail] = _MemberSetting.PropertyNames.SearchMeByMail;
					ht[VoiceNotfication] = _MemberSetting.PropertyNames.VoiceNotfication;
					ht[AcceptPM] = _MemberSetting.PropertyNames.AcceptPM;
					ht[AcceptSMS] = _MemberSetting.PropertyNames.AcceptSMS;
					ht[AcceptMSG] = _MemberSetting.PropertyNames.AcceptMSG;
					ht[AcceptVoiceMail] = _MemberSetting.PropertyNames.AcceptVoiceMail;
					ht[AcceptFiles] = _MemberSetting.PropertyNames.AcceptFiles;
					ht[AcceptInvitations] = _MemberSetting.PropertyNames.AcceptInvitations;
					ht[ChangeMyStatus] = _MemberSetting.PropertyNames.ChangeMyStatus;
					ht[ChangeMyStatusMin] = _MemberSetting.PropertyNames.ChangeMyStatusMin;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MemberSettingID = "MemberSettingID";
            public const string MemberID = "MemberID";
            public const string HidePics = "HidePics";
            public const string HideRoomPics = "HideRoomPics";
            public const string HideProfile = "HideProfile";
            public const string NotifyOnPrivateChat = "NotifyOnPrivateChat";
            public const string NotifyOnFriendsOnOff = "NotifyOnFriendsOnOff";
            public const string NotifyOnFriendChangeStatus = "NotifyOnFriendChangeStatus";
            public const string NotifyOnGetMsg = "NotifyOnGetMsg";
            public const string NotifyOnVoiceMail = "NotifyOnVoiceMail";
            public const string SearchMeByMail = "SearchMeByMail";
            public const string VoiceNotfication = "VoiceNotfication";
            public const string AcceptPM = "AcceptPM";
            public const string AcceptSMS = "AcceptSMS";
            public const string AcceptMSG = "AcceptMSG";
            public const string AcceptVoiceMail = "AcceptVoiceMail";
            public const string AcceptFiles = "AcceptFiles";
            public const string AcceptInvitations = "AcceptInvitations";
            public const string ChangeMyStatus = "ChangeMyStatus";
            public const string ChangeMyStatusMin = "ChangeMyStatusMin";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberSettingID] = _MemberSetting.ColumnNames.MemberSettingID;
					ht[MemberID] = _MemberSetting.ColumnNames.MemberID;
					ht[HidePics] = _MemberSetting.ColumnNames.HidePics;
					ht[HideRoomPics] = _MemberSetting.ColumnNames.HideRoomPics;
					ht[HideProfile] = _MemberSetting.ColumnNames.HideProfile;
					ht[NotifyOnPrivateChat] = _MemberSetting.ColumnNames.NotifyOnPrivateChat;
					ht[NotifyOnFriendsOnOff] = _MemberSetting.ColumnNames.NotifyOnFriendsOnOff;
					ht[NotifyOnFriendChangeStatus] = _MemberSetting.ColumnNames.NotifyOnFriendChangeStatus;
					ht[NotifyOnGetMsg] = _MemberSetting.ColumnNames.NotifyOnGetMsg;
					ht[NotifyOnVoiceMail] = _MemberSetting.ColumnNames.NotifyOnVoiceMail;
					ht[SearchMeByMail] = _MemberSetting.ColumnNames.SearchMeByMail;
					ht[VoiceNotfication] = _MemberSetting.ColumnNames.VoiceNotfication;
					ht[AcceptPM] = _MemberSetting.ColumnNames.AcceptPM;
					ht[AcceptSMS] = _MemberSetting.ColumnNames.AcceptSMS;
					ht[AcceptMSG] = _MemberSetting.ColumnNames.AcceptMSG;
					ht[AcceptVoiceMail] = _MemberSetting.ColumnNames.AcceptVoiceMail;
					ht[AcceptFiles] = _MemberSetting.ColumnNames.AcceptFiles;
					ht[AcceptInvitations] = _MemberSetting.ColumnNames.AcceptInvitations;
					ht[ChangeMyStatus] = _MemberSetting.ColumnNames.ChangeMyStatus;
					ht[ChangeMyStatusMin] = _MemberSetting.ColumnNames.ChangeMyStatusMin;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MemberSettingID = "s_MemberSettingID";
            public const string MemberID = "s_MemberID";
            public const string HidePics = "s_HidePics";
            public const string HideRoomPics = "s_HideRoomPics";
            public const string HideProfile = "s_HideProfile";
            public const string NotifyOnPrivateChat = "s_NotifyOnPrivateChat";
            public const string NotifyOnFriendsOnOff = "s_NotifyOnFriendsOnOff";
            public const string NotifyOnFriendChangeStatus = "s_NotifyOnFriendChangeStatus";
            public const string NotifyOnGetMsg = "s_NotifyOnGetMsg";
            public const string NotifyOnVoiceMail = "s_NotifyOnVoiceMail";
            public const string SearchMeByMail = "s_SearchMeByMail";
            public const string VoiceNotfication = "s_VoiceNotfication";
            public const string AcceptPM = "s_AcceptPM";
            public const string AcceptSMS = "s_AcceptSMS";
            public const string AcceptMSG = "s_AcceptMSG";
            public const string AcceptVoiceMail = "s_AcceptVoiceMail";
            public const string AcceptFiles = "s_AcceptFiles";
            public const string AcceptInvitations = "s_AcceptInvitations";
            public const string ChangeMyStatus = "s_ChangeMyStatus";
            public const string ChangeMyStatusMin = "s_ChangeMyStatusMin";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MemberSettingID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberSettingID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberSettingID, value);
			}
		}

		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual bool HidePics
	    {
			get
	        {
				return base.Getbool(ColumnNames.HidePics);
			}
			set
	        {
				base.Setbool(ColumnNames.HidePics, value);
			}
		}

		public virtual bool HideRoomPics
	    {
			get
	        {
				return base.Getbool(ColumnNames.HideRoomPics);
			}
			set
	        {
				base.Setbool(ColumnNames.HideRoomPics, value);
			}
		}

		public virtual bool HideProfile
	    {
			get
	        {
				return base.Getbool(ColumnNames.HideProfile);
			}
			set
	        {
				base.Setbool(ColumnNames.HideProfile, value);
			}
		}

		public virtual bool NotifyOnPrivateChat
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnPrivateChat);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnPrivateChat, value);
			}
		}

		public virtual bool NotifyOnFriendsOnOff
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnFriendsOnOff);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnFriendsOnOff, value);
			}
		}

		public virtual bool NotifyOnFriendChangeStatus
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnFriendChangeStatus);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnFriendChangeStatus, value);
			}
		}

		public virtual bool NotifyOnGetMsg
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnGetMsg);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnGetMsg, value);
			}
		}

		public virtual bool NotifyOnVoiceMail
	    {
			get
	        {
				return base.Getbool(ColumnNames.NotifyOnVoiceMail);
			}
			set
	        {
				base.Setbool(ColumnNames.NotifyOnVoiceMail, value);
			}
		}

		public virtual bool SearchMeByMail
	    {
			get
	        {
				return base.Getbool(ColumnNames.SearchMeByMail);
			}
			set
	        {
				base.Setbool(ColumnNames.SearchMeByMail, value);
			}
		}

		public virtual bool VoiceNotfication
	    {
			get
	        {
				return base.Getbool(ColumnNames.VoiceNotfication);
			}
			set
	        {
				base.Setbool(ColumnNames.VoiceNotfication, value);
			}
		}

		public virtual bool AcceptPM
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptPM);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptPM, value);
			}
		}

		public virtual bool AcceptSMS
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptSMS);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptSMS, value);
			}
		}

		public virtual bool AcceptMSG
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptMSG);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptMSG, value);
			}
		}

		public virtual bool AcceptVoiceMail
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptVoiceMail);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptVoiceMail, value);
			}
		}

		public virtual bool AcceptFiles
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptFiles);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptFiles, value);
			}
		}

		public virtual bool AcceptInvitations
	    {
			get
	        {
				return base.Getbool(ColumnNames.AcceptInvitations);
			}
			set
	        {
				base.Setbool(ColumnNames.AcceptInvitations, value);
			}
		}

		public virtual bool ChangeMyStatus
	    {
			get
	        {
				return base.Getbool(ColumnNames.ChangeMyStatus);
			}
			set
	        {
				base.Setbool(ColumnNames.ChangeMyStatus, value);
			}
		}

		public virtual int ChangeMyStatusMin
	    {
			get
	        {
				return base.Getint(ColumnNames.ChangeMyStatusMin);
			}
			set
	        {
				base.Setint(ColumnNames.ChangeMyStatusMin, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MemberSettingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberSettingID) ? string.Empty : base.GetintAsString(ColumnNames.MemberSettingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberSettingID);
				else
					this.MemberSettingID = base.SetintAsString(ColumnNames.MemberSettingID, value);
			}
		}

		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_HidePics
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HidePics) ? string.Empty : base.GetboolAsString(ColumnNames.HidePics);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HidePics);
				else
					this.HidePics = base.SetboolAsString(ColumnNames.HidePics, value);
			}
		}

		public virtual string s_HideRoomPics
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HideRoomPics) ? string.Empty : base.GetboolAsString(ColumnNames.HideRoomPics);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HideRoomPics);
				else
					this.HideRoomPics = base.SetboolAsString(ColumnNames.HideRoomPics, value);
			}
		}

		public virtual string s_HideProfile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HideProfile) ? string.Empty : base.GetboolAsString(ColumnNames.HideProfile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HideProfile);
				else
					this.HideProfile = base.SetboolAsString(ColumnNames.HideProfile, value);
			}
		}

		public virtual string s_NotifyOnPrivateChat
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnPrivateChat) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnPrivateChat);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnPrivateChat);
				else
					this.NotifyOnPrivateChat = base.SetboolAsString(ColumnNames.NotifyOnPrivateChat, value);
			}
		}

		public virtual string s_NotifyOnFriendsOnOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnFriendsOnOff) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnFriendsOnOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnFriendsOnOff);
				else
					this.NotifyOnFriendsOnOff = base.SetboolAsString(ColumnNames.NotifyOnFriendsOnOff, value);
			}
		}

		public virtual string s_NotifyOnFriendChangeStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnFriendChangeStatus) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnFriendChangeStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnFriendChangeStatus);
				else
					this.NotifyOnFriendChangeStatus = base.SetboolAsString(ColumnNames.NotifyOnFriendChangeStatus, value);
			}
		}

		public virtual string s_NotifyOnGetMsg
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnGetMsg) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnGetMsg);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnGetMsg);
				else
					this.NotifyOnGetMsg = base.SetboolAsString(ColumnNames.NotifyOnGetMsg, value);
			}
		}

		public virtual string s_NotifyOnVoiceMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NotifyOnVoiceMail) ? string.Empty : base.GetboolAsString(ColumnNames.NotifyOnVoiceMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NotifyOnVoiceMail);
				else
					this.NotifyOnVoiceMail = base.SetboolAsString(ColumnNames.NotifyOnVoiceMail, value);
			}
		}

		public virtual string s_SearchMeByMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SearchMeByMail) ? string.Empty : base.GetboolAsString(ColumnNames.SearchMeByMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SearchMeByMail);
				else
					this.SearchMeByMail = base.SetboolAsString(ColumnNames.SearchMeByMail, value);
			}
		}

		public virtual string s_VoiceNotfication
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VoiceNotfication) ? string.Empty : base.GetboolAsString(ColumnNames.VoiceNotfication);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VoiceNotfication);
				else
					this.VoiceNotfication = base.SetboolAsString(ColumnNames.VoiceNotfication, value);
			}
		}

		public virtual string s_AcceptPM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptPM) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptPM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptPM);
				else
					this.AcceptPM = base.SetboolAsString(ColumnNames.AcceptPM, value);
			}
		}

		public virtual string s_AcceptSMS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptSMS) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptSMS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptSMS);
				else
					this.AcceptSMS = base.SetboolAsString(ColumnNames.AcceptSMS, value);
			}
		}

		public virtual string s_AcceptMSG
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptMSG) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptMSG);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptMSG);
				else
					this.AcceptMSG = base.SetboolAsString(ColumnNames.AcceptMSG, value);
			}
		}

		public virtual string s_AcceptVoiceMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptVoiceMail) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptVoiceMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptVoiceMail);
				else
					this.AcceptVoiceMail = base.SetboolAsString(ColumnNames.AcceptVoiceMail, value);
			}
		}

		public virtual string s_AcceptFiles
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptFiles) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptFiles);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptFiles);
				else
					this.AcceptFiles = base.SetboolAsString(ColumnNames.AcceptFiles, value);
			}
		}

		public virtual string s_AcceptInvitations
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AcceptInvitations) ? string.Empty : base.GetboolAsString(ColumnNames.AcceptInvitations);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AcceptInvitations);
				else
					this.AcceptInvitations = base.SetboolAsString(ColumnNames.AcceptInvitations, value);
			}
		}

		public virtual string s_ChangeMyStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChangeMyStatus) ? string.Empty : base.GetboolAsString(ColumnNames.ChangeMyStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChangeMyStatus);
				else
					this.ChangeMyStatus = base.SetboolAsString(ColumnNames.ChangeMyStatus, value);
			}
		}

		public virtual string s_ChangeMyStatusMin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChangeMyStatusMin) ? string.Empty : base.GetintAsString(ColumnNames.ChangeMyStatusMin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChangeMyStatusMin);
				else
					this.ChangeMyStatusMin = base.SetintAsString(ColumnNames.ChangeMyStatusMin, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MemberSettingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberSettingID, Parameters.MemberSettingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HidePics
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HidePics, Parameters.HidePics);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HideRoomPics
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HideRoomPics, Parameters.HideRoomPics);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HideProfile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HideProfile, Parameters.HideProfile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnPrivateChat
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnPrivateChat, Parameters.NotifyOnPrivateChat);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnFriendsOnOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnFriendsOnOff, Parameters.NotifyOnFriendsOnOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnFriendChangeStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnFriendChangeStatus, Parameters.NotifyOnFriendChangeStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnGetMsg
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnGetMsg, Parameters.NotifyOnGetMsg);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NotifyOnVoiceMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NotifyOnVoiceMail, Parameters.NotifyOnVoiceMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SearchMeByMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SearchMeByMail, Parameters.SearchMeByMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VoiceNotfication
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VoiceNotfication, Parameters.VoiceNotfication);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptPM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptPM, Parameters.AcceptPM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptSMS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptSMS, Parameters.AcceptSMS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptMSG
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptMSG, Parameters.AcceptMSG);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptVoiceMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptVoiceMail, Parameters.AcceptVoiceMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptFiles
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptFiles, Parameters.AcceptFiles);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AcceptInvitations
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AcceptInvitations, Parameters.AcceptInvitations);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChangeMyStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChangeMyStatus, Parameters.ChangeMyStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChangeMyStatusMin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChangeMyStatusMin, Parameters.ChangeMyStatusMin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MemberSettingID
		    {
				get
		        {
					if(_MemberSettingID_W == null)
	        	    {
						_MemberSettingID_W = TearOff.MemberSettingID;
					}
					return _MemberSettingID_W;
				}
			}

			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter HidePics
		    {
				get
		        {
					if(_HidePics_W == null)
	        	    {
						_HidePics_W = TearOff.HidePics;
					}
					return _HidePics_W;
				}
			}

			public WhereParameter HideRoomPics
		    {
				get
		        {
					if(_HideRoomPics_W == null)
	        	    {
						_HideRoomPics_W = TearOff.HideRoomPics;
					}
					return _HideRoomPics_W;
				}
			}

			public WhereParameter HideProfile
		    {
				get
		        {
					if(_HideProfile_W == null)
	        	    {
						_HideProfile_W = TearOff.HideProfile;
					}
					return _HideProfile_W;
				}
			}

			public WhereParameter NotifyOnPrivateChat
		    {
				get
		        {
					if(_NotifyOnPrivateChat_W == null)
	        	    {
						_NotifyOnPrivateChat_W = TearOff.NotifyOnPrivateChat;
					}
					return _NotifyOnPrivateChat_W;
				}
			}

			public WhereParameter NotifyOnFriendsOnOff
		    {
				get
		        {
					if(_NotifyOnFriendsOnOff_W == null)
	        	    {
						_NotifyOnFriendsOnOff_W = TearOff.NotifyOnFriendsOnOff;
					}
					return _NotifyOnFriendsOnOff_W;
				}
			}

			public WhereParameter NotifyOnFriendChangeStatus
		    {
				get
		        {
					if(_NotifyOnFriendChangeStatus_W == null)
	        	    {
						_NotifyOnFriendChangeStatus_W = TearOff.NotifyOnFriendChangeStatus;
					}
					return _NotifyOnFriendChangeStatus_W;
				}
			}

			public WhereParameter NotifyOnGetMsg
		    {
				get
		        {
					if(_NotifyOnGetMsg_W == null)
	        	    {
						_NotifyOnGetMsg_W = TearOff.NotifyOnGetMsg;
					}
					return _NotifyOnGetMsg_W;
				}
			}

			public WhereParameter NotifyOnVoiceMail
		    {
				get
		        {
					if(_NotifyOnVoiceMail_W == null)
	        	    {
						_NotifyOnVoiceMail_W = TearOff.NotifyOnVoiceMail;
					}
					return _NotifyOnVoiceMail_W;
				}
			}

			public WhereParameter SearchMeByMail
		    {
				get
		        {
					if(_SearchMeByMail_W == null)
	        	    {
						_SearchMeByMail_W = TearOff.SearchMeByMail;
					}
					return _SearchMeByMail_W;
				}
			}

			public WhereParameter VoiceNotfication
		    {
				get
		        {
					if(_VoiceNotfication_W == null)
	        	    {
						_VoiceNotfication_W = TearOff.VoiceNotfication;
					}
					return _VoiceNotfication_W;
				}
			}

			public WhereParameter AcceptPM
		    {
				get
		        {
					if(_AcceptPM_W == null)
	        	    {
						_AcceptPM_W = TearOff.AcceptPM;
					}
					return _AcceptPM_W;
				}
			}

			public WhereParameter AcceptSMS
		    {
				get
		        {
					if(_AcceptSMS_W == null)
	        	    {
						_AcceptSMS_W = TearOff.AcceptSMS;
					}
					return _AcceptSMS_W;
				}
			}

			public WhereParameter AcceptMSG
		    {
				get
		        {
					if(_AcceptMSG_W == null)
	        	    {
						_AcceptMSG_W = TearOff.AcceptMSG;
					}
					return _AcceptMSG_W;
				}
			}

			public WhereParameter AcceptVoiceMail
		    {
				get
		        {
					if(_AcceptVoiceMail_W == null)
	        	    {
						_AcceptVoiceMail_W = TearOff.AcceptVoiceMail;
					}
					return _AcceptVoiceMail_W;
				}
			}

			public WhereParameter AcceptFiles
		    {
				get
		        {
					if(_AcceptFiles_W == null)
	        	    {
						_AcceptFiles_W = TearOff.AcceptFiles;
					}
					return _AcceptFiles_W;
				}
			}

			public WhereParameter AcceptInvitations
		    {
				get
		        {
					if(_AcceptInvitations_W == null)
	        	    {
						_AcceptInvitations_W = TearOff.AcceptInvitations;
					}
					return _AcceptInvitations_W;
				}
			}

			public WhereParameter ChangeMyStatus
		    {
				get
		        {
					if(_ChangeMyStatus_W == null)
	        	    {
						_ChangeMyStatus_W = TearOff.ChangeMyStatus;
					}
					return _ChangeMyStatus_W;
				}
			}

			public WhereParameter ChangeMyStatusMin
		    {
				get
		        {
					if(_ChangeMyStatusMin_W == null)
	        	    {
						_ChangeMyStatusMin_W = TearOff.ChangeMyStatusMin;
					}
					return _ChangeMyStatusMin_W;
				}
			}

			private WhereParameter _MemberSettingID_W = null;
			private WhereParameter _MemberID_W = null;
			private WhereParameter _HidePics_W = null;
			private WhereParameter _HideRoomPics_W = null;
			private WhereParameter _HideProfile_W = null;
			private WhereParameter _NotifyOnPrivateChat_W = null;
			private WhereParameter _NotifyOnFriendsOnOff_W = null;
			private WhereParameter _NotifyOnFriendChangeStatus_W = null;
			private WhereParameter _NotifyOnGetMsg_W = null;
			private WhereParameter _NotifyOnVoiceMail_W = null;
			private WhereParameter _SearchMeByMail_W = null;
			private WhereParameter _VoiceNotfication_W = null;
			private WhereParameter _AcceptPM_W = null;
			private WhereParameter _AcceptSMS_W = null;
			private WhereParameter _AcceptMSG_W = null;
			private WhereParameter _AcceptVoiceMail_W = null;
			private WhereParameter _AcceptFiles_W = null;
			private WhereParameter _AcceptInvitations_W = null;
			private WhereParameter _ChangeMyStatus_W = null;
			private WhereParameter _ChangeMyStatusMin_W = null;

			public void WhereClauseReset()
			{
				_MemberSettingID_W = null;
				_MemberID_W = null;
				_HidePics_W = null;
				_HideRoomPics_W = null;
				_HideProfile_W = null;
				_NotifyOnPrivateChat_W = null;
				_NotifyOnFriendsOnOff_W = null;
				_NotifyOnFriendChangeStatus_W = null;
				_NotifyOnGetMsg_W = null;
				_NotifyOnVoiceMail_W = null;
				_SearchMeByMail_W = null;
				_VoiceNotfication_W = null;
				_AcceptPM_W = null;
				_AcceptSMS_W = null;
				_AcceptMSG_W = null;
				_AcceptVoiceMail_W = null;
				_AcceptFiles_W = null;
				_AcceptInvitations_W = null;
				_ChangeMyStatus_W = null;
				_ChangeMyStatusMin_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MemberSettingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberSettingID, Parameters.MemberSettingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HidePics
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HidePics, Parameters.HidePics);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HideRoomPics
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HideRoomPics, Parameters.HideRoomPics);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HideProfile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HideProfile, Parameters.HideProfile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnPrivateChat
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnPrivateChat, Parameters.NotifyOnPrivateChat);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnFriendsOnOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnFriendsOnOff, Parameters.NotifyOnFriendsOnOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnFriendChangeStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnFriendChangeStatus, Parameters.NotifyOnFriendChangeStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnGetMsg
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnGetMsg, Parameters.NotifyOnGetMsg);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NotifyOnVoiceMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NotifyOnVoiceMail, Parameters.NotifyOnVoiceMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SearchMeByMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SearchMeByMail, Parameters.SearchMeByMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VoiceNotfication
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VoiceNotfication, Parameters.VoiceNotfication);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptPM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptPM, Parameters.AcceptPM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptSMS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptSMS, Parameters.AcceptSMS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptMSG
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptMSG, Parameters.AcceptMSG);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptVoiceMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptVoiceMail, Parameters.AcceptVoiceMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptFiles
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptFiles, Parameters.AcceptFiles);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AcceptInvitations
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AcceptInvitations, Parameters.AcceptInvitations);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChangeMyStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChangeMyStatus, Parameters.ChangeMyStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChangeMyStatusMin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChangeMyStatusMin, Parameters.ChangeMyStatusMin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MemberSettingID
		    {
				get
		        {
					if(_MemberSettingID_W == null)
	        	    {
						_MemberSettingID_W = TearOff.MemberSettingID;
					}
					return _MemberSettingID_W;
				}
			}

			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter HidePics
		    {
				get
		        {
					if(_HidePics_W == null)
	        	    {
						_HidePics_W = TearOff.HidePics;
					}
					return _HidePics_W;
				}
			}

			public AggregateParameter HideRoomPics
		    {
				get
		        {
					if(_HideRoomPics_W == null)
	        	    {
						_HideRoomPics_W = TearOff.HideRoomPics;
					}
					return _HideRoomPics_W;
				}
			}

			public AggregateParameter HideProfile
		    {
				get
		        {
					if(_HideProfile_W == null)
	        	    {
						_HideProfile_W = TearOff.HideProfile;
					}
					return _HideProfile_W;
				}
			}

			public AggregateParameter NotifyOnPrivateChat
		    {
				get
		        {
					if(_NotifyOnPrivateChat_W == null)
	        	    {
						_NotifyOnPrivateChat_W = TearOff.NotifyOnPrivateChat;
					}
					return _NotifyOnPrivateChat_W;
				}
			}

			public AggregateParameter NotifyOnFriendsOnOff
		    {
				get
		        {
					if(_NotifyOnFriendsOnOff_W == null)
	        	    {
						_NotifyOnFriendsOnOff_W = TearOff.NotifyOnFriendsOnOff;
					}
					return _NotifyOnFriendsOnOff_W;
				}
			}

			public AggregateParameter NotifyOnFriendChangeStatus
		    {
				get
		        {
					if(_NotifyOnFriendChangeStatus_W == null)
	        	    {
						_NotifyOnFriendChangeStatus_W = TearOff.NotifyOnFriendChangeStatus;
					}
					return _NotifyOnFriendChangeStatus_W;
				}
			}

			public AggregateParameter NotifyOnGetMsg
		    {
				get
		        {
					if(_NotifyOnGetMsg_W == null)
	        	    {
						_NotifyOnGetMsg_W = TearOff.NotifyOnGetMsg;
					}
					return _NotifyOnGetMsg_W;
				}
			}

			public AggregateParameter NotifyOnVoiceMail
		    {
				get
		        {
					if(_NotifyOnVoiceMail_W == null)
	        	    {
						_NotifyOnVoiceMail_W = TearOff.NotifyOnVoiceMail;
					}
					return _NotifyOnVoiceMail_W;
				}
			}

			public AggregateParameter SearchMeByMail
		    {
				get
		        {
					if(_SearchMeByMail_W == null)
	        	    {
						_SearchMeByMail_W = TearOff.SearchMeByMail;
					}
					return _SearchMeByMail_W;
				}
			}

			public AggregateParameter VoiceNotfication
		    {
				get
		        {
					if(_VoiceNotfication_W == null)
	        	    {
						_VoiceNotfication_W = TearOff.VoiceNotfication;
					}
					return _VoiceNotfication_W;
				}
			}

			public AggregateParameter AcceptPM
		    {
				get
		        {
					if(_AcceptPM_W == null)
	        	    {
						_AcceptPM_W = TearOff.AcceptPM;
					}
					return _AcceptPM_W;
				}
			}

			public AggregateParameter AcceptSMS
		    {
				get
		        {
					if(_AcceptSMS_W == null)
	        	    {
						_AcceptSMS_W = TearOff.AcceptSMS;
					}
					return _AcceptSMS_W;
				}
			}

			public AggregateParameter AcceptMSG
		    {
				get
		        {
					if(_AcceptMSG_W == null)
	        	    {
						_AcceptMSG_W = TearOff.AcceptMSG;
					}
					return _AcceptMSG_W;
				}
			}

			public AggregateParameter AcceptVoiceMail
		    {
				get
		        {
					if(_AcceptVoiceMail_W == null)
	        	    {
						_AcceptVoiceMail_W = TearOff.AcceptVoiceMail;
					}
					return _AcceptVoiceMail_W;
				}
			}

			public AggregateParameter AcceptFiles
		    {
				get
		        {
					if(_AcceptFiles_W == null)
	        	    {
						_AcceptFiles_W = TearOff.AcceptFiles;
					}
					return _AcceptFiles_W;
				}
			}

			public AggregateParameter AcceptInvitations
		    {
				get
		        {
					if(_AcceptInvitations_W == null)
	        	    {
						_AcceptInvitations_W = TearOff.AcceptInvitations;
					}
					return _AcceptInvitations_W;
				}
			}

			public AggregateParameter ChangeMyStatus
		    {
				get
		        {
					if(_ChangeMyStatus_W == null)
	        	    {
						_ChangeMyStatus_W = TearOff.ChangeMyStatus;
					}
					return _ChangeMyStatus_W;
				}
			}

			public AggregateParameter ChangeMyStatusMin
		    {
				get
		        {
					if(_ChangeMyStatusMin_W == null)
	        	    {
						_ChangeMyStatusMin_W = TearOff.ChangeMyStatusMin;
					}
					return _ChangeMyStatusMin_W;
				}
			}

			private AggregateParameter _MemberSettingID_W = null;
			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _HidePics_W = null;
			private AggregateParameter _HideRoomPics_W = null;
			private AggregateParameter _HideProfile_W = null;
			private AggregateParameter _NotifyOnPrivateChat_W = null;
			private AggregateParameter _NotifyOnFriendsOnOff_W = null;
			private AggregateParameter _NotifyOnFriendChangeStatus_W = null;
			private AggregateParameter _NotifyOnGetMsg_W = null;
			private AggregateParameter _NotifyOnVoiceMail_W = null;
			private AggregateParameter _SearchMeByMail_W = null;
			private AggregateParameter _VoiceNotfication_W = null;
			private AggregateParameter _AcceptPM_W = null;
			private AggregateParameter _AcceptSMS_W = null;
			private AggregateParameter _AcceptMSG_W = null;
			private AggregateParameter _AcceptVoiceMail_W = null;
			private AggregateParameter _AcceptFiles_W = null;
			private AggregateParameter _AcceptInvitations_W = null;
			private AggregateParameter _ChangeMyStatus_W = null;
			private AggregateParameter _ChangeMyStatusMin_W = null;

			public void AggregateClauseReset()
			{
				_MemberSettingID_W = null;
				_MemberID_W = null;
				_HidePics_W = null;
				_HideRoomPics_W = null;
				_HideProfile_W = null;
				_NotifyOnPrivateChat_W = null;
				_NotifyOnFriendsOnOff_W = null;
				_NotifyOnFriendChangeStatus_W = null;
				_NotifyOnGetMsg_W = null;
				_NotifyOnVoiceMail_W = null;
				_SearchMeByMail_W = null;
				_VoiceNotfication_W = null;
				_AcceptPM_W = null;
				_AcceptSMS_W = null;
				_AcceptMSG_W = null;
				_AcceptVoiceMail_W = null;
				_AcceptFiles_W = null;
				_AcceptInvitations_W = null;
				_ChangeMyStatus_W = null;
				_ChangeMyStatusMin_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberSettingInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.MemberSettingID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberSettingUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberSettingDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MemberSettingID);
			p.SourceColumn = ColumnNames.MemberSettingID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MemberSettingID);
			p.SourceColumn = ColumnNames.MemberSettingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HidePics);
			p.SourceColumn = ColumnNames.HidePics;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HideRoomPics);
			p.SourceColumn = ColumnNames.HideRoomPics;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HideProfile);
			p.SourceColumn = ColumnNames.HideProfile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnPrivateChat);
			p.SourceColumn = ColumnNames.NotifyOnPrivateChat;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnFriendsOnOff);
			p.SourceColumn = ColumnNames.NotifyOnFriendsOnOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnFriendChangeStatus);
			p.SourceColumn = ColumnNames.NotifyOnFriendChangeStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnGetMsg);
			p.SourceColumn = ColumnNames.NotifyOnGetMsg;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NotifyOnVoiceMail);
			p.SourceColumn = ColumnNames.NotifyOnVoiceMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SearchMeByMail);
			p.SourceColumn = ColumnNames.SearchMeByMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VoiceNotfication);
			p.SourceColumn = ColumnNames.VoiceNotfication;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptPM);
			p.SourceColumn = ColumnNames.AcceptPM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptSMS);
			p.SourceColumn = ColumnNames.AcceptSMS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptMSG);
			p.SourceColumn = ColumnNames.AcceptMSG;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptVoiceMail);
			p.SourceColumn = ColumnNames.AcceptVoiceMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptFiles);
			p.SourceColumn = ColumnNames.AcceptFiles;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AcceptInvitations);
			p.SourceColumn = ColumnNames.AcceptInvitations;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChangeMyStatus);
			p.SourceColumn = ColumnNames.ChangeMyStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChangeMyStatusMin);
			p.SourceColumn = ColumnNames.ChangeMyStatusMin;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
