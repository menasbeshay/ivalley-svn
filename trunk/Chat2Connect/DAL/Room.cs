
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Room : SqlClientEntity
	{
		public _Room()
		{
			this.QuerySource = "Room";
			this.MappingName = "Room";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int RoomID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.RoomID, RoomID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter RoomID
			{
				get
				{
					return new SqlParameter("@RoomID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CategoryID
			{
				get
				{
					return new SqlParameter("@CategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SubCategoryID
			{
				get
				{
					return new SqlParameter("@SubCategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter IconPath
			{
				get
				{
					return new SqlParameter("@IconPath", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter RoomTypeID
			{
				get
				{
					return new SqlParameter("@RoomTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter WelcomeText
			{
				get
				{
					return new SqlParameter("@WelcomeText", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter RoomPassword
			{
				get
				{
					return new SqlParameter("@RoomPassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter RoomPasswordenabled
			{
				get
				{
					return new SqlParameter("@RoomPasswordenabled", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter EnableCam
			{
				get
				{
					return new SqlParameter("@EnableCam", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter EnableMic
			{
				get
				{
					return new SqlParameter("@EnableMic", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter EnableMicForAdminsOnly
			{
				get
				{
					return new SqlParameter("@EnableMicForAdminsOnly", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter MarkOnLoginWithWrite
			{
				get
				{
					return new SqlParameter("@MarkOnLoginWithWrite", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter MarkOnLoginWithoutWrite
			{
				get
				{
					return new SqlParameter("@MarkOnLoginWithoutWrite", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string RoomID = "RoomID";
            public const string CategoryID = "CategoryID";
            public const string SubCategoryID = "SubCategoryID";
            public const string Name = "Name";
            public const string IconPath = "IconPath";
            public const string RoomTypeID = "RoomTypeID";
            public const string CreatedDate = "CreatedDate";
            public const string WelcomeText = "WelcomeText";
            public const string RoomPassword = "RoomPassword";
            public const string RoomPasswordenabled = "RoomPasswordenabled";
            public const string EnableCam = "EnableCam";
            public const string EnableMic = "EnableMic";
            public const string EnableMicForAdminsOnly = "EnableMicForAdminsOnly";
            public const string MarkOnLoginWithWrite = "MarkOnLoginWithWrite";
            public const string MarkOnLoginWithoutWrite = "MarkOnLoginWithoutWrite";
            public const string CreatedBy = "CreatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoomID] = _Room.PropertyNames.RoomID;
					ht[CategoryID] = _Room.PropertyNames.CategoryID;
					ht[SubCategoryID] = _Room.PropertyNames.SubCategoryID;
					ht[Name] = _Room.PropertyNames.Name;
					ht[IconPath] = _Room.PropertyNames.IconPath;
					ht[RoomTypeID] = _Room.PropertyNames.RoomTypeID;
					ht[CreatedDate] = _Room.PropertyNames.CreatedDate;
					ht[WelcomeText] = _Room.PropertyNames.WelcomeText;
					ht[RoomPassword] = _Room.PropertyNames.RoomPassword;
					ht[RoomPasswordenabled] = _Room.PropertyNames.RoomPasswordenabled;
					ht[EnableCam] = _Room.PropertyNames.EnableCam;
					ht[EnableMic] = _Room.PropertyNames.EnableMic;
					ht[EnableMicForAdminsOnly] = _Room.PropertyNames.EnableMicForAdminsOnly;
					ht[MarkOnLoginWithWrite] = _Room.PropertyNames.MarkOnLoginWithWrite;
					ht[MarkOnLoginWithoutWrite] = _Room.PropertyNames.MarkOnLoginWithoutWrite;
					ht[CreatedBy] = _Room.PropertyNames.CreatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string RoomID = "RoomID";
            public const string CategoryID = "CategoryID";
            public const string SubCategoryID = "SubCategoryID";
            public const string Name = "Name";
            public const string IconPath = "IconPath";
            public const string RoomTypeID = "RoomTypeID";
            public const string CreatedDate = "CreatedDate";
            public const string WelcomeText = "WelcomeText";
            public const string RoomPassword = "RoomPassword";
            public const string RoomPasswordenabled = "RoomPasswordenabled";
            public const string EnableCam = "EnableCam";
            public const string EnableMic = "EnableMic";
            public const string EnableMicForAdminsOnly = "EnableMicForAdminsOnly";
            public const string MarkOnLoginWithWrite = "MarkOnLoginWithWrite";
            public const string MarkOnLoginWithoutWrite = "MarkOnLoginWithoutWrite";
            public const string CreatedBy = "CreatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RoomID] = _Room.ColumnNames.RoomID;
					ht[CategoryID] = _Room.ColumnNames.CategoryID;
					ht[SubCategoryID] = _Room.ColumnNames.SubCategoryID;
					ht[Name] = _Room.ColumnNames.Name;
					ht[IconPath] = _Room.ColumnNames.IconPath;
					ht[RoomTypeID] = _Room.ColumnNames.RoomTypeID;
					ht[CreatedDate] = _Room.ColumnNames.CreatedDate;
					ht[WelcomeText] = _Room.ColumnNames.WelcomeText;
					ht[RoomPassword] = _Room.ColumnNames.RoomPassword;
					ht[RoomPasswordenabled] = _Room.ColumnNames.RoomPasswordenabled;
					ht[EnableCam] = _Room.ColumnNames.EnableCam;
					ht[EnableMic] = _Room.ColumnNames.EnableMic;
					ht[EnableMicForAdminsOnly] = _Room.ColumnNames.EnableMicForAdminsOnly;
					ht[MarkOnLoginWithWrite] = _Room.ColumnNames.MarkOnLoginWithWrite;
					ht[MarkOnLoginWithoutWrite] = _Room.ColumnNames.MarkOnLoginWithoutWrite;
					ht[CreatedBy] = _Room.ColumnNames.CreatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string RoomID = "s_RoomID";
            public const string CategoryID = "s_CategoryID";
            public const string SubCategoryID = "s_SubCategoryID";
            public const string Name = "s_Name";
            public const string IconPath = "s_IconPath";
            public const string RoomTypeID = "s_RoomTypeID";
            public const string CreatedDate = "s_CreatedDate";
            public const string WelcomeText = "s_WelcomeText";
            public const string RoomPassword = "s_RoomPassword";
            public const string RoomPasswordenabled = "s_RoomPasswordenabled";
            public const string EnableCam = "s_EnableCam";
            public const string EnableMic = "s_EnableMic";
            public const string EnableMicForAdminsOnly = "s_EnableMicForAdminsOnly";
            public const string MarkOnLoginWithWrite = "s_MarkOnLoginWithWrite";
            public const string MarkOnLoginWithoutWrite = "s_MarkOnLoginWithoutWrite";
            public const string CreatedBy = "s_CreatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int RoomID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoomID);
			}
			set
	        {
				base.Setint(ColumnNames.RoomID, value);
			}
		}

		public virtual int CategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.CategoryID, value);
			}
		}

		public virtual int SubCategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.SubCategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.SubCategoryID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string IconPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.IconPath);
			}
			set
	        {
				base.Setstring(ColumnNames.IconPath, value);
			}
		}

		public virtual int RoomTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoomTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RoomTypeID, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string WelcomeText
	    {
			get
	        {
				return base.Getstring(ColumnNames.WelcomeText);
			}
			set
	        {
				base.Setstring(ColumnNames.WelcomeText, value);
			}
		}

		public virtual string RoomPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.RoomPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.RoomPassword, value);
			}
		}

		public virtual bool RoomPasswordenabled
	    {
			get
	        {
				return base.Getbool(ColumnNames.RoomPasswordenabled);
			}
			set
	        {
				base.Setbool(ColumnNames.RoomPasswordenabled, value);
			}
		}

		public virtual bool EnableCam
	    {
			get
	        {
				return base.Getbool(ColumnNames.EnableCam);
			}
			set
	        {
				base.Setbool(ColumnNames.EnableCam, value);
			}
		}

		public virtual bool EnableMic
	    {
			get
	        {
				return base.Getbool(ColumnNames.EnableMic);
			}
			set
	        {
				base.Setbool(ColumnNames.EnableMic, value);
			}
		}

		public virtual bool EnableMicForAdminsOnly
	    {
			get
	        {
				return base.Getbool(ColumnNames.EnableMicForAdminsOnly);
			}
			set
	        {
				base.Setbool(ColumnNames.EnableMicForAdminsOnly, value);
			}
		}

		public virtual bool MarkOnLoginWithWrite
	    {
			get
	        {
				return base.Getbool(ColumnNames.MarkOnLoginWithWrite);
			}
			set
	        {
				base.Setbool(ColumnNames.MarkOnLoginWithWrite, value);
			}
		}

		public virtual bool MarkOnLoginWithoutWrite
	    {
			get
	        {
				return base.Getbool(ColumnNames.MarkOnLoginWithoutWrite);
			}
			set
	        {
				base.Setbool(ColumnNames.MarkOnLoginWithoutWrite, value);
			}
		}

		public virtual int CreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.CreatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_RoomID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomID) ? string.Empty : base.GetintAsString(ColumnNames.RoomID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomID);
				else
					this.RoomID = base.SetintAsString(ColumnNames.RoomID, value);
			}
		}

		public virtual string s_CategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryID) ? string.Empty : base.GetintAsString(ColumnNames.CategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryID);
				else
					this.CategoryID = base.SetintAsString(ColumnNames.CategoryID, value);
			}
		}

		public virtual string s_SubCategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubCategoryID) ? string.Empty : base.GetintAsString(ColumnNames.SubCategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubCategoryID);
				else
					this.SubCategoryID = base.SetintAsString(ColumnNames.SubCategoryID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_IconPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IconPath) ? string.Empty : base.GetstringAsString(ColumnNames.IconPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IconPath);
				else
					this.IconPath = base.SetstringAsString(ColumnNames.IconPath, value);
			}
		}

		public virtual string s_RoomTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RoomTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomTypeID);
				else
					this.RoomTypeID = base.SetintAsString(ColumnNames.RoomTypeID, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_WelcomeText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WelcomeText) ? string.Empty : base.GetstringAsString(ColumnNames.WelcomeText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WelcomeText);
				else
					this.WelcomeText = base.SetstringAsString(ColumnNames.WelcomeText, value);
			}
		}

		public virtual string s_RoomPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomPassword) ? string.Empty : base.GetstringAsString(ColumnNames.RoomPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomPassword);
				else
					this.RoomPassword = base.SetstringAsString(ColumnNames.RoomPassword, value);
			}
		}

		public virtual string s_RoomPasswordenabled
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomPasswordenabled) ? string.Empty : base.GetboolAsString(ColumnNames.RoomPasswordenabled);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomPasswordenabled);
				else
					this.RoomPasswordenabled = base.SetboolAsString(ColumnNames.RoomPasswordenabled, value);
			}
		}

		public virtual string s_EnableCam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnableCam) ? string.Empty : base.GetboolAsString(ColumnNames.EnableCam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnableCam);
				else
					this.EnableCam = base.SetboolAsString(ColumnNames.EnableCam, value);
			}
		}

		public virtual string s_EnableMic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnableMic) ? string.Empty : base.GetboolAsString(ColumnNames.EnableMic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnableMic);
				else
					this.EnableMic = base.SetboolAsString(ColumnNames.EnableMic, value);
			}
		}

		public virtual string s_EnableMicForAdminsOnly
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnableMicForAdminsOnly) ? string.Empty : base.GetboolAsString(ColumnNames.EnableMicForAdminsOnly);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnableMicForAdminsOnly);
				else
					this.EnableMicForAdminsOnly = base.SetboolAsString(ColumnNames.EnableMicForAdminsOnly, value);
			}
		}

		public virtual string s_MarkOnLoginWithWrite
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MarkOnLoginWithWrite) ? string.Empty : base.GetboolAsString(ColumnNames.MarkOnLoginWithWrite);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MarkOnLoginWithWrite);
				else
					this.MarkOnLoginWithWrite = base.SetboolAsString(ColumnNames.MarkOnLoginWithWrite, value);
			}
		}

		public virtual string s_MarkOnLoginWithoutWrite
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MarkOnLoginWithoutWrite) ? string.Empty : base.GetboolAsString(ColumnNames.MarkOnLoginWithoutWrite);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MarkOnLoginWithoutWrite);
				else
					this.MarkOnLoginWithoutWrite = base.SetboolAsString(ColumnNames.MarkOnLoginWithoutWrite, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetintAsString(ColumnNames.CreatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RoomID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubCategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubCategoryID, Parameters.SubCategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IconPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IconPath, Parameters.IconPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoomTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomTypeID, Parameters.RoomTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WelcomeText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WelcomeText, Parameters.WelcomeText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoomPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomPassword, Parameters.RoomPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoomPasswordenabled
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomPasswordenabled, Parameters.RoomPasswordenabled);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnableCam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnableCam, Parameters.EnableCam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnableMic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnableMic, Parameters.EnableMic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnableMicForAdminsOnly
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnableMicForAdminsOnly, Parameters.EnableMicForAdminsOnly);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MarkOnLoginWithWrite
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MarkOnLoginWithWrite, Parameters.MarkOnLoginWithWrite);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MarkOnLoginWithoutWrite
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MarkOnLoginWithoutWrite, Parameters.MarkOnLoginWithoutWrite);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public WhereParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public WhereParameter SubCategoryID
		    {
				get
		        {
					if(_SubCategoryID_W == null)
	        	    {
						_SubCategoryID_W = TearOff.SubCategoryID;
					}
					return _SubCategoryID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter IconPath
		    {
				get
		        {
					if(_IconPath_W == null)
	        	    {
						_IconPath_W = TearOff.IconPath;
					}
					return _IconPath_W;
				}
			}

			public WhereParameter RoomTypeID
		    {
				get
		        {
					if(_RoomTypeID_W == null)
	        	    {
						_RoomTypeID_W = TearOff.RoomTypeID;
					}
					return _RoomTypeID_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter WelcomeText
		    {
				get
		        {
					if(_WelcomeText_W == null)
	        	    {
						_WelcomeText_W = TearOff.WelcomeText;
					}
					return _WelcomeText_W;
				}
			}

			public WhereParameter RoomPassword
		    {
				get
		        {
					if(_RoomPassword_W == null)
	        	    {
						_RoomPassword_W = TearOff.RoomPassword;
					}
					return _RoomPassword_W;
				}
			}

			public WhereParameter RoomPasswordenabled
		    {
				get
		        {
					if(_RoomPasswordenabled_W == null)
	        	    {
						_RoomPasswordenabled_W = TearOff.RoomPasswordenabled;
					}
					return _RoomPasswordenabled_W;
				}
			}

			public WhereParameter EnableCam
		    {
				get
		        {
					if(_EnableCam_W == null)
	        	    {
						_EnableCam_W = TearOff.EnableCam;
					}
					return _EnableCam_W;
				}
			}

			public WhereParameter EnableMic
		    {
				get
		        {
					if(_EnableMic_W == null)
	        	    {
						_EnableMic_W = TearOff.EnableMic;
					}
					return _EnableMic_W;
				}
			}

			public WhereParameter EnableMicForAdminsOnly
		    {
				get
		        {
					if(_EnableMicForAdminsOnly_W == null)
	        	    {
						_EnableMicForAdminsOnly_W = TearOff.EnableMicForAdminsOnly;
					}
					return _EnableMicForAdminsOnly_W;
				}
			}

			public WhereParameter MarkOnLoginWithWrite
		    {
				get
		        {
					if(_MarkOnLoginWithWrite_W == null)
	        	    {
						_MarkOnLoginWithWrite_W = TearOff.MarkOnLoginWithWrite;
					}
					return _MarkOnLoginWithWrite_W;
				}
			}

			public WhereParameter MarkOnLoginWithoutWrite
		    {
				get
		        {
					if(_MarkOnLoginWithoutWrite_W == null)
	        	    {
						_MarkOnLoginWithoutWrite_W = TearOff.MarkOnLoginWithoutWrite;
					}
					return _MarkOnLoginWithoutWrite_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private WhereParameter _RoomID_W = null;
			private WhereParameter _CategoryID_W = null;
			private WhereParameter _SubCategoryID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _IconPath_W = null;
			private WhereParameter _RoomTypeID_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _WelcomeText_W = null;
			private WhereParameter _RoomPassword_W = null;
			private WhereParameter _RoomPasswordenabled_W = null;
			private WhereParameter _EnableCam_W = null;
			private WhereParameter _EnableMic_W = null;
			private WhereParameter _EnableMicForAdminsOnly_W = null;
			private WhereParameter _MarkOnLoginWithWrite_W = null;
			private WhereParameter _MarkOnLoginWithoutWrite_W = null;
			private WhereParameter _CreatedBy_W = null;

			public void WhereClauseReset()
			{
				_RoomID_W = null;
				_CategoryID_W = null;
				_SubCategoryID_W = null;
				_Name_W = null;
				_IconPath_W = null;
				_RoomTypeID_W = null;
				_CreatedDate_W = null;
				_WelcomeText_W = null;
				_RoomPassword_W = null;
				_RoomPasswordenabled_W = null;
				_EnableCam_W = null;
				_EnableMic_W = null;
				_EnableMicForAdminsOnly_W = null;
				_MarkOnLoginWithWrite_W = null;
				_MarkOnLoginWithoutWrite_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter RoomID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubCategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubCategoryID, Parameters.SubCategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IconPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IconPath, Parameters.IconPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoomTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomTypeID, Parameters.RoomTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WelcomeText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WelcomeText, Parameters.WelcomeText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoomPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomPassword, Parameters.RoomPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoomPasswordenabled
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomPasswordenabled, Parameters.RoomPasswordenabled);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnableCam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnableCam, Parameters.EnableCam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnableMic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnableMic, Parameters.EnableMic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnableMicForAdminsOnly
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnableMicForAdminsOnly, Parameters.EnableMicForAdminsOnly);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MarkOnLoginWithWrite
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MarkOnLoginWithWrite, Parameters.MarkOnLoginWithWrite);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MarkOnLoginWithoutWrite
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MarkOnLoginWithoutWrite, Parameters.MarkOnLoginWithoutWrite);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public AggregateParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public AggregateParameter SubCategoryID
		    {
				get
		        {
					if(_SubCategoryID_W == null)
	        	    {
						_SubCategoryID_W = TearOff.SubCategoryID;
					}
					return _SubCategoryID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter IconPath
		    {
				get
		        {
					if(_IconPath_W == null)
	        	    {
						_IconPath_W = TearOff.IconPath;
					}
					return _IconPath_W;
				}
			}

			public AggregateParameter RoomTypeID
		    {
				get
		        {
					if(_RoomTypeID_W == null)
	        	    {
						_RoomTypeID_W = TearOff.RoomTypeID;
					}
					return _RoomTypeID_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter WelcomeText
		    {
				get
		        {
					if(_WelcomeText_W == null)
	        	    {
						_WelcomeText_W = TearOff.WelcomeText;
					}
					return _WelcomeText_W;
				}
			}

			public AggregateParameter RoomPassword
		    {
				get
		        {
					if(_RoomPassword_W == null)
	        	    {
						_RoomPassword_W = TearOff.RoomPassword;
					}
					return _RoomPassword_W;
				}
			}

			public AggregateParameter RoomPasswordenabled
		    {
				get
		        {
					if(_RoomPasswordenabled_W == null)
	        	    {
						_RoomPasswordenabled_W = TearOff.RoomPasswordenabled;
					}
					return _RoomPasswordenabled_W;
				}
			}

			public AggregateParameter EnableCam
		    {
				get
		        {
					if(_EnableCam_W == null)
	        	    {
						_EnableCam_W = TearOff.EnableCam;
					}
					return _EnableCam_W;
				}
			}

			public AggregateParameter EnableMic
		    {
				get
		        {
					if(_EnableMic_W == null)
	        	    {
						_EnableMic_W = TearOff.EnableMic;
					}
					return _EnableMic_W;
				}
			}

			public AggregateParameter EnableMicForAdminsOnly
		    {
				get
		        {
					if(_EnableMicForAdminsOnly_W == null)
	        	    {
						_EnableMicForAdminsOnly_W = TearOff.EnableMicForAdminsOnly;
					}
					return _EnableMicForAdminsOnly_W;
				}
			}

			public AggregateParameter MarkOnLoginWithWrite
		    {
				get
		        {
					if(_MarkOnLoginWithWrite_W == null)
	        	    {
						_MarkOnLoginWithWrite_W = TearOff.MarkOnLoginWithWrite;
					}
					return _MarkOnLoginWithWrite_W;
				}
			}

			public AggregateParameter MarkOnLoginWithoutWrite
		    {
				get
		        {
					if(_MarkOnLoginWithoutWrite_W == null)
	        	    {
						_MarkOnLoginWithoutWrite_W = TearOff.MarkOnLoginWithoutWrite;
					}
					return _MarkOnLoginWithoutWrite_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private AggregateParameter _RoomID_W = null;
			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _SubCategoryID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _IconPath_W = null;
			private AggregateParameter _RoomTypeID_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _WelcomeText_W = null;
			private AggregateParameter _RoomPassword_W = null;
			private AggregateParameter _RoomPasswordenabled_W = null;
			private AggregateParameter _EnableCam_W = null;
			private AggregateParameter _EnableMic_W = null;
			private AggregateParameter _EnableMicForAdminsOnly_W = null;
			private AggregateParameter _MarkOnLoginWithWrite_W = null;
			private AggregateParameter _MarkOnLoginWithoutWrite_W = null;
			private AggregateParameter _CreatedBy_W = null;

			public void AggregateClauseReset()
			{
				_RoomID_W = null;
				_CategoryID_W = null;
				_SubCategoryID_W = null;
				_Name_W = null;
				_IconPath_W = null;
				_RoomTypeID_W = null;
				_CreatedDate_W = null;
				_WelcomeText_W = null;
				_RoomPassword_W = null;
				_RoomPasswordenabled_W = null;
				_EnableCam_W = null;
				_EnableMic_W = null;
				_EnableMicForAdminsOnly_W = null;
				_MarkOnLoginWithWrite_W = null;
				_MarkOnLoginWithoutWrite_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.RoomID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryID);
			p.SourceColumn = ColumnNames.CategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubCategoryID);
			p.SourceColumn = ColumnNames.SubCategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IconPath);
			p.SourceColumn = ColumnNames.IconPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RoomTypeID);
			p.SourceColumn = ColumnNames.RoomTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WelcomeText);
			p.SourceColumn = ColumnNames.WelcomeText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RoomPassword);
			p.SourceColumn = ColumnNames.RoomPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RoomPasswordenabled);
			p.SourceColumn = ColumnNames.RoomPasswordenabled;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnableCam);
			p.SourceColumn = ColumnNames.EnableCam;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnableMic);
			p.SourceColumn = ColumnNames.EnableMic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnableMicForAdminsOnly);
			p.SourceColumn = ColumnNames.EnableMicForAdminsOnly;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MarkOnLoginWithWrite);
			p.SourceColumn = ColumnNames.MarkOnLoginWithWrite;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MarkOnLoginWithoutWrite);
			p.SourceColumn = ColumnNames.MarkOnLoginWithoutWrite;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
