
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _UserTransLog : SqlClientEntity
	{
		public _UserTransLog()
		{
			this.QuerySource = "UserTransLog";
			this.MappingName = "UserTransLog";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserTransLogLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserTransLogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserTransLogID, UserTransLogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserTransLogLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserTransLogID
			{
				get
				{
					return new SqlParameter("@UserTransLogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TransDate
			{
				get
				{
					return new SqlParameter("@TransDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TransType
			{
				get
				{
					return new SqlParameter("@TransType", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter AddedBy
			{
				get
				{
					return new SqlParameter("@AddedBy", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter PaymentMethod
			{
				get
				{
					return new SqlParameter("@PaymentMethod", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Value
			{
				get
				{
					return new SqlParameter("@Value", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter AddedFrom
			{
				get
				{
					return new SqlParameter("@AddedFrom", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AddedTo
			{
				get
				{
					return new SqlParameter("@AddedTo", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserTransLogID = "UserTransLogID";
            public const string MemberID = "MemberID";
            public const string TransDate = "TransDate";
            public const string TransType = "TransType";
            public const string AddedBy = "AddedBy";
            public const string PaymentMethod = "PaymentMethod";
            public const string Value = "Value";
            public const string Notes = "Notes";
            public const string AddedFrom = "AddedFrom";
            public const string AddedTo = "AddedTo";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserTransLogID] = _UserTransLog.PropertyNames.UserTransLogID;
					ht[MemberID] = _UserTransLog.PropertyNames.MemberID;
					ht[TransDate] = _UserTransLog.PropertyNames.TransDate;
					ht[TransType] = _UserTransLog.PropertyNames.TransType;
					ht[AddedBy] = _UserTransLog.PropertyNames.AddedBy;
					ht[PaymentMethod] = _UserTransLog.PropertyNames.PaymentMethod;
					ht[Value] = _UserTransLog.PropertyNames.Value;
					ht[Notes] = _UserTransLog.PropertyNames.Notes;
					ht[AddedFrom] = _UserTransLog.PropertyNames.AddedFrom;
					ht[AddedTo] = _UserTransLog.PropertyNames.AddedTo;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserTransLogID = "UserTransLogID";
            public const string MemberID = "MemberID";
            public const string TransDate = "TransDate";
            public const string TransType = "TransType";
            public const string AddedBy = "AddedBy";
            public const string PaymentMethod = "PaymentMethod";
            public const string Value = "Value";
            public const string Notes = "Notes";
            public const string AddedFrom = "AddedFrom";
            public const string AddedTo = "AddedTo";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserTransLogID] = _UserTransLog.ColumnNames.UserTransLogID;
					ht[MemberID] = _UserTransLog.ColumnNames.MemberID;
					ht[TransDate] = _UserTransLog.ColumnNames.TransDate;
					ht[TransType] = _UserTransLog.ColumnNames.TransType;
					ht[AddedBy] = _UserTransLog.ColumnNames.AddedBy;
					ht[PaymentMethod] = _UserTransLog.ColumnNames.PaymentMethod;
					ht[Value] = _UserTransLog.ColumnNames.Value;
					ht[Notes] = _UserTransLog.ColumnNames.Notes;
					ht[AddedFrom] = _UserTransLog.ColumnNames.AddedFrom;
					ht[AddedTo] = _UserTransLog.ColumnNames.AddedTo;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserTransLogID = "s_UserTransLogID";
            public const string MemberID = "s_MemberID";
            public const string TransDate = "s_TransDate";
            public const string TransType = "s_TransType";
            public const string AddedBy = "s_AddedBy";
            public const string PaymentMethod = "s_PaymentMethod";
            public const string Value = "s_Value";
            public const string Notes = "s_Notes";
            public const string AddedFrom = "s_AddedFrom";
            public const string AddedTo = "s_AddedTo";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserTransLogID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserTransLogID);
			}
			set
	        {
				base.Setint(ColumnNames.UserTransLogID, value);
			}
		}

		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual DateTime TransDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TransDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TransDate, value);
			}
		}

		public virtual short TransType
	    {
			get
	        {
				return base.Getshort(ColumnNames.TransType);
			}
			set
	        {
				base.Setshort(ColumnNames.TransType, value);
			}
		}

		public virtual string AddedBy
	    {
			get
	        {
				return base.Getstring(ColumnNames.AddedBy);
			}
			set
	        {
				base.Setstring(ColumnNames.AddedBy, value);
			}
		}

		public virtual string PaymentMethod
	    {
			get
	        {
				return base.Getstring(ColumnNames.PaymentMethod);
			}
			set
	        {
				base.Setstring(ColumnNames.PaymentMethod, value);
			}
		}

		public virtual decimal Value
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Value);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Value, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual int AddedFrom
	    {
			get
	        {
				return base.Getint(ColumnNames.AddedFrom);
			}
			set
	        {
				base.Setint(ColumnNames.AddedFrom, value);
			}
		}

		public virtual int AddedTo
	    {
			get
	        {
				return base.Getint(ColumnNames.AddedTo);
			}
			set
	        {
				base.Setint(ColumnNames.AddedTo, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserTransLogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserTransLogID) ? string.Empty : base.GetintAsString(ColumnNames.UserTransLogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserTransLogID);
				else
					this.UserTransLogID = base.SetintAsString(ColumnNames.UserTransLogID, value);
			}
		}

		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_TransDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TransDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TransDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TransDate);
				else
					this.TransDate = base.SetDateTimeAsString(ColumnNames.TransDate, value);
			}
		}

		public virtual string s_TransType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TransType) ? string.Empty : base.GetshortAsString(ColumnNames.TransType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TransType);
				else
					this.TransType = base.SetshortAsString(ColumnNames.TransType, value);
			}
		}

		public virtual string s_AddedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddedBy) ? string.Empty : base.GetstringAsString(ColumnNames.AddedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddedBy);
				else
					this.AddedBy = base.SetstringAsString(ColumnNames.AddedBy, value);
			}
		}

		public virtual string s_PaymentMethod
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentMethod) ? string.Empty : base.GetstringAsString(ColumnNames.PaymentMethod);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentMethod);
				else
					this.PaymentMethod = base.SetstringAsString(ColumnNames.PaymentMethod, value);
			}
		}

		public virtual string s_Value
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Value) ? string.Empty : base.GetdecimalAsString(ColumnNames.Value);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Value);
				else
					this.Value = base.SetdecimalAsString(ColumnNames.Value, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_AddedFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddedFrom) ? string.Empty : base.GetintAsString(ColumnNames.AddedFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddedFrom);
				else
					this.AddedFrom = base.SetintAsString(ColumnNames.AddedFrom, value);
			}
		}

		public virtual string s_AddedTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddedTo) ? string.Empty : base.GetintAsString(ColumnNames.AddedTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddedTo);
				else
					this.AddedTo = base.SetintAsString(ColumnNames.AddedTo, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserTransLogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserTransLogID, Parameters.UserTransLogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TransDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TransDate, Parameters.TransDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TransType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TransType, Parameters.TransType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddedBy, Parameters.AddedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentMethod
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentMethod, Parameters.PaymentMethod);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Value
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Value, Parameters.Value);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddedFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddedFrom, Parameters.AddedFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddedTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddedTo, Parameters.AddedTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserTransLogID
		    {
				get
		        {
					if(_UserTransLogID_W == null)
	        	    {
						_UserTransLogID_W = TearOff.UserTransLogID;
					}
					return _UserTransLogID_W;
				}
			}

			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter TransDate
		    {
				get
		        {
					if(_TransDate_W == null)
	        	    {
						_TransDate_W = TearOff.TransDate;
					}
					return _TransDate_W;
				}
			}

			public WhereParameter TransType
		    {
				get
		        {
					if(_TransType_W == null)
	        	    {
						_TransType_W = TearOff.TransType;
					}
					return _TransType_W;
				}
			}

			public WhereParameter AddedBy
		    {
				get
		        {
					if(_AddedBy_W == null)
	        	    {
						_AddedBy_W = TearOff.AddedBy;
					}
					return _AddedBy_W;
				}
			}

			public WhereParameter PaymentMethod
		    {
				get
		        {
					if(_PaymentMethod_W == null)
	        	    {
						_PaymentMethod_W = TearOff.PaymentMethod;
					}
					return _PaymentMethod_W;
				}
			}

			public WhereParameter Value
		    {
				get
		        {
					if(_Value_W == null)
	        	    {
						_Value_W = TearOff.Value;
					}
					return _Value_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter AddedFrom
		    {
				get
		        {
					if(_AddedFrom_W == null)
	        	    {
						_AddedFrom_W = TearOff.AddedFrom;
					}
					return _AddedFrom_W;
				}
			}

			public WhereParameter AddedTo
		    {
				get
		        {
					if(_AddedTo_W == null)
	        	    {
						_AddedTo_W = TearOff.AddedTo;
					}
					return _AddedTo_W;
				}
			}

			private WhereParameter _UserTransLogID_W = null;
			private WhereParameter _MemberID_W = null;
			private WhereParameter _TransDate_W = null;
			private WhereParameter _TransType_W = null;
			private WhereParameter _AddedBy_W = null;
			private WhereParameter _PaymentMethod_W = null;
			private WhereParameter _Value_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _AddedFrom_W = null;
			private WhereParameter _AddedTo_W = null;

			public void WhereClauseReset()
			{
				_UserTransLogID_W = null;
				_MemberID_W = null;
				_TransDate_W = null;
				_TransType_W = null;
				_AddedBy_W = null;
				_PaymentMethod_W = null;
				_Value_W = null;
				_Notes_W = null;
				_AddedFrom_W = null;
				_AddedTo_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserTransLogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserTransLogID, Parameters.UserTransLogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TransDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransDate, Parameters.TransDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TransType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransType, Parameters.TransType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedBy, Parameters.AddedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentMethod
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentMethod, Parameters.PaymentMethod);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Value
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Value, Parameters.Value);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddedFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedFrom, Parameters.AddedFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddedTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedTo, Parameters.AddedTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserTransLogID
		    {
				get
		        {
					if(_UserTransLogID_W == null)
	        	    {
						_UserTransLogID_W = TearOff.UserTransLogID;
					}
					return _UserTransLogID_W;
				}
			}

			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter TransDate
		    {
				get
		        {
					if(_TransDate_W == null)
	        	    {
						_TransDate_W = TearOff.TransDate;
					}
					return _TransDate_W;
				}
			}

			public AggregateParameter TransType
		    {
				get
		        {
					if(_TransType_W == null)
	        	    {
						_TransType_W = TearOff.TransType;
					}
					return _TransType_W;
				}
			}

			public AggregateParameter AddedBy
		    {
				get
		        {
					if(_AddedBy_W == null)
	        	    {
						_AddedBy_W = TearOff.AddedBy;
					}
					return _AddedBy_W;
				}
			}

			public AggregateParameter PaymentMethod
		    {
				get
		        {
					if(_PaymentMethod_W == null)
	        	    {
						_PaymentMethod_W = TearOff.PaymentMethod;
					}
					return _PaymentMethod_W;
				}
			}

			public AggregateParameter Value
		    {
				get
		        {
					if(_Value_W == null)
	        	    {
						_Value_W = TearOff.Value;
					}
					return _Value_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter AddedFrom
		    {
				get
		        {
					if(_AddedFrom_W == null)
	        	    {
						_AddedFrom_W = TearOff.AddedFrom;
					}
					return _AddedFrom_W;
				}
			}

			public AggregateParameter AddedTo
		    {
				get
		        {
					if(_AddedTo_W == null)
	        	    {
						_AddedTo_W = TearOff.AddedTo;
					}
					return _AddedTo_W;
				}
			}

			private AggregateParameter _UserTransLogID_W = null;
			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _TransDate_W = null;
			private AggregateParameter _TransType_W = null;
			private AggregateParameter _AddedBy_W = null;
			private AggregateParameter _PaymentMethod_W = null;
			private AggregateParameter _Value_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _AddedFrom_W = null;
			private AggregateParameter _AddedTo_W = null;

			public void AggregateClauseReset()
			{
				_UserTransLogID_W = null;
				_MemberID_W = null;
				_TransDate_W = null;
				_TransType_W = null;
				_AddedBy_W = null;
				_PaymentMethod_W = null;
				_Value_W = null;
				_Notes_W = null;
				_AddedFrom_W = null;
				_AddedTo_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserTransLogInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserTransLogID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserTransLogUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserTransLogDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserTransLogID);
			p.SourceColumn = ColumnNames.UserTransLogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserTransLogID);
			p.SourceColumn = ColumnNames.UserTransLogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TransDate);
			p.SourceColumn = ColumnNames.TransDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TransType);
			p.SourceColumn = ColumnNames.TransType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddedBy);
			p.SourceColumn = ColumnNames.AddedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentMethod);
			p.SourceColumn = ColumnNames.PaymentMethod;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Value);
			p.SourceColumn = ColumnNames.Value;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddedFrom);
			p.SourceColumn = ColumnNames.AddedFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddedTo);
			p.SourceColumn = ColumnNames.AddedTo;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
