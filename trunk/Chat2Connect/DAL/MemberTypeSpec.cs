
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MemberTypeSpec : SqlClientEntity
	{
		public _MemberTypeSpec()
		{
			this.QuerySource = "MemberTypeSpec";
			this.MappingName = "MemberTypeSpec";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberTypeSpecLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberTypeSpecLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter Color
			{
				get
				{
					return new SqlParameter("@Color", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter OpenRoomCount
			{
				get
				{
					return new SqlParameter("@OpenRoomCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OpenedCamCount
			{
				get
				{
					return new SqlParameter("@OpenedCamCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FriendsCount
			{
				get
				{
					return new SqlParameter("@FriendsCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MailSize
			{
				get
				{
					return new SqlParameter("@MailSize", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatePrivateRoomCount
			{
				get
				{
					return new SqlParameter("@CreatePrivateRoomCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreateTempRoomCount
			{
				get
				{
					return new SqlParameter("@CreateTempRoomCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CanOpenFullRoom
			{
				get
				{
					return new SqlParameter("@CanOpenFullRoom", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsMemberOfConnectionClup
			{
				get
				{
					return new SqlParameter("@IsMemberOfConnectionClup", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Color = "Color";
            public const string OpenRoomCount = "OpenRoomCount";
            public const string OpenedCamCount = "OpenedCamCount";
            public const string FriendsCount = "FriendsCount";
            public const string MailSize = "MailSize";
            public const string CreatePrivateRoomCount = "CreatePrivateRoomCount";
            public const string CreateTempRoomCount = "CreateTempRoomCount";
            public const string CanOpenFullRoom = "CanOpenFullRoom";
            public const string IsMemberOfConnectionClup = "IsMemberOfConnectionClup";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MemberTypeSpec.PropertyNames.ID;
					ht[Name] = _MemberTypeSpec.PropertyNames.Name;
					ht[Color] = _MemberTypeSpec.PropertyNames.Color;
					ht[OpenRoomCount] = _MemberTypeSpec.PropertyNames.OpenRoomCount;
					ht[OpenedCamCount] = _MemberTypeSpec.PropertyNames.OpenedCamCount;
					ht[FriendsCount] = _MemberTypeSpec.PropertyNames.FriendsCount;
					ht[MailSize] = _MemberTypeSpec.PropertyNames.MailSize;
					ht[CreatePrivateRoomCount] = _MemberTypeSpec.PropertyNames.CreatePrivateRoomCount;
					ht[CreateTempRoomCount] = _MemberTypeSpec.PropertyNames.CreateTempRoomCount;
					ht[CanOpenFullRoom] = _MemberTypeSpec.PropertyNames.CanOpenFullRoom;
					ht[IsMemberOfConnectionClup] = _MemberTypeSpec.PropertyNames.IsMemberOfConnectionClup;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string Name = "Name";
            public const string Color = "Color";
            public const string OpenRoomCount = "OpenRoomCount";
            public const string OpenedCamCount = "OpenedCamCount";
            public const string FriendsCount = "FriendsCount";
            public const string MailSize = "MailSize";
            public const string CreatePrivateRoomCount = "CreatePrivateRoomCount";
            public const string CreateTempRoomCount = "CreateTempRoomCount";
            public const string CanOpenFullRoom = "CanOpenFullRoom";
            public const string IsMemberOfConnectionClup = "IsMemberOfConnectionClup";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _MemberTypeSpec.ColumnNames.ID;
					ht[Name] = _MemberTypeSpec.ColumnNames.Name;
					ht[Color] = _MemberTypeSpec.ColumnNames.Color;
					ht[OpenRoomCount] = _MemberTypeSpec.ColumnNames.OpenRoomCount;
					ht[OpenedCamCount] = _MemberTypeSpec.ColumnNames.OpenedCamCount;
					ht[FriendsCount] = _MemberTypeSpec.ColumnNames.FriendsCount;
					ht[MailSize] = _MemberTypeSpec.ColumnNames.MailSize;
					ht[CreatePrivateRoomCount] = _MemberTypeSpec.ColumnNames.CreatePrivateRoomCount;
					ht[CreateTempRoomCount] = _MemberTypeSpec.ColumnNames.CreateTempRoomCount;
					ht[CanOpenFullRoom] = _MemberTypeSpec.ColumnNames.CanOpenFullRoom;
					ht[IsMemberOfConnectionClup] = _MemberTypeSpec.ColumnNames.IsMemberOfConnectionClup;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string Name = "s_Name";
            public const string Color = "s_Color";
            public const string OpenRoomCount = "s_OpenRoomCount";
            public const string OpenedCamCount = "s_OpenedCamCount";
            public const string FriendsCount = "s_FriendsCount";
            public const string MailSize = "s_MailSize";
            public const string CreatePrivateRoomCount = "s_CreatePrivateRoomCount";
            public const string CreateTempRoomCount = "s_CreateTempRoomCount";
            public const string CanOpenFullRoom = "s_CanOpenFullRoom";
            public const string IsMemberOfConnectionClup = "s_IsMemberOfConnectionClup";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Color
	    {
			get
	        {
				return base.Getstring(ColumnNames.Color);
			}
			set
	        {
				base.Setstring(ColumnNames.Color, value);
			}
		}

		public virtual int OpenRoomCount
	    {
			get
	        {
				return base.Getint(ColumnNames.OpenRoomCount);
			}
			set
	        {
				base.Setint(ColumnNames.OpenRoomCount, value);
			}
		}

		public virtual int OpenedCamCount
	    {
			get
	        {
				return base.Getint(ColumnNames.OpenedCamCount);
			}
			set
	        {
				base.Setint(ColumnNames.OpenedCamCount, value);
			}
		}

		public virtual int FriendsCount
	    {
			get
	        {
				return base.Getint(ColumnNames.FriendsCount);
			}
			set
	        {
				base.Setint(ColumnNames.FriendsCount, value);
			}
		}

		public virtual int MailSize
	    {
			get
	        {
				return base.Getint(ColumnNames.MailSize);
			}
			set
	        {
				base.Setint(ColumnNames.MailSize, value);
			}
		}

		public virtual int CreatePrivateRoomCount
	    {
			get
	        {
				return base.Getint(ColumnNames.CreatePrivateRoomCount);
			}
			set
	        {
				base.Setint(ColumnNames.CreatePrivateRoomCount, value);
			}
		}

		public virtual int CreateTempRoomCount
	    {
			get
	        {
				return base.Getint(ColumnNames.CreateTempRoomCount);
			}
			set
	        {
				base.Setint(ColumnNames.CreateTempRoomCount, value);
			}
		}

		public virtual bool CanOpenFullRoom
	    {
			get
	        {
				return base.Getbool(ColumnNames.CanOpenFullRoom);
			}
			set
	        {
				base.Setbool(ColumnNames.CanOpenFullRoom, value);
			}
		}

		public virtual bool IsMemberOfConnectionClup
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsMemberOfConnectionClup);
			}
			set
	        {
				base.Setbool(ColumnNames.IsMemberOfConnectionClup, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Color
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Color) ? string.Empty : base.GetstringAsString(ColumnNames.Color);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Color);
				else
					this.Color = base.SetstringAsString(ColumnNames.Color, value);
			}
		}

		public virtual string s_OpenRoomCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OpenRoomCount) ? string.Empty : base.GetintAsString(ColumnNames.OpenRoomCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OpenRoomCount);
				else
					this.OpenRoomCount = base.SetintAsString(ColumnNames.OpenRoomCount, value);
			}
		}

		public virtual string s_OpenedCamCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OpenedCamCount) ? string.Empty : base.GetintAsString(ColumnNames.OpenedCamCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OpenedCamCount);
				else
					this.OpenedCamCount = base.SetintAsString(ColumnNames.OpenedCamCount, value);
			}
		}

		public virtual string s_FriendsCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FriendsCount) ? string.Empty : base.GetintAsString(ColumnNames.FriendsCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FriendsCount);
				else
					this.FriendsCount = base.SetintAsString(ColumnNames.FriendsCount, value);
			}
		}

		public virtual string s_MailSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MailSize) ? string.Empty : base.GetintAsString(ColumnNames.MailSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MailSize);
				else
					this.MailSize = base.SetintAsString(ColumnNames.MailSize, value);
			}
		}

		public virtual string s_CreatePrivateRoomCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatePrivateRoomCount) ? string.Empty : base.GetintAsString(ColumnNames.CreatePrivateRoomCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatePrivateRoomCount);
				else
					this.CreatePrivateRoomCount = base.SetintAsString(ColumnNames.CreatePrivateRoomCount, value);
			}
		}

		public virtual string s_CreateTempRoomCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateTempRoomCount) ? string.Empty : base.GetintAsString(ColumnNames.CreateTempRoomCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateTempRoomCount);
				else
					this.CreateTempRoomCount = base.SetintAsString(ColumnNames.CreateTempRoomCount, value);
			}
		}

		public virtual string s_CanOpenFullRoom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CanOpenFullRoom) ? string.Empty : base.GetboolAsString(ColumnNames.CanOpenFullRoom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CanOpenFullRoom);
				else
					this.CanOpenFullRoom = base.SetboolAsString(ColumnNames.CanOpenFullRoom, value);
			}
		}

		public virtual string s_IsMemberOfConnectionClup
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsMemberOfConnectionClup) ? string.Empty : base.GetboolAsString(ColumnNames.IsMemberOfConnectionClup);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsMemberOfConnectionClup);
				else
					this.IsMemberOfConnectionClup = base.SetboolAsString(ColumnNames.IsMemberOfConnectionClup, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Color
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Color, Parameters.Color);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OpenRoomCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OpenRoomCount, Parameters.OpenRoomCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OpenedCamCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OpenedCamCount, Parameters.OpenedCamCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FriendsCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FriendsCount, Parameters.FriendsCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MailSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MailSize, Parameters.MailSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatePrivateRoomCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatePrivateRoomCount, Parameters.CreatePrivateRoomCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateTempRoomCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateTempRoomCount, Parameters.CreateTempRoomCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CanOpenFullRoom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CanOpenFullRoom, Parameters.CanOpenFullRoom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsMemberOfConnectionClup
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsMemberOfConnectionClup, Parameters.IsMemberOfConnectionClup);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Color
		    {
				get
		        {
					if(_Color_W == null)
	        	    {
						_Color_W = TearOff.Color;
					}
					return _Color_W;
				}
			}

			public WhereParameter OpenRoomCount
		    {
				get
		        {
					if(_OpenRoomCount_W == null)
	        	    {
						_OpenRoomCount_W = TearOff.OpenRoomCount;
					}
					return _OpenRoomCount_W;
				}
			}

			public WhereParameter OpenedCamCount
		    {
				get
		        {
					if(_OpenedCamCount_W == null)
	        	    {
						_OpenedCamCount_W = TearOff.OpenedCamCount;
					}
					return _OpenedCamCount_W;
				}
			}

			public WhereParameter FriendsCount
		    {
				get
		        {
					if(_FriendsCount_W == null)
	        	    {
						_FriendsCount_W = TearOff.FriendsCount;
					}
					return _FriendsCount_W;
				}
			}

			public WhereParameter MailSize
		    {
				get
		        {
					if(_MailSize_W == null)
	        	    {
						_MailSize_W = TearOff.MailSize;
					}
					return _MailSize_W;
				}
			}

			public WhereParameter CreatePrivateRoomCount
		    {
				get
		        {
					if(_CreatePrivateRoomCount_W == null)
	        	    {
						_CreatePrivateRoomCount_W = TearOff.CreatePrivateRoomCount;
					}
					return _CreatePrivateRoomCount_W;
				}
			}

			public WhereParameter CreateTempRoomCount
		    {
				get
		        {
					if(_CreateTempRoomCount_W == null)
	        	    {
						_CreateTempRoomCount_W = TearOff.CreateTempRoomCount;
					}
					return _CreateTempRoomCount_W;
				}
			}

			public WhereParameter CanOpenFullRoom
		    {
				get
		        {
					if(_CanOpenFullRoom_W == null)
	        	    {
						_CanOpenFullRoom_W = TearOff.CanOpenFullRoom;
					}
					return _CanOpenFullRoom_W;
				}
			}

			public WhereParameter IsMemberOfConnectionClup
		    {
				get
		        {
					if(_IsMemberOfConnectionClup_W == null)
	        	    {
						_IsMemberOfConnectionClup_W = TearOff.IsMemberOfConnectionClup;
					}
					return _IsMemberOfConnectionClup_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Color_W = null;
			private WhereParameter _OpenRoomCount_W = null;
			private WhereParameter _OpenedCamCount_W = null;
			private WhereParameter _FriendsCount_W = null;
			private WhereParameter _MailSize_W = null;
			private WhereParameter _CreatePrivateRoomCount_W = null;
			private WhereParameter _CreateTempRoomCount_W = null;
			private WhereParameter _CanOpenFullRoom_W = null;
			private WhereParameter _IsMemberOfConnectionClup_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_Name_W = null;
				_Color_W = null;
				_OpenRoomCount_W = null;
				_OpenedCamCount_W = null;
				_FriendsCount_W = null;
				_MailSize_W = null;
				_CreatePrivateRoomCount_W = null;
				_CreateTempRoomCount_W = null;
				_CanOpenFullRoom_W = null;
				_IsMemberOfConnectionClup_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Color
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Color, Parameters.Color);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OpenRoomCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OpenRoomCount, Parameters.OpenRoomCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OpenedCamCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OpenedCamCount, Parameters.OpenedCamCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FriendsCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FriendsCount, Parameters.FriendsCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MailSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MailSize, Parameters.MailSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatePrivateRoomCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatePrivateRoomCount, Parameters.CreatePrivateRoomCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateTempRoomCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateTempRoomCount, Parameters.CreateTempRoomCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CanOpenFullRoom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CanOpenFullRoom, Parameters.CanOpenFullRoom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsMemberOfConnectionClup
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsMemberOfConnectionClup, Parameters.IsMemberOfConnectionClup);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Color
		    {
				get
		        {
					if(_Color_W == null)
	        	    {
						_Color_W = TearOff.Color;
					}
					return _Color_W;
				}
			}

			public AggregateParameter OpenRoomCount
		    {
				get
		        {
					if(_OpenRoomCount_W == null)
	        	    {
						_OpenRoomCount_W = TearOff.OpenRoomCount;
					}
					return _OpenRoomCount_W;
				}
			}

			public AggregateParameter OpenedCamCount
		    {
				get
		        {
					if(_OpenedCamCount_W == null)
	        	    {
						_OpenedCamCount_W = TearOff.OpenedCamCount;
					}
					return _OpenedCamCount_W;
				}
			}

			public AggregateParameter FriendsCount
		    {
				get
		        {
					if(_FriendsCount_W == null)
	        	    {
						_FriendsCount_W = TearOff.FriendsCount;
					}
					return _FriendsCount_W;
				}
			}

			public AggregateParameter MailSize
		    {
				get
		        {
					if(_MailSize_W == null)
	        	    {
						_MailSize_W = TearOff.MailSize;
					}
					return _MailSize_W;
				}
			}

			public AggregateParameter CreatePrivateRoomCount
		    {
				get
		        {
					if(_CreatePrivateRoomCount_W == null)
	        	    {
						_CreatePrivateRoomCount_W = TearOff.CreatePrivateRoomCount;
					}
					return _CreatePrivateRoomCount_W;
				}
			}

			public AggregateParameter CreateTempRoomCount
		    {
				get
		        {
					if(_CreateTempRoomCount_W == null)
	        	    {
						_CreateTempRoomCount_W = TearOff.CreateTempRoomCount;
					}
					return _CreateTempRoomCount_W;
				}
			}

			public AggregateParameter CanOpenFullRoom
		    {
				get
		        {
					if(_CanOpenFullRoom_W == null)
	        	    {
						_CanOpenFullRoom_W = TearOff.CanOpenFullRoom;
					}
					return _CanOpenFullRoom_W;
				}
			}

			public AggregateParameter IsMemberOfConnectionClup
		    {
				get
		        {
					if(_IsMemberOfConnectionClup_W == null)
	        	    {
						_IsMemberOfConnectionClup_W = TearOff.IsMemberOfConnectionClup;
					}
					return _IsMemberOfConnectionClup_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Color_W = null;
			private AggregateParameter _OpenRoomCount_W = null;
			private AggregateParameter _OpenedCamCount_W = null;
			private AggregateParameter _FriendsCount_W = null;
			private AggregateParameter _MailSize_W = null;
			private AggregateParameter _CreatePrivateRoomCount_W = null;
			private AggregateParameter _CreateTempRoomCount_W = null;
			private AggregateParameter _CanOpenFullRoom_W = null;
			private AggregateParameter _IsMemberOfConnectionClup_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_Name_W = null;
				_Color_W = null;
				_OpenRoomCount_W = null;
				_OpenedCamCount_W = null;
				_FriendsCount_W = null;
				_MailSize_W = null;
				_CreatePrivateRoomCount_W = null;
				_CreateTempRoomCount_W = null;
				_CanOpenFullRoom_W = null;
				_IsMemberOfConnectionClup_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeSpecInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeSpecUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeSpecDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Color);
			p.SourceColumn = ColumnNames.Color;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OpenRoomCount);
			p.SourceColumn = ColumnNames.OpenRoomCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OpenedCamCount);
			p.SourceColumn = ColumnNames.OpenedCamCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FriendsCount);
			p.SourceColumn = ColumnNames.FriendsCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MailSize);
			p.SourceColumn = ColumnNames.MailSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatePrivateRoomCount);
			p.SourceColumn = ColumnNames.CreatePrivateRoomCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateTempRoomCount);
			p.SourceColumn = ColumnNames.CreateTempRoomCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CanOpenFullRoom);
			p.SourceColumn = ColumnNames.CanOpenFullRoom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsMemberOfConnectionClup);
			p.SourceColumn = ColumnNames.IsMemberOfConnectionClup;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
