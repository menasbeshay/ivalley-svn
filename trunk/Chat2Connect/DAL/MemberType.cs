
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _MemberType : SqlClientEntity
	{
		public _MemberType()
		{
			this.QuerySource = "MemberType";
			this.MappingName = "MemberType";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberTypeLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MemberTypeID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MemberTypeID, MemberTypeID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_MemberTypeLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MemberTypeID
			{
				get
				{
					return new SqlParameter("@MemberTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter IconPath
			{
				get
				{
					return new SqlParameter("@IconPath", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Price_Money
			{
				get
				{
					return new SqlParameter("@Price_Money", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Price_Point
			{
				get
				{
					return new SqlParameter("@Price_Point", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Color
			{
				get
				{
					return new SqlParameter("@Color", SqlDbType.NVarChar, 7);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MemberTypeID = "MemberTypeID";
            public const string Name = "Name";
            public const string IconPath = "IconPath";
            public const string Price_Money = "Price_Money";
            public const string Price_Point = "Price_Point";
            public const string Color = "Color";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberTypeID] = _MemberType.PropertyNames.MemberTypeID;
					ht[Name] = _MemberType.PropertyNames.Name;
					ht[IconPath] = _MemberType.PropertyNames.IconPath;
					ht[Price_Money] = _MemberType.PropertyNames.Price_Money;
					ht[Price_Point] = _MemberType.PropertyNames.Price_Point;
					ht[Color] = _MemberType.PropertyNames.Color;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MemberTypeID = "MemberTypeID";
            public const string Name = "Name";
            public const string IconPath = "IconPath";
            public const string Price_Money = "Price_Money";
            public const string Price_Point = "Price_Point";
            public const string Color = "Color";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberTypeID] = _MemberType.ColumnNames.MemberTypeID;
					ht[Name] = _MemberType.ColumnNames.Name;
					ht[IconPath] = _MemberType.ColumnNames.IconPath;
					ht[Price_Money] = _MemberType.ColumnNames.Price_Money;
					ht[Price_Point] = _MemberType.ColumnNames.Price_Point;
					ht[Color] = _MemberType.ColumnNames.Color;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MemberTypeID = "s_MemberTypeID";
            public const string Name = "s_Name";
            public const string IconPath = "s_IconPath";
            public const string Price_Money = "s_Price_Money";
            public const string Price_Point = "s_Price_Point";
            public const string Color = "s_Color";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MemberTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberTypeID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string IconPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.IconPath);
			}
			set
	        {
				base.Setstring(ColumnNames.IconPath, value);
			}
		}

		public virtual decimal Price_Money
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Price_Money);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Price_Money, value);
			}
		}

		public virtual int Price_Point
	    {
			get
	        {
				return base.Getint(ColumnNames.Price_Point);
			}
			set
	        {
				base.Setint(ColumnNames.Price_Point, value);
			}
		}

		public virtual string Color
	    {
			get
	        {
				return base.Getstring(ColumnNames.Color);
			}
			set
	        {
				base.Setstring(ColumnNames.Color, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MemberTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberTypeID) ? string.Empty : base.GetintAsString(ColumnNames.MemberTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberTypeID);
				else
					this.MemberTypeID = base.SetintAsString(ColumnNames.MemberTypeID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_IconPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IconPath) ? string.Empty : base.GetstringAsString(ColumnNames.IconPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IconPath);
				else
					this.IconPath = base.SetstringAsString(ColumnNames.IconPath, value);
			}
		}

		public virtual string s_Price_Money
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price_Money) ? string.Empty : base.GetdecimalAsString(ColumnNames.Price_Money);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price_Money);
				else
					this.Price_Money = base.SetdecimalAsString(ColumnNames.Price_Money, value);
			}
		}

		public virtual string s_Price_Point
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price_Point) ? string.Empty : base.GetintAsString(ColumnNames.Price_Point);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price_Point);
				else
					this.Price_Point = base.SetintAsString(ColumnNames.Price_Point, value);
			}
		}

		public virtual string s_Color
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Color) ? string.Empty : base.GetstringAsString(ColumnNames.Color);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Color);
				else
					this.Color = base.SetstringAsString(ColumnNames.Color, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MemberTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberTypeID, Parameters.MemberTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IconPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IconPath, Parameters.IconPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price_Money
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price_Money, Parameters.Price_Money);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price_Point
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price_Point, Parameters.Price_Point);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Color
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Color, Parameters.Color);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MemberTypeID
		    {
				get
		        {
					if(_MemberTypeID_W == null)
	        	    {
						_MemberTypeID_W = TearOff.MemberTypeID;
					}
					return _MemberTypeID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter IconPath
		    {
				get
		        {
					if(_IconPath_W == null)
	        	    {
						_IconPath_W = TearOff.IconPath;
					}
					return _IconPath_W;
				}
			}

			public WhereParameter Price_Money
		    {
				get
		        {
					if(_Price_Money_W == null)
	        	    {
						_Price_Money_W = TearOff.Price_Money;
					}
					return _Price_Money_W;
				}
			}

			public WhereParameter Price_Point
		    {
				get
		        {
					if(_Price_Point_W == null)
	        	    {
						_Price_Point_W = TearOff.Price_Point;
					}
					return _Price_Point_W;
				}
			}

			public WhereParameter Color
		    {
				get
		        {
					if(_Color_W == null)
	        	    {
						_Color_W = TearOff.Color;
					}
					return _Color_W;
				}
			}

			private WhereParameter _MemberTypeID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _IconPath_W = null;
			private WhereParameter _Price_Money_W = null;
			private WhereParameter _Price_Point_W = null;
			private WhereParameter _Color_W = null;

			public void WhereClauseReset()
			{
				_MemberTypeID_W = null;
				_Name_W = null;
				_IconPath_W = null;
				_Price_Money_W = null;
				_Price_Point_W = null;
				_Color_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MemberTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberTypeID, Parameters.MemberTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IconPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IconPath, Parameters.IconPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price_Money
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price_Money, Parameters.Price_Money);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price_Point
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price_Point, Parameters.Price_Point);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Color
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Color, Parameters.Color);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MemberTypeID
		    {
				get
		        {
					if(_MemberTypeID_W == null)
	        	    {
						_MemberTypeID_W = TearOff.MemberTypeID;
					}
					return _MemberTypeID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter IconPath
		    {
				get
		        {
					if(_IconPath_W == null)
	        	    {
						_IconPath_W = TearOff.IconPath;
					}
					return _IconPath_W;
				}
			}

			public AggregateParameter Price_Money
		    {
				get
		        {
					if(_Price_Money_W == null)
	        	    {
						_Price_Money_W = TearOff.Price_Money;
					}
					return _Price_Money_W;
				}
			}

			public AggregateParameter Price_Point
		    {
				get
		        {
					if(_Price_Point_W == null)
	        	    {
						_Price_Point_W = TearOff.Price_Point;
					}
					return _Price_Point_W;
				}
			}

			public AggregateParameter Color
		    {
				get
		        {
					if(_Color_W == null)
	        	    {
						_Color_W = TearOff.Color;
					}
					return _Color_W;
				}
			}

			private AggregateParameter _MemberTypeID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _IconPath_W = null;
			private AggregateParameter _Price_Money_W = null;
			private AggregateParameter _Price_Point_W = null;
			private AggregateParameter _Color_W = null;

			public void AggregateClauseReset()
			{
				_MemberTypeID_W = null;
				_Name_W = null;
				_IconPath_W = null;
				_Price_Money_W = null;
				_Price_Point_W = null;
				_Color_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.MemberTypeID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_MemberTypeDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MemberTypeID);
			p.SourceColumn = ColumnNames.MemberTypeID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MemberTypeID);
			p.SourceColumn = ColumnNames.MemberTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IconPath);
			p.SourceColumn = ColumnNames.IconPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price_Money);
			p.SourceColumn = ColumnNames.Price_Money;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price_Point);
			p.SourceColumn = ColumnNames.Price_Point;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Color);
			p.SourceColumn = ColumnNames.Color;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
