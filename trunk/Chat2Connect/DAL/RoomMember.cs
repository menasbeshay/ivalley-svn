
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _RoomMember : SqlClientEntity
	{
		public _RoomMember()
		{
			this.QuerySource = "RoomMember";
			this.MappingName = "RoomMember";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomMemberLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int MemberID, int RoomID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.MemberID, MemberID);

parameters.Add(Parameters.RoomID, RoomID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_RoomMemberLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter MemberID
			{
				get
				{
					return new SqlParameter("@MemberID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RoomID
			{
				get
				{
					return new SqlParameter("@RoomID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsAdmin
			{
				get
				{
					return new SqlParameter("@IsAdmin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AdminTypeID
			{
				get
				{
					return new SqlParameter("@AdminTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HasMic
			{
				get
				{
					return new SqlParameter("@HasMic", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter HasCam
			{
				get
				{
					return new SqlParameter("@HasCam", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CanAccessMic
			{
				get
				{
					return new SqlParameter("@CanAccessMic", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CanAccessCam
			{
				get
				{
					return new SqlParameter("@CanAccessCam", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CanWrite
			{
				get
				{
					return new SqlParameter("@CanWrite", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsBanned
			{
				get
				{
					return new SqlParameter("@IsBanned", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsBannedFor24
			{
				get
				{
					return new SqlParameter("@IsBannedFor24", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsBannedFor7Days
			{
				get
				{
					return new SqlParameter("@IsBannedFor7Days", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsBannedForMonth
			{
				get
				{
					return new SqlParameter("@IsBannedForMonth", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsMarked
			{
				get
				{
					return new SqlParameter("@IsMarked", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AskForMic
			{
				get
				{
					return new SqlParameter("@AskForMic", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter QueueOrder
			{
				get
				{
					return new SqlParameter("@QueueOrder", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserRate
			{
				get
				{
					return new SqlParameter("@UserRate", SqlDbType.SmallInt, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string MemberID = "MemberID";
            public const string RoomID = "RoomID";
            public const string IsAdmin = "IsAdmin";
            public const string AdminTypeID = "AdminTypeID";
            public const string HasMic = "HasMic";
            public const string HasCam = "HasCam";
            public const string CanAccessMic = "CanAccessMic";
            public const string CanAccessCam = "CanAccessCam";
            public const string CanWrite = "CanWrite";
            public const string IsBanned = "IsBanned";
            public const string IsBannedFor24 = "IsBannedFor24";
            public const string IsBannedFor7Days = "IsBannedFor7Days";
            public const string IsBannedForMonth = "IsBannedForMonth";
            public const string IsMarked = "IsMarked";
            public const string AskForMic = "AskForMic";
            public const string QueueOrder = "QueueOrder";
            public const string UserRate = "UserRate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberID] = _RoomMember.PropertyNames.MemberID;
					ht[RoomID] = _RoomMember.PropertyNames.RoomID;
					ht[IsAdmin] = _RoomMember.PropertyNames.IsAdmin;
					ht[AdminTypeID] = _RoomMember.PropertyNames.AdminTypeID;
					ht[HasMic] = _RoomMember.PropertyNames.HasMic;
					ht[HasCam] = _RoomMember.PropertyNames.HasCam;
					ht[CanAccessMic] = _RoomMember.PropertyNames.CanAccessMic;
					ht[CanAccessCam] = _RoomMember.PropertyNames.CanAccessCam;
					ht[CanWrite] = _RoomMember.PropertyNames.CanWrite;
					ht[IsBanned] = _RoomMember.PropertyNames.IsBanned;
					ht[IsBannedFor24] = _RoomMember.PropertyNames.IsBannedFor24;
					ht[IsBannedFor7Days] = _RoomMember.PropertyNames.IsBannedFor7Days;
					ht[IsBannedForMonth] = _RoomMember.PropertyNames.IsBannedForMonth;
					ht[IsMarked] = _RoomMember.PropertyNames.IsMarked;
					ht[AskForMic] = _RoomMember.PropertyNames.AskForMic;
					ht[QueueOrder] = _RoomMember.PropertyNames.QueueOrder;
					ht[UserRate] = _RoomMember.PropertyNames.UserRate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string MemberID = "MemberID";
            public const string RoomID = "RoomID";
            public const string IsAdmin = "IsAdmin";
            public const string AdminTypeID = "AdminTypeID";
            public const string HasMic = "HasMic";
            public const string HasCam = "HasCam";
            public const string CanAccessMic = "CanAccessMic";
            public const string CanAccessCam = "CanAccessCam";
            public const string CanWrite = "CanWrite";
            public const string IsBanned = "IsBanned";
            public const string IsBannedFor24 = "IsBannedFor24";
            public const string IsBannedFor7Days = "IsBannedFor7Days";
            public const string IsBannedForMonth = "IsBannedForMonth";
            public const string IsMarked = "IsMarked";
            public const string AskForMic = "AskForMic";
            public const string QueueOrder = "QueueOrder";
            public const string UserRate = "UserRate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[MemberID] = _RoomMember.ColumnNames.MemberID;
					ht[RoomID] = _RoomMember.ColumnNames.RoomID;
					ht[IsAdmin] = _RoomMember.ColumnNames.IsAdmin;
					ht[AdminTypeID] = _RoomMember.ColumnNames.AdminTypeID;
					ht[HasMic] = _RoomMember.ColumnNames.HasMic;
					ht[HasCam] = _RoomMember.ColumnNames.HasCam;
					ht[CanAccessMic] = _RoomMember.ColumnNames.CanAccessMic;
					ht[CanAccessCam] = _RoomMember.ColumnNames.CanAccessCam;
					ht[CanWrite] = _RoomMember.ColumnNames.CanWrite;
					ht[IsBanned] = _RoomMember.ColumnNames.IsBanned;
					ht[IsBannedFor24] = _RoomMember.ColumnNames.IsBannedFor24;
					ht[IsBannedFor7Days] = _RoomMember.ColumnNames.IsBannedFor7Days;
					ht[IsBannedForMonth] = _RoomMember.ColumnNames.IsBannedForMonth;
					ht[IsMarked] = _RoomMember.ColumnNames.IsMarked;
					ht[AskForMic] = _RoomMember.ColumnNames.AskForMic;
					ht[QueueOrder] = _RoomMember.ColumnNames.QueueOrder;
					ht[UserRate] = _RoomMember.ColumnNames.UserRate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string MemberID = "s_MemberID";
            public const string RoomID = "s_RoomID";
            public const string IsAdmin = "s_IsAdmin";
            public const string AdminTypeID = "s_AdminTypeID";
            public const string HasMic = "s_HasMic";
            public const string HasCam = "s_HasCam";
            public const string CanAccessMic = "s_CanAccessMic";
            public const string CanAccessCam = "s_CanAccessCam";
            public const string CanWrite = "s_CanWrite";
            public const string IsBanned = "s_IsBanned";
            public const string IsBannedFor24 = "s_IsBannedFor24";
            public const string IsBannedFor7Days = "s_IsBannedFor7Days";
            public const string IsBannedForMonth = "s_IsBannedForMonth";
            public const string IsMarked = "s_IsMarked";
            public const string AskForMic = "s_AskForMic";
            public const string QueueOrder = "s_QueueOrder";
            public const string UserRate = "s_UserRate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int MemberID
	    {
			get
	        {
				return base.Getint(ColumnNames.MemberID);
			}
			set
	        {
				base.Setint(ColumnNames.MemberID, value);
			}
		}

		public virtual int RoomID
	    {
			get
	        {
				return base.Getint(ColumnNames.RoomID);
			}
			set
	        {
				base.Setint(ColumnNames.RoomID, value);
			}
		}

		public virtual bool IsAdmin
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAdmin);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAdmin, value);
			}
		}

		public virtual int AdminTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.AdminTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.AdminTypeID, value);
			}
		}

		public virtual bool HasMic
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasMic);
			}
			set
	        {
				base.Setbool(ColumnNames.HasMic, value);
			}
		}

		public virtual bool HasCam
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasCam);
			}
			set
	        {
				base.Setbool(ColumnNames.HasCam, value);
			}
		}

		public virtual bool CanAccessMic
	    {
			get
	        {
				return base.Getbool(ColumnNames.CanAccessMic);
			}
			set
	        {
				base.Setbool(ColumnNames.CanAccessMic, value);
			}
		}

		public virtual bool CanAccessCam
	    {
			get
	        {
				return base.Getbool(ColumnNames.CanAccessCam);
			}
			set
	        {
				base.Setbool(ColumnNames.CanAccessCam, value);
			}
		}

		public virtual bool CanWrite
	    {
			get
	        {
				return base.Getbool(ColumnNames.CanWrite);
			}
			set
	        {
				base.Setbool(ColumnNames.CanWrite, value);
			}
		}

		public virtual bool IsBanned
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsBanned);
			}
			set
	        {
				base.Setbool(ColumnNames.IsBanned, value);
			}
		}

		public virtual bool IsBannedFor24
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsBannedFor24);
			}
			set
	        {
				base.Setbool(ColumnNames.IsBannedFor24, value);
			}
		}

		public virtual bool IsBannedFor7Days
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsBannedFor7Days);
			}
			set
	        {
				base.Setbool(ColumnNames.IsBannedFor7Days, value);
			}
		}

		public virtual bool IsBannedForMonth
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsBannedForMonth);
			}
			set
	        {
				base.Setbool(ColumnNames.IsBannedForMonth, value);
			}
		}

		public virtual bool IsMarked
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsMarked);
			}
			set
	        {
				base.Setbool(ColumnNames.IsMarked, value);
			}
		}

		public virtual bool AskForMic
	    {
			get
	        {
				return base.Getbool(ColumnNames.AskForMic);
			}
			set
	        {
				base.Setbool(ColumnNames.AskForMic, value);
			}
		}

		public virtual int QueueOrder
	    {
			get
	        {
				return base.Getint(ColumnNames.QueueOrder);
			}
			set
	        {
				base.Setint(ColumnNames.QueueOrder, value);
			}
		}

		public virtual short UserRate
	    {
			get
	        {
				return base.Getshort(ColumnNames.UserRate);
			}
			set
	        {
				base.Setshort(ColumnNames.UserRate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_MemberID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MemberID) ? string.Empty : base.GetintAsString(ColumnNames.MemberID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MemberID);
				else
					this.MemberID = base.SetintAsString(ColumnNames.MemberID, value);
			}
		}

		public virtual string s_RoomID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RoomID) ? string.Empty : base.GetintAsString(ColumnNames.RoomID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RoomID);
				else
					this.RoomID = base.SetintAsString(ColumnNames.RoomID, value);
			}
		}

		public virtual string s_IsAdmin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAdmin) ? string.Empty : base.GetboolAsString(ColumnNames.IsAdmin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAdmin);
				else
					this.IsAdmin = base.SetboolAsString(ColumnNames.IsAdmin, value);
			}
		}

		public virtual string s_AdminTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminTypeID) ? string.Empty : base.GetintAsString(ColumnNames.AdminTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminTypeID);
				else
					this.AdminTypeID = base.SetintAsString(ColumnNames.AdminTypeID, value);
			}
		}

		public virtual string s_HasMic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasMic) ? string.Empty : base.GetboolAsString(ColumnNames.HasMic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasMic);
				else
					this.HasMic = base.SetboolAsString(ColumnNames.HasMic, value);
			}
		}

		public virtual string s_HasCam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasCam) ? string.Empty : base.GetboolAsString(ColumnNames.HasCam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasCam);
				else
					this.HasCam = base.SetboolAsString(ColumnNames.HasCam, value);
			}
		}

		public virtual string s_CanAccessMic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CanAccessMic) ? string.Empty : base.GetboolAsString(ColumnNames.CanAccessMic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CanAccessMic);
				else
					this.CanAccessMic = base.SetboolAsString(ColumnNames.CanAccessMic, value);
			}
		}

		public virtual string s_CanAccessCam
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CanAccessCam) ? string.Empty : base.GetboolAsString(ColumnNames.CanAccessCam);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CanAccessCam);
				else
					this.CanAccessCam = base.SetboolAsString(ColumnNames.CanAccessCam, value);
			}
		}

		public virtual string s_CanWrite
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CanWrite) ? string.Empty : base.GetboolAsString(ColumnNames.CanWrite);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CanWrite);
				else
					this.CanWrite = base.SetboolAsString(ColumnNames.CanWrite, value);
			}
		}

		public virtual string s_IsBanned
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsBanned) ? string.Empty : base.GetboolAsString(ColumnNames.IsBanned);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsBanned);
				else
					this.IsBanned = base.SetboolAsString(ColumnNames.IsBanned, value);
			}
		}

		public virtual string s_IsBannedFor24
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsBannedFor24) ? string.Empty : base.GetboolAsString(ColumnNames.IsBannedFor24);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsBannedFor24);
				else
					this.IsBannedFor24 = base.SetboolAsString(ColumnNames.IsBannedFor24, value);
			}
		}

		public virtual string s_IsBannedFor7Days
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsBannedFor7Days) ? string.Empty : base.GetboolAsString(ColumnNames.IsBannedFor7Days);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsBannedFor7Days);
				else
					this.IsBannedFor7Days = base.SetboolAsString(ColumnNames.IsBannedFor7Days, value);
			}
		}

		public virtual string s_IsBannedForMonth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsBannedForMonth) ? string.Empty : base.GetboolAsString(ColumnNames.IsBannedForMonth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsBannedForMonth);
				else
					this.IsBannedForMonth = base.SetboolAsString(ColumnNames.IsBannedForMonth, value);
			}
		}

		public virtual string s_IsMarked
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsMarked) ? string.Empty : base.GetboolAsString(ColumnNames.IsMarked);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsMarked);
				else
					this.IsMarked = base.SetboolAsString(ColumnNames.IsMarked, value);
			}
		}

		public virtual string s_AskForMic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AskForMic) ? string.Empty : base.GetboolAsString(ColumnNames.AskForMic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AskForMic);
				else
					this.AskForMic = base.SetboolAsString(ColumnNames.AskForMic, value);
			}
		}

		public virtual string s_QueueOrder
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QueueOrder) ? string.Empty : base.GetintAsString(ColumnNames.QueueOrder);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QueueOrder);
				else
					this.QueueOrder = base.SetintAsString(ColumnNames.QueueOrder, value);
			}
		}

		public virtual string s_UserRate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserRate) ? string.Empty : base.GetshortAsString(ColumnNames.UserRate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserRate);
				else
					this.UserRate = base.SetshortAsString(ColumnNames.UserRate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter MemberID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RoomID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAdmin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAdmin, Parameters.IsAdmin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdminTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminTypeID, Parameters.AdminTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasMic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasMic, Parameters.HasMic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasCam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasCam, Parameters.HasCam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CanAccessMic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CanAccessMic, Parameters.CanAccessMic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CanAccessCam
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CanAccessCam, Parameters.CanAccessCam);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CanWrite
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CanWrite, Parameters.CanWrite);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsBanned
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsBanned, Parameters.IsBanned);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsBannedFor24
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsBannedFor24, Parameters.IsBannedFor24);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsBannedFor7Days
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsBannedFor7Days, Parameters.IsBannedFor7Days);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsBannedForMonth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsBannedForMonth, Parameters.IsBannedForMonth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsMarked
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsMarked, Parameters.IsMarked);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AskForMic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AskForMic, Parameters.AskForMic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QueueOrder
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QueueOrder, Parameters.QueueOrder);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserRate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserRate, Parameters.UserRate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public WhereParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public WhereParameter IsAdmin
		    {
				get
		        {
					if(_IsAdmin_W == null)
	        	    {
						_IsAdmin_W = TearOff.IsAdmin;
					}
					return _IsAdmin_W;
				}
			}

			public WhereParameter AdminTypeID
		    {
				get
		        {
					if(_AdminTypeID_W == null)
	        	    {
						_AdminTypeID_W = TearOff.AdminTypeID;
					}
					return _AdminTypeID_W;
				}
			}

			public WhereParameter HasMic
		    {
				get
		        {
					if(_HasMic_W == null)
	        	    {
						_HasMic_W = TearOff.HasMic;
					}
					return _HasMic_W;
				}
			}

			public WhereParameter HasCam
		    {
				get
		        {
					if(_HasCam_W == null)
	        	    {
						_HasCam_W = TearOff.HasCam;
					}
					return _HasCam_W;
				}
			}

			public WhereParameter CanAccessMic
		    {
				get
		        {
					if(_CanAccessMic_W == null)
	        	    {
						_CanAccessMic_W = TearOff.CanAccessMic;
					}
					return _CanAccessMic_W;
				}
			}

			public WhereParameter CanAccessCam
		    {
				get
		        {
					if(_CanAccessCam_W == null)
	        	    {
						_CanAccessCam_W = TearOff.CanAccessCam;
					}
					return _CanAccessCam_W;
				}
			}

			public WhereParameter CanWrite
		    {
				get
		        {
					if(_CanWrite_W == null)
	        	    {
						_CanWrite_W = TearOff.CanWrite;
					}
					return _CanWrite_W;
				}
			}

			public WhereParameter IsBanned
		    {
				get
		        {
					if(_IsBanned_W == null)
	        	    {
						_IsBanned_W = TearOff.IsBanned;
					}
					return _IsBanned_W;
				}
			}

			public WhereParameter IsBannedFor24
		    {
				get
		        {
					if(_IsBannedFor24_W == null)
	        	    {
						_IsBannedFor24_W = TearOff.IsBannedFor24;
					}
					return _IsBannedFor24_W;
				}
			}

			public WhereParameter IsBannedFor7Days
		    {
				get
		        {
					if(_IsBannedFor7Days_W == null)
	        	    {
						_IsBannedFor7Days_W = TearOff.IsBannedFor7Days;
					}
					return _IsBannedFor7Days_W;
				}
			}

			public WhereParameter IsBannedForMonth
		    {
				get
		        {
					if(_IsBannedForMonth_W == null)
	        	    {
						_IsBannedForMonth_W = TearOff.IsBannedForMonth;
					}
					return _IsBannedForMonth_W;
				}
			}

			public WhereParameter IsMarked
		    {
				get
		        {
					if(_IsMarked_W == null)
	        	    {
						_IsMarked_W = TearOff.IsMarked;
					}
					return _IsMarked_W;
				}
			}

			public WhereParameter AskForMic
		    {
				get
		        {
					if(_AskForMic_W == null)
	        	    {
						_AskForMic_W = TearOff.AskForMic;
					}
					return _AskForMic_W;
				}
			}

			public WhereParameter QueueOrder
		    {
				get
		        {
					if(_QueueOrder_W == null)
	        	    {
						_QueueOrder_W = TearOff.QueueOrder;
					}
					return _QueueOrder_W;
				}
			}

			public WhereParameter UserRate
		    {
				get
		        {
					if(_UserRate_W == null)
	        	    {
						_UserRate_W = TearOff.UserRate;
					}
					return _UserRate_W;
				}
			}

			private WhereParameter _MemberID_W = null;
			private WhereParameter _RoomID_W = null;
			private WhereParameter _IsAdmin_W = null;
			private WhereParameter _AdminTypeID_W = null;
			private WhereParameter _HasMic_W = null;
			private WhereParameter _HasCam_W = null;
			private WhereParameter _CanAccessMic_W = null;
			private WhereParameter _CanAccessCam_W = null;
			private WhereParameter _CanWrite_W = null;
			private WhereParameter _IsBanned_W = null;
			private WhereParameter _IsBannedFor24_W = null;
			private WhereParameter _IsBannedFor7Days_W = null;
			private WhereParameter _IsBannedForMonth_W = null;
			private WhereParameter _IsMarked_W = null;
			private WhereParameter _AskForMic_W = null;
			private WhereParameter _QueueOrder_W = null;
			private WhereParameter _UserRate_W = null;

			public void WhereClauseReset()
			{
				_MemberID_W = null;
				_RoomID_W = null;
				_IsAdmin_W = null;
				_AdminTypeID_W = null;
				_HasMic_W = null;
				_HasCam_W = null;
				_CanAccessMic_W = null;
				_CanAccessCam_W = null;
				_CanWrite_W = null;
				_IsBanned_W = null;
				_IsBannedFor24_W = null;
				_IsBannedFor7Days_W = null;
				_IsBannedForMonth_W = null;
				_IsMarked_W = null;
				_AskForMic_W = null;
				_QueueOrder_W = null;
				_UserRate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter MemberID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MemberID, Parameters.MemberID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RoomID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RoomID, Parameters.RoomID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAdmin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAdmin, Parameters.IsAdmin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdminTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminTypeID, Parameters.AdminTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasMic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasMic, Parameters.HasMic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasCam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasCam, Parameters.HasCam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CanAccessMic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CanAccessMic, Parameters.CanAccessMic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CanAccessCam
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CanAccessCam, Parameters.CanAccessCam);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CanWrite
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CanWrite, Parameters.CanWrite);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsBanned
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBanned, Parameters.IsBanned);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsBannedFor24
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBannedFor24, Parameters.IsBannedFor24);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsBannedFor7Days
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBannedFor7Days, Parameters.IsBannedFor7Days);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsBannedForMonth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBannedForMonth, Parameters.IsBannedForMonth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsMarked
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsMarked, Parameters.IsMarked);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AskForMic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AskForMic, Parameters.AskForMic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QueueOrder
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QueueOrder, Parameters.QueueOrder);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserRate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserRate, Parameters.UserRate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter MemberID
		    {
				get
		        {
					if(_MemberID_W == null)
	        	    {
						_MemberID_W = TearOff.MemberID;
					}
					return _MemberID_W;
				}
			}

			public AggregateParameter RoomID
		    {
				get
		        {
					if(_RoomID_W == null)
	        	    {
						_RoomID_W = TearOff.RoomID;
					}
					return _RoomID_W;
				}
			}

			public AggregateParameter IsAdmin
		    {
				get
		        {
					if(_IsAdmin_W == null)
	        	    {
						_IsAdmin_W = TearOff.IsAdmin;
					}
					return _IsAdmin_W;
				}
			}

			public AggregateParameter AdminTypeID
		    {
				get
		        {
					if(_AdminTypeID_W == null)
	        	    {
						_AdminTypeID_W = TearOff.AdminTypeID;
					}
					return _AdminTypeID_W;
				}
			}

			public AggregateParameter HasMic
		    {
				get
		        {
					if(_HasMic_W == null)
	        	    {
						_HasMic_W = TearOff.HasMic;
					}
					return _HasMic_W;
				}
			}

			public AggregateParameter HasCam
		    {
				get
		        {
					if(_HasCam_W == null)
	        	    {
						_HasCam_W = TearOff.HasCam;
					}
					return _HasCam_W;
				}
			}

			public AggregateParameter CanAccessMic
		    {
				get
		        {
					if(_CanAccessMic_W == null)
	        	    {
						_CanAccessMic_W = TearOff.CanAccessMic;
					}
					return _CanAccessMic_W;
				}
			}

			public AggregateParameter CanAccessCam
		    {
				get
		        {
					if(_CanAccessCam_W == null)
	        	    {
						_CanAccessCam_W = TearOff.CanAccessCam;
					}
					return _CanAccessCam_W;
				}
			}

			public AggregateParameter CanWrite
		    {
				get
		        {
					if(_CanWrite_W == null)
	        	    {
						_CanWrite_W = TearOff.CanWrite;
					}
					return _CanWrite_W;
				}
			}

			public AggregateParameter IsBanned
		    {
				get
		        {
					if(_IsBanned_W == null)
	        	    {
						_IsBanned_W = TearOff.IsBanned;
					}
					return _IsBanned_W;
				}
			}

			public AggregateParameter IsBannedFor24
		    {
				get
		        {
					if(_IsBannedFor24_W == null)
	        	    {
						_IsBannedFor24_W = TearOff.IsBannedFor24;
					}
					return _IsBannedFor24_W;
				}
			}

			public AggregateParameter IsBannedFor7Days
		    {
				get
		        {
					if(_IsBannedFor7Days_W == null)
	        	    {
						_IsBannedFor7Days_W = TearOff.IsBannedFor7Days;
					}
					return _IsBannedFor7Days_W;
				}
			}

			public AggregateParameter IsBannedForMonth
		    {
				get
		        {
					if(_IsBannedForMonth_W == null)
	        	    {
						_IsBannedForMonth_W = TearOff.IsBannedForMonth;
					}
					return _IsBannedForMonth_W;
				}
			}

			public AggregateParameter IsMarked
		    {
				get
		        {
					if(_IsMarked_W == null)
	        	    {
						_IsMarked_W = TearOff.IsMarked;
					}
					return _IsMarked_W;
				}
			}

			public AggregateParameter AskForMic
		    {
				get
		        {
					if(_AskForMic_W == null)
	        	    {
						_AskForMic_W = TearOff.AskForMic;
					}
					return _AskForMic_W;
				}
			}

			public AggregateParameter QueueOrder
		    {
				get
		        {
					if(_QueueOrder_W == null)
	        	    {
						_QueueOrder_W = TearOff.QueueOrder;
					}
					return _QueueOrder_W;
				}
			}

			public AggregateParameter UserRate
		    {
				get
		        {
					if(_UserRate_W == null)
	        	    {
						_UserRate_W = TearOff.UserRate;
					}
					return _UserRate_W;
				}
			}

			private AggregateParameter _MemberID_W = null;
			private AggregateParameter _RoomID_W = null;
			private AggregateParameter _IsAdmin_W = null;
			private AggregateParameter _AdminTypeID_W = null;
			private AggregateParameter _HasMic_W = null;
			private AggregateParameter _HasCam_W = null;
			private AggregateParameter _CanAccessMic_W = null;
			private AggregateParameter _CanAccessCam_W = null;
			private AggregateParameter _CanWrite_W = null;
			private AggregateParameter _IsBanned_W = null;
			private AggregateParameter _IsBannedFor24_W = null;
			private AggregateParameter _IsBannedFor7Days_W = null;
			private AggregateParameter _IsBannedForMonth_W = null;
			private AggregateParameter _IsMarked_W = null;
			private AggregateParameter _AskForMic_W = null;
			private AggregateParameter _QueueOrder_W = null;
			private AggregateParameter _UserRate_W = null;

			public void AggregateClauseReset()
			{
				_MemberID_W = null;
				_RoomID_W = null;
				_IsAdmin_W = null;
				_AdminTypeID_W = null;
				_HasMic_W = null;
				_HasCam_W = null;
				_CanAccessMic_W = null;
				_CanAccessCam_W = null;
				_CanWrite_W = null;
				_IsBanned_W = null;
				_IsBannedFor24_W = null;
				_IsBannedFor7Days_W = null;
				_IsBannedForMonth_W = null;
				_IsMarked_W = null;
				_AskForMic_W = null;
				_QueueOrder_W = null;
				_UserRate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_RoomMemberDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.MemberID);
			p.SourceColumn = ColumnNames.MemberID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RoomID);
			p.SourceColumn = ColumnNames.RoomID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAdmin);
			p.SourceColumn = ColumnNames.IsAdmin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdminTypeID);
			p.SourceColumn = ColumnNames.AdminTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasMic);
			p.SourceColumn = ColumnNames.HasMic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasCam);
			p.SourceColumn = ColumnNames.HasCam;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CanAccessMic);
			p.SourceColumn = ColumnNames.CanAccessMic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CanAccessCam);
			p.SourceColumn = ColumnNames.CanAccessCam;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CanWrite);
			p.SourceColumn = ColumnNames.CanWrite;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsBanned);
			p.SourceColumn = ColumnNames.IsBanned;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsBannedFor24);
			p.SourceColumn = ColumnNames.IsBannedFor24;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsBannedFor7Days);
			p.SourceColumn = ColumnNames.IsBannedFor7Days;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsBannedForMonth);
			p.SourceColumn = ColumnNames.IsBannedForMonth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsMarked);
			p.SourceColumn = ColumnNames.IsMarked;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AskForMic);
			p.SourceColumn = ColumnNames.AskForMic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QueueOrder);
			p.SourceColumn = ColumnNames.QueueOrder;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserRate);
			p.SourceColumn = ColumnNames.UserRate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
