
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Combo.DAL
{
	public abstract class _ComboUser : SqlClientEntity
	{
		public _ComboUser()
		{
			this.QuerySource = "ComboUser";
			this.MappingName = "ComboUser";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ComboUserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ComboUserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ComboUserID, ComboUserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ComboUserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ComboUserID
			{
				get
				{
					return new SqlParameter("@ComboUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter DisplayName
			{
				get
				{
					return new SqlParameter("@DisplayName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter ProfileImgID
			{
				get
				{
					return new SqlParameter("@ProfileImgID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CoverImgID
			{
				get
				{
					return new SqlParameter("@CoverImgID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GenderID
			{
				get
				{
					return new SqlParameter("@GenderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bio
			{
				get
				{
					return new SqlParameter("@Bio", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter IsActivated
			{
				get
				{
					return new SqlParameter("@IsActivated", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ActivationCode
			{
				get
				{
					return new SqlParameter("@ActivationCode", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ExternalID
			{
				get
				{
					return new SqlParameter("@ExternalID", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter ExternalIDType
			{
				get
				{
					return new SqlParameter("@ExternalIDType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeviceID
			{
				get
				{
					return new SqlParameter("@DeviceID", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter PassResetCode
			{
				get
				{
					return new SqlParameter("@PassResetCode", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter IsDeactivated
			{
				get
				{
					return new SqlParameter("@IsDeactivated", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SecurityQuestion
			{
				get
				{
					return new SqlParameter("@SecurityQuestion", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter SecurityAnswer
			{
				get
				{
					return new SqlParameter("@SecurityAnswer", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter UserRankID
			{
				get
				{
					return new SqlParameter("@UserRankID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ComboUserID = "ComboUserID";
            public const string UserName = "UserName";
            public const string DisplayName = "DisplayName";
            public const string Password = "Password";
            public const string Email = "Email";
            public const string ProfileImgID = "ProfileImgID";
            public const string CoverImgID = "CoverImgID";
            public const string GenderID = "GenderID";
            public const string Bio = "Bio";
            public const string IsActivated = "IsActivated";
            public const string ActivationCode = "ActivationCode";
            public const string ExternalID = "ExternalID";
            public const string ExternalIDType = "ExternalIDType";
            public const string DeviceID = "DeviceID";
            public const string PassResetCode = "PassResetCode";
            public const string IsDeactivated = "IsDeactivated";
            public const string SecurityQuestion = "SecurityQuestion";
            public const string SecurityAnswer = "SecurityAnswer";
            public const string UserRankID = "UserRankID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ComboUserID] = _ComboUser.PropertyNames.ComboUserID;
					ht[UserName] = _ComboUser.PropertyNames.UserName;
					ht[DisplayName] = _ComboUser.PropertyNames.DisplayName;
					ht[Password] = _ComboUser.PropertyNames.Password;
					ht[Email] = _ComboUser.PropertyNames.Email;
					ht[ProfileImgID] = _ComboUser.PropertyNames.ProfileImgID;
					ht[CoverImgID] = _ComboUser.PropertyNames.CoverImgID;
					ht[GenderID] = _ComboUser.PropertyNames.GenderID;
					ht[Bio] = _ComboUser.PropertyNames.Bio;
					ht[IsActivated] = _ComboUser.PropertyNames.IsActivated;
					ht[ActivationCode] = _ComboUser.PropertyNames.ActivationCode;
					ht[ExternalID] = _ComboUser.PropertyNames.ExternalID;
					ht[ExternalIDType] = _ComboUser.PropertyNames.ExternalIDType;
					ht[DeviceID] = _ComboUser.PropertyNames.DeviceID;
					ht[PassResetCode] = _ComboUser.PropertyNames.PassResetCode;
					ht[IsDeactivated] = _ComboUser.PropertyNames.IsDeactivated;
					ht[SecurityQuestion] = _ComboUser.PropertyNames.SecurityQuestion;
					ht[SecurityAnswer] = _ComboUser.PropertyNames.SecurityAnswer;
					ht[UserRankID] = _ComboUser.PropertyNames.UserRankID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ComboUserID = "ComboUserID";
            public const string UserName = "UserName";
            public const string DisplayName = "DisplayName";
            public const string Password = "Password";
            public const string Email = "Email";
            public const string ProfileImgID = "ProfileImgID";
            public const string CoverImgID = "CoverImgID";
            public const string GenderID = "GenderID";
            public const string Bio = "Bio";
            public const string IsActivated = "IsActivated";
            public const string ActivationCode = "ActivationCode";
            public const string ExternalID = "ExternalID";
            public const string ExternalIDType = "ExternalIDType";
            public const string DeviceID = "DeviceID";
            public const string PassResetCode = "PassResetCode";
            public const string IsDeactivated = "IsDeactivated";
            public const string SecurityQuestion = "SecurityQuestion";
            public const string SecurityAnswer = "SecurityAnswer";
            public const string UserRankID = "UserRankID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ComboUserID] = _ComboUser.ColumnNames.ComboUserID;
					ht[UserName] = _ComboUser.ColumnNames.UserName;
					ht[DisplayName] = _ComboUser.ColumnNames.DisplayName;
					ht[Password] = _ComboUser.ColumnNames.Password;
					ht[Email] = _ComboUser.ColumnNames.Email;
					ht[ProfileImgID] = _ComboUser.ColumnNames.ProfileImgID;
					ht[CoverImgID] = _ComboUser.ColumnNames.CoverImgID;
					ht[GenderID] = _ComboUser.ColumnNames.GenderID;
					ht[Bio] = _ComboUser.ColumnNames.Bio;
					ht[IsActivated] = _ComboUser.ColumnNames.IsActivated;
					ht[ActivationCode] = _ComboUser.ColumnNames.ActivationCode;
					ht[ExternalID] = _ComboUser.ColumnNames.ExternalID;
					ht[ExternalIDType] = _ComboUser.ColumnNames.ExternalIDType;
					ht[DeviceID] = _ComboUser.ColumnNames.DeviceID;
					ht[PassResetCode] = _ComboUser.ColumnNames.PassResetCode;
					ht[IsDeactivated] = _ComboUser.ColumnNames.IsDeactivated;
					ht[SecurityQuestion] = _ComboUser.ColumnNames.SecurityQuestion;
					ht[SecurityAnswer] = _ComboUser.ColumnNames.SecurityAnswer;
					ht[UserRankID] = _ComboUser.ColumnNames.UserRankID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ComboUserID = "s_ComboUserID";
            public const string UserName = "s_UserName";
            public const string DisplayName = "s_DisplayName";
            public const string Password = "s_Password";
            public const string Email = "s_Email";
            public const string ProfileImgID = "s_ProfileImgID";
            public const string CoverImgID = "s_CoverImgID";
            public const string GenderID = "s_GenderID";
            public const string Bio = "s_Bio";
            public const string IsActivated = "s_IsActivated";
            public const string ActivationCode = "s_ActivationCode";
            public const string ExternalID = "s_ExternalID";
            public const string ExternalIDType = "s_ExternalIDType";
            public const string DeviceID = "s_DeviceID";
            public const string PassResetCode = "s_PassResetCode";
            public const string IsDeactivated = "s_IsDeactivated";
            public const string SecurityQuestion = "s_SecurityQuestion";
            public const string SecurityAnswer = "s_SecurityAnswer";
            public const string UserRankID = "s_UserRankID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ComboUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.ComboUserID);
			}
			set
	        {
				base.Setint(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string DisplayName
	    {
			get
	        {
				return base.Getstring(ColumnNames.DisplayName);
			}
			set
	        {
				base.Setstring(ColumnNames.DisplayName, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual int ProfileImgID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProfileImgID);
			}
			set
	        {
				base.Setint(ColumnNames.ProfileImgID, value);
			}
		}

		public virtual int CoverImgID
	    {
			get
	        {
				return base.Getint(ColumnNames.CoverImgID);
			}
			set
	        {
				base.Setint(ColumnNames.CoverImgID, value);
			}
		}

		public virtual int GenderID
	    {
			get
	        {
				return base.Getint(ColumnNames.GenderID);
			}
			set
	        {
				base.Setint(ColumnNames.GenderID, value);
			}
		}

		public virtual string Bio
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bio);
			}
			set
	        {
				base.Setstring(ColumnNames.Bio, value);
			}
		}

		public virtual bool IsActivated
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActivated);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActivated, value);
			}
		}

		public virtual Guid ActivationCode
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ActivationCode);
			}
			set
	        {
				base.SetGuid(ColumnNames.ActivationCode, value);
			}
		}

		public virtual string ExternalID
	    {
			get
	        {
				return base.Getstring(ColumnNames.ExternalID);
			}
			set
	        {
				base.Setstring(ColumnNames.ExternalID, value);
			}
		}

		public virtual int ExternalIDType
	    {
			get
	        {
				return base.Getint(ColumnNames.ExternalIDType);
			}
			set
	        {
				base.Setint(ColumnNames.ExternalIDType, value);
			}
		}

		public virtual string DeviceID
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeviceID);
			}
			set
	        {
				base.Setstring(ColumnNames.DeviceID, value);
			}
		}

		public virtual Guid PassResetCode
	    {
			get
	        {
				return base.GetGuid(ColumnNames.PassResetCode);
			}
			set
	        {
				base.SetGuid(ColumnNames.PassResetCode, value);
			}
		}

		public virtual bool IsDeactivated
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeactivated);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeactivated, value);
			}
		}

		public virtual string SecurityQuestion
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecurityQuestion);
			}
			set
	        {
				base.Setstring(ColumnNames.SecurityQuestion, value);
			}
		}

		public virtual string SecurityAnswer
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecurityAnswer);
			}
			set
	        {
				base.Setstring(ColumnNames.SecurityAnswer, value);
			}
		}

		public virtual int UserRankID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserRankID);
			}
			set
	        {
				base.Setint(ColumnNames.UserRankID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ComboUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComboUserID) ? string.Empty : base.GetintAsString(ColumnNames.ComboUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComboUserID);
				else
					this.ComboUserID = base.SetintAsString(ColumnNames.ComboUserID, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_DisplayName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DisplayName) ? string.Empty : base.GetstringAsString(ColumnNames.DisplayName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DisplayName);
				else
					this.DisplayName = base.SetstringAsString(ColumnNames.DisplayName, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_ProfileImgID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProfileImgID) ? string.Empty : base.GetintAsString(ColumnNames.ProfileImgID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProfileImgID);
				else
					this.ProfileImgID = base.SetintAsString(ColumnNames.ProfileImgID, value);
			}
		}

		public virtual string s_CoverImgID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CoverImgID) ? string.Empty : base.GetintAsString(ColumnNames.CoverImgID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CoverImgID);
				else
					this.CoverImgID = base.SetintAsString(ColumnNames.CoverImgID, value);
			}
		}

		public virtual string s_GenderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenderID) ? string.Empty : base.GetintAsString(ColumnNames.GenderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenderID);
				else
					this.GenderID = base.SetintAsString(ColumnNames.GenderID, value);
			}
		}

		public virtual string s_Bio
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bio) ? string.Empty : base.GetstringAsString(ColumnNames.Bio);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bio);
				else
					this.Bio = base.SetstringAsString(ColumnNames.Bio, value);
			}
		}

		public virtual string s_IsActivated
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActivated) ? string.Empty : base.GetboolAsString(ColumnNames.IsActivated);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActivated);
				else
					this.IsActivated = base.SetboolAsString(ColumnNames.IsActivated, value);
			}
		}

		public virtual string s_ActivationCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivationCode) ? string.Empty : base.GetGuidAsString(ColumnNames.ActivationCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivationCode);
				else
					this.ActivationCode = base.SetGuidAsString(ColumnNames.ActivationCode, value);
			}
		}

		public virtual string s_ExternalID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExternalID) ? string.Empty : base.GetstringAsString(ColumnNames.ExternalID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExternalID);
				else
					this.ExternalID = base.SetstringAsString(ColumnNames.ExternalID, value);
			}
		}

		public virtual string s_ExternalIDType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExternalIDType) ? string.Empty : base.GetintAsString(ColumnNames.ExternalIDType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExternalIDType);
				else
					this.ExternalIDType = base.SetintAsString(ColumnNames.ExternalIDType, value);
			}
		}

		public virtual string s_DeviceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeviceID) ? string.Empty : base.GetstringAsString(ColumnNames.DeviceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeviceID);
				else
					this.DeviceID = base.SetstringAsString(ColumnNames.DeviceID, value);
			}
		}

		public virtual string s_PassResetCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PassResetCode) ? string.Empty : base.GetGuidAsString(ColumnNames.PassResetCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PassResetCode);
				else
					this.PassResetCode = base.SetGuidAsString(ColumnNames.PassResetCode, value);
			}
		}

		public virtual string s_IsDeactivated
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeactivated) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeactivated);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeactivated);
				else
					this.IsDeactivated = base.SetboolAsString(ColumnNames.IsDeactivated, value);
			}
		}

		public virtual string s_SecurityQuestion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecurityQuestion) ? string.Empty : base.GetstringAsString(ColumnNames.SecurityQuestion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecurityQuestion);
				else
					this.SecurityQuestion = base.SetstringAsString(ColumnNames.SecurityQuestion, value);
			}
		}

		public virtual string s_SecurityAnswer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecurityAnswer) ? string.Empty : base.GetstringAsString(ColumnNames.SecurityAnswer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecurityAnswer);
				else
					this.SecurityAnswer = base.SetstringAsString(ColumnNames.SecurityAnswer, value);
			}
		}

		public virtual string s_UserRankID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserRankID) ? string.Empty : base.GetintAsString(ColumnNames.UserRankID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserRankID);
				else
					this.UserRankID = base.SetintAsString(ColumnNames.UserRankID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ComboUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DisplayName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProfileImgID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProfileImgID, Parameters.ProfileImgID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CoverImgID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CoverImgID, Parameters.CoverImgID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bio
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bio, Parameters.Bio);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActivated
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActivated, Parameters.IsActivated);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivationCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivationCode, Parameters.ActivationCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExternalID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExternalID, Parameters.ExternalID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExternalIDType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExternalIDType, Parameters.ExternalIDType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeviceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeviceID, Parameters.DeviceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PassResetCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PassResetCode, Parameters.PassResetCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeactivated
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeactivated, Parameters.IsDeactivated);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecurityQuestion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecurityQuestion, Parameters.SecurityQuestion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecurityAnswer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecurityAnswer, Parameters.SecurityAnswer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserRankID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserRankID, Parameters.UserRankID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter ProfileImgID
		    {
				get
		        {
					if(_ProfileImgID_W == null)
	        	    {
						_ProfileImgID_W = TearOff.ProfileImgID;
					}
					return _ProfileImgID_W;
				}
			}

			public WhereParameter CoverImgID
		    {
				get
		        {
					if(_CoverImgID_W == null)
	        	    {
						_CoverImgID_W = TearOff.CoverImgID;
					}
					return _CoverImgID_W;
				}
			}

			public WhereParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public WhereParameter Bio
		    {
				get
		        {
					if(_Bio_W == null)
	        	    {
						_Bio_W = TearOff.Bio;
					}
					return _Bio_W;
				}
			}

			public WhereParameter IsActivated
		    {
				get
		        {
					if(_IsActivated_W == null)
	        	    {
						_IsActivated_W = TearOff.IsActivated;
					}
					return _IsActivated_W;
				}
			}

			public WhereParameter ActivationCode
		    {
				get
		        {
					if(_ActivationCode_W == null)
	        	    {
						_ActivationCode_W = TearOff.ActivationCode;
					}
					return _ActivationCode_W;
				}
			}

			public WhereParameter ExternalID
		    {
				get
		        {
					if(_ExternalID_W == null)
	        	    {
						_ExternalID_W = TearOff.ExternalID;
					}
					return _ExternalID_W;
				}
			}

			public WhereParameter ExternalIDType
		    {
				get
		        {
					if(_ExternalIDType_W == null)
	        	    {
						_ExternalIDType_W = TearOff.ExternalIDType;
					}
					return _ExternalIDType_W;
				}
			}

			public WhereParameter DeviceID
		    {
				get
		        {
					if(_DeviceID_W == null)
	        	    {
						_DeviceID_W = TearOff.DeviceID;
					}
					return _DeviceID_W;
				}
			}

			public WhereParameter PassResetCode
		    {
				get
		        {
					if(_PassResetCode_W == null)
	        	    {
						_PassResetCode_W = TearOff.PassResetCode;
					}
					return _PassResetCode_W;
				}
			}

			public WhereParameter IsDeactivated
		    {
				get
		        {
					if(_IsDeactivated_W == null)
	        	    {
						_IsDeactivated_W = TearOff.IsDeactivated;
					}
					return _IsDeactivated_W;
				}
			}

			public WhereParameter SecurityQuestion
		    {
				get
		        {
					if(_SecurityQuestion_W == null)
	        	    {
						_SecurityQuestion_W = TearOff.SecurityQuestion;
					}
					return _SecurityQuestion_W;
				}
			}

			public WhereParameter SecurityAnswer
		    {
				get
		        {
					if(_SecurityAnswer_W == null)
	        	    {
						_SecurityAnswer_W = TearOff.SecurityAnswer;
					}
					return _SecurityAnswer_W;
				}
			}

			public WhereParameter UserRankID
		    {
				get
		        {
					if(_UserRankID_W == null)
	        	    {
						_UserRankID_W = TearOff.UserRankID;
					}
					return _UserRankID_W;
				}
			}

			private WhereParameter _ComboUserID_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _DisplayName_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _ProfileImgID_W = null;
			private WhereParameter _CoverImgID_W = null;
			private WhereParameter _GenderID_W = null;
			private WhereParameter _Bio_W = null;
			private WhereParameter _IsActivated_W = null;
			private WhereParameter _ActivationCode_W = null;
			private WhereParameter _ExternalID_W = null;
			private WhereParameter _ExternalIDType_W = null;
			private WhereParameter _DeviceID_W = null;
			private WhereParameter _PassResetCode_W = null;
			private WhereParameter _IsDeactivated_W = null;
			private WhereParameter _SecurityQuestion_W = null;
			private WhereParameter _SecurityAnswer_W = null;
			private WhereParameter _UserRankID_W = null;

			public void WhereClauseReset()
			{
				_ComboUserID_W = null;
				_UserName_W = null;
				_DisplayName_W = null;
				_Password_W = null;
				_Email_W = null;
				_ProfileImgID_W = null;
				_CoverImgID_W = null;
				_GenderID_W = null;
				_Bio_W = null;
				_IsActivated_W = null;
				_ActivationCode_W = null;
				_ExternalID_W = null;
				_ExternalIDType_W = null;
				_DeviceID_W = null;
				_PassResetCode_W = null;
				_IsDeactivated_W = null;
				_SecurityQuestion_W = null;
				_SecurityAnswer_W = null;
				_UserRankID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ComboUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComboUserID, Parameters.ComboUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DisplayName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProfileImgID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProfileImgID, Parameters.ProfileImgID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CoverImgID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CoverImgID, Parameters.CoverImgID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bio
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bio, Parameters.Bio);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActivated
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActivated, Parameters.IsActivated);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivationCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivationCode, Parameters.ActivationCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExternalID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExternalID, Parameters.ExternalID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExternalIDType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExternalIDType, Parameters.ExternalIDType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeviceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeviceID, Parameters.DeviceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PassResetCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PassResetCode, Parameters.PassResetCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeactivated
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeactivated, Parameters.IsDeactivated);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecurityQuestion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecurityQuestion, Parameters.SecurityQuestion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecurityAnswer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecurityAnswer, Parameters.SecurityAnswer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserRankID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserRankID, Parameters.UserRankID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ComboUserID
		    {
				get
		        {
					if(_ComboUserID_W == null)
	        	    {
						_ComboUserID_W = TearOff.ComboUserID;
					}
					return _ComboUserID_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter ProfileImgID
		    {
				get
		        {
					if(_ProfileImgID_W == null)
	        	    {
						_ProfileImgID_W = TearOff.ProfileImgID;
					}
					return _ProfileImgID_W;
				}
			}

			public AggregateParameter CoverImgID
		    {
				get
		        {
					if(_CoverImgID_W == null)
	        	    {
						_CoverImgID_W = TearOff.CoverImgID;
					}
					return _CoverImgID_W;
				}
			}

			public AggregateParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public AggregateParameter Bio
		    {
				get
		        {
					if(_Bio_W == null)
	        	    {
						_Bio_W = TearOff.Bio;
					}
					return _Bio_W;
				}
			}

			public AggregateParameter IsActivated
		    {
				get
		        {
					if(_IsActivated_W == null)
	        	    {
						_IsActivated_W = TearOff.IsActivated;
					}
					return _IsActivated_W;
				}
			}

			public AggregateParameter ActivationCode
		    {
				get
		        {
					if(_ActivationCode_W == null)
	        	    {
						_ActivationCode_W = TearOff.ActivationCode;
					}
					return _ActivationCode_W;
				}
			}

			public AggregateParameter ExternalID
		    {
				get
		        {
					if(_ExternalID_W == null)
	        	    {
						_ExternalID_W = TearOff.ExternalID;
					}
					return _ExternalID_W;
				}
			}

			public AggregateParameter ExternalIDType
		    {
				get
		        {
					if(_ExternalIDType_W == null)
	        	    {
						_ExternalIDType_W = TearOff.ExternalIDType;
					}
					return _ExternalIDType_W;
				}
			}

			public AggregateParameter DeviceID
		    {
				get
		        {
					if(_DeviceID_W == null)
	        	    {
						_DeviceID_W = TearOff.DeviceID;
					}
					return _DeviceID_W;
				}
			}

			public AggregateParameter PassResetCode
		    {
				get
		        {
					if(_PassResetCode_W == null)
	        	    {
						_PassResetCode_W = TearOff.PassResetCode;
					}
					return _PassResetCode_W;
				}
			}

			public AggregateParameter IsDeactivated
		    {
				get
		        {
					if(_IsDeactivated_W == null)
	        	    {
						_IsDeactivated_W = TearOff.IsDeactivated;
					}
					return _IsDeactivated_W;
				}
			}

			public AggregateParameter SecurityQuestion
		    {
				get
		        {
					if(_SecurityQuestion_W == null)
	        	    {
						_SecurityQuestion_W = TearOff.SecurityQuestion;
					}
					return _SecurityQuestion_W;
				}
			}

			public AggregateParameter SecurityAnswer
		    {
				get
		        {
					if(_SecurityAnswer_W == null)
	        	    {
						_SecurityAnswer_W = TearOff.SecurityAnswer;
					}
					return _SecurityAnswer_W;
				}
			}

			public AggregateParameter UserRankID
		    {
				get
		        {
					if(_UserRankID_W == null)
	        	    {
						_UserRankID_W = TearOff.UserRankID;
					}
					return _UserRankID_W;
				}
			}

			private AggregateParameter _ComboUserID_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _DisplayName_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _ProfileImgID_W = null;
			private AggregateParameter _CoverImgID_W = null;
			private AggregateParameter _GenderID_W = null;
			private AggregateParameter _Bio_W = null;
			private AggregateParameter _IsActivated_W = null;
			private AggregateParameter _ActivationCode_W = null;
			private AggregateParameter _ExternalID_W = null;
			private AggregateParameter _ExternalIDType_W = null;
			private AggregateParameter _DeviceID_W = null;
			private AggregateParameter _PassResetCode_W = null;
			private AggregateParameter _IsDeactivated_W = null;
			private AggregateParameter _SecurityQuestion_W = null;
			private AggregateParameter _SecurityAnswer_W = null;
			private AggregateParameter _UserRankID_W = null;

			public void AggregateClauseReset()
			{
				_ComboUserID_W = null;
				_UserName_W = null;
				_DisplayName_W = null;
				_Password_W = null;
				_Email_W = null;
				_ProfileImgID_W = null;
				_CoverImgID_W = null;
				_GenderID_W = null;
				_Bio_W = null;
				_IsActivated_W = null;
				_ActivationCode_W = null;
				_ExternalID_W = null;
				_ExternalIDType_W = null;
				_DeviceID_W = null;
				_PassResetCode_W = null;
				_IsDeactivated_W = null;
				_SecurityQuestion_W = null;
				_SecurityAnswer_W = null;
				_UserRankID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ComboUserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ComboUserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ComboUserID);
			p.SourceColumn = ColumnNames.ComboUserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ComboUserID);
			p.SourceColumn = ColumnNames.ComboUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DisplayName);
			p.SourceColumn = ColumnNames.DisplayName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProfileImgID);
			p.SourceColumn = ColumnNames.ProfileImgID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CoverImgID);
			p.SourceColumn = ColumnNames.CoverImgID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenderID);
			p.SourceColumn = ColumnNames.GenderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bio);
			p.SourceColumn = ColumnNames.Bio;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActivated);
			p.SourceColumn = ColumnNames.IsActivated;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivationCode);
			p.SourceColumn = ColumnNames.ActivationCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExternalID);
			p.SourceColumn = ColumnNames.ExternalID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExternalIDType);
			p.SourceColumn = ColumnNames.ExternalIDType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeviceID);
			p.SourceColumn = ColumnNames.DeviceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PassResetCode);
			p.SourceColumn = ColumnNames.PassResetCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeactivated);
			p.SourceColumn = ColumnNames.IsDeactivated;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecurityQuestion);
			p.SourceColumn = ColumnNames.SecurityQuestion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecurityAnswer);
			p.SourceColumn = ColumnNames.SecurityAnswer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserRankID);
			p.SourceColumn = ColumnNames.UserRankID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
