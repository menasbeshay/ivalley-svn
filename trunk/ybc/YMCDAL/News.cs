
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace YMC.DAL
{
	public abstract class _News : SqlClientEntity
	{
		public _News()
		{
			this.QuerySource = "News";
			this.MappingName = "News";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_NewsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int NewsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.NewsID, NewsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_NewsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter NewsID
			{
				get
				{
					return new SqlParameter("@NewsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NewsDate
			{
				get
				{
					return new SqlParameter("@NewsDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Title
			{
				get
				{
					return new SqlParameter("@Title", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Details
			{
				get
				{
					return new SqlParameter("@Details", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter CommiteeName
			{
				get
				{
					return new SqlParameter("@CommiteeName", SqlDbType.NVarChar, 350);
				}
			}
			
			public static SqlParameter Brief
			{
				get
				{
					return new SqlParameter("@Brief", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string NewsID = "NewsID";
            public const string NewsDate = "NewsDate";
            public const string Title = "Title";
            public const string Details = "Details";
            public const string CommiteeName = "CommiteeName";
            public const string Brief = "Brief";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NewsID] = _News.PropertyNames.NewsID;
					ht[NewsDate] = _News.PropertyNames.NewsDate;
					ht[Title] = _News.PropertyNames.Title;
					ht[Details] = _News.PropertyNames.Details;
					ht[CommiteeName] = _News.PropertyNames.CommiteeName;
					ht[Brief] = _News.PropertyNames.Brief;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string NewsID = "NewsID";
            public const string NewsDate = "NewsDate";
            public const string Title = "Title";
            public const string Details = "Details";
            public const string CommiteeName = "CommiteeName";
            public const string Brief = "Brief";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[NewsID] = _News.ColumnNames.NewsID;
					ht[NewsDate] = _News.ColumnNames.NewsDate;
					ht[Title] = _News.ColumnNames.Title;
					ht[Details] = _News.ColumnNames.Details;
					ht[CommiteeName] = _News.ColumnNames.CommiteeName;
					ht[Brief] = _News.ColumnNames.Brief;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string NewsID = "s_NewsID";
            public const string NewsDate = "s_NewsDate";
            public const string Title = "s_Title";
            public const string Details = "s_Details";
            public const string CommiteeName = "s_CommiteeName";
            public const string Brief = "s_Brief";

		}
		#endregion		
		
		#region Properties
	
		public virtual int NewsID
	    {
			get
	        {
				return base.Getint(ColumnNames.NewsID);
			}
			set
	        {
				base.Setint(ColumnNames.NewsID, value);
			}
		}

		public virtual DateTime NewsDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.NewsDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.NewsDate, value);
			}
		}

		public virtual string Title
	    {
			get
	        {
				return base.Getstring(ColumnNames.Title);
			}
			set
	        {
				base.Setstring(ColumnNames.Title, value);
			}
		}

		public virtual string Details
	    {
			get
	        {
				return base.Getstring(ColumnNames.Details);
			}
			set
	        {
				base.Setstring(ColumnNames.Details, value);
			}
		}

		public virtual string CommiteeName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommiteeName);
			}
			set
	        {
				base.Setstring(ColumnNames.CommiteeName, value);
			}
		}

		public virtual string Brief
	    {
			get
	        {
				return base.Getstring(ColumnNames.Brief);
			}
			set
	        {
				base.Setstring(ColumnNames.Brief, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_NewsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NewsID) ? string.Empty : base.GetintAsString(ColumnNames.NewsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NewsID);
				else
					this.NewsID = base.SetintAsString(ColumnNames.NewsID, value);
			}
		}

		public virtual string s_NewsDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NewsDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.NewsDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NewsDate);
				else
					this.NewsDate = base.SetDateTimeAsString(ColumnNames.NewsDate, value);
			}
		}

		public virtual string s_Title
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title) ? string.Empty : base.GetstringAsString(ColumnNames.Title);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title);
				else
					this.Title = base.SetstringAsString(ColumnNames.Title, value);
			}
		}

		public virtual string s_Details
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Details) ? string.Empty : base.GetstringAsString(ColumnNames.Details);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Details);
				else
					this.Details = base.SetstringAsString(ColumnNames.Details, value);
			}
		}

		public virtual string s_CommiteeName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommiteeName) ? string.Empty : base.GetstringAsString(ColumnNames.CommiteeName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommiteeName);
				else
					this.CommiteeName = base.SetstringAsString(ColumnNames.CommiteeName, value);
			}
		}

		public virtual string s_Brief
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Brief) ? string.Empty : base.GetstringAsString(ColumnNames.Brief);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Brief);
				else
					this.Brief = base.SetstringAsString(ColumnNames.Brief, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter NewsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NewsID, Parameters.NewsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NewsDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NewsDate, Parameters.NewsDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Title
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Details
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Details, Parameters.Details);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommiteeName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommiteeName, Parameters.CommiteeName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Brief
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Brief, Parameters.Brief);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter NewsID
		    {
				get
		        {
					if(_NewsID_W == null)
	        	    {
						_NewsID_W = TearOff.NewsID;
					}
					return _NewsID_W;
				}
			}

			public WhereParameter NewsDate
		    {
				get
		        {
					if(_NewsDate_W == null)
	        	    {
						_NewsDate_W = TearOff.NewsDate;
					}
					return _NewsDate_W;
				}
			}

			public WhereParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public WhereParameter Details
		    {
				get
		        {
					if(_Details_W == null)
	        	    {
						_Details_W = TearOff.Details;
					}
					return _Details_W;
				}
			}

			public WhereParameter CommiteeName
		    {
				get
		        {
					if(_CommiteeName_W == null)
	        	    {
						_CommiteeName_W = TearOff.CommiteeName;
					}
					return _CommiteeName_W;
				}
			}

			public WhereParameter Brief
		    {
				get
		        {
					if(_Brief_W == null)
	        	    {
						_Brief_W = TearOff.Brief;
					}
					return _Brief_W;
				}
			}

			private WhereParameter _NewsID_W = null;
			private WhereParameter _NewsDate_W = null;
			private WhereParameter _Title_W = null;
			private WhereParameter _Details_W = null;
			private WhereParameter _CommiteeName_W = null;
			private WhereParameter _Brief_W = null;

			public void WhereClauseReset()
			{
				_NewsID_W = null;
				_NewsDate_W = null;
				_Title_W = null;
				_Details_W = null;
				_CommiteeName_W = null;
				_Brief_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter NewsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NewsID, Parameters.NewsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NewsDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NewsDate, Parameters.NewsDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Title
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Details
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Details, Parameters.Details);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommiteeName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommiteeName, Parameters.CommiteeName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Brief
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Brief, Parameters.Brief);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter NewsID
		    {
				get
		        {
					if(_NewsID_W == null)
	        	    {
						_NewsID_W = TearOff.NewsID;
					}
					return _NewsID_W;
				}
			}

			public AggregateParameter NewsDate
		    {
				get
		        {
					if(_NewsDate_W == null)
	        	    {
						_NewsDate_W = TearOff.NewsDate;
					}
					return _NewsDate_W;
				}
			}

			public AggregateParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public AggregateParameter Details
		    {
				get
		        {
					if(_Details_W == null)
	        	    {
						_Details_W = TearOff.Details;
					}
					return _Details_W;
				}
			}

			public AggregateParameter CommiteeName
		    {
				get
		        {
					if(_CommiteeName_W == null)
	        	    {
						_CommiteeName_W = TearOff.CommiteeName;
					}
					return _CommiteeName_W;
				}
			}

			public AggregateParameter Brief
		    {
				get
		        {
					if(_Brief_W == null)
	        	    {
						_Brief_W = TearOff.Brief;
					}
					return _Brief_W;
				}
			}

			private AggregateParameter _NewsID_W = null;
			private AggregateParameter _NewsDate_W = null;
			private AggregateParameter _Title_W = null;
			private AggregateParameter _Details_W = null;
			private AggregateParameter _CommiteeName_W = null;
			private AggregateParameter _Brief_W = null;

			public void AggregateClauseReset()
			{
				_NewsID_W = null;
				_NewsDate_W = null;
				_Title_W = null;
				_Details_W = null;
				_CommiteeName_W = null;
				_Brief_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_NewsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.NewsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_NewsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_NewsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.NewsID);
			p.SourceColumn = ColumnNames.NewsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.NewsID);
			p.SourceColumn = ColumnNames.NewsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NewsDate);
			p.SourceColumn = ColumnNames.NewsDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Title);
			p.SourceColumn = ColumnNames.Title;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Details);
			p.SourceColumn = ColumnNames.Details;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommiteeName);
			p.SourceColumn = ColumnNames.CommiteeName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Brief);
			p.SourceColumn = ColumnNames.Brief;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
