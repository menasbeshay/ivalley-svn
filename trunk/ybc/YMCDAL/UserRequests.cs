
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace YMC.DAL
{
	public abstract class _UserRequests : SqlClientEntity
	{
		public _UserRequests()
		{
			this.QuerySource = "UserRequests";
			this.MappingName = "UserRequests";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserRequestsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int RequestID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.RequestID, RequestID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserRequestsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter RequestID
			{
				get
				{
					return new SqlParameter("@RequestID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SiteUserID
			{
				get
				{
					return new SqlParameter("@SiteUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RequestTitle
			{
				get
				{
					return new SqlParameter("@RequestTitle", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter RequestDetails
			{
				get
				{
					return new SqlParameter("@RequestDetails", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter RequestFile
			{
				get
				{
					return new SqlParameter("@RequestFile", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter AdminResponse
			{
				get
				{
					return new SqlParameter("@AdminResponse", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter IsAnswered
			{
				get
				{
					return new SqlParameter("@IsAnswered", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string RequestID = "RequestID";
            public const string SiteUserID = "SiteUserID";
            public const string RequestTitle = "RequestTitle";
            public const string RequestDetails = "RequestDetails";
            public const string RequestFile = "RequestFile";
            public const string AdminResponse = "AdminResponse";
            public const string IsAnswered = "IsAnswered";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RequestID] = _UserRequests.PropertyNames.RequestID;
					ht[SiteUserID] = _UserRequests.PropertyNames.SiteUserID;
					ht[RequestTitle] = _UserRequests.PropertyNames.RequestTitle;
					ht[RequestDetails] = _UserRequests.PropertyNames.RequestDetails;
					ht[RequestFile] = _UserRequests.PropertyNames.RequestFile;
					ht[AdminResponse] = _UserRequests.PropertyNames.AdminResponse;
					ht[IsAnswered] = _UserRequests.PropertyNames.IsAnswered;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string RequestID = "RequestID";
            public const string SiteUserID = "SiteUserID";
            public const string RequestTitle = "RequestTitle";
            public const string RequestDetails = "RequestDetails";
            public const string RequestFile = "RequestFile";
            public const string AdminResponse = "AdminResponse";
            public const string IsAnswered = "IsAnswered";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[RequestID] = _UserRequests.ColumnNames.RequestID;
					ht[SiteUserID] = _UserRequests.ColumnNames.SiteUserID;
					ht[RequestTitle] = _UserRequests.ColumnNames.RequestTitle;
					ht[RequestDetails] = _UserRequests.ColumnNames.RequestDetails;
					ht[RequestFile] = _UserRequests.ColumnNames.RequestFile;
					ht[AdminResponse] = _UserRequests.ColumnNames.AdminResponse;
					ht[IsAnswered] = _UserRequests.ColumnNames.IsAnswered;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string RequestID = "s_RequestID";
            public const string SiteUserID = "s_SiteUserID";
            public const string RequestTitle = "s_RequestTitle";
            public const string RequestDetails = "s_RequestDetails";
            public const string RequestFile = "s_RequestFile";
            public const string AdminResponse = "s_AdminResponse";
            public const string IsAnswered = "s_IsAnswered";

		}
		#endregion		
		
		#region Properties
	
		public virtual int RequestID
	    {
			get
	        {
				return base.Getint(ColumnNames.RequestID);
			}
			set
	        {
				base.Setint(ColumnNames.RequestID, value);
			}
		}

		public virtual int SiteUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.SiteUserID);
			}
			set
	        {
				base.Setint(ColumnNames.SiteUserID, value);
			}
		}

		public virtual string RequestTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.RequestTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.RequestTitle, value);
			}
		}

		public virtual string RequestDetails
	    {
			get
	        {
				return base.Getstring(ColumnNames.RequestDetails);
			}
			set
	        {
				base.Setstring(ColumnNames.RequestDetails, value);
			}
		}

		public virtual string RequestFile
	    {
			get
	        {
				return base.Getstring(ColumnNames.RequestFile);
			}
			set
	        {
				base.Setstring(ColumnNames.RequestFile, value);
			}
		}

		public virtual string AdminResponse
	    {
			get
	        {
				return base.Getstring(ColumnNames.AdminResponse);
			}
			set
	        {
				base.Setstring(ColumnNames.AdminResponse, value);
			}
		}

		public virtual bool IsAnswered
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAnswered);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAnswered, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_RequestID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestID) ? string.Empty : base.GetintAsString(ColumnNames.RequestID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestID);
				else
					this.RequestID = base.SetintAsString(ColumnNames.RequestID, value);
			}
		}

		public virtual string s_SiteUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SiteUserID) ? string.Empty : base.GetintAsString(ColumnNames.SiteUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SiteUserID);
				else
					this.SiteUserID = base.SetintAsString(ColumnNames.SiteUserID, value);
			}
		}

		public virtual string s_RequestTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestTitle) ? string.Empty : base.GetstringAsString(ColumnNames.RequestTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestTitle);
				else
					this.RequestTitle = base.SetstringAsString(ColumnNames.RequestTitle, value);
			}
		}

		public virtual string s_RequestDetails
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestDetails) ? string.Empty : base.GetstringAsString(ColumnNames.RequestDetails);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestDetails);
				else
					this.RequestDetails = base.SetstringAsString(ColumnNames.RequestDetails, value);
			}
		}

		public virtual string s_RequestFile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestFile) ? string.Empty : base.GetstringAsString(ColumnNames.RequestFile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestFile);
				else
					this.RequestFile = base.SetstringAsString(ColumnNames.RequestFile, value);
			}
		}

		public virtual string s_AdminResponse
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AdminResponse) ? string.Empty : base.GetstringAsString(ColumnNames.AdminResponse);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AdminResponse);
				else
					this.AdminResponse = base.SetstringAsString(ColumnNames.AdminResponse, value);
			}
		}

		public virtual string s_IsAnswered
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAnswered) ? string.Empty : base.GetboolAsString(ColumnNames.IsAnswered);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAnswered);
				else
					this.IsAnswered = base.SetboolAsString(ColumnNames.IsAnswered, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter RequestID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestID, Parameters.RequestID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SiteUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SiteUserID, Parameters.SiteUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestTitle, Parameters.RequestTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestDetails
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestDetails, Parameters.RequestDetails);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestFile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestFile, Parameters.RequestFile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AdminResponse
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AdminResponse, Parameters.AdminResponse);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAnswered
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAnswered, Parameters.IsAnswered);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter RequestID
		    {
				get
		        {
					if(_RequestID_W == null)
	        	    {
						_RequestID_W = TearOff.RequestID;
					}
					return _RequestID_W;
				}
			}

			public WhereParameter SiteUserID
		    {
				get
		        {
					if(_SiteUserID_W == null)
	        	    {
						_SiteUserID_W = TearOff.SiteUserID;
					}
					return _SiteUserID_W;
				}
			}

			public WhereParameter RequestTitle
		    {
				get
		        {
					if(_RequestTitle_W == null)
	        	    {
						_RequestTitle_W = TearOff.RequestTitle;
					}
					return _RequestTitle_W;
				}
			}

			public WhereParameter RequestDetails
		    {
				get
		        {
					if(_RequestDetails_W == null)
	        	    {
						_RequestDetails_W = TearOff.RequestDetails;
					}
					return _RequestDetails_W;
				}
			}

			public WhereParameter RequestFile
		    {
				get
		        {
					if(_RequestFile_W == null)
	        	    {
						_RequestFile_W = TearOff.RequestFile;
					}
					return _RequestFile_W;
				}
			}

			public WhereParameter AdminResponse
		    {
				get
		        {
					if(_AdminResponse_W == null)
	        	    {
						_AdminResponse_W = TearOff.AdminResponse;
					}
					return _AdminResponse_W;
				}
			}

			public WhereParameter IsAnswered
		    {
				get
		        {
					if(_IsAnswered_W == null)
	        	    {
						_IsAnswered_W = TearOff.IsAnswered;
					}
					return _IsAnswered_W;
				}
			}

			private WhereParameter _RequestID_W = null;
			private WhereParameter _SiteUserID_W = null;
			private WhereParameter _RequestTitle_W = null;
			private WhereParameter _RequestDetails_W = null;
			private WhereParameter _RequestFile_W = null;
			private WhereParameter _AdminResponse_W = null;
			private WhereParameter _IsAnswered_W = null;

			public void WhereClauseReset()
			{
				_RequestID_W = null;
				_SiteUserID_W = null;
				_RequestTitle_W = null;
				_RequestDetails_W = null;
				_RequestFile_W = null;
				_AdminResponse_W = null;
				_IsAnswered_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter RequestID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestID, Parameters.RequestID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SiteUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SiteUserID, Parameters.SiteUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestTitle, Parameters.RequestTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestDetails
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestDetails, Parameters.RequestDetails);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestFile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestFile, Parameters.RequestFile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AdminResponse
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AdminResponse, Parameters.AdminResponse);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAnswered
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAnswered, Parameters.IsAnswered);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter RequestID
		    {
				get
		        {
					if(_RequestID_W == null)
	        	    {
						_RequestID_W = TearOff.RequestID;
					}
					return _RequestID_W;
				}
			}

			public AggregateParameter SiteUserID
		    {
				get
		        {
					if(_SiteUserID_W == null)
	        	    {
						_SiteUserID_W = TearOff.SiteUserID;
					}
					return _SiteUserID_W;
				}
			}

			public AggregateParameter RequestTitle
		    {
				get
		        {
					if(_RequestTitle_W == null)
	        	    {
						_RequestTitle_W = TearOff.RequestTitle;
					}
					return _RequestTitle_W;
				}
			}

			public AggregateParameter RequestDetails
		    {
				get
		        {
					if(_RequestDetails_W == null)
	        	    {
						_RequestDetails_W = TearOff.RequestDetails;
					}
					return _RequestDetails_W;
				}
			}

			public AggregateParameter RequestFile
		    {
				get
		        {
					if(_RequestFile_W == null)
	        	    {
						_RequestFile_W = TearOff.RequestFile;
					}
					return _RequestFile_W;
				}
			}

			public AggregateParameter AdminResponse
		    {
				get
		        {
					if(_AdminResponse_W == null)
	        	    {
						_AdminResponse_W = TearOff.AdminResponse;
					}
					return _AdminResponse_W;
				}
			}

			public AggregateParameter IsAnswered
		    {
				get
		        {
					if(_IsAnswered_W == null)
	        	    {
						_IsAnswered_W = TearOff.IsAnswered;
					}
					return _IsAnswered_W;
				}
			}

			private AggregateParameter _RequestID_W = null;
			private AggregateParameter _SiteUserID_W = null;
			private AggregateParameter _RequestTitle_W = null;
			private AggregateParameter _RequestDetails_W = null;
			private AggregateParameter _RequestFile_W = null;
			private AggregateParameter _AdminResponse_W = null;
			private AggregateParameter _IsAnswered_W = null;

			public void AggregateClauseReset()
			{
				_RequestID_W = null;
				_SiteUserID_W = null;
				_RequestTitle_W = null;
				_RequestDetails_W = null;
				_RequestFile_W = null;
				_AdminResponse_W = null;
				_IsAnswered_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserRequestsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.RequestID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserRequestsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserRequestsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.RequestID);
			p.SourceColumn = ColumnNames.RequestID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.RequestID);
			p.SourceColumn = ColumnNames.RequestID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SiteUserID);
			p.SourceColumn = ColumnNames.SiteUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestTitle);
			p.SourceColumn = ColumnNames.RequestTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestDetails);
			p.SourceColumn = ColumnNames.RequestDetails;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestFile);
			p.SourceColumn = ColumnNames.RequestFile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AdminResponse);
			p.SourceColumn = ColumnNames.AdminResponse;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAnswered);
			p.SourceColumn = ColumnNames.IsAnswered;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
