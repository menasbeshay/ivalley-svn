
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace TerryOptics.DAL
{
	public abstract class _Products : SqlClientEntity
	{
		public _Products()
		{
			this.QuerySource = "Products";
			this.MappingName = "Products";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ProductID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ProductID, ProductID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ProductID
			{
				get
				{
					return new SqlParameter("@ProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter PicPath1
			{
				get
				{
					return new SqlParameter("@PicPath1", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter PicPath2
			{
				get
				{
					return new SqlParameter("@PicPath2", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter BrandID
			{
				get
				{
					return new SqlParameter("@BrandID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StyleID
			{
				get
				{
					return new SqlParameter("@StyleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LensTechID
			{
				get
				{
					return new SqlParameter("@LensTechID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ActivityID
			{
				get
				{
					return new SqlParameter("@ActivityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SpecialItemsID
			{
				get
				{
					return new SqlParameter("@SpecialItemsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FrameColorID
			{
				get
				{
					return new SqlParameter("@FrameColorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LensColorID
			{
				get
				{
					return new SqlParameter("@LensColorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FrameMatID
			{
				get
				{
					return new SqlParameter("@FrameMatID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LensMatID
			{
				get
				{
					return new SqlParameter("@LensMatID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Price
			{
				get
				{
					return new SqlParameter("@Price", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter SalePrice
			{
				get
				{
					return new SqlParameter("@SalePrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter IsSale
			{
				get
				{
					return new SqlParameter("@IsSale", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter FeatureAndFit
			{
				get
				{
					return new SqlParameter("@FeatureAndFit", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter EyeSize
			{
				get
				{
					return new SqlParameter("@EyeSize", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Bridge_Template
			{
				get
				{
					return new SqlParameter("@Bridge_Template", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ProductID = "ProductID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string PicPath1 = "PicPath1";
            public const string PicPath2 = "PicPath2";
            public const string Notes = "Notes";
            public const string BrandID = "BrandID";
            public const string StyleID = "StyleID";
            public const string LensTechID = "LensTechID";
            public const string ActivityID = "ActivityID";
            public const string SpecialItemsID = "SpecialItemsID";
            public const string FrameColorID = "FrameColorID";
            public const string LensColorID = "LensColorID";
            public const string FrameMatID = "FrameMatID";
            public const string LensMatID = "LensMatID";
            public const string Price = "Price";
            public const string SalePrice = "salePrice";
            public const string IsSale = "IsSale";
            public const string FeatureAndFit = "FeatureAndFit";
            public const string EyeSize = "EyeSize";
            public const string Bridge_Template = "Bridge_Template";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductID] = _Products.PropertyNames.ProductID;
					ht[Name] = _Products.PropertyNames.Name;
					ht[Description] = _Products.PropertyNames.Description;
					ht[PicPath1] = _Products.PropertyNames.PicPath1;
					ht[PicPath2] = _Products.PropertyNames.PicPath2;
					ht[Notes] = _Products.PropertyNames.Notes;
					ht[BrandID] = _Products.PropertyNames.BrandID;
					ht[StyleID] = _Products.PropertyNames.StyleID;
					ht[LensTechID] = _Products.PropertyNames.LensTechID;
					ht[ActivityID] = _Products.PropertyNames.ActivityID;
					ht[SpecialItemsID] = _Products.PropertyNames.SpecialItemsID;
					ht[FrameColorID] = _Products.PropertyNames.FrameColorID;
					ht[LensColorID] = _Products.PropertyNames.LensColorID;
					ht[FrameMatID] = _Products.PropertyNames.FrameMatID;
					ht[LensMatID] = _Products.PropertyNames.LensMatID;
					ht[Price] = _Products.PropertyNames.Price;
					ht[SalePrice] = _Products.PropertyNames.SalePrice;
					ht[IsSale] = _Products.PropertyNames.IsSale;
					ht[FeatureAndFit] = _Products.PropertyNames.FeatureAndFit;
					ht[EyeSize] = _Products.PropertyNames.EyeSize;
					ht[Bridge_Template] = _Products.PropertyNames.Bridge_Template;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ProductID = "ProductID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string PicPath1 = "PicPath1";
            public const string PicPath2 = "PicPath2";
            public const string Notes = "Notes";
            public const string BrandID = "BrandID";
            public const string StyleID = "StyleID";
            public const string LensTechID = "LensTechID";
            public const string ActivityID = "ActivityID";
            public const string SpecialItemsID = "SpecialItemsID";
            public const string FrameColorID = "FrameColorID";
            public const string LensColorID = "LensColorID";
            public const string FrameMatID = "FrameMatID";
            public const string LensMatID = "LensMatID";
            public const string Price = "Price";
            public const string SalePrice = "SalePrice";
            public const string IsSale = "IsSale";
            public const string FeatureAndFit = "FeatureAndFit";
            public const string EyeSize = "EyeSize";
            public const string Bridge_Template = "Bridge_Template";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductID] = _Products.ColumnNames.ProductID;
					ht[Name] = _Products.ColumnNames.Name;
					ht[Description] = _Products.ColumnNames.Description;
					ht[PicPath1] = _Products.ColumnNames.PicPath1;
					ht[PicPath2] = _Products.ColumnNames.PicPath2;
					ht[Notes] = _Products.ColumnNames.Notes;
					ht[BrandID] = _Products.ColumnNames.BrandID;
					ht[StyleID] = _Products.ColumnNames.StyleID;
					ht[LensTechID] = _Products.ColumnNames.LensTechID;
					ht[ActivityID] = _Products.ColumnNames.ActivityID;
					ht[SpecialItemsID] = _Products.ColumnNames.SpecialItemsID;
					ht[FrameColorID] = _Products.ColumnNames.FrameColorID;
					ht[LensColorID] = _Products.ColumnNames.LensColorID;
					ht[FrameMatID] = _Products.ColumnNames.FrameMatID;
					ht[LensMatID] = _Products.ColumnNames.LensMatID;
					ht[Price] = _Products.ColumnNames.Price;
					ht[SalePrice] = _Products.ColumnNames.SalePrice;
					ht[IsSale] = _Products.ColumnNames.IsSale;
					ht[FeatureAndFit] = _Products.ColumnNames.FeatureAndFit;
					ht[EyeSize] = _Products.ColumnNames.EyeSize;
					ht[Bridge_Template] = _Products.ColumnNames.Bridge_Template;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ProductID = "s_ProductID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string PicPath1 = "s_PicPath1";
            public const string PicPath2 = "s_PicPath2";
            public const string Notes = "s_Notes";
            public const string BrandID = "s_BrandID";
            public const string StyleID = "s_StyleID";
            public const string LensTechID = "s_LensTechID";
            public const string ActivityID = "s_ActivityID";
            public const string SpecialItemsID = "s_SpecialItemsID";
            public const string FrameColorID = "s_FrameColorID";
            public const string LensColorID = "s_LensColorID";
            public const string FrameMatID = "s_FrameMatID";
            public const string LensMatID = "s_LensMatID";
            public const string Price = "s_Price";
            public const string SalePrice = "s_SalePrice";
            public const string IsSale = "s_IsSale";
            public const string FeatureAndFit = "s_FeatureAndFit";
            public const string EyeSize = "s_EyeSize";
            public const string Bridge_Template = "s_Bridge_Template";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string PicPath1
	    {
			get
	        {
				return base.Getstring(ColumnNames.PicPath1);
			}
			set
	        {
				base.Setstring(ColumnNames.PicPath1, value);
			}
		}

		public virtual string PicPath2
	    {
			get
	        {
				return base.Getstring(ColumnNames.PicPath2);
			}
			set
	        {
				base.Setstring(ColumnNames.PicPath2, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual int BrandID
	    {
			get
	        {
				return base.Getint(ColumnNames.BrandID);
			}
			set
	        {
				base.Setint(ColumnNames.BrandID, value);
			}
		}

		public virtual int StyleID
	    {
			get
	        {
				return base.Getint(ColumnNames.StyleID);
			}
			set
	        {
				base.Setint(ColumnNames.StyleID, value);
			}
		}

		public virtual int LensTechID
	    {
			get
	        {
				return base.Getint(ColumnNames.LensTechID);
			}
			set
	        {
				base.Setint(ColumnNames.LensTechID, value);
			}
		}

		public virtual int ActivityID
	    {
			get
	        {
				return base.Getint(ColumnNames.ActivityID);
			}
			set
	        {
				base.Setint(ColumnNames.ActivityID, value);
			}
		}

		public virtual int SpecialItemsID
	    {
			get
	        {
				return base.Getint(ColumnNames.SpecialItemsID);
			}
			set
	        {
				base.Setint(ColumnNames.SpecialItemsID, value);
			}
		}

		public virtual int FrameColorID
	    {
			get
	        {
				return base.Getint(ColumnNames.FrameColorID);
			}
			set
	        {
				base.Setint(ColumnNames.FrameColorID, value);
			}
		}

		public virtual int LensColorID
	    {
			get
	        {
				return base.Getint(ColumnNames.LensColorID);
			}
			set
	        {
				base.Setint(ColumnNames.LensColorID, value);
			}
		}

		public virtual int FrameMatID
	    {
			get
	        {
				return base.Getint(ColumnNames.FrameMatID);
			}
			set
	        {
				base.Setint(ColumnNames.FrameMatID, value);
			}
		}

		public virtual int LensMatID
	    {
			get
	        {
				return base.Getint(ColumnNames.LensMatID);
			}
			set
	        {
				base.Setint(ColumnNames.LensMatID, value);
			}
		}

		public virtual decimal Price
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Price);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Price, value);
			}
		}

		public virtual decimal SalePrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.SalePrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.SalePrice, value);
			}
		}

		public virtual bool IsSale
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsSale);
			}
			set
	        {
				base.Setbool(ColumnNames.IsSale, value);
			}
		}

		public virtual string FeatureAndFit
	    {
			get
	        {
				return base.Getstring(ColumnNames.FeatureAndFit);
			}
			set
	        {
				base.Setstring(ColumnNames.FeatureAndFit, value);
			}
		}

		public virtual int EyeSize
	    {
			get
	        {
				return base.Getint(ColumnNames.EyeSize);
			}
			set
	        {
				base.Setint(ColumnNames.EyeSize, value);
			}
		}

		public virtual string Bridge_Template
	    {
			get
	        {
				return base.Getstring(ColumnNames.Bridge_Template);
			}
			set
	        {
				base.Setstring(ColumnNames.Bridge_Template, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductID) ? string.Empty : base.GetintAsString(ColumnNames.ProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductID);
				else
					this.ProductID = base.SetintAsString(ColumnNames.ProductID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_PicPath1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PicPath1) ? string.Empty : base.GetstringAsString(ColumnNames.PicPath1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PicPath1);
				else
					this.PicPath1 = base.SetstringAsString(ColumnNames.PicPath1, value);
			}
		}

		public virtual string s_PicPath2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PicPath2) ? string.Empty : base.GetstringAsString(ColumnNames.PicPath2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PicPath2);
				else
					this.PicPath2 = base.SetstringAsString(ColumnNames.PicPath2, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_BrandID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BrandID) ? string.Empty : base.GetintAsString(ColumnNames.BrandID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BrandID);
				else
					this.BrandID = base.SetintAsString(ColumnNames.BrandID, value);
			}
		}

		public virtual string s_StyleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StyleID) ? string.Empty : base.GetintAsString(ColumnNames.StyleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StyleID);
				else
					this.StyleID = base.SetintAsString(ColumnNames.StyleID, value);
			}
		}

		public virtual string s_LensTechID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LensTechID) ? string.Empty : base.GetintAsString(ColumnNames.LensTechID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LensTechID);
				else
					this.LensTechID = base.SetintAsString(ColumnNames.LensTechID, value);
			}
		}

		public virtual string s_ActivityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivityID) ? string.Empty : base.GetintAsString(ColumnNames.ActivityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivityID);
				else
					this.ActivityID = base.SetintAsString(ColumnNames.ActivityID, value);
			}
		}

		public virtual string s_SpecialItemsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SpecialItemsID) ? string.Empty : base.GetintAsString(ColumnNames.SpecialItemsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SpecialItemsID);
				else
					this.SpecialItemsID = base.SetintAsString(ColumnNames.SpecialItemsID, value);
			}
		}

		public virtual string s_FrameColorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FrameColorID) ? string.Empty : base.GetintAsString(ColumnNames.FrameColorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FrameColorID);
				else
					this.FrameColorID = base.SetintAsString(ColumnNames.FrameColorID, value);
			}
		}

		public virtual string s_LensColorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LensColorID) ? string.Empty : base.GetintAsString(ColumnNames.LensColorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LensColorID);
				else
					this.LensColorID = base.SetintAsString(ColumnNames.LensColorID, value);
			}
		}

		public virtual string s_FrameMatID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FrameMatID) ? string.Empty : base.GetintAsString(ColumnNames.FrameMatID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FrameMatID);
				else
					this.FrameMatID = base.SetintAsString(ColumnNames.FrameMatID, value);
			}
		}

		public virtual string s_LensMatID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LensMatID) ? string.Empty : base.GetintAsString(ColumnNames.LensMatID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LensMatID);
				else
					this.LensMatID = base.SetintAsString(ColumnNames.LensMatID, value);
			}
		}

		public virtual string s_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price) ? string.Empty : base.GetdecimalAsString(ColumnNames.Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price);
				else
					this.Price = base.SetdecimalAsString(ColumnNames.Price, value);
			}
		}

		public virtual string s_SalePrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SalePrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.SalePrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SalePrice);
				else
					this.SalePrice = base.SetdecimalAsString(ColumnNames.SalePrice, value);
			}
		}

		public virtual string s_IsSale
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsSale) ? string.Empty : base.GetboolAsString(ColumnNames.IsSale);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsSale);
				else
					this.IsSale = base.SetboolAsString(ColumnNames.IsSale, value);
			}
		}

		public virtual string s_FeatureAndFit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FeatureAndFit) ? string.Empty : base.GetstringAsString(ColumnNames.FeatureAndFit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FeatureAndFit);
				else
					this.FeatureAndFit = base.SetstringAsString(ColumnNames.FeatureAndFit, value);
			}
		}

		public virtual string s_EyeSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EyeSize) ? string.Empty : base.GetintAsString(ColumnNames.EyeSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EyeSize);
				else
					this.EyeSize = base.SetintAsString(ColumnNames.EyeSize, value);
			}
		}

		public virtual string s_Bridge_Template
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Bridge_Template) ? string.Empty : base.GetstringAsString(ColumnNames.Bridge_Template);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Bridge_Template);
				else
					this.Bridge_Template = base.SetstringAsString(ColumnNames.Bridge_Template, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PicPath1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PicPath1, Parameters.PicPath1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PicPath2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PicPath2, Parameters.PicPath2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BrandID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BrandID, Parameters.BrandID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StyleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StyleID, Parameters.StyleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LensTechID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LensTechID, Parameters.LensTechID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SpecialItemsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SpecialItemsID, Parameters.SpecialItemsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FrameColorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FrameColorID, Parameters.FrameColorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LensColorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LensColorID, Parameters.LensColorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FrameMatID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FrameMatID, Parameters.FrameMatID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LensMatID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LensMatID, Parameters.LensMatID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SalePrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SalePrice, Parameters.SalePrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsSale
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsSale, Parameters.IsSale);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FeatureAndFit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FeatureAndFit, Parameters.FeatureAndFit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EyeSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EyeSize, Parameters.EyeSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Bridge_Template
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Bridge_Template, Parameters.Bridge_Template);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter PicPath1
		    {
				get
		        {
					if(_PicPath1_W == null)
	        	    {
						_PicPath1_W = TearOff.PicPath1;
					}
					return _PicPath1_W;
				}
			}

			public WhereParameter PicPath2
		    {
				get
		        {
					if(_PicPath2_W == null)
	        	    {
						_PicPath2_W = TearOff.PicPath2;
					}
					return _PicPath2_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter BrandID
		    {
				get
		        {
					if(_BrandID_W == null)
	        	    {
						_BrandID_W = TearOff.BrandID;
					}
					return _BrandID_W;
				}
			}

			public WhereParameter StyleID
		    {
				get
		        {
					if(_StyleID_W == null)
	        	    {
						_StyleID_W = TearOff.StyleID;
					}
					return _StyleID_W;
				}
			}

			public WhereParameter LensTechID
		    {
				get
		        {
					if(_LensTechID_W == null)
	        	    {
						_LensTechID_W = TearOff.LensTechID;
					}
					return _LensTechID_W;
				}
			}

			public WhereParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public WhereParameter SpecialItemsID
		    {
				get
		        {
					if(_SpecialItemsID_W == null)
	        	    {
						_SpecialItemsID_W = TearOff.SpecialItemsID;
					}
					return _SpecialItemsID_W;
				}
			}

			public WhereParameter FrameColorID
		    {
				get
		        {
					if(_FrameColorID_W == null)
	        	    {
						_FrameColorID_W = TearOff.FrameColorID;
					}
					return _FrameColorID_W;
				}
			}

			public WhereParameter LensColorID
		    {
				get
		        {
					if(_LensColorID_W == null)
	        	    {
						_LensColorID_W = TearOff.LensColorID;
					}
					return _LensColorID_W;
				}
			}

			public WhereParameter FrameMatID
		    {
				get
		        {
					if(_FrameMatID_W == null)
	        	    {
						_FrameMatID_W = TearOff.FrameMatID;
					}
					return _FrameMatID_W;
				}
			}

			public WhereParameter LensMatID
		    {
				get
		        {
					if(_LensMatID_W == null)
	        	    {
						_LensMatID_W = TearOff.LensMatID;
					}
					return _LensMatID_W;
				}
			}

			public WhereParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public WhereParameter SalePrice
		    {
				get
		        {
					if(_SalePrice_W == null)
	        	    {
						_SalePrice_W = TearOff.SalePrice;
					}
					return _SalePrice_W;
				}
			}

			public WhereParameter IsSale
		    {
				get
		        {
					if(_IsSale_W == null)
	        	    {
						_IsSale_W = TearOff.IsSale;
					}
					return _IsSale_W;
				}
			}

			public WhereParameter FeatureAndFit
		    {
				get
		        {
					if(_FeatureAndFit_W == null)
	        	    {
						_FeatureAndFit_W = TearOff.FeatureAndFit;
					}
					return _FeatureAndFit_W;
				}
			}

			public WhereParameter EyeSize
		    {
				get
		        {
					if(_EyeSize_W == null)
	        	    {
						_EyeSize_W = TearOff.EyeSize;
					}
					return _EyeSize_W;
				}
			}

			public WhereParameter Bridge_Template
		    {
				get
		        {
					if(_Bridge_Template_W == null)
	        	    {
						_Bridge_Template_W = TearOff.Bridge_Template;
					}
					return _Bridge_Template_W;
				}
			}

			private WhereParameter _ProductID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _PicPath1_W = null;
			private WhereParameter _PicPath2_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _BrandID_W = null;
			private WhereParameter _StyleID_W = null;
			private WhereParameter _LensTechID_W = null;
			private WhereParameter _ActivityID_W = null;
			private WhereParameter _SpecialItemsID_W = null;
			private WhereParameter _FrameColorID_W = null;
			private WhereParameter _LensColorID_W = null;
			private WhereParameter _FrameMatID_W = null;
			private WhereParameter _LensMatID_W = null;
			private WhereParameter _Price_W = null;
			private WhereParameter _SalePrice_W = null;
			private WhereParameter _IsSale_W = null;
			private WhereParameter _FeatureAndFit_W = null;
			private WhereParameter _EyeSize_W = null;
			private WhereParameter _Bridge_Template_W = null;

			public void WhereClauseReset()
			{
				_ProductID_W = null;
				_Name_W = null;
				_Description_W = null;
				_PicPath1_W = null;
				_PicPath2_W = null;
				_Notes_W = null;
				_BrandID_W = null;
				_StyleID_W = null;
				_LensTechID_W = null;
				_ActivityID_W = null;
				_SpecialItemsID_W = null;
				_FrameColorID_W = null;
				_LensColorID_W = null;
				_FrameMatID_W = null;
				_LensMatID_W = null;
				_Price_W = null;
				_SalePrice_W = null;
				_IsSale_W = null;
				_FeatureAndFit_W = null;
				_EyeSize_W = null;
				_Bridge_Template_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PicPath1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PicPath1, Parameters.PicPath1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PicPath2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PicPath2, Parameters.PicPath2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BrandID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BrandID, Parameters.BrandID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StyleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StyleID, Parameters.StyleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LensTechID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LensTechID, Parameters.LensTechID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SpecialItemsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SpecialItemsID, Parameters.SpecialItemsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FrameColorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FrameColorID, Parameters.FrameColorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LensColorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LensColorID, Parameters.LensColorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FrameMatID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FrameMatID, Parameters.FrameMatID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LensMatID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LensMatID, Parameters.LensMatID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SalePrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SalePrice, Parameters.SalePrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsSale
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsSale, Parameters.IsSale);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FeatureAndFit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FeatureAndFit, Parameters.FeatureAndFit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EyeSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EyeSize, Parameters.EyeSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Bridge_Template
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Bridge_Template, Parameters.Bridge_Template);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter PicPath1
		    {
				get
		        {
					if(_PicPath1_W == null)
	        	    {
						_PicPath1_W = TearOff.PicPath1;
					}
					return _PicPath1_W;
				}
			}

			public AggregateParameter PicPath2
		    {
				get
		        {
					if(_PicPath2_W == null)
	        	    {
						_PicPath2_W = TearOff.PicPath2;
					}
					return _PicPath2_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter BrandID
		    {
				get
		        {
					if(_BrandID_W == null)
	        	    {
						_BrandID_W = TearOff.BrandID;
					}
					return _BrandID_W;
				}
			}

			public AggregateParameter StyleID
		    {
				get
		        {
					if(_StyleID_W == null)
	        	    {
						_StyleID_W = TearOff.StyleID;
					}
					return _StyleID_W;
				}
			}

			public AggregateParameter LensTechID
		    {
				get
		        {
					if(_LensTechID_W == null)
	        	    {
						_LensTechID_W = TearOff.LensTechID;
					}
					return _LensTechID_W;
				}
			}

			public AggregateParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public AggregateParameter SpecialItemsID
		    {
				get
		        {
					if(_SpecialItemsID_W == null)
	        	    {
						_SpecialItemsID_W = TearOff.SpecialItemsID;
					}
					return _SpecialItemsID_W;
				}
			}

			public AggregateParameter FrameColorID
		    {
				get
		        {
					if(_FrameColorID_W == null)
	        	    {
						_FrameColorID_W = TearOff.FrameColorID;
					}
					return _FrameColorID_W;
				}
			}

			public AggregateParameter LensColorID
		    {
				get
		        {
					if(_LensColorID_W == null)
	        	    {
						_LensColorID_W = TearOff.LensColorID;
					}
					return _LensColorID_W;
				}
			}

			public AggregateParameter FrameMatID
		    {
				get
		        {
					if(_FrameMatID_W == null)
	        	    {
						_FrameMatID_W = TearOff.FrameMatID;
					}
					return _FrameMatID_W;
				}
			}

			public AggregateParameter LensMatID
		    {
				get
		        {
					if(_LensMatID_W == null)
	        	    {
						_LensMatID_W = TearOff.LensMatID;
					}
					return _LensMatID_W;
				}
			}

			public AggregateParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public AggregateParameter SalePrice
		    {
				get
		        {
					if(_SalePrice_W == null)
	        	    {
						_SalePrice_W = TearOff.SalePrice;
					}
					return _SalePrice_W;
				}
			}

			public AggregateParameter IsSale
		    {
				get
		        {
					if(_IsSale_W == null)
	        	    {
						_IsSale_W = TearOff.IsSale;
					}
					return _IsSale_W;
				}
			}

			public AggregateParameter FeatureAndFit
		    {
				get
		        {
					if(_FeatureAndFit_W == null)
	        	    {
						_FeatureAndFit_W = TearOff.FeatureAndFit;
					}
					return _FeatureAndFit_W;
				}
			}

			public AggregateParameter EyeSize
		    {
				get
		        {
					if(_EyeSize_W == null)
	        	    {
						_EyeSize_W = TearOff.EyeSize;
					}
					return _EyeSize_W;
				}
			}

			public AggregateParameter Bridge_Template
		    {
				get
		        {
					if(_Bridge_Template_W == null)
	        	    {
						_Bridge_Template_W = TearOff.Bridge_Template;
					}
					return _Bridge_Template_W;
				}
			}

			private AggregateParameter _ProductID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _PicPath1_W = null;
			private AggregateParameter _PicPath2_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _BrandID_W = null;
			private AggregateParameter _StyleID_W = null;
			private AggregateParameter _LensTechID_W = null;
			private AggregateParameter _ActivityID_W = null;
			private AggregateParameter _SpecialItemsID_W = null;
			private AggregateParameter _FrameColorID_W = null;
			private AggregateParameter _LensColorID_W = null;
			private AggregateParameter _FrameMatID_W = null;
			private AggregateParameter _LensMatID_W = null;
			private AggregateParameter _Price_W = null;
			private AggregateParameter _SalePrice_W = null;
			private AggregateParameter _IsSale_W = null;
			private AggregateParameter _FeatureAndFit_W = null;
			private AggregateParameter _EyeSize_W = null;
			private AggregateParameter _Bridge_Template_W = null;

			public void AggregateClauseReset()
			{
				_ProductID_W = null;
				_Name_W = null;
				_Description_W = null;
				_PicPath1_W = null;
				_PicPath2_W = null;
				_Notes_W = null;
				_BrandID_W = null;
				_StyleID_W = null;
				_LensTechID_W = null;
				_ActivityID_W = null;
				_SpecialItemsID_W = null;
				_FrameColorID_W = null;
				_LensColorID_W = null;
				_FrameMatID_W = null;
				_LensMatID_W = null;
				_Price_W = null;
				_SalePrice_W = null;
				_IsSale_W = null;
				_FeatureAndFit_W = null;
				_EyeSize_W = null;
				_Bridge_Template_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ProductID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ProductID);
			p.SourceColumn = ColumnNames.ProductID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ProductID);
			p.SourceColumn = ColumnNames.ProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PicPath1);
			p.SourceColumn = ColumnNames.PicPath1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PicPath2);
			p.SourceColumn = ColumnNames.PicPath2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BrandID);
			p.SourceColumn = ColumnNames.BrandID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StyleID);
			p.SourceColumn = ColumnNames.StyleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LensTechID);
			p.SourceColumn = ColumnNames.LensTechID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivityID);
			p.SourceColumn = ColumnNames.ActivityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SpecialItemsID);
			p.SourceColumn = ColumnNames.SpecialItemsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FrameColorID);
			p.SourceColumn = ColumnNames.FrameColorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LensColorID);
			p.SourceColumn = ColumnNames.LensColorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FrameMatID);
			p.SourceColumn = ColumnNames.FrameMatID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LensMatID);
			p.SourceColumn = ColumnNames.LensMatID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price);
			p.SourceColumn = ColumnNames.Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SalePrice);
			p.SourceColumn = ColumnNames.SalePrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsSale);
			p.SourceColumn = ColumnNames.IsSale;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FeatureAndFit);
			p.SourceColumn = ColumnNames.FeatureAndFit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EyeSize);
			p.SourceColumn = ColumnNames.EyeSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Bridge_Template);
			p.SourceColumn = ColumnNames.Bridge_Template;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
