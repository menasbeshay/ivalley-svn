
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace IStock.DAL
{
	public abstract class _Invoices : SqlClientEntity
	{
		public _Invoices()
		{
			this.QuerySource = "Invoices";
			this.MappingName = "Invoices";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InvoicesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InvoiceID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InvoiceID, InvoiceID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InvoicesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InvoiceID
			{
				get
				{
					return new SqlParameter("@InvoiceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InvoiceNo
			{
				get
				{
					return new SqlParameter("@InvoiceNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter EmployeeID
			{
				get
				{
					return new SqlParameter("@EmployeeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ClientReturnID
			{
				get
				{
					return new SqlParameter("@ClientReturnID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ClientID
			{
				get
				{
					return new SqlParameter("@ClientID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InvoiceDate
			{
				get
				{
					return new SqlParameter("@InvoiceDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InvoiceID = "InvoiceID";
            public const string InvoiceNo = "InvoiceNo";
            public const string EmployeeID = "EmployeeID";
            public const string ClientReturnID = "ClientReturnID";
            public const string ClientID = "ClientID";
            public const string InvoiceDate = "InvoiceDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InvoiceID] = _Invoices.PropertyNames.InvoiceID;
					ht[InvoiceNo] = _Invoices.PropertyNames.InvoiceNo;
					ht[EmployeeID] = _Invoices.PropertyNames.EmployeeID;
					ht[ClientReturnID] = _Invoices.PropertyNames.ClientReturnID;
					ht[ClientID] = _Invoices.PropertyNames.ClientID;
					ht[InvoiceDate] = _Invoices.PropertyNames.InvoiceDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InvoiceID = "InvoiceID";
            public const string InvoiceNo = "InvoiceNo";
            public const string EmployeeID = "EmployeeID";
            public const string ClientReturnID = "ClientReturnID";
            public const string ClientID = "ClientID";
            public const string InvoiceDate = "InvoiceDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InvoiceID] = _Invoices.ColumnNames.InvoiceID;
					ht[InvoiceNo] = _Invoices.ColumnNames.InvoiceNo;
					ht[EmployeeID] = _Invoices.ColumnNames.EmployeeID;
					ht[ClientReturnID] = _Invoices.ColumnNames.ClientReturnID;
					ht[ClientID] = _Invoices.ColumnNames.ClientID;
					ht[InvoiceDate] = _Invoices.ColumnNames.InvoiceDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InvoiceID = "s_InvoiceID";
            public const string InvoiceNo = "s_InvoiceNo";
            public const string EmployeeID = "s_EmployeeID";
            public const string ClientReturnID = "s_ClientReturnID";
            public const string ClientID = "s_ClientID";
            public const string InvoiceDate = "s_InvoiceDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InvoiceID
	    {
			get
	        {
				return base.Getint(ColumnNames.InvoiceID);
			}
			set
	        {
				base.Setint(ColumnNames.InvoiceID, value);
			}
		}

		public virtual string InvoiceNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.InvoiceNo);
			}
			set
	        {
				base.Setstring(ColumnNames.InvoiceNo, value);
			}
		}

		public virtual int EmployeeID
	    {
			get
	        {
				return base.Getint(ColumnNames.EmployeeID);
			}
			set
	        {
				base.Setint(ColumnNames.EmployeeID, value);
			}
		}

		public virtual int ClientReturnID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientReturnID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientReturnID, value);
			}
		}

		public virtual int ClientID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientID, value);
			}
		}

		public virtual DateTime InvoiceDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InvoiceDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InvoiceDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InvoiceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceID) ? string.Empty : base.GetintAsString(ColumnNames.InvoiceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceID);
				else
					this.InvoiceID = base.SetintAsString(ColumnNames.InvoiceID, value);
			}
		}

		public virtual string s_InvoiceNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceNo) ? string.Empty : base.GetstringAsString(ColumnNames.InvoiceNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceNo);
				else
					this.InvoiceNo = base.SetstringAsString(ColumnNames.InvoiceNo, value);
			}
		}

		public virtual string s_EmployeeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmployeeID) ? string.Empty : base.GetintAsString(ColumnNames.EmployeeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmployeeID);
				else
					this.EmployeeID = base.SetintAsString(ColumnNames.EmployeeID, value);
			}
		}

		public virtual string s_ClientReturnID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientReturnID) ? string.Empty : base.GetintAsString(ColumnNames.ClientReturnID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientReturnID);
				else
					this.ClientReturnID = base.SetintAsString(ColumnNames.ClientReturnID, value);
			}
		}

		public virtual string s_ClientID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientID) ? string.Empty : base.GetintAsString(ColumnNames.ClientID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientID);
				else
					this.ClientID = base.SetintAsString(ColumnNames.ClientID, value);
			}
		}

		public virtual string s_InvoiceDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InvoiceDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceDate);
				else
					this.InvoiceDate = base.SetDateTimeAsString(ColumnNames.InvoiceDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InvoiceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceID, Parameters.InvoiceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InvoiceNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceNo, Parameters.InvoiceNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmployeeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmployeeID, Parameters.EmployeeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClientReturnID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientReturnID, Parameters.ClientReturnID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClientID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InvoiceDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceDate, Parameters.InvoiceDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InvoiceID
		    {
				get
		        {
					if(_InvoiceID_W == null)
	        	    {
						_InvoiceID_W = TearOff.InvoiceID;
					}
					return _InvoiceID_W;
				}
			}

			public WhereParameter InvoiceNo
		    {
				get
		        {
					if(_InvoiceNo_W == null)
	        	    {
						_InvoiceNo_W = TearOff.InvoiceNo;
					}
					return _InvoiceNo_W;
				}
			}

			public WhereParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public WhereParameter ClientReturnID
		    {
				get
		        {
					if(_ClientReturnID_W == null)
	        	    {
						_ClientReturnID_W = TearOff.ClientReturnID;
					}
					return _ClientReturnID_W;
				}
			}

			public WhereParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public WhereParameter InvoiceDate
		    {
				get
		        {
					if(_InvoiceDate_W == null)
	        	    {
						_InvoiceDate_W = TearOff.InvoiceDate;
					}
					return _InvoiceDate_W;
				}
			}

			private WhereParameter _InvoiceID_W = null;
			private WhereParameter _InvoiceNo_W = null;
			private WhereParameter _EmployeeID_W = null;
			private WhereParameter _ClientReturnID_W = null;
			private WhereParameter _ClientID_W = null;
			private WhereParameter _InvoiceDate_W = null;

			public void WhereClauseReset()
			{
				_InvoiceID_W = null;
				_InvoiceNo_W = null;
				_EmployeeID_W = null;
				_ClientReturnID_W = null;
				_ClientID_W = null;
				_InvoiceDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InvoiceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceID, Parameters.InvoiceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InvoiceNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceNo, Parameters.InvoiceNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmployeeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmployeeID, Parameters.EmployeeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClientReturnID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientReturnID, Parameters.ClientReturnID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClientID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InvoiceDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceDate, Parameters.InvoiceDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InvoiceID
		    {
				get
		        {
					if(_InvoiceID_W == null)
	        	    {
						_InvoiceID_W = TearOff.InvoiceID;
					}
					return _InvoiceID_W;
				}
			}

			public AggregateParameter InvoiceNo
		    {
				get
		        {
					if(_InvoiceNo_W == null)
	        	    {
						_InvoiceNo_W = TearOff.InvoiceNo;
					}
					return _InvoiceNo_W;
				}
			}

			public AggregateParameter EmployeeID
		    {
				get
		        {
					if(_EmployeeID_W == null)
	        	    {
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public AggregateParameter ClientReturnID
		    {
				get
		        {
					if(_ClientReturnID_W == null)
	        	    {
						_ClientReturnID_W = TearOff.ClientReturnID;
					}
					return _ClientReturnID_W;
				}
			}

			public AggregateParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public AggregateParameter InvoiceDate
		    {
				get
		        {
					if(_InvoiceDate_W == null)
	        	    {
						_InvoiceDate_W = TearOff.InvoiceDate;
					}
					return _InvoiceDate_W;
				}
			}

			private AggregateParameter _InvoiceID_W = null;
			private AggregateParameter _InvoiceNo_W = null;
			private AggregateParameter _EmployeeID_W = null;
			private AggregateParameter _ClientReturnID_W = null;
			private AggregateParameter _ClientID_W = null;
			private AggregateParameter _InvoiceDate_W = null;

			public void AggregateClauseReset()
			{
				_InvoiceID_W = null;
				_InvoiceNo_W = null;
				_EmployeeID_W = null;
				_ClientReturnID_W = null;
				_ClientID_W = null;
				_InvoiceDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InvoiceID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InvoiceID);
			p.SourceColumn = ColumnNames.InvoiceID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InvoiceID);
			p.SourceColumn = ColumnNames.InvoiceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InvoiceNo);
			p.SourceColumn = ColumnNames.InvoiceNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmployeeID);
			p.SourceColumn = ColumnNames.EmployeeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClientReturnID);
			p.SourceColumn = ColumnNames.ClientReturnID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InvoiceDate);
			p.SourceColumn = ColumnNames.InvoiceDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
