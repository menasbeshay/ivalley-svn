
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace IStock.DAL
{
	public abstract class _PurchaseOrders : SqlClientEntity
	{
		public _PurchaseOrders()
		{
			this.QuerySource = "PurchaseOrders";
			this.MappingName = "PurchaseOrders";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrdersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PurchaseOrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PurchaseOrderID, PurchaseOrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrdersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PurchaseOrderID
			{
				get
				{
					return new SqlParameter("@PurchaseOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PurchaseOrderNo
			{
				get
				{
					return new SqlParameter("@PurchaseOrderNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PurchaseOrderDate
			{
				get
				{
					return new SqlParameter("@PurchaseOrderDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Confirmed
			{
				get
				{
					return new SqlParameter("@Confirmed", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string PurchaseOrderNo = "PurchaseOrderNo";
            public const string SupplierID = "SupplierID";
            public const string PurchaseOrderDate = "PurchaseOrderDate";
            public const string Confirmed = "Confirmed";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderID] = _PurchaseOrders.PropertyNames.PurchaseOrderID;
					ht[PurchaseOrderNo] = _PurchaseOrders.PropertyNames.PurchaseOrderNo;
					ht[SupplierID] = _PurchaseOrders.PropertyNames.SupplierID;
					ht[PurchaseOrderDate] = _PurchaseOrders.PropertyNames.PurchaseOrderDate;
					ht[Confirmed] = _PurchaseOrders.PropertyNames.Confirmed;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string PurchaseOrderNo = "PurchaseOrderNo";
            public const string SupplierID = "SupplierID";
            public const string PurchaseOrderDate = "PurchaseOrderDate";
            public const string Confirmed = "Confirmed";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderID] = _PurchaseOrders.ColumnNames.PurchaseOrderID;
					ht[PurchaseOrderNo] = _PurchaseOrders.ColumnNames.PurchaseOrderNo;
					ht[SupplierID] = _PurchaseOrders.ColumnNames.SupplierID;
					ht[PurchaseOrderDate] = _PurchaseOrders.ColumnNames.PurchaseOrderDate;
					ht[Confirmed] = _PurchaseOrders.ColumnNames.Confirmed;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PurchaseOrderID = "s_PurchaseOrderID";
            public const string PurchaseOrderNo = "s_PurchaseOrderNo";
            public const string SupplierID = "s_SupplierID";
            public const string PurchaseOrderDate = "s_PurchaseOrderDate";
            public const string Confirmed = "s_Confirmed";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PurchaseOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual string PurchaseOrderNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.PurchaseOrderNo);
			}
			set
	        {
				base.Setstring(ColumnNames.PurchaseOrderNo, value);
			}
		}

		public virtual int SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual DateTime PurchaseOrderDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PurchaseOrderDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PurchaseOrderDate, value);
			}
		}

		public virtual bool Confirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.Confirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.Confirmed, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PurchaseOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderID);
				else
					this.PurchaseOrderID = base.SetintAsString(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual string s_PurchaseOrderNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderNo) ? string.Empty : base.GetstringAsString(ColumnNames.PurchaseOrderNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderNo);
				else
					this.PurchaseOrderNo = base.SetstringAsString(ColumnNames.PurchaseOrderNo, value);
			}
		}

		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_PurchaseOrderDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PurchaseOrderDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderDate);
				else
					this.PurchaseOrderDate = base.SetDateTimeAsString(ColumnNames.PurchaseOrderDate, value);
			}
		}

		public virtual string s_Confirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Confirmed) ? string.Empty : base.GetboolAsString(ColumnNames.Confirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Confirmed);
				else
					this.Confirmed = base.SetboolAsString(ColumnNames.Confirmed, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PurchaseOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PurchaseOrderNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderNo, Parameters.PurchaseOrderNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PurchaseOrderDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderDate, Parameters.PurchaseOrderDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Confirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Confirmed, Parameters.Confirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public WhereParameter PurchaseOrderNo
		    {
				get
		        {
					if(_PurchaseOrderNo_W == null)
	        	    {
						_PurchaseOrderNo_W = TearOff.PurchaseOrderNo;
					}
					return _PurchaseOrderNo_W;
				}
			}

			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter PurchaseOrderDate
		    {
				get
		        {
					if(_PurchaseOrderDate_W == null)
	        	    {
						_PurchaseOrderDate_W = TearOff.PurchaseOrderDate;
					}
					return _PurchaseOrderDate_W;
				}
			}

			public WhereParameter Confirmed
		    {
				get
		        {
					if(_Confirmed_W == null)
	        	    {
						_Confirmed_W = TearOff.Confirmed;
					}
					return _Confirmed_W;
				}
			}

			private WhereParameter _PurchaseOrderID_W = null;
			private WhereParameter _PurchaseOrderNo_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _PurchaseOrderDate_W = null;
			private WhereParameter _Confirmed_W = null;

			public void WhereClauseReset()
			{
				_PurchaseOrderID_W = null;
				_PurchaseOrderNo_W = null;
				_SupplierID_W = null;
				_PurchaseOrderDate_W = null;
				_Confirmed_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PurchaseOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PurchaseOrderNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderNo, Parameters.PurchaseOrderNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PurchaseOrderDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderDate, Parameters.PurchaseOrderDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Confirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Confirmed, Parameters.Confirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public AggregateParameter PurchaseOrderNo
		    {
				get
		        {
					if(_PurchaseOrderNo_W == null)
	        	    {
						_PurchaseOrderNo_W = TearOff.PurchaseOrderNo;
					}
					return _PurchaseOrderNo_W;
				}
			}

			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter PurchaseOrderDate
		    {
				get
		        {
					if(_PurchaseOrderDate_W == null)
	        	    {
						_PurchaseOrderDate_W = TearOff.PurchaseOrderDate;
					}
					return _PurchaseOrderDate_W;
				}
			}

			public AggregateParameter Confirmed
		    {
				get
		        {
					if(_Confirmed_W == null)
	        	    {
						_Confirmed_W = TearOff.Confirmed;
					}
					return _Confirmed_W;
				}
			}

			private AggregateParameter _PurchaseOrderID_W = null;
			private AggregateParameter _PurchaseOrderNo_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _PurchaseOrderDate_W = null;
			private AggregateParameter _Confirmed_W = null;

			public void AggregateClauseReset()
			{
				_PurchaseOrderID_W = null;
				_PurchaseOrderNo_W = null;
				_SupplierID_W = null;
				_PurchaseOrderDate_W = null;
				_Confirmed_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrdersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PurchaseOrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrdersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrdersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
			p.SourceColumn = ColumnNames.PurchaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
			p.SourceColumn = ColumnNames.PurchaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PurchaseOrderNo);
			p.SourceColumn = ColumnNames.PurchaseOrderNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PurchaseOrderDate);
			p.SourceColumn = ColumnNames.PurchaseOrderDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Confirmed);
			p.SourceColumn = ColumnNames.Confirmed;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
