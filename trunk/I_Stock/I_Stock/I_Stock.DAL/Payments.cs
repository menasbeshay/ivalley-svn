
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace IStock.DAL
{
	public abstract class _Payments : SqlClientEntity
	{
		public _Payments()
		{
			this.QuerySource = "Payments";
			this.MappingName = "Payments";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PaymentsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PaymentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PaymentID, PaymentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PaymentsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PaymentID
			{
				get
				{
					return new SqlParameter("@PaymentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PaymentNo
			{
				get
				{
					return new SqlParameter("@PaymentNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter ClientID
			{
				get
				{
					return new SqlParameter("@ClientID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PaymentDate
			{
				get
				{
					return new SqlParameter("@PaymentDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Amount
			{
				get
				{
					return new SqlParameter("@Amount", SqlDbType.Decimal, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PaymentID = "PaymentID";
            public const string PaymentNo = "PaymentNo";
            public const string ClientID = "ClientID";
            public const string PaymentDate = "PaymentDate";
            public const string Amount = "Amount";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PaymentID] = _Payments.PropertyNames.PaymentID;
					ht[PaymentNo] = _Payments.PropertyNames.PaymentNo;
					ht[ClientID] = _Payments.PropertyNames.ClientID;
					ht[PaymentDate] = _Payments.PropertyNames.PaymentDate;
					ht[Amount] = _Payments.PropertyNames.Amount;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PaymentID = "PaymentID";
            public const string PaymentNo = "PaymentNo";
            public const string ClientID = "ClientID";
            public const string PaymentDate = "PaymentDate";
            public const string Amount = "Amount";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PaymentID] = _Payments.ColumnNames.PaymentID;
					ht[PaymentNo] = _Payments.ColumnNames.PaymentNo;
					ht[ClientID] = _Payments.ColumnNames.ClientID;
					ht[PaymentDate] = _Payments.ColumnNames.PaymentDate;
					ht[Amount] = _Payments.ColumnNames.Amount;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PaymentID = "s_PaymentID";
            public const string PaymentNo = "s_PaymentNo";
            public const string ClientID = "s_ClientID";
            public const string PaymentDate = "s_PaymentDate";
            public const string Amount = "s_Amount";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PaymentID
	    {
			get
	        {
				return base.Getint(ColumnNames.PaymentID);
			}
			set
	        {
				base.Setint(ColumnNames.PaymentID, value);
			}
		}

		public virtual string PaymentNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.PaymentNo);
			}
			set
	        {
				base.Setstring(ColumnNames.PaymentNo, value);
			}
		}

		public virtual int ClientID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientID, value);
			}
		}

		public virtual DateTime PaymentDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PaymentDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PaymentDate, value);
			}
		}

		public virtual decimal Amount
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Amount);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Amount, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PaymentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentID);
				else
					this.PaymentID = base.SetintAsString(ColumnNames.PaymentID, value);
			}
		}

		public virtual string s_PaymentNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentNo) ? string.Empty : base.GetstringAsString(ColumnNames.PaymentNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentNo);
				else
					this.PaymentNo = base.SetstringAsString(ColumnNames.PaymentNo, value);
			}
		}

		public virtual string s_ClientID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientID) ? string.Empty : base.GetintAsString(ColumnNames.ClientID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientID);
				else
					this.ClientID = base.SetintAsString(ColumnNames.ClientID, value);
			}
		}

		public virtual string s_PaymentDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PaymentDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentDate);
				else
					this.PaymentDate = base.SetDateTimeAsString(ColumnNames.PaymentDate, value);
			}
		}

		public virtual string s_Amount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Amount) ? string.Empty : base.GetdecimalAsString(ColumnNames.Amount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Amount);
				else
					this.Amount = base.SetdecimalAsString(ColumnNames.Amount, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PaymentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentID, Parameters.PaymentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentNo, Parameters.PaymentNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClientID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentDate, Parameters.PaymentDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Amount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Amount, Parameters.Amount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PaymentID
		    {
				get
		        {
					if(_PaymentID_W == null)
	        	    {
						_PaymentID_W = TearOff.PaymentID;
					}
					return _PaymentID_W;
				}
			}

			public WhereParameter PaymentNo
		    {
				get
		        {
					if(_PaymentNo_W == null)
	        	    {
						_PaymentNo_W = TearOff.PaymentNo;
					}
					return _PaymentNo_W;
				}
			}

			public WhereParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public WhereParameter PaymentDate
		    {
				get
		        {
					if(_PaymentDate_W == null)
	        	    {
						_PaymentDate_W = TearOff.PaymentDate;
					}
					return _PaymentDate_W;
				}
			}

			public WhereParameter Amount
		    {
				get
		        {
					if(_Amount_W == null)
	        	    {
						_Amount_W = TearOff.Amount;
					}
					return _Amount_W;
				}
			}

			private WhereParameter _PaymentID_W = null;
			private WhereParameter _PaymentNo_W = null;
			private WhereParameter _ClientID_W = null;
			private WhereParameter _PaymentDate_W = null;
			private WhereParameter _Amount_W = null;

			public void WhereClauseReset()
			{
				_PaymentID_W = null;
				_PaymentNo_W = null;
				_ClientID_W = null;
				_PaymentDate_W = null;
				_Amount_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PaymentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentID, Parameters.PaymentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentNo, Parameters.PaymentNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClientID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentDate, Parameters.PaymentDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Amount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Amount, Parameters.Amount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PaymentID
		    {
				get
		        {
					if(_PaymentID_W == null)
	        	    {
						_PaymentID_W = TearOff.PaymentID;
					}
					return _PaymentID_W;
				}
			}

			public AggregateParameter PaymentNo
		    {
				get
		        {
					if(_PaymentNo_W == null)
	        	    {
						_PaymentNo_W = TearOff.PaymentNo;
					}
					return _PaymentNo_W;
				}
			}

			public AggregateParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public AggregateParameter PaymentDate
		    {
				get
		        {
					if(_PaymentDate_W == null)
	        	    {
						_PaymentDate_W = TearOff.PaymentDate;
					}
					return _PaymentDate_W;
				}
			}

			public AggregateParameter Amount
		    {
				get
		        {
					if(_Amount_W == null)
	        	    {
						_Amount_W = TearOff.Amount;
					}
					return _Amount_W;
				}
			}

			private AggregateParameter _PaymentID_W = null;
			private AggregateParameter _PaymentNo_W = null;
			private AggregateParameter _ClientID_W = null;
			private AggregateParameter _PaymentDate_W = null;
			private AggregateParameter _Amount_W = null;

			public void AggregateClauseReset()
			{
				_PaymentID_W = null;
				_PaymentNo_W = null;
				_ClientID_W = null;
				_PaymentDate_W = null;
				_Amount_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PaymentsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PaymentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PaymentsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PaymentsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PaymentID);
			p.SourceColumn = ColumnNames.PaymentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PaymentID);
			p.SourceColumn = ColumnNames.PaymentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentNo);
			p.SourceColumn = ColumnNames.PaymentNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentDate);
			p.SourceColumn = ColumnNames.PaymentDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Amount);
			p.SourceColumn = ColumnNames.Amount;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
