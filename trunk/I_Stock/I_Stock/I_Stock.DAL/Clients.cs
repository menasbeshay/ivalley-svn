
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace IStock.DAL
{
	public abstract class _Clients : SqlClientEntity
	{
		public _Clients()
		{
			this.QuerySource = "Clients";
			this.MappingName = "Clients";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ClientsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ClientID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ClientID, ClientID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ClientsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ClientID
			{
				get
				{
					return new SqlParameter("@ClientID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ClientTypeID
			{
				get
				{
					return new SqlParameter("@ClientTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CityID
			{
				get
				{
					return new SqlParameter("@CityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter Telephone
			{
				get
				{
					return new SqlParameter("@Telephone", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter StartCredit
			{
				get
				{
					return new SqlParameter("@StartCredit", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter CreditLimit
			{
				get
				{
					return new SqlParameter("@CreditLimit", SqlDbType.Decimal, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ClientID = "ClientID";
            public const string ClientTypeID = "ClientTypeID";
            public const string CityID = "CityID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Address = "Address";
            public const string Telephone = "Telephone";
            public const string StartCredit = "StartCredit";
            public const string CreditLimit = "CreditLimit";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ClientID] = _Clients.PropertyNames.ClientID;
					ht[ClientTypeID] = _Clients.PropertyNames.ClientTypeID;
					ht[CityID] = _Clients.PropertyNames.CityID;
					ht[Name] = _Clients.PropertyNames.Name;
					ht[Description] = _Clients.PropertyNames.Description;
					ht[Address] = _Clients.PropertyNames.Address;
					ht[Telephone] = _Clients.PropertyNames.Telephone;
					ht[StartCredit] = _Clients.PropertyNames.StartCredit;
					ht[CreditLimit] = _Clients.PropertyNames.CreditLimit;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ClientID = "ClientID";
            public const string ClientTypeID = "ClientTypeID";
            public const string CityID = "CityID";
            public const string Name = "Name";
            public const string Description = "Description";
            public const string Address = "Address";
            public const string Telephone = "Telephone";
            public const string StartCredit = "StartCredit";
            public const string CreditLimit = "CreditLimit";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ClientID] = _Clients.ColumnNames.ClientID;
					ht[ClientTypeID] = _Clients.ColumnNames.ClientTypeID;
					ht[CityID] = _Clients.ColumnNames.CityID;
					ht[Name] = _Clients.ColumnNames.Name;
					ht[Description] = _Clients.ColumnNames.Description;
					ht[Address] = _Clients.ColumnNames.Address;
					ht[Telephone] = _Clients.ColumnNames.Telephone;
					ht[StartCredit] = _Clients.ColumnNames.StartCredit;
					ht[CreditLimit] = _Clients.ColumnNames.CreditLimit;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ClientID = "s_ClientID";
            public const string ClientTypeID = "s_ClientTypeID";
            public const string CityID = "s_CityID";
            public const string Name = "s_Name";
            public const string Description = "s_Description";
            public const string Address = "s_Address";
            public const string Telephone = "s_Telephone";
            public const string StartCredit = "s_StartCredit";
            public const string CreditLimit = "s_CreditLimit";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ClientID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientID, value);
			}
		}

		public virtual int ClientTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientTypeID, value);
			}
		}

		public virtual int CityID
	    {
			get
	        {
				return base.Getint(ColumnNames.CityID);
			}
			set
	        {
				base.Setint(ColumnNames.CityID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual string Telephone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Telephone);
			}
			set
	        {
				base.Setstring(ColumnNames.Telephone, value);
			}
		}

		public virtual decimal StartCredit
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.StartCredit);
			}
			set
	        {
				base.Setdecimal(ColumnNames.StartCredit, value);
			}
		}

		public virtual decimal CreditLimit
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.CreditLimit);
			}
			set
	        {
				base.Setdecimal(ColumnNames.CreditLimit, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ClientID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientID) ? string.Empty : base.GetintAsString(ColumnNames.ClientID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientID);
				else
					this.ClientID = base.SetintAsString(ColumnNames.ClientID, value);
			}
		}

		public virtual string s_ClientTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientTypeID) ? string.Empty : base.GetintAsString(ColumnNames.ClientTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientTypeID);
				else
					this.ClientTypeID = base.SetintAsString(ColumnNames.ClientTypeID, value);
			}
		}

		public virtual string s_CityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityID) ? string.Empty : base.GetintAsString(ColumnNames.CityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityID);
				else
					this.CityID = base.SetintAsString(ColumnNames.CityID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_Telephone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Telephone) ? string.Empty : base.GetstringAsString(ColumnNames.Telephone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Telephone);
				else
					this.Telephone = base.SetstringAsString(ColumnNames.Telephone, value);
			}
		}

		public virtual string s_StartCredit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartCredit) ? string.Empty : base.GetdecimalAsString(ColumnNames.StartCredit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartCredit);
				else
					this.StartCredit = base.SetdecimalAsString(ColumnNames.StartCredit, value);
			}
		}

		public virtual string s_CreditLimit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreditLimit) ? string.Empty : base.GetdecimalAsString(ColumnNames.CreditLimit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreditLimit);
				else
					this.CreditLimit = base.SetdecimalAsString(ColumnNames.CreditLimit, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ClientID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClientTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientTypeID, Parameters.ClientTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Telephone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartCredit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartCredit, Parameters.StartCredit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreditLimit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreditLimit, Parameters.CreditLimit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public WhereParameter ClientTypeID
		    {
				get
		        {
					if(_ClientTypeID_W == null)
	        	    {
						_ClientTypeID_W = TearOff.ClientTypeID;
					}
					return _ClientTypeID_W;
				}
			}

			public WhereParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public WhereParameter StartCredit
		    {
				get
		        {
					if(_StartCredit_W == null)
	        	    {
						_StartCredit_W = TearOff.StartCredit;
					}
					return _StartCredit_W;
				}
			}

			public WhereParameter CreditLimit
		    {
				get
		        {
					if(_CreditLimit_W == null)
	        	    {
						_CreditLimit_W = TearOff.CreditLimit;
					}
					return _CreditLimit_W;
				}
			}

			private WhereParameter _ClientID_W = null;
			private WhereParameter _ClientTypeID_W = null;
			private WhereParameter _CityID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _Telephone_W = null;
			private WhereParameter _StartCredit_W = null;
			private WhereParameter _CreditLimit_W = null;

			public void WhereClauseReset()
			{
				_ClientID_W = null;
				_ClientTypeID_W = null;
				_CityID_W = null;
				_Name_W = null;
				_Description_W = null;
				_Address_W = null;
				_Telephone_W = null;
				_StartCredit_W = null;
				_CreditLimit_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ClientID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClientTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientTypeID, Parameters.ClientTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Telephone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartCredit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartCredit, Parameters.StartCredit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreditLimit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreditLimit, Parameters.CreditLimit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public AggregateParameter ClientTypeID
		    {
				get
		        {
					if(_ClientTypeID_W == null)
	        	    {
						_ClientTypeID_W = TearOff.ClientTypeID;
					}
					return _ClientTypeID_W;
				}
			}

			public AggregateParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public AggregateParameter StartCredit
		    {
				get
		        {
					if(_StartCredit_W == null)
	        	    {
						_StartCredit_W = TearOff.StartCredit;
					}
					return _StartCredit_W;
				}
			}

			public AggregateParameter CreditLimit
		    {
				get
		        {
					if(_CreditLimit_W == null)
	        	    {
						_CreditLimit_W = TearOff.CreditLimit;
					}
					return _CreditLimit_W;
				}
			}

			private AggregateParameter _ClientID_W = null;
			private AggregateParameter _ClientTypeID_W = null;
			private AggregateParameter _CityID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _Telephone_W = null;
			private AggregateParameter _StartCredit_W = null;
			private AggregateParameter _CreditLimit_W = null;

			public void AggregateClauseReset()
			{
				_ClientID_W = null;
				_ClientTypeID_W = null;
				_CityID_W = null;
				_Name_W = null;
				_Description_W = null;
				_Address_W = null;
				_Telephone_W = null;
				_StartCredit_W = null;
				_CreditLimit_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ClientsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ClientID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ClientsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ClientsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClientTypeID);
			p.SourceColumn = ColumnNames.ClientTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityID);
			p.SourceColumn = ColumnNames.CityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address);
			p.SourceColumn = ColumnNames.Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Telephone);
			p.SourceColumn = ColumnNames.Telephone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartCredit);
			p.SourceColumn = ColumnNames.StartCredit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreditLimit);
			p.SourceColumn = ColumnNames.CreditLimit;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
