<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyGeneration.dOOdads</name>
    </assembly>
    <members>
        <member name="T:MyGeneration.dOOdads.SqlClientDynamicQuery">
            <summary>
            SqlClientDynamicQuery is the Microsoft SQL implementation of DynamicQuery
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.DynamicQuery">
             <summary>
             DynamicQuery allows you to (without writing any stored procedures) query your database on the fly. All selection criteria are passed in
             via Parameters (SqlParameter, OleDbParameter) in order to prevent sql injection tecniques often attempted by hackers.  
             </summary>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
            
             ' LastNames that have "A" anywher in them
             emps.Where.LastName.Value = "%A%"
             emps.Where.LastName.Operator = WhereParameter.Operand.Like_
            
             ' Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(Employees.ColumnNames.EmployeeID)
             emps.Query.AddResultColumn(Employees.ColumnNames.LastName)
            
             ' Order by LastName 
             ' (you can add as many order by columns as you like by repeatedly calling this)
             emps.Query.AddOrderBy(Employees.ColumnNames.LastName, WhereParameter.Dir.ASC)
            
             ' Bring back only distinct rows
             emps.Query.Distinct = True
            
             ' Bring back the top 10 rows
             emps.Query.Top = 10
            
             emps.Query.Load()</code>
            	C#
            	<code>
             Employees emps = new Employees();
            
             // LastNames that have "A" anywher in them
             emps.Where.LastName.Value = "%A%";
             emps.Where.LastName.Operator = WhereParameter.Operand.Like;
            
             // Only return the EmployeeID and LastName
             emps.Query.AddResultColumn(Employees.ColumnNames.EmployeeID);
             emps.Query.AddResultColumn(Employees.ColumnNames.LastName);
            
             // Order by LastName 
             // (you can add as many order by columns as you like by repeatedly calling this)
             emps.Query.AddOrderBy(Employees.ColumnNames.LastName, WhereParameter.Dir.ASC);
            
             // Bring back only distinct rows
             emps.Query.Distinct = true;
            
             // Bring back the top 10 rows
             emps.Query.Top = 10;
            
             emps.Query.Load();</code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery._Load(System.String)">
            <summary>
            Derived classes implement this, like SqlClientDynamicQuery and OleDbDynamicQuery to account for differences in DBMS systems.
            </summary>
            <param name="conjuction">The conjuction, "AND" or "OR"</param>
            <returns></returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.#ctor(MyGeneration.dOOdads.BusinessEntity)">
            <summary>
            You never need to call this, just access your BusinessEntity.Query property.
            </summary>
            <param name="entity">Passed in via the BusinessEntity</param>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.Load">
            <summary>
            Execute the Query and loads your BusinessEntity. The default conjuction between the WHERE parameters is "AND"
            </summary>
            <returns>True if at least one record was loaded</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.Load(System.String)">
            <summary>
            Execute the Query and loads your BusinessEntity. 
            You can pass in the conjustion that will be used between the WHERE parameters, either, "AND" or "OR". "AND" is the default.
            Also, if you need to be notified that this is being called override BusinessEntity.OnQueryLoad().
            </summary>
            <returns>True if at least one record was loaded</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.GenerateSQL">
            <summary>
            Builds the SQL Statement that it would use to execute the Query, however, it doesn't execute, just returns it as a string for debugging purposes.
            "AND" is the default conjuction.
            </summary>
            <returns>The SQL statement</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.GenerateSQL(System.String)">
            <summary>
            Builds the SQL Statement that it would use to execute the Query, however, it doesn't execute, just returns it as a string for debugging purposes.
            You can pass in the conjustion that will be used between the WHERE parameters, either, "AND" or "OR". "AND" is the default.
            </summary>
            <returns>The SQL statement</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.ReturnReader">
            <summary>
            Executes the Query, however, your BusinessEntity will not be loaded with the data from the query, instead, a DataReader is returned that will allow you 
            to iterate over the data. The default conjuction is "AND" between WHERE parameters.
            </summary>
            <returns>The DataReader</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.ReturnReader(System.String)">
            <summary>
            Executes the Query, however, your BusinessEntity will not be loaded with the data from the query, instead, a DataReader is returned that will allow you 
            to iterate over the data. You can pass in the conjustion that will be used between the WHERE parameters, either, "AND" or "OR". "AND" is the default.
            </summary>
            <returns>The DataReader</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddWhereParameter(MyGeneration.dOOdads.WhereParameter)">
            <summary>
            NOTE: This is called by the dOOdad framework and you should never call it. We reserve the right to remove or change this method.
            </summary>
            <param name="wItem">The WhereParameter</param>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddAggregateParameter(MyGeneration.dOOdads.AggregateParameter)">
            <summary>
            NOTE: This is called by the dOOdad framework and you should never call it. We reserve the right to remove or change this method.
            </summary>
            <param name="wItem">The AggregateParameter</param>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddOrderBy(System.String,MyGeneration.dOOdads.WhereParameter.Dir)">
            <overloads>
            Use this to have your Query order the data. If you want to order the data by two columns you will need to call this method twice.
            </overloads>
            <summary>
            Use this to have your Query order the data. If you want to order the data by two columns you will need to call this method twice.
            </summary>
            <param name="column">This should be an entry from your ColumnNames class</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            <code>
            emps.Query.AddOrderBy(Employees.ColumnNames.LastName, WhereParameter.Dir.ASC)</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddOrderBy(MyGeneration.dOOdads.DynamicQuery,MyGeneration.dOOdads.WhereParameter.Dir)">
            <summary>
            Overloaded to let your Query order the data by COUNT(*).
            Used with Query.CountAll set to true.
            Derived classes implement this, like SqlClientDynamicQuery and OleDbDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="countAll">This should be entity.Query</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            <code>
            emps.Query.AddOrderBy(emps.Query, WhereParameter.Dir.ASC)</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddOrderBy(MyGeneration.dOOdads.AggregateParameter,MyGeneration.dOOdads.WhereParameter.Dir)">
            <summary>
            Overloaded to support aggregates.
            Derived classes implement this, like SqlClientDynamicQuery and OleDbDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="aggregate">This should be an entry from your Aggregate class</param>
            <param name="direction">Either Descending or Ascending</param>
            <example>
            <code>
            emps.Query.AddOrderBy(emps.Aggregate.CategoryID, WhereParameter.Dir.ASC)</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddGroupBy(System.String)">
            <overloads>
            Use this to have your Query group the data. If you want to group the data by two columns you will need to call this method twice.
            </overloads>
            <summary>
            Use this to have your Query group the data. If you want to group the data by two columns you will need to call this method twice.
            If you call AddGroupBy, ANSI SQL requires an AddGroupBy for each AddResultColumn that is not an aggregate. Check your DBMS docs.
            </summary>
            <param name="column">This should be an entry from your ColumnNames class</param>
            <example>
            <code>
            emps.Query.AddGroupBy(Employees.ColumnNames.City)</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddGroupBy(MyGeneration.dOOdads.AggregateParameter)">
            <summary>
            Overloaded to support aggregates.
            Derived classes implement this, like SqlClientDynamicQuery and OleDbDynamicQuery
            to account for differences in DBMS systems.
            </summary>
            <param name="aggregate">This should be an entry from your Aggregate class</param>
            <example>
            <code>
            emps.Query.AddGroupBy(emps.Aggregate.City)</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.FlushWhereParameters">
            <summary>
            NOTE: This is called by the dOOdad framework and you should never call it. We reserve the right to remove or change this method.
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.FlushAggregateParameters">
            <summary>
            NOTE: This is called by the dOOdad framework and you should never call it. We reserve the right to remove or change this method.
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddResultColumn(System.String)">
             <summary>
             The default result set for Query.Load is all of the columns in your Table or View. Once you call AddResultColumn this changes to only
             the columns you have added via this method. For instance, if you call AddResultColumn twice then only two columns will be returned
             in your result set. 
             </summary>
             <param name="columnName">This should be an entry from your ColumnNames class.</param>
             <example>
             VB.NET
             <code>
             Public Sub FillComboBox()
            
             	Dim prds As New Products
            
             	' Note we only bring back these two columns for performance reasons, why bring back more?
             	prds.Query.AddResultColumn(prds.ColumnNames.ProductID)
             	prds.Query.AddResultColumn(prds.ColumnNames.ProductName)
            
             	' Sort
             	prds.Query.AddOrderBy(prds.ColumnNames.ProductName, MyGeneration.dOOdads.WhereParameter.Dir.ASC)
             	
             	' Load it
             	prds.Query.Load()
             	
             	' Bind it 
             	Me.cmbBox.DisplayMember = prds.ColumnNames.ProductName
             	Me.cmbBox.DataSource    = prds.DefaultView
             	End Sub
             </code>
             C#
             <code>
             public void FillComboBox()
             {
             	Products prds = new Products();
            
             	// Note we only bring back these two columns for performance reasons, why bring back more?
             	prds.Query.AddResultColumn(Products.ColumnNames.ProductID);
             	prds.Query.AddResultColumn(Products.ColumnNames.ProductName);
            
             	// Sort
             	prds.Query.AddOrderBy(Products.ColumnNames.ProductName, MyGeneration.dOOdads.WhereParameter.Dir.ASC);
             	
             	// Load it
             	prds.Query.Load();
            
             	// Bind it (there no combo box in this code, see demo)
             	Me.cmbBox.DisplayMember = prds.ColumnNames.ProductName
             	Me.cmbBox.DataSource    = prds.DefaultView
             }
             </code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.ResultColumnsClear">
            <summary>
            Calling this will set the result columns back to "all".
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.AddConjunction(MyGeneration.dOOdads.WhereParameter.Conj)">
            <summary>
            A Query has a default conjuction between WHERE parameters, this method lets you intermix those and alternate between AND/OR.
            </summary>
            <param name="conjuction"></param>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.OpenParenthesis">
            <summary>
            Used for advanced queries
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.DynamicQuery.CloseParenthesis">
            <summary>
            Used for advanced queries
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._distinct">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._top">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._countAll">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._countAllAlias">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._withRollup">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._whereParameters">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._aggregateParameters">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._resultColumns">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._orderBy">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._groupBy">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery._entity">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.DynamicQuery.inc">
            <summary>
            Used by derived classes
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.LastQuery">
            <summary>
            Contains the Query string from your last call to Query.Load(), this is useful for debugging purposes.
            </summary>
            <returns>The SQL statement</returns>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.Top">
            <summary>
            This will limit the number of rows returned, after sorting. Setting Top to 10 will return the top ten rows after sorting.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.Distinct">
            <summary>
            Setting Distinct = True will elimate duplicate rows from the data.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.CountAll">
            <summary>
            If true, add a COUNT(*) Aggregate to the selected columns list.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.CountAllAlias">
            <summary>
            If CountAll is set to true, use this to add a user-friendly column name.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.WithRollup">
            <summary>
            If true, add WITH ROLLUP to the GROUP BY clause.
            </summary>
            <example>
            <code>
            prds.Query.WithRollup = true;
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.ParameterCount">
            <summary>
            This represents the number of WhereParameters contained within the Query.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.DynamicQuery.AggregateCount">
            <summary>
            This represents the number of Aggregates contained within the Query.
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.TransactionMgr">
            <summary>
            TransactionMgr is used to seemlessly enroll BusinessEntity's  into a transaction. TransactionMgr uses
            ADO.NET transactions and therefore is not a distributed transaction as you would get with COM+. You only have
            to use TransactionMgr if two or more BusinessEntity's need to be saved as a transaction.  The BusinessEntity.Save
            method is already protected by a transaction.
            </summary>
            <remarks>
            Transaction Rules:
            <list type="bullet">
            	<item>Your transactions paths do not have to be pre-planned. At any time you can begin a transaction</item>
            	<item>You can nest BeginTransaction/CommitTransaction any number of times as long as they are sandwiched appropriately</item>
            	<item>Once RollbackTransaction is called the transaction is doomed, nothing can be committed even it is attempted.</item>
            	<item>Transactions are stored in the Thread Local Storage.</item>
            </list>
            Transactions are stored in the Thread Local Storage or
            TLS. This way the API isn't intrusive, ie, forcing you
            to pass a SqlConnection around everywhere.  There is one
            thing to remember, once you call RollbackTransaction you will
            be unable to commit anything on that thread until you
            call ThreadTransactionMgrReset().
            
            In an ASP.NET application each page is handled by a thread
            that is pulled from a thread pool. Thus, you need to clear
            out the TLS (thread local storage) before your page begins
            execution. The best way to do this is to create a base page
            that inhertis from System.Web.UI.Page and clears the state
            like this:	
            </remarks>
            <example>
            VB.NET
            <code>
            Dim tx As TransactionMgr
            tx = TransactionMgr.ThreadTransactionMgr()
            
            Try
            	tx.BeginTransaction()
            	emps.Save()
            	prds.Save()
            	tx.CommitTransaction()
            Catch ex As Exception
            	tx.RollbackTransaction()
            	tx.ThreadTransactionMgrReset()
            End Try
            </code>
            C#
            <code>
            TransactionMgr tx = TransactionMgr.ThreadTransactionMgr();
            
            try
            {
            	tx.BeginTransaction();
            	emps.Save();
            	prds.Save();
            	tx.CommitTransaction();
            }
            catch(Exception ex)
            {
            	tx.RollbackTransaction();
            	tx.ThreadTransactionMgrReset();
            }
            </code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.#ctor">
            <summary>
            You cannot new an instance of the TransactionMgr class, see the static method <see cref="M:MyGeneration.dOOdads.TransactionMgr.ThreadTransactionMgr"/>
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.BeginTransaction">
            <summary>
            BeginTransaction should always be a followed by a call to CommitTransaction if all goes well, or
            RollbackTransaction if problems are detected.  BeginTransaction() can be nested any number of times
            as long as each call is unwound with a call to CommitTransaction().
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.CommitTransaction">
            <summary>
            The final call to CommitTransaction commits the transaction to the database, BeginTransaction and
            CommitTransaction calls can be nested, <see cref="M:MyGeneration.dOOdads.TransactionMgr.BeginTransaction"/>
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.RollbackTransaction">
            <summary>
            RollbackTransaction dooms the transaction regardless of nested calls to BeginTransaction. Once this method is called
            nothing can be done to commit the transaction.  To reset the thread state a call to <see cref="M:MyGeneration.dOOdads.TransactionMgr.ThreadTransactionMgrReset"/> must be made.
            You must call 
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.Enlist(System.Data.IDbCommand,MyGeneration.dOOdads.BusinessEntity)">
            <summary>
            Enlist by the dOOdads architecture when a IDbCommand (SqlCommand is an IDbCommand). The command may or may not be enrolled 
            in a transaction depending on whether or not BeginTransaction has been called. Each call to Enlist must be followed by a
            call to <see cref="M:MyGeneration.dOOdads.TransactionMgr.DeEnlist(System.Data.IDbCommand,MyGeneration.dOOdads.BusinessEntity)"/>.
            </summary>
            <param name="cmd">Your SqlCommand, OleDbCommand, etc ...</param>
            <param name="entity">Your business entity, in C# use 'this', VB.NET use 'Me'.</param>
            <example>
            C#
            <code>
            txMgr.Enlist(cmd, this);
            cmd.ExecuteNonQuery();
            txMgr.DeEnlist(cmd, this);
            </code>
            VB.NET
            <code>
            txMgr.Enlist(cmd, Me)
            cmd.ExecuteNonQuery()
            txMgr.DeEnlist(cmd, Me)
            </code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.DeEnlist(System.Data.IDbCommand,MyGeneration.dOOdads.BusinessEntity)">
            <summary>
            Each call to Enlist must be followed eventually by a call to DeEnlist.  
            </summary>
            <param name="cmd"></param>
            <param name="entity"></param>
            <example>
            C#
            <code>
            txMgr.Enlist(cmd, this);
            cmd.ExecuteNonQuery();
            txMgr.DeEnlist(cmd, this); 
            </code>
            VB.NET
            <code>>
            txMgr.Enlist(cmd, Me)
            cmd.ExecuteNonQuery()
            txMgr.DeEnlist(cmd, Me)
            </code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.AddBusinessEntity(MyGeneration.dOOdads.BusinessEntity)">
            <summary>
            Called internally by BusinessEntity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.ThreadTransactionMgr">
            <summary>
            This static method is how you obtain a reference to the TransactionMgr. You cannot call "new" on TransactionMgr.
            If a TransactionMgr doesn't exist on the current thread, one is created and returned to you.
            </summary>
            <returns>The one and only TransactionMgr for this thread.</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.TransactionMgr.ThreadTransactionMgrReset">
            <summary>
            This must be called after RollbackTransaction or no futher database activity will happen successfully on the current thread.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.TransactionMgr.NestingCount">
            <summary>
            Returns the number of outstanding calls to <see cref="M:MyGeneration.dOOdads.TransactionMgr.BeginTransaction"/> without subsequent calls to 
            <see cref="M:MyGeneration.dOOdads.TransactionMgr.CommitTransaction"/>
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.TransactionMgr.HasBeenRolledBack">
            <summary>
            True if <see cref="M:MyGeneration.dOOdads.TransactionMgr.RollbackTransaction"/> has been called on this thread. 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.TransactionMgr.IsolationLevel">
            <summary>
            This is the Transaction's strength. The default is "IsolationLevel.Unspecified, the strongest is "IsolationLevel.Serializable" which is what
            is recommended for serious enterprize level projects.
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.AggregateParameter">
             <summary>
             This class is dynamcially created when you add an AggregateParameter to your BusinessEntity's DynamicQuery (See the BusinessEntity.Query Property).
             </summary>
             <remarks>
             Aggregate and GROUP BY Feature Support by DBMS:
             <code>
                             MS    MS    My    SQ    Vista Fire  Post
             Feature         SQL   Acces SQL   Lite  DB    bird  gre   Oracle  Ads
             --------------- ----- ----- ----- ----- ----- ----- ----- ------ -----
             Avg              Y     Y     Y     Y     Y     Y     Y     Y       Y
             Count            Y     Y     Y     Y     Y     Y     Y     Y       Y
             Max              Y     Y     Y     Y     Y     Y     Y     Y       Y
             Min              Y     Y     Y     Y     Y     Y     Y     Y       Y
             Sum              Y     Y     Y     Y     Y     Y     Y     Y       Y
             StdDev           Y     Y     Y     -     Y     -     Y    (4)      -
             Var              Y     Y     Y     -     -     -     Y     Y       -
             Aggregate in
               ORDER BY       Y     Y    (1)    Y    (3)    Y     Y     Y       Y
               GROUP BY       -     -     -     Y    (3)    Y     Y     Y       -
             WITH ROLLUP      Y     -    (2)    -     Y     -     -     Y       -
             COUNT(DISTINCT)  Y     -     Y     -     Y     Y     Y     Y       Y
             
             Notes:
               (1) - MySQL - accepts an aggregate's alias in an
                     ORDER BY clause.
               (2) - MySQL - WITH ROLLUP and ORDER BY are mutually
                     exclusive
               (3) - VistaDB - will not ORDER BY or GROUP BY 'COUNT(*)' 
                     the rest works fine.   
               (4) - Uses TRUNC(STDDEV(column),10) to avoid overflow errors
               
             </code>
             This will be the extent of your use of the AggregateParameter class, this class is mostly used by the dOOdad architecture, not the programmer.
             <code>
             prds  = new Products();
            
             // To include a COUNT(*) with NULLs included
             prds.Query.CountAll = true;
             prds.Query.CountAllAlias = "Product Count";
            
             // To exclude NULLs in the COUNT for a column
             prds.Aggregate.UnitsInStock.Function = AggregateParameter.Func.Count;
             prds.Aggregate.UnitsInStock.Alias = "With Stock";
            
             // To have two aggregates for the same column, use a tearoff
             AggregateParameter ap = prds.Aggregate.TearOff.UnitsInStock;
             ap.Function = AggregateParameter.Func.Sum;
             ap.Alias = "Total Units";
            
             prds.Aggregate.ReorderLevel.Function = AggregateParameter.Func.Avg;
             prds.Aggregate.ReorderLevel.Alias = "Avg Reorder";
            
             prds.Aggregate.UnitPrice.Function = AggregateParameter.Func.Min;
             prds.Aggregate.UnitPrice.Alias = "Min Price";
            
             ap = prds.Aggregate.TearOff.UnitPrice;
             ap.Function = AggregateParameter.Func.Max;
             ap.Alias = "Max Price";
            
             // If you have no aggregates or AddResultColumns,
             // Then the query defaults to SELECT *
             // If you have an aggregate and no AddResultColumns,
             // Then only aggregates are reurned in the query.
             prds.Query.AddResultColumn(Products.ColumnNames.CategoryID);
             prds.Query.AddResultColumn(Products.ColumnNames.Discontinued);
            
             // If you have an Aggregate, ANSI SQL requires an AddGroupBy
             // for each AddResultColumn. Check your DBMS docs.
             prds.Query.AddGroupBy(Products.ColumnNames.CategoryID);
             prds.Query.AddGroupBy(Products.ColumnNames.Discontinued);
            
             prds.Query.AddOrderBy(Products.ColumnNames.Discontinued, WhereParameter.Dir.ASC);
             
             // You can use aggregates in AddOrderBy by
             // referencing either the entity AggregateParameter or a tearoff
             // You must create the aggregate before using it here.
             prds.Query.AddOrderBy(prds.Aggregate.UnitsInStock, WhereParameter.Dir.DESC);
             
             // Load it.
             prds.Query.Load();
             </code>
             </remarks>
        </member>
        <member name="M:MyGeneration.dOOdads.AggregateParameter.#ctor(System.String,System.Data.IDataParameter)">
            <summary>
            This is only called by dOOdads architecture.
            </summary>
            <param name="column"></param>
            <param name="param"></param>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.IsDirty">
            <summary>
            Used to determine if the AggregateParameter has a value
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Column">
            <summary>
            The column in the BusinessEntity that this AggregateParameter is going to query against. 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Param">
            <summary>
            The actual database Parameter 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Value">
            <summary>
            The value that will be placed into the Parameter
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Function">
            <summary>
            The type of aggregate function desired.
            Avg, Count, Min, Max, Sum, StdDev, or Var.
            (See AggregateParameter.Func enumeration.)
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Alias">
            <summary>
            The user-friendly name of the aggregate column
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.AggregateParameter.Distinct">
            <summary>
            If true, then use (DISTINCT columnName) in the aggregate.
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.AggregateParameter.Func">
            <summary>
            The aggregate function used by Aggregate.Function
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Avg">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.StdDev">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Var">
            <summary>
            Variance
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.AggregateParameter.Func.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.SqlClientEntity">
            <summary>
            SqlClientEntity is the Microsoft SQL implementation of BusinessEntity
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.BusinessEntity">
            <summary>
            BusinessEntity provides the bulk of the logic for dOOdads. Your generated class will ultimately inherit from this class.
            See our website at http://www.mygenerationsoftware.com/dOOdads/dOOdads.aspx for more information.
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity._LoadFromRawSql(System.String,System.Object[])">
            <summary>
            This is overloaded by each specific Entity type such as SqlClientEntity
            </summary>
            <param name="rawSql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="F:MyGeneration.dOOdads.BusinessEntity.StringFormat">
            <summary>
            This is used by GetDateTimeAsString, for more informaton see "about DateTimeFormatInfo class" in the Visual Studio Help. The default is "MM/dd/yyyy". 
            </summary>
            The chosen default is "MM/dd/yyyy" which is very similiar to:
            <remarks>
            <code>
            DateTimeFormatInfo myDTFI = new CultureInfo( "en-US", false ).DateTimeFormat;
            string StringFormat = myDTFI.ShortDatePattern;</code>
            However, that format is "M/d/yyyy" which does not zero pad the month or day, the author chose this as the default. 
            You can override this default by simply setting this property. It is recommended that you set this in your objects
            constructor, however you can set it at will if you like. See <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            </remarks>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetInsertCommand">
            <summary>
            Called by BusinessEntity but implemented in your generated class by MyGeneration during template generation.
            </summary>
            <returns>The command required for an INSERT statement, the code for this is generated for you.</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetUpdateCommand">
            <summary>
            Called by BusinessEntity but implemented in your generated class by MyGeneration during template generation.
            </summary>
            <returns>The command required for an UPDATE statement, the code for this is generated for you.</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetDeleteCommand">
            <summary>
            Called by BusinessEntity but implemented in your generated class by MyGeneration during template generation.
            </summary>
            <returns>The command required for an DELETE statement, the code for this is generated for you.</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.OnQueryLoad(System.String)">
            <summary>
            This is called when DynamicQuery.Load() is called, this occurs when code like this is executed:  emps.Query.Load(), 
            by default this method does nothing. When overriding you don't use the internal keyword.
            </summary>
            <param name="conjuction">The conjuction as passed into Query.Load()</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.AddColumn(System.String,System.Type)">
             <summary>
             After loading your BusinessEntity you can add custom columns, this is typically done to create a calculated column, however, it can
             be used to add a column just to hold state, it will not be saved to the database of course.
             </summary>
             <param name="name">The name of the Column</param>
             <param name="dataType">Use Type.GetType() as in Type.GetType("System.String")</param>
             <returns>The newly created DataColumn</returns>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
             If emps.LoadAll() Then
            
                Dim col As DataColumn = emps.AddColumn("FullName", Type.GetType("System.String"))
                col.Expression = Employees.ColumnNames.LastName + "+ ', ' + " + Employees.ColumnNames.FirstName
            
                Dim fullName As String
            
                Do
                    fullName = CType(emps.GetColumn("FullName"), String)
                Loop Until Not emps.MoveNext
                
            
             End If
             </code>
             C#
             <code>
             Employees emps = new Employees();
            	if(emps.LoadAll())
            	{
            		DataColumn col = emps.AddColumn("FullName", Type.GetType("System.String"));
            		col.Expression = Employees.ColumnNames.LastName + "+ ', ' + " + Employees.ColumnNames.FirstName;
            
            		string fullName;
            
            		do
            			fullName = emps.GetColumn("FullName") as string;
            		while(emps.MoveNext());
            	}
             </code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.RowState">
            <summary>
            You can use this to determine the rowstate of a given row in your BusinessEntity, examples are Added, Deleted, Modified.
            </summary>
            <returns>The row state of the current row in your BusinessEntity</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Rewind">
             <summary>
             Resets the interation process back to the first row.
             </summary>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
             If emps.LoadAll() Then
            
                Dim lastName As String
            
                ' Iteration walks the DataTable.DefaultView, see the FilterAndSort
                ' sample for further clarification.
                Do
                    lastName = emps.LastName
                Loop Until Not emps.MoveNext
            
                emps.Rewind()
            
                Do
                    lastName = emps.LastName
                Loop Until Not emps.MoveNext
            
             End If
             </code>
             C#
             <code>
             Employees emps = new Employees();
             if(emps.LoadAll())
             {
            		string lastName;
            
            		// Iteration walks the DataTable.DefaultView, see the FilterAndSort
            		// sample for further clarification.
            		do
            			lastName = emps.LastName;
            		while(emps.MoveNext());
            
            		emps.Rewind();
            
            		do
            			lastName = emps.LastName;
            		while(emps.MoveNext());
             } 
             </code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.MoveNext">
             <summary>
             After loading your BusinessEntity it is automatically position on the first row. Thus, you need to call MoveNext as shown in the following 
             example.
             </summary>
             <example>
             VB.NET
             <code>
             Dim emps As New Employees
             If emps.LoadAll() Then
            
                Dim lastName As String
            
                ' Iteration walks the DataTable.DefaultView, see the FilterAndSort
                ' sample for further clarification.
                Do
                    lastName = emps.LastName
                Loop Until Not emps.MoveNext
            
                emps.Rewind()
            
                Do
                    lastName = emps.LastName
                Loop Until Not emps.MoveNext
            
             End If
             </code>
             C#
             <code>
             Employees emps = new Employees();
             if(emps.LoadAll())
             {
            		string lastName;
            
            		// Iteration walks the DataTable.DefaultView, see the FilterAndSort
            		// sample for further clarification.
            		do
            			lastName = emps.LastName;
            		while(emps.MoveNext());
            
            		emps.Rewind();
            
            		do
            			lastName = emps.LastName;
            		while(emps.MoveNext());
             } 
             </code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.FlushData">
            <summary>
            Thus method flushes the Data in the DataTable and nulls out the Current Row, including any DynamicQuery Data.
            You can call FlushData() and than reload an object.
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Serialize">
            <summary>
            This method will allow you to save the contents within the embedded DataTable to XML.
            It is saved as a DataSet with Schema, data, and Rowstate as a DiffGram.
            You can load this data into another entity of the same type via Deserialize. 
            Call <see cref="M:MyGeneration.dOOdads.BusinessEntity.GetChanges"/> before calling Serialize to serialize only the modified data.
            Also <see cref="M:MyGeneration.dOOdads.BusinessEntity.Deserialize(System.String)"/>
            </summary>
            <returns>The XML</returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            Dim xml As String = emps.Serialize()
            
            ' Now reload that single record into a new Employees object and Save it
            Dim empsClone As New Employees
            empsClone.Deserialize(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            string str = emps.Serialize();
            
            // Now reload that single record into a new Employees object and Save it
            Employees empsClone = new Employees();
            empsClone.Deserialize(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Deserialize(System.String)">
            <summary>
            Reload the contents obtained from a previous call to <see cref="M:MyGeneration.dOOdads.BusinessEntity.Serialize"/>.
            </summary>
            <param name="xml">The string to reload</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            Dim xml As String = emps.Serialize()
            
            ' Now reload that single record into a new Employees object and Save it
            Dim empsClone As New Employees
            empsClone.Deserialize(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            string str = emps.Serialize();
            
            // Now reload that single record into a new Employees object and Save it
            Employees empsClone = new Employees();
            empsClone.Deserialize(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.ToXml">
            <summary>
            This method will allow you to save the contents within the embedded DataTable only to XML.
            You can load this data into another entity of the same type via FromXml. 
            Call <see cref="M:MyGeneration.dOOdads.BusinessEntity.GetChanges"/> before calling ToXml to serialize only the modified data.
            Also <see cref="M:MyGeneration.dOOdads.BusinessEntity.FromXml(System.String)"/>
            </summary>
            <returns>The XML</returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.ToXml(System.Data.XmlWriteMode)">
            <summary>
            This method will allow you to save the contents within the embedded DataTable only to XML.
            You have better control of what gets serialized via the mode parameter.
            Call <see cref="M:MyGeneration.dOOdads.BusinessEntity.GetChanges"/> before calling ToXml to serialize only the modified data.
            Also <see cref="M:MyGeneration.dOOdads.BusinessEntity.FromXml(System.String)"/>.
            </summary>
            <param name="mode">See the .NET enum XmlWriteMode for more help.</param>
            <returns></returns>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.FromXml(System.String)">
            <summary>
            Reload the contents obtained from a previous call to <see cref="M:MyGeneration.dOOdads.BusinessEntity.ToXml"/>.
            </summary>
            <param name="xml">The string to reload</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.FromXml(System.String,System.Data.XmlReadMode)">
            <summary>
            Reload the contents obtained from a previous call to <see cref="M:MyGeneration.dOOdads.BusinessEntity.ToXml"/>. Use the mode
            parameter for finer control.
            </summary>
            <param name="xml">The string to reload</param>
            <param name="mode">See the .NET XmlReadMode enum for more help.</param>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.Query.Load()              ' emps.RowCount = 200
            emps.FirstName = "Griffinski"  ' Change first row
            emps.GetChanges()              ' emps.RowCount now = 1 
            
            ' Now reload that single record into a new Employees object and Save it
            Dim xml As String = emps.ToXml()
            Dim empsClone As New Employees
            empsClone.FromXml(xml)
            empsClone.Save()
            </code>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();                // emps.RowCount = 200
            emps.LastName = "Griffinski";  // Change first row
            emps.GetChanges();             // emps.RowCount now = 1 
            
            // Now reload that single record into a new Employees object and Save it
            string str = emps.ToXml();
            Employees empsClone = new Employees();
            empsClone.FromXml(str);
            empsClone.Save();
            </code> 
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)">
            <summary>
            Use LoadFromSql to load you BusinessEntity from a custom stored procedure. The generated method in your 
            BusinessEntity called 'LoadByPrimaryKey' uses this method.
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <returns>True if at least one row was loaded</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String,System.Collections.Specialized.ListDictionary)">
             <summary>
             This method allows you to also pass in paramters and thier values.
             </summary>
             <param name="sp">This must be a stored procedure</param>
             <param name="Parameters">Two types of key/value pairs are allowed, see the coding samples for this method</param>
             <returns>True if at least one row was loaded</returns>
             <example>
             <code>
             Public Sub CallCustomProcUsingSqlParameter(ByVal EmployeeID As Integer)
            
            		' Uses SqlParameters from generated entity
            		Dim Parameters As ListDictionary = New ListDictionary
            		Parameters.Add(Me.Parameters.EmployeeID, EmployeeID)
            
            		' This loads the data for this object
            		Me.LoadFromSql("proc_GetSpecialEmployees", Parameters)
            
            	End Sub
             </code>
             or
             <code>
             Public Sub CallCustomProc(ByVal EmployeeID As Integer)
            
            		' Doesn't use a SqlParameter: 
            		' Only do this when there isn't one in your Parameters collection !!
            		Dim Parameters As ListDictionary = New ListDictionary
            		Parameters.Add(Me.ColumnNames.EmployeeID, EmployeeID)
            
            		' This loads the data for this object
            		Me.LoadFromSql("proc_GetSpecialEmployees", Parameters)
            
            	End Sub
             </code>
             </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            This method allows you to pass in direct sql.
            </summary>
            <param name="sp">This can be a stored procedure, a table, or direct sql</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see the coding samples for this method</param>
            <param name="commandType">This property determines the type being passed in the "sp" parameter</param>
            <returns>True if at least one row was loaded</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromRawSql(System.String,System.Object[])">
            <summary>
            LoadFromRawSql provides a quick and easy way (easier than say LoadFromSql) to execute a raw sql statement. All
            values passed in via parameters will be passed in via actual SQL Parameters to prevent
            SQL injection techniques, you can pass in any number of values via {0}, {1} and so on ...
            </summary>
            <param name="rawSql"></param>
            <param name="parameters"></param>
            <returns></returns>
            <example>
            <code>
            public class Employees : _Employees
            {
            	public bool MySpecialLoad()
            	{
            		// Load All Employees with an 'o' in the last name
            		return base.LoadFromRawSql("Select * from Employees where LastName LIKE {0}", "%o%");
            	}
            }
            </code>
            </example> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlNoExec(System.String)">
            <summary>
            Use LoadFromSqlNoExec to execute a stored procedure, this method does not load data into your BusinessEntity.
            </summary>
            <param name="sp">The name of the stored procedure</param>
            <returns>The number of rows affected</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlNoExec(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            This method allows you to pass in parameters and their values. See <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)"/>
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see the coding samples for this method</param>
            <returns>The number of rows affected</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlNoExec(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType,System.Int32)">
            <summary>
            This method allows you to pass in direct sql and to control the timeout value.
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)"/></param>
            <param name="commandType">This property determines the type being passed in the "sp" parameter</param>
            <param name="commandTimeout">-1 is standard database timeout</param>
            <returns>The number of rows affected</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlScalar(System.String)">
            <summary>
            Use LoadFromSqlScalar to execute a stored procedure, this method does not load data into your BusinessEntity.
            </summary>
            <param name="sp">The name of the stored procedure</param>
            <returns>The first column of the first row in the resultset.</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlScalar(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            This method allows you to pass in parameters and their values. See <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlScalar(System.String)"/>
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see the coding samples for this method</param>
            <returns>The first column of the first row in the resultset.</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlScalar(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType,System.Int32)">
            <summary>
            This method allows you to pass in direct sql and to control the timeout value.
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)"/></param>
            <param name="commandType">This property determines the type being passed in the "sp" parameter</param>
            <param name="commandTimeout">-1 is standard database timeout</param>
            <returns>The first column of the first row in the resultset.</returns> 
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlReader(System.String)">
            <summary>
            LoadFromSqlReader does not load data into your BusinessEntity
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <returns>The IDataReader (SqlDataReader, OleDbDataReader)</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlReader(System.String,System.Collections.Specialized.ListDictionary)">
            <summary>
            This version allows you to pass in Parameters and thier values
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)"/></param>
            <returns>The IDataReader (SqlDataReader, OleDbDataReader)</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSqlReader(System.String,System.Collections.Specialized.ListDictionary,System.Data.CommandType)">
            <summary>
            This version allow you to use direct sql.
            </summary>
            <param name="sp">This must be a stored procedure</param>
            <param name="Parameters">Two types of key/value pairs are allowed, see <see cref="M:MyGeneration.dOOdads.BusinessEntity.LoadFromSql(System.String)"/></param>
            <param name="commandType">This property determines the type being passed in the "sp" parameter</param>
            <returns>The IDataReader (SqlDataReader, OleDbDataReader)</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.AddNew">
            <summary>
            AddNew is how you add a new record to your BusinessEntity, when saved this row will be an INSERT. 
            All Identity columns and calculated columns are present and available after calling Save()
            </summary>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.AddNew()
            emps.FirstName = "Jimmy"
            emps.LastName = "Coder"
            emps.Save()
            
            ' Notice how upon return from Save the EmployeeID property is ready and waiting for us
            ' In order for this to work your DBMS must support OUTPUT parameters.
            Dim empID As Integer 
            empID = emps.EmployeeID</code>
            C#
            <code>
            Employees emps = new Employees();
            emps.AddNew();
            emps.FirstName = "Jimmy";
            emps.LastName = "Coder";
            emps.Save();
            
            // Notice how upon return from Save the EmployeeID property is ready and waiting for us
            // In order for this to work your DBMS must support OUTPUT parameters.
            int empID = emps.EmployeeID;</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.MarkAsDeleted">
            <summary>
            MarkAsDeleted does as it name suggests, marks the current row as deleted. You still must call <see cref="M:MyGeneration.dOOdads.BusinessEntity.Save"/> to actually delete the row.
            See also <see cref="M:MyGeneration.dOOdads.BusinessEntity.DeleteAll"/>
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.DeleteAll">
            <summary>
            DeleteAll does as it name suggests, marks ALL of the rows as deleted. You still must call <see cref="M:MyGeneration.dOOdads.BusinessEntity.Save"/> to actually delete the rows.
            This method, DeleteAll, should really be called MarkAllAsDeleted but we were afraid it might accidentally be chosen via intellisense, see also <see cref="M:MyGeneration.dOOdads.BusinessEntity.MarkAsDeleted"/>
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Save">
            <summary>
            Save is really a bulk save, you can call <see cref="M:MyGeneration.dOOdads.BusinessEntity.AddNew"/> to insert a row, call <see cref="M:MyGeneration.dOOdads.BusinessEntity.MarkAsDeleted"/> to mark a row for deletion, 
            and modify other rows through properties and then call Save. All of the changes will be save in this one call, and by default they are
            protected by a Transaction.
            </summary>
            <example>
            VB.NET
            <code>
            Dim emps As New Employees
            emps.AddNew()
            emps.FirstName = "Jimmy"
            emps.LastName = "Coder"
            emps.Save()
            
            ' Notice how upon return from Save the EmployeeID property is ready and waiting for us
            ' In order for this to work your DBMS must support OUTPUT parameters.
            Dim empID As Integer 
            empID = emps.EmployeeID</code>
            C#
            <code>
            Employees emps = new Employees();
            emps.AddNew();
            emps.FirstName = "Jimmy";
            emps.LastName = "Coder";
            emps.Save();
            
            // Notice how upon return from Save the EmployeeID property is ready and waiting for us
            // In order for this to work your DBMS must support OUTPUT parameters.
            int empID = emps.EmployeeID;</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.HookupRowUpdateEvents(System.Data.Common.DbDataAdapter)">
            <summary>
            If you need to trap DbDataAdapter.RowUpdated or DbDataAdapter.RowUpdating events, overload this method.
            </summary>
            <example>
            The OleDbEntity does something similiar to the below code snippet to return identity columns.
            <code>
            override protected void HookupRowUpdateEvents(DbDataAdapter adapter)
            {
                OleDbDataAdapter da = adapter as OleDbDataAdapter;
                da.RowUpdated += new OleDbRowUpdatedEventHandler(OnRowUpdated);
            }
            </code>
            </example>
            <param name="adapter"></param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.RejectChanges">
            <summary>
            Call this to revert your business entity back to it's original state, same as DataTable.RejectChanges()
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.AcceptChanges">
            <summary>
            This is called after a successful call to Save(), all rows marked as Added, Modified or Deleted are changed
            to Unchanged. Deleted rows, of course, are gone after calling AcceptChanges, same as DataTable.AcceptChanges()
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetChanges">
            <summary>
            After calling this method your BusinessEntity will contain only rows that have been
            Added, Modified, or Deleted. See <see cref="M:MyGeneration.dOOdads.BusinessEntity.ToXml"/>.
            </summary>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetChanges(System.Data.DataRowState)">
            <summary>
            After calling this method your BusinessEntity will contain only those row that match the value
            of the rowStates parameter. See <see cref="M:MyGeneration.dOOdads.BusinessEntity.ToXml"/>.
            </summary>
            <param name="rowStates"></param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.IsColumnNull(System.String)">
            <summary>
            Except for "string" and "Guid" properties all other properties will throw an exception if you call thier "get" accessors.
            You can head off the exception by calling this method.
            </summary>
            <param name="columnName">This should be one of your "Columns" property</param>
            <returns>True if the column is DBNull.Value</returns>
            <example>
            VB.NET
            <code>
            Dim emps As Employees
            If emps.LoadByPrimaryKey(42) Then
               If emps.IsColumnNull(emps.ColumnNames.Photo) Then
                   ' The Photo column is null
               End If
            End If</code>
            C#
            <code>
            Employees emps = new Employees();
            if(emps.LoadByPrimaryKey(42))
            {
            	if(emps.IsColumnNull(Employees.ColumnNames.Photo))
            	{
                    // The Photo column is null
            	}
            }</code>
            </example>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetColumnNull(System.String)">
            <summary>
            Use this method to set a column to DBNull.Value which will translate to NULL in your DBMS system.
            </summary>
            <param name="columnName">The name of the column. Use your ColumnNames like this, Employees.ColumnNames.Photo</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetColumn(System.String,System.Object)">
            <summary>
            This is the typeless version, this method should only be used for columns that you added via <see cref="M:MyGeneration.dOOdads.BusinessEntity.AddColumn(System.String,System.Type)"/> or to access
            extra columns brought back by changing your <see cref="P:MyGeneration.dOOdads.BusinessEntity.QuerySource"/> to a SQL View.
            </summary>
            <param name="columnName">The name of the column, "MyColumn"</param>
            <param name="Value">The value to set the column to</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetColumn(System.String)">
            <summary>
            This is the typeless version, this method should only be used for columns that you added via <see cref="M:MyGeneration.dOOdads.BusinessEntity.AddColumn(System.String,System.Type)"/> or to access
            extra columns brought back by changing your <see cref="P:MyGeneration.dOOdads.BusinessEntity.QuerySource"/> to a SQL View.
            </summary>
            <param name="columnName">The name of the column, "MyColumn"</param>
            <returns>The value, you will have to typecast it to the proper type.</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetGuid(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetGuid(System.String,System.Guid)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getbool(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setbool(System.String,System.Boolean)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getstring(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setstring(System.String,System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getint(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setint(System.String,System.Int32)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getuint(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setuint(System.String,System.UInt32)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getlong(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setlong(System.String,System.Int64)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getulong(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setulong(System.String,System.UInt64)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getshort(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setshort(System.String,System.Int16)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getushort(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setushort(System.String,System.UInt16)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetDateTime(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetDateTime(System.String,System.DateTime)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetTimeSpan(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getdecimal(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setdecimal(System.String,System.Decimal)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getfloat(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setfloat(System.String,System.Single)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getdouble(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setdouble(System.String,System.Double)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getbyte(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setbyte(System.String,System.Byte)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getsbyte(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setsbyte(System.String,System.SByte)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Getobject(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.Setobject(System.String,System.Object)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetByteArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetByteArray(System.String,System.Byte[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="byteArray">The Value</param>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetboolArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetboolArray(System.String,System.Boolean[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetstringArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetstringArray(System.String,System.String[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetintArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetintArray(System.String,System.Int32[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetlongArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetlongArray(System.String,System.Int64[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetshortArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetshortArray(System.String,System.Int16[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetDateTimeArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetDateTimeArray(System.String,System.DateTime[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetdecimalArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetdecimalArray(System.String,System.Decimal[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetfloatArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetfloatArray(System.String,System.Single[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetdoubleArray(System.String)">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetdoubleArray(System.String,System.Double[])">
            <summary>
            Used by the Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param> 
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetGuidAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetGuidAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetboolAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetboolAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetstringAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetstringAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetintAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetintAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetuintAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetuintAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetlongAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetlongAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetshortAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetshortAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetushortAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetushortAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetDateTimeAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetDateTimeAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetTimeSpanAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetTimeSpanAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetdecimalAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetdecimalAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetfloatAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetfloatAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetdoubleAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetdoubleAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetbyteAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetbyteAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.GetsbyteAsString(System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyGeneration.dOOdads.BusinessEntity.SetsbyteAsString(System.String,System.String)">
            <summary>
            Used by the String Properties in your generated class. 
            </summary>
            <param name="columnName">One of the named for your ColumnNames class</param>
            <param name="data">The Value</param>
            <returns>The Strong Type</returns>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.QuerySource">
            <summary>
            Used as the source when Query.Load is called. "SELECT * FROM [Query.Source] WHERE ...". You can change this before calling
            Query.Load to bring back extra columns in your BusinessEntity from a View. You will however have to access those extra 
            columns with <see cref="M:MyGeneration.dOOdads.BusinessEntity.GetColumn(System.String)"/>.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.MappingName">
            <summary>
            This can used as your DataGridTableStyle.MappingName, and is the name of your DataTable 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.SchemaGlobal">
            <summary>
            Setting this is a quick way to set both <see cref="P:MyGeneration.dOOdads.BusinessEntity.SchemaTableView"/> and <see cref="P:MyGeneration.dOOdads.BusinessEntity.SchemaStoredProcedure"/>. at the same time.
            Setting this property does nothing more than assign both SchemaTableView and SchemaStoredProcedure, vary rarely will you need to
            set SchemaTableView to one schema and SchemaStoredProcedure to a different schema. 
            </summary>
            NOTE: The period is required, as in "HR." 
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.SchemaTableView">
            <summary>
            This is the schema for the Table or View that will be accessed via Query.Load() and AddNew().  For instance, if you set this to 
            "HR." then Query.Load() will use "HR.EMPLOYEES" instead of just "EMPLOYEES". See <see cref="P:MyGeneration.dOOdads.BusinessEntity.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.SchemaStoredProcedure">
            <summary>
            This is the schema for the stored procedures that will be accessed by the dOOdad.  For instance, if you set this to 
            "HR." then when you do an update your stored procedure will be prefaced by "HR.MyStoredProc" See <see cref="P:MyGeneration.dOOdads.BusinessEntity.SchemaGlobal"/>.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.NotRecommendedConnection">
            <summary>
            The method was added for a very specific reason. You are discouraged from using this method.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.ConnectionString">
            <summary>
            The default connection string for dOOdads is assumed to come from your app.config or web.config file. This property
            is for assigning a raw connection string to your entity, typically, the config file is used however. If you do choose
            to set your entity's connection string using this property we recommend you do so in it's constructor.
            </summary>
            <example>
            The default connection string is stored like this:
            <code>
            &lt;configuration&gt;
              &lt;appSettings&gt;
                &lt;add key="dbConnection" value="User ID=sa;Password=griffinski;Initial Catalog=Northwind;Data Source=localhost"/&gt;
              &lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.ConnectionStringConfig">
            <summary>
            Typically, applications use only a single database, dOOdads assumes that your connection string is registered in your
            applications app.config or web.config file under the key "dbConnection". You can use whatever key you desire and override
            dOOdads default of "dbConnection" with this property.
            </summary>
            <example>
            The default connection string is stored like this:
            <code>
            &lt;configuration&gt;
              &lt;appSettings&gt;
                &lt;add key="dbConnection" value="User ID=sa;Password=griffinski;Initial Catalog=Northwind;Data Source=localhost"/&gt;
                &lt;add key="dbHumanResources" value="User ID=sa;Password=;Initial Catalog=DBHR677;Data Source=PLQ99C"/&gt;
              &lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.DefaultConnectionStringConfig">
            <summary>
            dOOdads assumes that your connection string is registered in your applications app.config or web.config file under
            the key "dbConnection". You can change the system wide default from "dbConnection" to whatever you desire however, remember
            this is static and effects all dOOdad objects. To override an individual objects setting see ConnectionStringConfig.
            </summary>
            <example>
            The DefaultConnectionStringConfig is set like this:
            <code>
            
            BusinessEntity.DefaultConnectionStringConfig = "SiteSqlServer"
            
            &lt;configuration&gt;
              &lt;appSettings&gt;
                &lt;add key="SiteSqlServer" value="User ID=sa;Password=griffinski;Initial Catalog=Northwind;Data Source=localhost"/&gt;
              &lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.Filter">
            <summary>
            After loading your BusinessEntity you can filter (temporary hide) rows. To disable the filter set this property to String.empty.
            After filter using Iteration via MoveNext will properly respect any filter you have in place. See also <see cref="P:MyGeneration.dOOdads.BusinessEntity.Sort"/>.
            </summary>
            <example>
            For a detailed explanation see the RowFilter property on ADO.NET's DataView.RowFilter property.
            <code>
            emps.Filter = "City = 'Berlin'";
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.Sort">
            <summary>
            After loading your BusinessEntity you can sort the rows. To disable the sort set this property to String.empty.
            After settign Sort iteration via MoveNext will properly respect the sort order. See also <see cref="P:MyGeneration.dOOdads.BusinessEntity.Filter"/>.
            </summary>
            <example>
            For a detailed explanation see the Sort property on ADO.NET's DataView.Sort property.
            <code>
            addresses.Sort = "State, ZipCode DESC";
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.RowCount">
            <summary>
            The number of rows in your BusinessEntity or Zero if none.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.EOF">
            <summary>
            True if MoveNext() moves past the last row or
            there are 0 rows.
            </summary>
            <example>
            C#
            <code>
            Employees emps = new Employees();
            emps.LoadAll();
            
            while(!emps.EOF)
            {
            	// logic goes here ...
            	emps.MoveNext();
            }
            </code>
            VB.NET
            <code>
            Dim emps as Employees = New Employees
            emps.LoadAll()
             
            While Not emps.EOF 
            	' logic goes here
                emps.MoveNext()
            End While    
            </code>
            </example>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.DefaultView">
            <summary>
            This is an ADO.NET DataView, both <see cref="P:MyGeneration.dOOdads.BusinessEntity.Filter"/> and <see cref="P:MyGeneration.dOOdads.BusinessEntity.Sort"/> effect the DefaultView, also Interation using 
            MoveNext and Rewind iterate over the DefaultView. When binding to controls such as DataGrid's and ComboBoxes bind to this property.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.DataTable">
            <summary>
            This is the ADO.NET DataTable, it holds the data for your BusinessEntity. It is protected so your derived class can have access
            to it but the consumers of your BusinessEntity cannot. Exposing this publically is not a good idea as your data would be able
            to be modified without going through you business logic.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.DataRow">
            <summary>
            This is the ADO.NET DataRow, it holds the data for your BusinessEntity. It is protected so your derived class can have access
            to it but the consumers of your BusinessEntity cannot. Exposing this publically is not a good idea as your data would be able
            to be modified without going through you business logic.
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.BusinessEntity.Query">
            <summary>
            This property returns the DynamicQuery object which will allow you to build complex queries using your BusinessEntity.
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.WhereParameter">
            <summary>
            This class is dynamcially created when you add a WhereParameter to your BusiinessEntity's DynamicQuery (See the BusinessEntity.Query Property).
            </summary>
            <remarks>
            This will be the extent of your use of the WhereParameter class, this class is mostly used by the dOOdad architecture, not the programmer.
            <code>
            emps.Where.LastName.Value = "%A%";
            emps.Where.LastName.Operator = WhereParameter.Operand.Like;
            </code>
            </remarks>
        </member>
        <member name="M:MyGeneration.dOOdads.WhereParameter.#ctor(System.String,System.Data.IDataParameter)">
            <summary>
            This is only called by dOOdads architecture.
            </summary>
            <param name="column"></param>
            <param name="param"></param>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.IsDirty">
            <summary>
            Used to determine if the WhereParameters has a value
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.Column">
            <summary>
            The column in the BusinessEntity that this WhereParameter is going to query against. 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.Param">
            <summary>
            The actual database Parameter 
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.Value">
            <summary>
            The value that will be placed into the Parameter
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.Operator">
            <summary>
            The type of comparison desired
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.Conjuction">
            <summary>
            The type of conjuction to use, "AND" or "OR"
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.BetweenBeginValue">
            <summary>
            Used when use the Operand.Between comparison
            </summary>
        </member>
        <member name="P:MyGeneration.dOOdads.WhereParameter.BetweenEndValue">
            <summary>
            Used when use the Operand.Between comparison
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.WhereParameter.Operand">
            <summary>
            The type of comparison this parameter shoud use
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.Equal">
            <summary>
            Equal Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.NotEqual">
            <summary>
            Not Equal Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.GreaterThan">
            <summary>
            Greater Than Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.GreaterThanOrEqual">
            <summary>
            Greater Than or Equal Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.LessThan">
            <summary>
            Less Than Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.LessThanOrEqual">
            <summary>
            Less Than or Equal Comparison
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.Like">
            <summary>
            Like Comparison, "%s%" does it have an 's' in it? "s%" does it begin with 's'?
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.IsNull">
            <summary>
            Is the value null in the database
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.IsNotNull">
            <summary>
            Is the value non-null in the database
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.Between">
            <summary>
            Is the value between two parameters? see <see cref="P:MyGeneration.dOOdads.WhereParameter.BetweenBeginValue"/> and <see cref="P:MyGeneration.dOOdads.WhereParameter.BetweenEndValue"/>. 
            Note that Between can be for other data types than just dates.
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.In">
            <summary>
            Is the value in a list, ie, "4,5,6,7,8"
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.NotIn">
            <summary>
            NOT in a list, ie not in, "4,5,6,7,8"
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Operand.NotLike">
            <summary>
            Not Like Comparison, "%s%", anything that does not it have an 's' in it.
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.WhereParameter.Dir">
            <summary>
            The direction used by DynamicQuery.AddOrderBy
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Dir.ASC">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Dir.DESC">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:MyGeneration.dOOdads.WhereParameter.Conj">
            <summary>
            The conjuction used between WhereParameters
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Conj.And">
            <summary>
            WhereParameters are joined via "And"
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Conj.Or">
            <summary>
            WhereParameters are joined via "Or"
            </summary>
        </member>
        <member name="F:MyGeneration.dOOdads.WhereParameter.Conj.UseDefault">
            <summary>
            WhereParameters are used via the default passed into DynamicQuery.Load.
            </summary>
        </member>
    </members>
</doc>
