
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace EDU.DAL
{
	public abstract class _ApplicationStatus : SqlClientEntity
	{
		public _ApplicationStatus()
		{
			this.QuerySource = "ApplicationStatus";
			this.MappingName = "ApplicationStatus";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ApplicationStatusLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ApplicationStatusID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ApplicationStatusID, ApplicationStatusID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ApplicationStatusLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ApplicationStatusID
			{
				get
				{
					return new SqlParameter("@ApplicationStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Status
			{
				get
				{
					return new SqlParameter("@Status", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter StatusDescription
			{
				get
				{
					return new SqlParameter("@StatusDescription", SqlDbType.NVarChar, 2500);
				}
			}
			
			public static SqlParameter SendMailRequired
			{
				get
				{
					return new SqlParameter("@SendMailRequired", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ParentStatusID
			{
				get
				{
					return new SqlParameter("@ParentStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StatusImg
			{
				get
				{
					return new SqlParameter("@StatusImg", SqlDbType.NVarChar, 200);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ApplicationStatusID = "ApplicationStatusID";
            public const string Status = "Status";
            public const string StatusDescription = "StatusDescription";
            public const string SendMailRequired = "SendMailRequired";
            public const string ParentStatusID = "ParentStatusID";
            public const string StatusImg = "StatusImg";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationStatusID] = _ApplicationStatus.PropertyNames.ApplicationStatusID;
					ht[Status] = _ApplicationStatus.PropertyNames.Status;
					ht[StatusDescription] = _ApplicationStatus.PropertyNames.StatusDescription;
					ht[SendMailRequired] = _ApplicationStatus.PropertyNames.SendMailRequired;
					ht[ParentStatusID] = _ApplicationStatus.PropertyNames.ParentStatusID;
					ht[StatusImg] = _ApplicationStatus.PropertyNames.StatusImg;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ApplicationStatusID = "ApplicationStatusID";
            public const string Status = "Status";
            public const string StatusDescription = "StatusDescription";
            public const string SendMailRequired = "SendMailRequired";
            public const string ParentStatusID = "ParentStatusID";
            public const string StatusImg = "StatusImg";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationStatusID] = _ApplicationStatus.ColumnNames.ApplicationStatusID;
					ht[Status] = _ApplicationStatus.ColumnNames.Status;
					ht[StatusDescription] = _ApplicationStatus.ColumnNames.StatusDescription;
					ht[SendMailRequired] = _ApplicationStatus.ColumnNames.SendMailRequired;
					ht[ParentStatusID] = _ApplicationStatus.ColumnNames.ParentStatusID;
					ht[StatusImg] = _ApplicationStatus.ColumnNames.StatusImg;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ApplicationStatusID = "s_ApplicationStatusID";
            public const string Status = "s_Status";
            public const string StatusDescription = "s_StatusDescription";
            public const string SendMailRequired = "s_SendMailRequired";
            public const string ParentStatusID = "s_ParentStatusID";
            public const string StatusImg = "s_StatusImg";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ApplicationStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ApplicationStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ApplicationStatusID, value);
			}
		}

		public virtual string Status
	    {
			get
	        {
				return base.Getstring(ColumnNames.Status);
			}
			set
	        {
				base.Setstring(ColumnNames.Status, value);
			}
		}

		public virtual string StatusDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.StatusDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.StatusDescription, value);
			}
		}

		public virtual bool SendMailRequired
	    {
			get
	        {
				return base.Getbool(ColumnNames.SendMailRequired);
			}
			set
	        {
				base.Setbool(ColumnNames.SendMailRequired, value);
			}
		}

		public virtual int ParentStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ParentStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ParentStatusID, value);
			}
		}

		public virtual string StatusImg
	    {
			get
	        {
				return base.Getstring(ColumnNames.StatusImg);
			}
			set
	        {
				base.Setstring(ColumnNames.StatusImg, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ApplicationStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApplicationStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ApplicationStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApplicationStatusID);
				else
					this.ApplicationStatusID = base.SetintAsString(ColumnNames.ApplicationStatusID, value);
			}
		}

		public virtual string s_Status
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Status) ? string.Empty : base.GetstringAsString(ColumnNames.Status);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Status);
				else
					this.Status = base.SetstringAsString(ColumnNames.Status, value);
			}
		}

		public virtual string s_StatusDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusDescription) ? string.Empty : base.GetstringAsString(ColumnNames.StatusDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusDescription);
				else
					this.StatusDescription = base.SetstringAsString(ColumnNames.StatusDescription, value);
			}
		}

		public virtual string s_SendMailRequired
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SendMailRequired) ? string.Empty : base.GetboolAsString(ColumnNames.SendMailRequired);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SendMailRequired);
				else
					this.SendMailRequired = base.SetboolAsString(ColumnNames.SendMailRequired, value);
			}
		}

		public virtual string s_ParentStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ParentStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ParentStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ParentStatusID);
				else
					this.ParentStatusID = base.SetintAsString(ColumnNames.ParentStatusID, value);
			}
		}

		public virtual string s_StatusImg
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusImg) ? string.Empty : base.GetstringAsString(ColumnNames.StatusImg);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusImg);
				else
					this.StatusImg = base.SetstringAsString(ColumnNames.StatusImg, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ApplicationStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApplicationStatusID, Parameters.ApplicationStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Status
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusDescription, Parameters.StatusDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SendMailRequired
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SendMailRequired, Parameters.SendMailRequired);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ParentStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ParentStatusID, Parameters.ParentStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusImg
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusImg, Parameters.StatusImg);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ApplicationStatusID
		    {
				get
		        {
					if(_ApplicationStatusID_W == null)
	        	    {
						_ApplicationStatusID_W = TearOff.ApplicationStatusID;
					}
					return _ApplicationStatusID_W;
				}
			}

			public WhereParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public WhereParameter StatusDescription
		    {
				get
		        {
					if(_StatusDescription_W == null)
	        	    {
						_StatusDescription_W = TearOff.StatusDescription;
					}
					return _StatusDescription_W;
				}
			}

			public WhereParameter SendMailRequired
		    {
				get
		        {
					if(_SendMailRequired_W == null)
	        	    {
						_SendMailRequired_W = TearOff.SendMailRequired;
					}
					return _SendMailRequired_W;
				}
			}

			public WhereParameter ParentStatusID
		    {
				get
		        {
					if(_ParentStatusID_W == null)
	        	    {
						_ParentStatusID_W = TearOff.ParentStatusID;
					}
					return _ParentStatusID_W;
				}
			}

			public WhereParameter StatusImg
		    {
				get
		        {
					if(_StatusImg_W == null)
	        	    {
						_StatusImg_W = TearOff.StatusImg;
					}
					return _StatusImg_W;
				}
			}

			private WhereParameter _ApplicationStatusID_W = null;
			private WhereParameter _Status_W = null;
			private WhereParameter _StatusDescription_W = null;
			private WhereParameter _SendMailRequired_W = null;
			private WhereParameter _ParentStatusID_W = null;
			private WhereParameter _StatusImg_W = null;

			public void WhereClauseReset()
			{
				_ApplicationStatusID_W = null;
				_Status_W = null;
				_StatusDescription_W = null;
				_SendMailRequired_W = null;
				_ParentStatusID_W = null;
				_StatusImg_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ApplicationStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApplicationStatusID, Parameters.ApplicationStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Status
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusDescription, Parameters.StatusDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SendMailRequired
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SendMailRequired, Parameters.SendMailRequired);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ParentStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ParentStatusID, Parameters.ParentStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusImg
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusImg, Parameters.StatusImg);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ApplicationStatusID
		    {
				get
		        {
					if(_ApplicationStatusID_W == null)
	        	    {
						_ApplicationStatusID_W = TearOff.ApplicationStatusID;
					}
					return _ApplicationStatusID_W;
				}
			}

			public AggregateParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public AggregateParameter StatusDescription
		    {
				get
		        {
					if(_StatusDescription_W == null)
	        	    {
						_StatusDescription_W = TearOff.StatusDescription;
					}
					return _StatusDescription_W;
				}
			}

			public AggregateParameter SendMailRequired
		    {
				get
		        {
					if(_SendMailRequired_W == null)
	        	    {
						_SendMailRequired_W = TearOff.SendMailRequired;
					}
					return _SendMailRequired_W;
				}
			}

			public AggregateParameter ParentStatusID
		    {
				get
		        {
					if(_ParentStatusID_W == null)
	        	    {
						_ParentStatusID_W = TearOff.ParentStatusID;
					}
					return _ParentStatusID_W;
				}
			}

			public AggregateParameter StatusImg
		    {
				get
		        {
					if(_StatusImg_W == null)
	        	    {
						_StatusImg_W = TearOff.StatusImg;
					}
					return _StatusImg_W;
				}
			}

			private AggregateParameter _ApplicationStatusID_W = null;
			private AggregateParameter _Status_W = null;
			private AggregateParameter _StatusDescription_W = null;
			private AggregateParameter _SendMailRequired_W = null;
			private AggregateParameter _ParentStatusID_W = null;
			private AggregateParameter _StatusImg_W = null;

			public void AggregateClauseReset()
			{
				_ApplicationStatusID_W = null;
				_Status_W = null;
				_StatusDescription_W = null;
				_SendMailRequired_W = null;
				_ParentStatusID_W = null;
				_StatusImg_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationStatusInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ApplicationStatusID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationStatusUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationStatusDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ApplicationStatusID);
			p.SourceColumn = ColumnNames.ApplicationStatusID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ApplicationStatusID);
			p.SourceColumn = ColumnNames.ApplicationStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Status);
			p.SourceColumn = ColumnNames.Status;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusDescription);
			p.SourceColumn = ColumnNames.StatusDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SendMailRequired);
			p.SourceColumn = ColumnNames.SendMailRequired;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ParentStatusID);
			p.SourceColumn = ColumnNames.ParentStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusImg);
			p.SourceColumn = ColumnNames.StatusImg;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
