
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace EDU.DAL
{
	public abstract class _Student : SqlClientEntity
	{
		public _Student()
		{
			this.QuerySource = "Student";
			this.MappingName = "Student";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_StudentLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int StudentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.StudentID, StudentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_StudentLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter StudentID
			{
				get
				{
					return new SqlParameter("@StudentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FamilyName
			{
				get
				{
					return new SqlParameter("@FamilyName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MiddleName
			{
				get
				{
					return new SqlParameter("@MiddleName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DateOfBirth
			{
				get
				{
					return new SqlParameter("@DateOfBirth", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CityofBirth
			{
				get
				{
					return new SqlParameter("@CityofBirth", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CountryOfBirthID
			{
				get
				{
					return new SqlParameter("@CountryOfBirthID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GenderID
			{
				get
				{
					return new SqlParameter("@GenderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CitizenShipID
			{
				get
				{
					return new SqlParameter("@CitizenShipID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CellPhoneNumber
			{
				get
				{
					return new SqlParameter("@CellPhoneNumber", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter UserPassword
			{
				get
				{
					return new SqlParameter("@UserPassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ApplicationStatusID
			{
				get
				{
					return new SqlParameter("@ApplicationStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StatusDate
			{
				get
				{
					return new SqlParameter("@StatusDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ActivationCode
			{
				get
				{
					return new SqlParameter("@ActivationCode", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string StudentID = "StudentID";
            public const string FamilyName = "FamilyName";
            public const string FirstName = "FirstName";
            public const string MiddleName = "MiddleName";
            public const string DateOfBirth = "DateOfBirth";
            public const string CityofBirth = "CityofBirth";
            public const string CountryOfBirthID = "CountryOfBirthID";
            public const string GenderID = "GenderID";
            public const string CitizenShipID = "CitizenShipID";
            public const string CellPhoneNumber = "CellPhoneNumber";
            public const string Email = "Email";
            public const string UserPassword = "UserPassword";
            public const string ApplicationStatusID = "ApplicationStatusID";
            public const string StatusDate = "StatusDate";
            public const string IsActive = "IsActive";
            public const string ActivationCode = "ActivationCode";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[StudentID] = _Student.PropertyNames.StudentID;
					ht[FamilyName] = _Student.PropertyNames.FamilyName;
					ht[FirstName] = _Student.PropertyNames.FirstName;
					ht[MiddleName] = _Student.PropertyNames.MiddleName;
					ht[DateOfBirth] = _Student.PropertyNames.DateOfBirth;
					ht[CityofBirth] = _Student.PropertyNames.CityofBirth;
					ht[CountryOfBirthID] = _Student.PropertyNames.CountryOfBirthID;
					ht[GenderID] = _Student.PropertyNames.GenderID;
					ht[CitizenShipID] = _Student.PropertyNames.CitizenShipID;
					ht[CellPhoneNumber] = _Student.PropertyNames.CellPhoneNumber;
					ht[Email] = _Student.PropertyNames.Email;
					ht[UserPassword] = _Student.PropertyNames.UserPassword;
					ht[ApplicationStatusID] = _Student.PropertyNames.ApplicationStatusID;
					ht[StatusDate] = _Student.PropertyNames.StatusDate;
					ht[IsActive] = _Student.PropertyNames.IsActive;
					ht[ActivationCode] = _Student.PropertyNames.ActivationCode;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string StudentID = "StudentID";
            public const string FamilyName = "FamilyName";
            public const string FirstName = "FirstName";
            public const string MiddleName = "MiddleName";
            public const string DateOfBirth = "DateOfBirth";
            public const string CityofBirth = "CityofBirth";
            public const string CountryOfBirthID = "CountryOfBirthID";
            public const string GenderID = "GenderID";
            public const string CitizenShipID = "CitizenShipID";
            public const string CellPhoneNumber = "CellPhoneNumber";
            public const string Email = "Email";
            public const string UserPassword = "UserPassword";
            public const string ApplicationStatusID = "ApplicationStatusID";
            public const string StatusDate = "StatusDate";
            public const string IsActive = "IsActive";
            public const string ActivationCode = "ActivationCode";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[StudentID] = _Student.ColumnNames.StudentID;
					ht[FamilyName] = _Student.ColumnNames.FamilyName;
					ht[FirstName] = _Student.ColumnNames.FirstName;
					ht[MiddleName] = _Student.ColumnNames.MiddleName;
					ht[DateOfBirth] = _Student.ColumnNames.DateOfBirth;
					ht[CityofBirth] = _Student.ColumnNames.CityofBirth;
					ht[CountryOfBirthID] = _Student.ColumnNames.CountryOfBirthID;
					ht[GenderID] = _Student.ColumnNames.GenderID;
					ht[CitizenShipID] = _Student.ColumnNames.CitizenShipID;
					ht[CellPhoneNumber] = _Student.ColumnNames.CellPhoneNumber;
					ht[Email] = _Student.ColumnNames.Email;
					ht[UserPassword] = _Student.ColumnNames.UserPassword;
					ht[ApplicationStatusID] = _Student.ColumnNames.ApplicationStatusID;
					ht[StatusDate] = _Student.ColumnNames.StatusDate;
					ht[IsActive] = _Student.ColumnNames.IsActive;
					ht[ActivationCode] = _Student.ColumnNames.ActivationCode;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string StudentID = "s_StudentID";
            public const string FamilyName = "s_FamilyName";
            public const string FirstName = "s_FirstName";
            public const string MiddleName = "s_MiddleName";
            public const string DateOfBirth = "s_DateOfBirth";
            public const string CityofBirth = "s_CityofBirth";
            public const string CountryOfBirthID = "s_CountryOfBirthID";
            public const string GenderID = "s_GenderID";
            public const string CitizenShipID = "s_CitizenShipID";
            public const string CellPhoneNumber = "s_CellPhoneNumber";
            public const string Email = "s_Email";
            public const string UserPassword = "s_UserPassword";
            public const string ApplicationStatusID = "s_ApplicationStatusID";
            public const string StatusDate = "s_StatusDate";
            public const string IsActive = "s_IsActive";
            public const string ActivationCode = "s_ActivationCode";

		}
		#endregion		
		
		#region Properties
	
		public virtual int StudentID
	    {
			get
	        {
				return base.Getint(ColumnNames.StudentID);
			}
			set
	        {
				base.Setint(ColumnNames.StudentID, value);
			}
		}

		public virtual string FamilyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FamilyName);
			}
			set
	        {
				base.Setstring(ColumnNames.FamilyName, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string MiddleName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MiddleName);
			}
			set
	        {
				base.Setstring(ColumnNames.MiddleName, value);
			}
		}

		public virtual DateTime DateOfBirth
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfBirth);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual string CityofBirth
	    {
			get
	        {
				return base.Getstring(ColumnNames.CityofBirth);
			}
			set
	        {
				base.Setstring(ColumnNames.CityofBirth, value);
			}
		}

		public virtual int CountryOfBirthID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryOfBirthID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryOfBirthID, value);
			}
		}

		public virtual int GenderID
	    {
			get
	        {
				return base.Getint(ColumnNames.GenderID);
			}
			set
	        {
				base.Setint(ColumnNames.GenderID, value);
			}
		}

		public virtual int CitizenShipID
	    {
			get
	        {
				return base.Getint(ColumnNames.CitizenShipID);
			}
			set
	        {
				base.Setint(ColumnNames.CitizenShipID, value);
			}
		}

		public virtual string CellPhoneNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.CellPhoneNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.CellPhoneNumber, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string UserPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.UserPassword, value);
			}
		}

		public virtual int ApplicationStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ApplicationStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ApplicationStatusID, value);
			}
		}

		public virtual DateTime StatusDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StatusDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StatusDate, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual Guid ActivationCode
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ActivationCode);
			}
			set
	        {
				base.SetGuid(ColumnNames.ActivationCode, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_StudentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StudentID) ? string.Empty : base.GetintAsString(ColumnNames.StudentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StudentID);
				else
					this.StudentID = base.SetintAsString(ColumnNames.StudentID, value);
			}
		}

		public virtual string s_FamilyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FamilyName) ? string.Empty : base.GetstringAsString(ColumnNames.FamilyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FamilyName);
				else
					this.FamilyName = base.SetstringAsString(ColumnNames.FamilyName, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_MiddleName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleName) ? string.Empty : base.GetstringAsString(ColumnNames.MiddleName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleName);
				else
					this.MiddleName = base.SetstringAsString(ColumnNames.MiddleName, value);
			}
		}

		public virtual string s_DateOfBirth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfBirth) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfBirth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfBirth);
				else
					this.DateOfBirth = base.SetDateTimeAsString(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual string s_CityofBirth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityofBirth) ? string.Empty : base.GetstringAsString(ColumnNames.CityofBirth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityofBirth);
				else
					this.CityofBirth = base.SetstringAsString(ColumnNames.CityofBirth, value);
			}
		}

		public virtual string s_CountryOfBirthID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryOfBirthID) ? string.Empty : base.GetintAsString(ColumnNames.CountryOfBirthID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryOfBirthID);
				else
					this.CountryOfBirthID = base.SetintAsString(ColumnNames.CountryOfBirthID, value);
			}
		}

		public virtual string s_GenderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenderID) ? string.Empty : base.GetintAsString(ColumnNames.GenderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenderID);
				else
					this.GenderID = base.SetintAsString(ColumnNames.GenderID, value);
			}
		}

		public virtual string s_CitizenShipID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CitizenShipID) ? string.Empty : base.GetintAsString(ColumnNames.CitizenShipID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CitizenShipID);
				else
					this.CitizenShipID = base.SetintAsString(ColumnNames.CitizenShipID, value);
			}
		}

		public virtual string s_CellPhoneNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CellPhoneNumber) ? string.Empty : base.GetstringAsString(ColumnNames.CellPhoneNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CellPhoneNumber);
				else
					this.CellPhoneNumber = base.SetstringAsString(ColumnNames.CellPhoneNumber, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_UserPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserPassword) ? string.Empty : base.GetstringAsString(ColumnNames.UserPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserPassword);
				else
					this.UserPassword = base.SetstringAsString(ColumnNames.UserPassword, value);
			}
		}

		public virtual string s_ApplicationStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApplicationStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ApplicationStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApplicationStatusID);
				else
					this.ApplicationStatusID = base.SetintAsString(ColumnNames.ApplicationStatusID, value);
			}
		}

		public virtual string s_StatusDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StatusDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusDate);
				else
					this.StatusDate = base.SetDateTimeAsString(ColumnNames.StatusDate, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_ActivationCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivationCode) ? string.Empty : base.GetGuidAsString(ColumnNames.ActivationCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivationCode);
				else
					this.ActivationCode = base.SetGuidAsString(ColumnNames.ActivationCode, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter StudentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StudentID, Parameters.StudentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FamilyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FamilyName, Parameters.FamilyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfBirth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityofBirth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityofBirth, Parameters.CityofBirth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryOfBirthID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryOfBirthID, Parameters.CountryOfBirthID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CitizenShipID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CitizenShipID, Parameters.CitizenShipID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CellPhoneNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CellPhoneNumber, Parameters.CellPhoneNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserPassword, Parameters.UserPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ApplicationStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApplicationStatusID, Parameters.ApplicationStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusDate, Parameters.StatusDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivationCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivationCode, Parameters.ActivationCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter StudentID
		    {
				get
		        {
					if(_StudentID_W == null)
	        	    {
						_StudentID_W = TearOff.StudentID;
					}
					return _StudentID_W;
				}
			}

			public WhereParameter FamilyName
		    {
				get
		        {
					if(_FamilyName_W == null)
	        	    {
						_FamilyName_W = TearOff.FamilyName;
					}
					return _FamilyName_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public WhereParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public WhereParameter CityofBirth
		    {
				get
		        {
					if(_CityofBirth_W == null)
	        	    {
						_CityofBirth_W = TearOff.CityofBirth;
					}
					return _CityofBirth_W;
				}
			}

			public WhereParameter CountryOfBirthID
		    {
				get
		        {
					if(_CountryOfBirthID_W == null)
	        	    {
						_CountryOfBirthID_W = TearOff.CountryOfBirthID;
					}
					return _CountryOfBirthID_W;
				}
			}

			public WhereParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public WhereParameter CitizenShipID
		    {
				get
		        {
					if(_CitizenShipID_W == null)
	        	    {
						_CitizenShipID_W = TearOff.CitizenShipID;
					}
					return _CitizenShipID_W;
				}
			}

			public WhereParameter CellPhoneNumber
		    {
				get
		        {
					if(_CellPhoneNumber_W == null)
	        	    {
						_CellPhoneNumber_W = TearOff.CellPhoneNumber;
					}
					return _CellPhoneNumber_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter UserPassword
		    {
				get
		        {
					if(_UserPassword_W == null)
	        	    {
						_UserPassword_W = TearOff.UserPassword;
					}
					return _UserPassword_W;
				}
			}

			public WhereParameter ApplicationStatusID
		    {
				get
		        {
					if(_ApplicationStatusID_W == null)
	        	    {
						_ApplicationStatusID_W = TearOff.ApplicationStatusID;
					}
					return _ApplicationStatusID_W;
				}
			}

			public WhereParameter StatusDate
		    {
				get
		        {
					if(_StatusDate_W == null)
	        	    {
						_StatusDate_W = TearOff.StatusDate;
					}
					return _StatusDate_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter ActivationCode
		    {
				get
		        {
					if(_ActivationCode_W == null)
	        	    {
						_ActivationCode_W = TearOff.ActivationCode;
					}
					return _ActivationCode_W;
				}
			}

			private WhereParameter _StudentID_W = null;
			private WhereParameter _FamilyName_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _MiddleName_W = null;
			private WhereParameter _DateOfBirth_W = null;
			private WhereParameter _CityofBirth_W = null;
			private WhereParameter _CountryOfBirthID_W = null;
			private WhereParameter _GenderID_W = null;
			private WhereParameter _CitizenShipID_W = null;
			private WhereParameter _CellPhoneNumber_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _UserPassword_W = null;
			private WhereParameter _ApplicationStatusID_W = null;
			private WhereParameter _StatusDate_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _ActivationCode_W = null;

			public void WhereClauseReset()
			{
				_StudentID_W = null;
				_FamilyName_W = null;
				_FirstName_W = null;
				_MiddleName_W = null;
				_DateOfBirth_W = null;
				_CityofBirth_W = null;
				_CountryOfBirthID_W = null;
				_GenderID_W = null;
				_CitizenShipID_W = null;
				_CellPhoneNumber_W = null;
				_Email_W = null;
				_UserPassword_W = null;
				_ApplicationStatusID_W = null;
				_StatusDate_W = null;
				_IsActive_W = null;
				_ActivationCode_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter StudentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StudentID, Parameters.StudentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FamilyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FamilyName, Parameters.FamilyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfBirth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityofBirth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityofBirth, Parameters.CityofBirth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryOfBirthID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryOfBirthID, Parameters.CountryOfBirthID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CitizenShipID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CitizenShipID, Parameters.CitizenShipID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CellPhoneNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CellPhoneNumber, Parameters.CellPhoneNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserPassword, Parameters.UserPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ApplicationStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApplicationStatusID, Parameters.ApplicationStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusDate, Parameters.StatusDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivationCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivationCode, Parameters.ActivationCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter StudentID
		    {
				get
		        {
					if(_StudentID_W == null)
	        	    {
						_StudentID_W = TearOff.StudentID;
					}
					return _StudentID_W;
				}
			}

			public AggregateParameter FamilyName
		    {
				get
		        {
					if(_FamilyName_W == null)
	        	    {
						_FamilyName_W = TearOff.FamilyName;
					}
					return _FamilyName_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public AggregateParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public AggregateParameter CityofBirth
		    {
				get
		        {
					if(_CityofBirth_W == null)
	        	    {
						_CityofBirth_W = TearOff.CityofBirth;
					}
					return _CityofBirth_W;
				}
			}

			public AggregateParameter CountryOfBirthID
		    {
				get
		        {
					if(_CountryOfBirthID_W == null)
	        	    {
						_CountryOfBirthID_W = TearOff.CountryOfBirthID;
					}
					return _CountryOfBirthID_W;
				}
			}

			public AggregateParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public AggregateParameter CitizenShipID
		    {
				get
		        {
					if(_CitizenShipID_W == null)
	        	    {
						_CitizenShipID_W = TearOff.CitizenShipID;
					}
					return _CitizenShipID_W;
				}
			}

			public AggregateParameter CellPhoneNumber
		    {
				get
		        {
					if(_CellPhoneNumber_W == null)
	        	    {
						_CellPhoneNumber_W = TearOff.CellPhoneNumber;
					}
					return _CellPhoneNumber_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter UserPassword
		    {
				get
		        {
					if(_UserPassword_W == null)
	        	    {
						_UserPassword_W = TearOff.UserPassword;
					}
					return _UserPassword_W;
				}
			}

			public AggregateParameter ApplicationStatusID
		    {
				get
		        {
					if(_ApplicationStatusID_W == null)
	        	    {
						_ApplicationStatusID_W = TearOff.ApplicationStatusID;
					}
					return _ApplicationStatusID_W;
				}
			}

			public AggregateParameter StatusDate
		    {
				get
		        {
					if(_StatusDate_W == null)
	        	    {
						_StatusDate_W = TearOff.StatusDate;
					}
					return _StatusDate_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter ActivationCode
		    {
				get
		        {
					if(_ActivationCode_W == null)
	        	    {
						_ActivationCode_W = TearOff.ActivationCode;
					}
					return _ActivationCode_W;
				}
			}

			private AggregateParameter _StudentID_W = null;
			private AggregateParameter _FamilyName_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _MiddleName_W = null;
			private AggregateParameter _DateOfBirth_W = null;
			private AggregateParameter _CityofBirth_W = null;
			private AggregateParameter _CountryOfBirthID_W = null;
			private AggregateParameter _GenderID_W = null;
			private AggregateParameter _CitizenShipID_W = null;
			private AggregateParameter _CellPhoneNumber_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _UserPassword_W = null;
			private AggregateParameter _ApplicationStatusID_W = null;
			private AggregateParameter _StatusDate_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _ActivationCode_W = null;

			public void AggregateClauseReset()
			{
				_StudentID_W = null;
				_FamilyName_W = null;
				_FirstName_W = null;
				_MiddleName_W = null;
				_DateOfBirth_W = null;
				_CityofBirth_W = null;
				_CountryOfBirthID_W = null;
				_GenderID_W = null;
				_CitizenShipID_W = null;
				_CellPhoneNumber_W = null;
				_Email_W = null;
				_UserPassword_W = null;
				_ApplicationStatusID_W = null;
				_StatusDate_W = null;
				_IsActive_W = null;
				_ActivationCode_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StudentInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.StudentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StudentUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StudentDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.StudentID);
			p.SourceColumn = ColumnNames.StudentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.StudentID);
			p.SourceColumn = ColumnNames.StudentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FamilyName);
			p.SourceColumn = ColumnNames.FamilyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleName);
			p.SourceColumn = ColumnNames.MiddleName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfBirth);
			p.SourceColumn = ColumnNames.DateOfBirth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityofBirth);
			p.SourceColumn = ColumnNames.CityofBirth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryOfBirthID);
			p.SourceColumn = ColumnNames.CountryOfBirthID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenderID);
			p.SourceColumn = ColumnNames.GenderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CitizenShipID);
			p.SourceColumn = ColumnNames.CitizenShipID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CellPhoneNumber);
			p.SourceColumn = ColumnNames.CellPhoneNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserPassword);
			p.SourceColumn = ColumnNames.UserPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ApplicationStatusID);
			p.SourceColumn = ColumnNames.ApplicationStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusDate);
			p.SourceColumn = ColumnNames.StatusDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivationCode);
			p.SourceColumn = ColumnNames.ActivationCode;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
