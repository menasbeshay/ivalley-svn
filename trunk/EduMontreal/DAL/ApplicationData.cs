
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace EDU.DAL
{
	public abstract class _ApplicationData : SqlClientEntity
	{
		public _ApplicationData()
		{
			this.QuerySource = "ApplicationData";
			this.MappingName = "ApplicationData";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ApplicationDataLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ApplicationDataID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ApplicationDataID, ApplicationDataID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ApplicationDataLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ApplicationDataID
			{
				get
				{
					return new SqlParameter("@ApplicationDataID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StudentID
			{
				get
				{
					return new SqlParameter("@StudentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SelectedCourseID
			{
				get
				{
					return new SqlParameter("@SelectedCourseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FamilyName
			{
				get
				{
					return new SqlParameter("@FamilyName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MiddleName
			{
				get
				{
					return new SqlParameter("@MiddleName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DateOfBirth
			{
				get
				{
					return new SqlParameter("@DateOfBirth", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CountryOfBirthID
			{
				get
				{
					return new SqlParameter("@CountryOfBirthID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Hieght
			{
				get
				{
					return new SqlParameter("@Hieght", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Weight
			{
				get
				{
					return new SqlParameter("@Weight", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter EyeColor
			{
				get
				{
					return new SqlParameter("@EyeColor", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter HairColor
			{
				get
				{
					return new SqlParameter("@HairColor", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter GenderID
			{
				get
				{
					return new SqlParameter("@GenderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CitizenShipID
			{
				get
				{
					return new SqlParameter("@CitizenShipID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PassportNo
			{
				get
				{
					return new SqlParameter("@PassportNo", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PassportExpiryDate
			{
				get
				{
					return new SqlParameter("@PassportExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CountryOfIssueID
			{
				get
				{
					return new SqlParameter("@CountryOfIssueID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RecentPhotoPath
			{
				get
				{
					return new SqlParameter("@RecentPhotoPath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FatherFamilyName
			{
				get
				{
					return new SqlParameter("@FatherFamilyName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FatherFirstName
			{
				get
				{
					return new SqlParameter("@FatherFirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FatherOccupation
			{
				get
				{
					return new SqlParameter("@FatherOccupation", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FatherHomePhone
			{
				get
				{
					return new SqlParameter("@FatherHomePhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FatherBusinessPhone
			{
				get
				{
					return new SqlParameter("@FatherBusinessPhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FatherCellPhone
			{
				get
				{
					return new SqlParameter("@FatherCellPhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MotherFamilyName
			{
				get
				{
					return new SqlParameter("@MotherFamilyName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MotherFirstName
			{
				get
				{
					return new SqlParameter("@MotherFirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MotherOccupation
			{
				get
				{
					return new SqlParameter("@MotherOccupation", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter StreetAddress
			{
				get
				{
					return new SqlParameter("@StreetAddress", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter City
			{
				get
				{
					return new SqlParameter("@City", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter TelephoneNumber
			{
				get
				{
					return new SqlParameter("@TelephoneNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FaxNumber
			{
				get
				{
					return new SqlParameter("@FaxNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CellPhone
			{
				get
				{
					return new SqlParameter("@CellPhone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ResidentAddress
			{
				get
				{
					return new SqlParameter("@ResidentAddress", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter MasterDegree
			{
				get
				{
					return new SqlParameter("@MasterDegree", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter University
			{
				get
				{
					return new SqlParameter("@University", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter DateOfGraduation
			{
				get
				{
					return new SqlParameter("@DateOfGraduation", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter BachelorDegree
			{
				get
				{
					return new SqlParameter("@BachelorDegree", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter BachelorUniversity
			{
				get
				{
					return new SqlParameter("@BachelorUniversity", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter BachelorGraduationDate
			{
				get
				{
					return new SqlParameter("@BachelorGraduationDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter HighScool
			{
				get
				{
					return new SqlParameter("@HighScool", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter DegreeSpecialization
			{
				get
				{
					return new SqlParameter("@DegreeSpecialization", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter KindOfDegree
			{
				get
				{
					return new SqlParameter("@KindOfDegree", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter College
			{
				get
				{
					return new SqlParameter("@College", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter DegreeDateOfGraduation
			{
				get
				{
					return new SqlParameter("@DegreeDateOfGraduation", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter HighSchoolCollege
			{
				get
				{
					return new SqlParameter("@HighSchoolCollege", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter HighSchoolGradDate
			{
				get
				{
					return new SqlParameter("@HighSchoolGradDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EnglishSpeak
			{
				get
				{
					return new SqlParameter("@EnglishSpeak", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter EnglishWritten
			{
				get
				{
					return new SqlParameter("@EnglishWritten", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter FrenchSpeak
			{
				get
				{
					return new SqlParameter("@FrenchSpeak", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter FrenshWritten
			{
				get
				{
					return new SqlParameter("@FrenshWritten", SqlDbType.SmallInt, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ApplicationDataID = "ApplicationDataID";
            public const string StudentID = "StudentID";
            public const string SelectedCourseID = "SelectedCourseID";
            public const string FamilyName = "FamilyName";
            public const string MiddleName = "MiddleName";
            public const string FirstName = "FirstName";
            public const string DateOfBirth = "DateOfBirth";
            public const string CountryOfBirthID = "CountryOfBirthID";
            public const string Hieght = "Hieght";
            public const string Weight = "Weight";
            public const string EyeColor = "EyeColor";
            public const string HairColor = "HairColor";
            public const string GenderID = "GenderID";
            public const string CitizenShipID = "CitizenShipID";
            public const string PassportNo = "PassportNo";
            public const string PassportExpiryDate = "PassportExpiryDate";
            public const string CountryOfIssueID = "CountryOfIssueID";
            public const string RecentPhotoPath = "RecentPhotoPath";
            public const string FatherFamilyName = "FatherFamilyName";
            public const string FatherFirstName = "FatherFirstName";
            public const string FatherOccupation = "FatherOccupation";
            public const string FatherHomePhone = "FatherHomePhone";
            public const string FatherBusinessPhone = "FatherBusinessPhone";
            public const string FatherCellPhone = "FatherCellPhone";
            public const string MotherFamilyName = "MotherFamilyName";
            public const string MotherFirstName = "MotherFirstName";
            public const string MotherOccupation = "MotherOccupation";
            public const string StreetAddress = "StreetAddress";
            public const string CountryID = "CountryID";
            public const string City = "City";
            public const string TelephoneNumber = "TelephoneNumber";
            public const string Email = "Email";
            public const string FaxNumber = "FaxNumber";
            public const string CellPhone = "CellPhone";
            public const string ResidentAddress = "ResidentAddress";
            public const string MasterDegree = "MasterDegree";
            public const string University = "University";
            public const string DateOfGraduation = "DateOfGraduation";
            public const string BachelorDegree = "BachelorDegree";
            public const string BachelorUniversity = "BachelorUniversity";
            public const string BachelorGraduationDate = "BachelorGraduationDate";
            public const string HighScool = "HighScool";
            public const string DegreeSpecialization = "DegreeSpecialization";
            public const string KindOfDegree = "KindOfDegree";
            public const string College = "College";
            public const string DegreeDateOfGraduation = "DegreeDateOfGraduation";
            public const string HighSchoolCollege = "HighSchoolCollege";
            public const string HighSchoolGradDate = "HighSchoolGradDate";
            public const string EnglishSpeak = "EnglishSpeak";
            public const string EnglishWritten = "EnglishWritten";
            public const string FrenchSpeak = "FrenchSpeak";
            public const string FrenshWritten = "FrenshWritten";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationDataID] = _ApplicationData.PropertyNames.ApplicationDataID;
					ht[StudentID] = _ApplicationData.PropertyNames.StudentID;
					ht[SelectedCourseID] = _ApplicationData.PropertyNames.SelectedCourseID;
					ht[FamilyName] = _ApplicationData.PropertyNames.FamilyName;
					ht[MiddleName] = _ApplicationData.PropertyNames.MiddleName;
					ht[FirstName] = _ApplicationData.PropertyNames.FirstName;
					ht[DateOfBirth] = _ApplicationData.PropertyNames.DateOfBirth;
					ht[CountryOfBirthID] = _ApplicationData.PropertyNames.CountryOfBirthID;
					ht[Hieght] = _ApplicationData.PropertyNames.Hieght;
					ht[Weight] = _ApplicationData.PropertyNames.Weight;
					ht[EyeColor] = _ApplicationData.PropertyNames.EyeColor;
					ht[HairColor] = _ApplicationData.PropertyNames.HairColor;
					ht[GenderID] = _ApplicationData.PropertyNames.GenderID;
					ht[CitizenShipID] = _ApplicationData.PropertyNames.CitizenShipID;
					ht[PassportNo] = _ApplicationData.PropertyNames.PassportNo;
					ht[PassportExpiryDate] = _ApplicationData.PropertyNames.PassportExpiryDate;
					ht[CountryOfIssueID] = _ApplicationData.PropertyNames.CountryOfIssueID;
					ht[RecentPhotoPath] = _ApplicationData.PropertyNames.RecentPhotoPath;
					ht[FatherFamilyName] = _ApplicationData.PropertyNames.FatherFamilyName;
					ht[FatherFirstName] = _ApplicationData.PropertyNames.FatherFirstName;
					ht[FatherOccupation] = _ApplicationData.PropertyNames.FatherOccupation;
					ht[FatherHomePhone] = _ApplicationData.PropertyNames.FatherHomePhone;
					ht[FatherBusinessPhone] = _ApplicationData.PropertyNames.FatherBusinessPhone;
					ht[FatherCellPhone] = _ApplicationData.PropertyNames.FatherCellPhone;
					ht[MotherFamilyName] = _ApplicationData.PropertyNames.MotherFamilyName;
					ht[MotherFirstName] = _ApplicationData.PropertyNames.MotherFirstName;
					ht[MotherOccupation] = _ApplicationData.PropertyNames.MotherOccupation;
					ht[StreetAddress] = _ApplicationData.PropertyNames.StreetAddress;
					ht[CountryID] = _ApplicationData.PropertyNames.CountryID;
					ht[City] = _ApplicationData.PropertyNames.City;
					ht[TelephoneNumber] = _ApplicationData.PropertyNames.TelephoneNumber;
					ht[Email] = _ApplicationData.PropertyNames.Email;
					ht[FaxNumber] = _ApplicationData.PropertyNames.FaxNumber;
					ht[CellPhone] = _ApplicationData.PropertyNames.CellPhone;
					ht[ResidentAddress] = _ApplicationData.PropertyNames.ResidentAddress;
					ht[MasterDegree] = _ApplicationData.PropertyNames.MasterDegree;
					ht[University] = _ApplicationData.PropertyNames.University;
					ht[DateOfGraduation] = _ApplicationData.PropertyNames.DateOfGraduation;
					ht[BachelorDegree] = _ApplicationData.PropertyNames.BachelorDegree;
					ht[BachelorUniversity] = _ApplicationData.PropertyNames.BachelorUniversity;
					ht[BachelorGraduationDate] = _ApplicationData.PropertyNames.BachelorGraduationDate;
					ht[HighScool] = _ApplicationData.PropertyNames.HighScool;
					ht[DegreeSpecialization] = _ApplicationData.PropertyNames.DegreeSpecialization;
					ht[KindOfDegree] = _ApplicationData.PropertyNames.KindOfDegree;
					ht[College] = _ApplicationData.PropertyNames.College;
					ht[DegreeDateOfGraduation] = _ApplicationData.PropertyNames.DegreeDateOfGraduation;
					ht[HighSchoolCollege] = _ApplicationData.PropertyNames.HighSchoolCollege;
					ht[HighSchoolGradDate] = _ApplicationData.PropertyNames.HighSchoolGradDate;
					ht[EnglishSpeak] = _ApplicationData.PropertyNames.EnglishSpeak;
					ht[EnglishWritten] = _ApplicationData.PropertyNames.EnglishWritten;
					ht[FrenchSpeak] = _ApplicationData.PropertyNames.FrenchSpeak;
					ht[FrenshWritten] = _ApplicationData.PropertyNames.FrenshWritten;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ApplicationDataID = "ApplicationDataID";
            public const string StudentID = "StudentID";
            public const string SelectedCourseID = "SelectedCourseID";
            public const string FamilyName = "FamilyName";
            public const string MiddleName = "MiddleName";
            public const string FirstName = "FirstName";
            public const string DateOfBirth = "DateOfBirth";
            public const string CountryOfBirthID = "CountryOfBirthID";
            public const string Hieght = "Hieght";
            public const string Weight = "Weight";
            public const string EyeColor = "EyeColor";
            public const string HairColor = "HairColor";
            public const string GenderID = "GenderID";
            public const string CitizenShipID = "CitizenShipID";
            public const string PassportNo = "PassportNo";
            public const string PassportExpiryDate = "PassportExpiryDate";
            public const string CountryOfIssueID = "CountryOfIssueID";
            public const string RecentPhotoPath = "RecentPhotoPath";
            public const string FatherFamilyName = "FatherFamilyName";
            public const string FatherFirstName = "FatherFirstName";
            public const string FatherOccupation = "FatherOccupation";
            public const string FatherHomePhone = "FatherHomePhone";
            public const string FatherBusinessPhone = "FatherBusinessPhone";
            public const string FatherCellPhone = "FatherCellPhone";
            public const string MotherFamilyName = "MotherFamilyName";
            public const string MotherFirstName = "MotherFirstName";
            public const string MotherOccupation = "MotherOccupation";
            public const string StreetAddress = "StreetAddress";
            public const string CountryID = "CountryID";
            public const string City = "City";
            public const string TelephoneNumber = "TelephoneNumber";
            public const string Email = "Email";
            public const string FaxNumber = "FaxNumber";
            public const string CellPhone = "CellPhone";
            public const string ResidentAddress = "ResidentAddress";
            public const string MasterDegree = "MasterDegree";
            public const string University = "University";
            public const string DateOfGraduation = "DateOfGraduation";
            public const string BachelorDegree = "BachelorDegree";
            public const string BachelorUniversity = "BachelorUniversity";
            public const string BachelorGraduationDate = "BachelorGraduationDate";
            public const string HighScool = "HighScool";
            public const string DegreeSpecialization = "DegreeSpecialization";
            public const string KindOfDegree = "KindOfDegree";
            public const string College = "College";
            public const string DegreeDateOfGraduation = "DegreeDateOfGraduation";
            public const string HighSchoolCollege = "HighSchoolCollege";
            public const string HighSchoolGradDate = "HighSchoolGradDate";
            public const string EnglishSpeak = "EnglishSpeak";
            public const string EnglishWritten = "EnglishWritten";
            public const string FrenchSpeak = "FrenchSpeak";
            public const string FrenshWritten = "FrenshWritten";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ApplicationDataID] = _ApplicationData.ColumnNames.ApplicationDataID;
					ht[StudentID] = _ApplicationData.ColumnNames.StudentID;
					ht[SelectedCourseID] = _ApplicationData.ColumnNames.SelectedCourseID;
					ht[FamilyName] = _ApplicationData.ColumnNames.FamilyName;
					ht[MiddleName] = _ApplicationData.ColumnNames.MiddleName;
					ht[FirstName] = _ApplicationData.ColumnNames.FirstName;
					ht[DateOfBirth] = _ApplicationData.ColumnNames.DateOfBirth;
					ht[CountryOfBirthID] = _ApplicationData.ColumnNames.CountryOfBirthID;
					ht[Hieght] = _ApplicationData.ColumnNames.Hieght;
					ht[Weight] = _ApplicationData.ColumnNames.Weight;
					ht[EyeColor] = _ApplicationData.ColumnNames.EyeColor;
					ht[HairColor] = _ApplicationData.ColumnNames.HairColor;
					ht[GenderID] = _ApplicationData.ColumnNames.GenderID;
					ht[CitizenShipID] = _ApplicationData.ColumnNames.CitizenShipID;
					ht[PassportNo] = _ApplicationData.ColumnNames.PassportNo;
					ht[PassportExpiryDate] = _ApplicationData.ColumnNames.PassportExpiryDate;
					ht[CountryOfIssueID] = _ApplicationData.ColumnNames.CountryOfIssueID;
					ht[RecentPhotoPath] = _ApplicationData.ColumnNames.RecentPhotoPath;
					ht[FatherFamilyName] = _ApplicationData.ColumnNames.FatherFamilyName;
					ht[FatherFirstName] = _ApplicationData.ColumnNames.FatherFirstName;
					ht[FatherOccupation] = _ApplicationData.ColumnNames.FatherOccupation;
					ht[FatherHomePhone] = _ApplicationData.ColumnNames.FatherHomePhone;
					ht[FatherBusinessPhone] = _ApplicationData.ColumnNames.FatherBusinessPhone;
					ht[FatherCellPhone] = _ApplicationData.ColumnNames.FatherCellPhone;
					ht[MotherFamilyName] = _ApplicationData.ColumnNames.MotherFamilyName;
					ht[MotherFirstName] = _ApplicationData.ColumnNames.MotherFirstName;
					ht[MotherOccupation] = _ApplicationData.ColumnNames.MotherOccupation;
					ht[StreetAddress] = _ApplicationData.ColumnNames.StreetAddress;
					ht[CountryID] = _ApplicationData.ColumnNames.CountryID;
					ht[City] = _ApplicationData.ColumnNames.City;
					ht[TelephoneNumber] = _ApplicationData.ColumnNames.TelephoneNumber;
					ht[Email] = _ApplicationData.ColumnNames.Email;
					ht[FaxNumber] = _ApplicationData.ColumnNames.FaxNumber;
					ht[CellPhone] = _ApplicationData.ColumnNames.CellPhone;
					ht[ResidentAddress] = _ApplicationData.ColumnNames.ResidentAddress;
					ht[MasterDegree] = _ApplicationData.ColumnNames.MasterDegree;
					ht[University] = _ApplicationData.ColumnNames.University;
					ht[DateOfGraduation] = _ApplicationData.ColumnNames.DateOfGraduation;
					ht[BachelorDegree] = _ApplicationData.ColumnNames.BachelorDegree;
					ht[BachelorUniversity] = _ApplicationData.ColumnNames.BachelorUniversity;
					ht[BachelorGraduationDate] = _ApplicationData.ColumnNames.BachelorGraduationDate;
					ht[HighScool] = _ApplicationData.ColumnNames.HighScool;
					ht[DegreeSpecialization] = _ApplicationData.ColumnNames.DegreeSpecialization;
					ht[KindOfDegree] = _ApplicationData.ColumnNames.KindOfDegree;
					ht[College] = _ApplicationData.ColumnNames.College;
					ht[DegreeDateOfGraduation] = _ApplicationData.ColumnNames.DegreeDateOfGraduation;
					ht[HighSchoolCollege] = _ApplicationData.ColumnNames.HighSchoolCollege;
					ht[HighSchoolGradDate] = _ApplicationData.ColumnNames.HighSchoolGradDate;
					ht[EnglishSpeak] = _ApplicationData.ColumnNames.EnglishSpeak;
					ht[EnglishWritten] = _ApplicationData.ColumnNames.EnglishWritten;
					ht[FrenchSpeak] = _ApplicationData.ColumnNames.FrenchSpeak;
					ht[FrenshWritten] = _ApplicationData.ColumnNames.FrenshWritten;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ApplicationDataID = "s_ApplicationDataID";
            public const string StudentID = "s_StudentID";
            public const string SelectedCourseID = "s_SelectedCourseID";
            public const string FamilyName = "s_FamilyName";
            public const string MiddleName = "s_MiddleName";
            public const string FirstName = "s_FirstName";
            public const string DateOfBirth = "s_DateOfBirth";
            public const string CountryOfBirthID = "s_CountryOfBirthID";
            public const string Hieght = "s_Hieght";
            public const string Weight = "s_Weight";
            public const string EyeColor = "s_EyeColor";
            public const string HairColor = "s_HairColor";
            public const string GenderID = "s_GenderID";
            public const string CitizenShipID = "s_CitizenShipID";
            public const string PassportNo = "s_PassportNo";
            public const string PassportExpiryDate = "s_PassportExpiryDate";
            public const string CountryOfIssueID = "s_CountryOfIssueID";
            public const string RecentPhotoPath = "s_RecentPhotoPath";
            public const string FatherFamilyName = "s_FatherFamilyName";
            public const string FatherFirstName = "s_FatherFirstName";
            public const string FatherOccupation = "s_FatherOccupation";
            public const string FatherHomePhone = "s_FatherHomePhone";
            public const string FatherBusinessPhone = "s_FatherBusinessPhone";
            public const string FatherCellPhone = "s_FatherCellPhone";
            public const string MotherFamilyName = "s_MotherFamilyName";
            public const string MotherFirstName = "s_MotherFirstName";
            public const string MotherOccupation = "s_MotherOccupation";
            public const string StreetAddress = "s_StreetAddress";
            public const string CountryID = "s_CountryID";
            public const string City = "s_City";
            public const string TelephoneNumber = "s_TelephoneNumber";
            public const string Email = "s_Email";
            public const string FaxNumber = "s_FaxNumber";
            public const string CellPhone = "s_CellPhone";
            public const string ResidentAddress = "s_ResidentAddress";
            public const string MasterDegree = "s_MasterDegree";
            public const string University = "s_University";
            public const string DateOfGraduation = "s_DateOfGraduation";
            public const string BachelorDegree = "s_BachelorDegree";
            public const string BachelorUniversity = "s_BachelorUniversity";
            public const string BachelorGraduationDate = "s_BachelorGraduationDate";
            public const string HighScool = "s_HighScool";
            public const string DegreeSpecialization = "s_DegreeSpecialization";
            public const string KindOfDegree = "s_KindOfDegree";
            public const string College = "s_College";
            public const string DegreeDateOfGraduation = "s_DegreeDateOfGraduation";
            public const string HighSchoolCollege = "s_HighSchoolCollege";
            public const string HighSchoolGradDate = "s_HighSchoolGradDate";
            public const string EnglishSpeak = "s_EnglishSpeak";
            public const string EnglishWritten = "s_EnglishWritten";
            public const string FrenchSpeak = "s_FrenchSpeak";
            public const string FrenshWritten = "s_FrenshWritten";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ApplicationDataID
	    {
			get
	        {
				return base.Getint(ColumnNames.ApplicationDataID);
			}
			set
	        {
				base.Setint(ColumnNames.ApplicationDataID, value);
			}
		}

		public virtual int StudentID
	    {
			get
	        {
				return base.Getint(ColumnNames.StudentID);
			}
			set
	        {
				base.Setint(ColumnNames.StudentID, value);
			}
		}

		public virtual int SelectedCourseID
	    {
			get
	        {
				return base.Getint(ColumnNames.SelectedCourseID);
			}
			set
	        {
				base.Setint(ColumnNames.SelectedCourseID, value);
			}
		}

		public virtual string FamilyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FamilyName);
			}
			set
	        {
				base.Setstring(ColumnNames.FamilyName, value);
			}
		}

		public virtual string MiddleName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MiddleName);
			}
			set
	        {
				base.Setstring(ColumnNames.MiddleName, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual DateTime DateOfBirth
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfBirth);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual int CountryOfBirthID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryOfBirthID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryOfBirthID, value);
			}
		}

		public virtual double Hieght
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Hieght);
			}
			set
	        {
				base.Setdouble(ColumnNames.Hieght, value);
			}
		}

		public virtual double Weight
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Weight);
			}
			set
	        {
				base.Setdouble(ColumnNames.Weight, value);
			}
		}

		public virtual string EyeColor
	    {
			get
	        {
				return base.Getstring(ColumnNames.EyeColor);
			}
			set
	        {
				base.Setstring(ColumnNames.EyeColor, value);
			}
		}

		public virtual string HairColor
	    {
			get
	        {
				return base.Getstring(ColumnNames.HairColor);
			}
			set
	        {
				base.Setstring(ColumnNames.HairColor, value);
			}
		}

		public virtual int GenderID
	    {
			get
	        {
				return base.Getint(ColumnNames.GenderID);
			}
			set
	        {
				base.Setint(ColumnNames.GenderID, value);
			}
		}

		public virtual int CitizenShipID
	    {
			get
	        {
				return base.Getint(ColumnNames.CitizenShipID);
			}
			set
	        {
				base.Setint(ColumnNames.CitizenShipID, value);
			}
		}

		public virtual string PassportNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.PassportNo);
			}
			set
	        {
				base.Setstring(ColumnNames.PassportNo, value);
			}
		}

		public virtual DateTime PassportExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PassportExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PassportExpiryDate, value);
			}
		}

		public virtual int CountryOfIssueID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryOfIssueID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryOfIssueID, value);
			}
		}

		public virtual string RecentPhotoPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.RecentPhotoPath);
			}
			set
	        {
				base.Setstring(ColumnNames.RecentPhotoPath, value);
			}
		}

		public virtual string FatherFamilyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherFamilyName);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherFamilyName, value);
			}
		}

		public virtual string FatherFirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherFirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherFirstName, value);
			}
		}

		public virtual string FatherOccupation
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherOccupation);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherOccupation, value);
			}
		}

		public virtual string FatherHomePhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherHomePhone);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherHomePhone, value);
			}
		}

		public virtual string FatherBusinessPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherBusinessPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherBusinessPhone, value);
			}
		}

		public virtual string FatherCellPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.FatherCellPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.FatherCellPhone, value);
			}
		}

		public virtual string MotherFamilyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherFamilyName);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherFamilyName, value);
			}
		}

		public virtual string MotherFirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherFirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherFirstName, value);
			}
		}

		public virtual string MotherOccupation
	    {
			get
	        {
				return base.Getstring(ColumnNames.MotherOccupation);
			}
			set
	        {
				base.Setstring(ColumnNames.MotherOccupation, value);
			}
		}

		public virtual string StreetAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.StreetAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.StreetAddress, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual string City
	    {
			get
	        {
				return base.Getstring(ColumnNames.City);
			}
			set
	        {
				base.Setstring(ColumnNames.City, value);
			}
		}

		public virtual string TelephoneNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.TelephoneNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.TelephoneNumber, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string FaxNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.FaxNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.FaxNumber, value);
			}
		}

		public virtual string CellPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.CellPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.CellPhone, value);
			}
		}

		public virtual string ResidentAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.ResidentAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.ResidentAddress, value);
			}
		}

		public virtual string MasterDegree
	    {
			get
	        {
				return base.Getstring(ColumnNames.MasterDegree);
			}
			set
	        {
				base.Setstring(ColumnNames.MasterDegree, value);
			}
		}

		public virtual string University
	    {
			get
	        {
				return base.Getstring(ColumnNames.University);
			}
			set
	        {
				base.Setstring(ColumnNames.University, value);
			}
		}

		public virtual DateTime DateOfGraduation
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateOfGraduation);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateOfGraduation, value);
			}
		}

		public virtual string BachelorDegree
	    {
			get
	        {
				return base.Getstring(ColumnNames.BachelorDegree);
			}
			set
	        {
				base.Setstring(ColumnNames.BachelorDegree, value);
			}
		}

		public virtual string BachelorUniversity
	    {
			get
	        {
				return base.Getstring(ColumnNames.BachelorUniversity);
			}
			set
	        {
				base.Setstring(ColumnNames.BachelorUniversity, value);
			}
		}

		public virtual DateTime BachelorGraduationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BachelorGraduationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BachelorGraduationDate, value);
			}
		}

		public virtual string HighScool
	    {
			get
	        {
				return base.Getstring(ColumnNames.HighScool);
			}
			set
	        {
				base.Setstring(ColumnNames.HighScool, value);
			}
		}

		public virtual string DegreeSpecialization
	    {
			get
	        {
				return base.Getstring(ColumnNames.DegreeSpecialization);
			}
			set
	        {
				base.Setstring(ColumnNames.DegreeSpecialization, value);
			}
		}

		public virtual string KindOfDegree
	    {
			get
	        {
				return base.Getstring(ColumnNames.KindOfDegree);
			}
			set
	        {
				base.Setstring(ColumnNames.KindOfDegree, value);
			}
		}

		public virtual string College
	    {
			get
	        {
				return base.Getstring(ColumnNames.College);
			}
			set
	        {
				base.Setstring(ColumnNames.College, value);
			}
		}

		public virtual DateTime DegreeDateOfGraduation
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DegreeDateOfGraduation);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DegreeDateOfGraduation, value);
			}
		}

		public virtual string HighSchoolCollege
	    {
			get
	        {
				return base.Getstring(ColumnNames.HighSchoolCollege);
			}
			set
	        {
				base.Setstring(ColumnNames.HighSchoolCollege, value);
			}
		}

		public virtual DateTime HighSchoolGradDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.HighSchoolGradDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.HighSchoolGradDate, value);
			}
		}

		public virtual short EnglishSpeak
	    {
			get
	        {
				return base.Getshort(ColumnNames.EnglishSpeak);
			}
			set
	        {
				base.Setshort(ColumnNames.EnglishSpeak, value);
			}
		}

		public virtual short EnglishWritten
	    {
			get
	        {
				return base.Getshort(ColumnNames.EnglishWritten);
			}
			set
	        {
				base.Setshort(ColumnNames.EnglishWritten, value);
			}
		}

		public virtual short FrenchSpeak
	    {
			get
	        {
				return base.Getshort(ColumnNames.FrenchSpeak);
			}
			set
	        {
				base.Setshort(ColumnNames.FrenchSpeak, value);
			}
		}

		public virtual short FrenshWritten
	    {
			get
	        {
				return base.Getshort(ColumnNames.FrenshWritten);
			}
			set
	        {
				base.Setshort(ColumnNames.FrenshWritten, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ApplicationDataID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ApplicationDataID) ? string.Empty : base.GetintAsString(ColumnNames.ApplicationDataID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ApplicationDataID);
				else
					this.ApplicationDataID = base.SetintAsString(ColumnNames.ApplicationDataID, value);
			}
		}

		public virtual string s_StudentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StudentID) ? string.Empty : base.GetintAsString(ColumnNames.StudentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StudentID);
				else
					this.StudentID = base.SetintAsString(ColumnNames.StudentID, value);
			}
		}

		public virtual string s_SelectedCourseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SelectedCourseID) ? string.Empty : base.GetintAsString(ColumnNames.SelectedCourseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SelectedCourseID);
				else
					this.SelectedCourseID = base.SetintAsString(ColumnNames.SelectedCourseID, value);
			}
		}

		public virtual string s_FamilyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FamilyName) ? string.Empty : base.GetstringAsString(ColumnNames.FamilyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FamilyName);
				else
					this.FamilyName = base.SetstringAsString(ColumnNames.FamilyName, value);
			}
		}

		public virtual string s_MiddleName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleName) ? string.Empty : base.GetstringAsString(ColumnNames.MiddleName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleName);
				else
					this.MiddleName = base.SetstringAsString(ColumnNames.MiddleName, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_DateOfBirth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfBirth) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfBirth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfBirth);
				else
					this.DateOfBirth = base.SetDateTimeAsString(ColumnNames.DateOfBirth, value);
			}
		}

		public virtual string s_CountryOfBirthID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryOfBirthID) ? string.Empty : base.GetintAsString(ColumnNames.CountryOfBirthID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryOfBirthID);
				else
					this.CountryOfBirthID = base.SetintAsString(ColumnNames.CountryOfBirthID, value);
			}
		}

		public virtual string s_Hieght
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Hieght) ? string.Empty : base.GetdoubleAsString(ColumnNames.Hieght);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Hieght);
				else
					this.Hieght = base.SetdoubleAsString(ColumnNames.Hieght, value);
			}
		}

		public virtual string s_Weight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Weight) ? string.Empty : base.GetdoubleAsString(ColumnNames.Weight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Weight);
				else
					this.Weight = base.SetdoubleAsString(ColumnNames.Weight, value);
			}
		}

		public virtual string s_EyeColor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EyeColor) ? string.Empty : base.GetstringAsString(ColumnNames.EyeColor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EyeColor);
				else
					this.EyeColor = base.SetstringAsString(ColumnNames.EyeColor, value);
			}
		}

		public virtual string s_HairColor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HairColor) ? string.Empty : base.GetstringAsString(ColumnNames.HairColor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HairColor);
				else
					this.HairColor = base.SetstringAsString(ColumnNames.HairColor, value);
			}
		}

		public virtual string s_GenderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenderID) ? string.Empty : base.GetintAsString(ColumnNames.GenderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenderID);
				else
					this.GenderID = base.SetintAsString(ColumnNames.GenderID, value);
			}
		}

		public virtual string s_CitizenShipID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CitizenShipID) ? string.Empty : base.GetintAsString(ColumnNames.CitizenShipID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CitizenShipID);
				else
					this.CitizenShipID = base.SetintAsString(ColumnNames.CitizenShipID, value);
			}
		}

		public virtual string s_PassportNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PassportNo) ? string.Empty : base.GetstringAsString(ColumnNames.PassportNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PassportNo);
				else
					this.PassportNo = base.SetstringAsString(ColumnNames.PassportNo, value);
			}
		}

		public virtual string s_PassportExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PassportExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PassportExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PassportExpiryDate);
				else
					this.PassportExpiryDate = base.SetDateTimeAsString(ColumnNames.PassportExpiryDate, value);
			}
		}

		public virtual string s_CountryOfIssueID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryOfIssueID) ? string.Empty : base.GetintAsString(ColumnNames.CountryOfIssueID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryOfIssueID);
				else
					this.CountryOfIssueID = base.SetintAsString(ColumnNames.CountryOfIssueID, value);
			}
		}

		public virtual string s_RecentPhotoPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RecentPhotoPath) ? string.Empty : base.GetstringAsString(ColumnNames.RecentPhotoPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RecentPhotoPath);
				else
					this.RecentPhotoPath = base.SetstringAsString(ColumnNames.RecentPhotoPath, value);
			}
		}

		public virtual string s_FatherFamilyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherFamilyName) ? string.Empty : base.GetstringAsString(ColumnNames.FatherFamilyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherFamilyName);
				else
					this.FatherFamilyName = base.SetstringAsString(ColumnNames.FatherFamilyName, value);
			}
		}

		public virtual string s_FatherFirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FatherFirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherFirstName);
				else
					this.FatherFirstName = base.SetstringAsString(ColumnNames.FatherFirstName, value);
			}
		}

		public virtual string s_FatherOccupation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherOccupation) ? string.Empty : base.GetstringAsString(ColumnNames.FatherOccupation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherOccupation);
				else
					this.FatherOccupation = base.SetstringAsString(ColumnNames.FatherOccupation, value);
			}
		}

		public virtual string s_FatherHomePhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherHomePhone) ? string.Empty : base.GetstringAsString(ColumnNames.FatherHomePhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherHomePhone);
				else
					this.FatherHomePhone = base.SetstringAsString(ColumnNames.FatherHomePhone, value);
			}
		}

		public virtual string s_FatherBusinessPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherBusinessPhone) ? string.Empty : base.GetstringAsString(ColumnNames.FatherBusinessPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherBusinessPhone);
				else
					this.FatherBusinessPhone = base.SetstringAsString(ColumnNames.FatherBusinessPhone, value);
			}
		}

		public virtual string s_FatherCellPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FatherCellPhone) ? string.Empty : base.GetstringAsString(ColumnNames.FatherCellPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FatherCellPhone);
				else
					this.FatherCellPhone = base.SetstringAsString(ColumnNames.FatherCellPhone, value);
			}
		}

		public virtual string s_MotherFamilyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherFamilyName) ? string.Empty : base.GetstringAsString(ColumnNames.MotherFamilyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherFamilyName);
				else
					this.MotherFamilyName = base.SetstringAsString(ColumnNames.MotherFamilyName, value);
			}
		}

		public virtual string s_MotherFirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.MotherFirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherFirstName);
				else
					this.MotherFirstName = base.SetstringAsString(ColumnNames.MotherFirstName, value);
			}
		}

		public virtual string s_MotherOccupation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MotherOccupation) ? string.Empty : base.GetstringAsString(ColumnNames.MotherOccupation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MotherOccupation);
				else
					this.MotherOccupation = base.SetstringAsString(ColumnNames.MotherOccupation, value);
			}
		}

		public virtual string s_StreetAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StreetAddress) ? string.Empty : base.GetstringAsString(ColumnNames.StreetAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StreetAddress);
				else
					this.StreetAddress = base.SetstringAsString(ColumnNames.StreetAddress, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.City) ? string.Empty : base.GetstringAsString(ColumnNames.City);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.City);
				else
					this.City = base.SetstringAsString(ColumnNames.City, value);
			}
		}

		public virtual string s_TelephoneNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TelephoneNumber) ? string.Empty : base.GetstringAsString(ColumnNames.TelephoneNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TelephoneNumber);
				else
					this.TelephoneNumber = base.SetstringAsString(ColumnNames.TelephoneNumber, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_FaxNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FaxNumber) ? string.Empty : base.GetstringAsString(ColumnNames.FaxNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FaxNumber);
				else
					this.FaxNumber = base.SetstringAsString(ColumnNames.FaxNumber, value);
			}
		}

		public virtual string s_CellPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CellPhone) ? string.Empty : base.GetstringAsString(ColumnNames.CellPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CellPhone);
				else
					this.CellPhone = base.SetstringAsString(ColumnNames.CellPhone, value);
			}
		}

		public virtual string s_ResidentAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ResidentAddress) ? string.Empty : base.GetstringAsString(ColumnNames.ResidentAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ResidentAddress);
				else
					this.ResidentAddress = base.SetstringAsString(ColumnNames.ResidentAddress, value);
			}
		}

		public virtual string s_MasterDegree
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MasterDegree) ? string.Empty : base.GetstringAsString(ColumnNames.MasterDegree);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MasterDegree);
				else
					this.MasterDegree = base.SetstringAsString(ColumnNames.MasterDegree, value);
			}
		}

		public virtual string s_University
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.University) ? string.Empty : base.GetstringAsString(ColumnNames.University);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.University);
				else
					this.University = base.SetstringAsString(ColumnNames.University, value);
			}
		}

		public virtual string s_DateOfGraduation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateOfGraduation) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateOfGraduation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateOfGraduation);
				else
					this.DateOfGraduation = base.SetDateTimeAsString(ColumnNames.DateOfGraduation, value);
			}
		}

		public virtual string s_BachelorDegree
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BachelorDegree) ? string.Empty : base.GetstringAsString(ColumnNames.BachelorDegree);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BachelorDegree);
				else
					this.BachelorDegree = base.SetstringAsString(ColumnNames.BachelorDegree, value);
			}
		}

		public virtual string s_BachelorUniversity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BachelorUniversity) ? string.Empty : base.GetstringAsString(ColumnNames.BachelorUniversity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BachelorUniversity);
				else
					this.BachelorUniversity = base.SetstringAsString(ColumnNames.BachelorUniversity, value);
			}
		}

		public virtual string s_BachelorGraduationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BachelorGraduationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BachelorGraduationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BachelorGraduationDate);
				else
					this.BachelorGraduationDate = base.SetDateTimeAsString(ColumnNames.BachelorGraduationDate, value);
			}
		}

		public virtual string s_HighScool
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighScool) ? string.Empty : base.GetstringAsString(ColumnNames.HighScool);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighScool);
				else
					this.HighScool = base.SetstringAsString(ColumnNames.HighScool, value);
			}
		}

		public virtual string s_DegreeSpecialization
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DegreeSpecialization) ? string.Empty : base.GetstringAsString(ColumnNames.DegreeSpecialization);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DegreeSpecialization);
				else
					this.DegreeSpecialization = base.SetstringAsString(ColumnNames.DegreeSpecialization, value);
			}
		}

		public virtual string s_KindOfDegree
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.KindOfDegree) ? string.Empty : base.GetstringAsString(ColumnNames.KindOfDegree);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.KindOfDegree);
				else
					this.KindOfDegree = base.SetstringAsString(ColumnNames.KindOfDegree, value);
			}
		}

		public virtual string s_College
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.College) ? string.Empty : base.GetstringAsString(ColumnNames.College);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.College);
				else
					this.College = base.SetstringAsString(ColumnNames.College, value);
			}
		}

		public virtual string s_DegreeDateOfGraduation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DegreeDateOfGraduation) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DegreeDateOfGraduation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DegreeDateOfGraduation);
				else
					this.DegreeDateOfGraduation = base.SetDateTimeAsString(ColumnNames.DegreeDateOfGraduation, value);
			}
		}

		public virtual string s_HighSchoolCollege
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolCollege) ? string.Empty : base.GetstringAsString(ColumnNames.HighSchoolCollege);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolCollege);
				else
					this.HighSchoolCollege = base.SetstringAsString(ColumnNames.HighSchoolCollege, value);
			}
		}

		public virtual string s_HighSchoolGradDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolGradDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.HighSchoolGradDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolGradDate);
				else
					this.HighSchoolGradDate = base.SetDateTimeAsString(ColumnNames.HighSchoolGradDate, value);
			}
		}

		public virtual string s_EnglishSpeak
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnglishSpeak) ? string.Empty : base.GetshortAsString(ColumnNames.EnglishSpeak);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnglishSpeak);
				else
					this.EnglishSpeak = base.SetshortAsString(ColumnNames.EnglishSpeak, value);
			}
		}

		public virtual string s_EnglishWritten
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnglishWritten) ? string.Empty : base.GetshortAsString(ColumnNames.EnglishWritten);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnglishWritten);
				else
					this.EnglishWritten = base.SetshortAsString(ColumnNames.EnglishWritten, value);
			}
		}

		public virtual string s_FrenchSpeak
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FrenchSpeak) ? string.Empty : base.GetshortAsString(ColumnNames.FrenchSpeak);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FrenchSpeak);
				else
					this.FrenchSpeak = base.SetshortAsString(ColumnNames.FrenchSpeak, value);
			}
		}

		public virtual string s_FrenshWritten
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FrenshWritten) ? string.Empty : base.GetshortAsString(ColumnNames.FrenshWritten);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FrenshWritten);
				else
					this.FrenshWritten = base.SetshortAsString(ColumnNames.FrenshWritten, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ApplicationDataID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ApplicationDataID, Parameters.ApplicationDataID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StudentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StudentID, Parameters.StudentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SelectedCourseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SelectedCourseID, Parameters.SelectedCourseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FamilyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FamilyName, Parameters.FamilyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfBirth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryOfBirthID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryOfBirthID, Parameters.CountryOfBirthID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Hieght
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Hieght, Parameters.Hieght);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Weight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Weight, Parameters.Weight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EyeColor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EyeColor, Parameters.EyeColor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HairColor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HairColor, Parameters.HairColor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CitizenShipID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CitizenShipID, Parameters.CitizenShipID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PassportNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PassportNo, Parameters.PassportNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PassportExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PassportExpiryDate, Parameters.PassportExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryOfIssueID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryOfIssueID, Parameters.CountryOfIssueID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RecentPhotoPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RecentPhotoPath, Parameters.RecentPhotoPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherFamilyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherFamilyName, Parameters.FatherFamilyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherFirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherFirstName, Parameters.FatherFirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherOccupation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherOccupation, Parameters.FatherOccupation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherHomePhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherHomePhone, Parameters.FatherHomePhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherBusinessPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherBusinessPhone, Parameters.FatherBusinessPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FatherCellPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FatherCellPhone, Parameters.FatherCellPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherFamilyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherFamilyName, Parameters.MotherFamilyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherFirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherFirstName, Parameters.MotherFirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MotherOccupation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MotherOccupation, Parameters.MotherOccupation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StreetAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TelephoneNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TelephoneNumber, Parameters.TelephoneNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FaxNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FaxNumber, Parameters.FaxNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CellPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CellPhone, Parameters.CellPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ResidentAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ResidentAddress, Parameters.ResidentAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MasterDegree
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MasterDegree, Parameters.MasterDegree);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter University
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.University, Parameters.University);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateOfGraduation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateOfGraduation, Parameters.DateOfGraduation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BachelorDegree
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BachelorDegree, Parameters.BachelorDegree);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BachelorUniversity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BachelorUniversity, Parameters.BachelorUniversity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BachelorGraduationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BachelorGraduationDate, Parameters.BachelorGraduationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighScool
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighScool, Parameters.HighScool);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DegreeSpecialization
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DegreeSpecialization, Parameters.DegreeSpecialization);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter KindOfDegree
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.KindOfDegree, Parameters.KindOfDegree);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter College
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.College, Parameters.College);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DegreeDateOfGraduation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DegreeDateOfGraduation, Parameters.DegreeDateOfGraduation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolCollege
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolCollege, Parameters.HighSchoolCollege);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolGradDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolGradDate, Parameters.HighSchoolGradDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnglishSpeak
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnglishSpeak, Parameters.EnglishSpeak);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnglishWritten
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnglishWritten, Parameters.EnglishWritten);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FrenchSpeak
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FrenchSpeak, Parameters.FrenchSpeak);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FrenshWritten
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FrenshWritten, Parameters.FrenshWritten);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ApplicationDataID
		    {
				get
		        {
					if(_ApplicationDataID_W == null)
	        	    {
						_ApplicationDataID_W = TearOff.ApplicationDataID;
					}
					return _ApplicationDataID_W;
				}
			}

			public WhereParameter StudentID
		    {
				get
		        {
					if(_StudentID_W == null)
	        	    {
						_StudentID_W = TearOff.StudentID;
					}
					return _StudentID_W;
				}
			}

			public WhereParameter SelectedCourseID
		    {
				get
		        {
					if(_SelectedCourseID_W == null)
	        	    {
						_SelectedCourseID_W = TearOff.SelectedCourseID;
					}
					return _SelectedCourseID_W;
				}
			}

			public WhereParameter FamilyName
		    {
				get
		        {
					if(_FamilyName_W == null)
	        	    {
						_FamilyName_W = TearOff.FamilyName;
					}
					return _FamilyName_W;
				}
			}

			public WhereParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public WhereParameter CountryOfBirthID
		    {
				get
		        {
					if(_CountryOfBirthID_W == null)
	        	    {
						_CountryOfBirthID_W = TearOff.CountryOfBirthID;
					}
					return _CountryOfBirthID_W;
				}
			}

			public WhereParameter Hieght
		    {
				get
		        {
					if(_Hieght_W == null)
	        	    {
						_Hieght_W = TearOff.Hieght;
					}
					return _Hieght_W;
				}
			}

			public WhereParameter Weight
		    {
				get
		        {
					if(_Weight_W == null)
	        	    {
						_Weight_W = TearOff.Weight;
					}
					return _Weight_W;
				}
			}

			public WhereParameter EyeColor
		    {
				get
		        {
					if(_EyeColor_W == null)
	        	    {
						_EyeColor_W = TearOff.EyeColor;
					}
					return _EyeColor_W;
				}
			}

			public WhereParameter HairColor
		    {
				get
		        {
					if(_HairColor_W == null)
	        	    {
						_HairColor_W = TearOff.HairColor;
					}
					return _HairColor_W;
				}
			}

			public WhereParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public WhereParameter CitizenShipID
		    {
				get
		        {
					if(_CitizenShipID_W == null)
	        	    {
						_CitizenShipID_W = TearOff.CitizenShipID;
					}
					return _CitizenShipID_W;
				}
			}

			public WhereParameter PassportNo
		    {
				get
		        {
					if(_PassportNo_W == null)
	        	    {
						_PassportNo_W = TearOff.PassportNo;
					}
					return _PassportNo_W;
				}
			}

			public WhereParameter PassportExpiryDate
		    {
				get
		        {
					if(_PassportExpiryDate_W == null)
	        	    {
						_PassportExpiryDate_W = TearOff.PassportExpiryDate;
					}
					return _PassportExpiryDate_W;
				}
			}

			public WhereParameter CountryOfIssueID
		    {
				get
		        {
					if(_CountryOfIssueID_W == null)
	        	    {
						_CountryOfIssueID_W = TearOff.CountryOfIssueID;
					}
					return _CountryOfIssueID_W;
				}
			}

			public WhereParameter RecentPhotoPath
		    {
				get
		        {
					if(_RecentPhotoPath_W == null)
	        	    {
						_RecentPhotoPath_W = TearOff.RecentPhotoPath;
					}
					return _RecentPhotoPath_W;
				}
			}

			public WhereParameter FatherFamilyName
		    {
				get
		        {
					if(_FatherFamilyName_W == null)
	        	    {
						_FatherFamilyName_W = TearOff.FatherFamilyName;
					}
					return _FatherFamilyName_W;
				}
			}

			public WhereParameter FatherFirstName
		    {
				get
		        {
					if(_FatherFirstName_W == null)
	        	    {
						_FatherFirstName_W = TearOff.FatherFirstName;
					}
					return _FatherFirstName_W;
				}
			}

			public WhereParameter FatherOccupation
		    {
				get
		        {
					if(_FatherOccupation_W == null)
	        	    {
						_FatherOccupation_W = TearOff.FatherOccupation;
					}
					return _FatherOccupation_W;
				}
			}

			public WhereParameter FatherHomePhone
		    {
				get
		        {
					if(_FatherHomePhone_W == null)
	        	    {
						_FatherHomePhone_W = TearOff.FatherHomePhone;
					}
					return _FatherHomePhone_W;
				}
			}

			public WhereParameter FatherBusinessPhone
		    {
				get
		        {
					if(_FatherBusinessPhone_W == null)
	        	    {
						_FatherBusinessPhone_W = TearOff.FatherBusinessPhone;
					}
					return _FatherBusinessPhone_W;
				}
			}

			public WhereParameter FatherCellPhone
		    {
				get
		        {
					if(_FatherCellPhone_W == null)
	        	    {
						_FatherCellPhone_W = TearOff.FatherCellPhone;
					}
					return _FatherCellPhone_W;
				}
			}

			public WhereParameter MotherFamilyName
		    {
				get
		        {
					if(_MotherFamilyName_W == null)
	        	    {
						_MotherFamilyName_W = TearOff.MotherFamilyName;
					}
					return _MotherFamilyName_W;
				}
			}

			public WhereParameter MotherFirstName
		    {
				get
		        {
					if(_MotherFirstName_W == null)
	        	    {
						_MotherFirstName_W = TearOff.MotherFirstName;
					}
					return _MotherFirstName_W;
				}
			}

			public WhereParameter MotherOccupation
		    {
				get
		        {
					if(_MotherOccupation_W == null)
	        	    {
						_MotherOccupation_W = TearOff.MotherOccupation;
					}
					return _MotherOccupation_W;
				}
			}

			public WhereParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter TelephoneNumber
		    {
				get
		        {
					if(_TelephoneNumber_W == null)
	        	    {
						_TelephoneNumber_W = TearOff.TelephoneNumber;
					}
					return _TelephoneNumber_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter FaxNumber
		    {
				get
		        {
					if(_FaxNumber_W == null)
	        	    {
						_FaxNumber_W = TearOff.FaxNumber;
					}
					return _FaxNumber_W;
				}
			}

			public WhereParameter CellPhone
		    {
				get
		        {
					if(_CellPhone_W == null)
	        	    {
						_CellPhone_W = TearOff.CellPhone;
					}
					return _CellPhone_W;
				}
			}

			public WhereParameter ResidentAddress
		    {
				get
		        {
					if(_ResidentAddress_W == null)
	        	    {
						_ResidentAddress_W = TearOff.ResidentAddress;
					}
					return _ResidentAddress_W;
				}
			}

			public WhereParameter MasterDegree
		    {
				get
		        {
					if(_MasterDegree_W == null)
	        	    {
						_MasterDegree_W = TearOff.MasterDegree;
					}
					return _MasterDegree_W;
				}
			}

			public WhereParameter University
		    {
				get
		        {
					if(_University_W == null)
	        	    {
						_University_W = TearOff.University;
					}
					return _University_W;
				}
			}

			public WhereParameter DateOfGraduation
		    {
				get
		        {
					if(_DateOfGraduation_W == null)
	        	    {
						_DateOfGraduation_W = TearOff.DateOfGraduation;
					}
					return _DateOfGraduation_W;
				}
			}

			public WhereParameter BachelorDegree
		    {
				get
		        {
					if(_BachelorDegree_W == null)
	        	    {
						_BachelorDegree_W = TearOff.BachelorDegree;
					}
					return _BachelorDegree_W;
				}
			}

			public WhereParameter BachelorUniversity
		    {
				get
		        {
					if(_BachelorUniversity_W == null)
	        	    {
						_BachelorUniversity_W = TearOff.BachelorUniversity;
					}
					return _BachelorUniversity_W;
				}
			}

			public WhereParameter BachelorGraduationDate
		    {
				get
		        {
					if(_BachelorGraduationDate_W == null)
	        	    {
						_BachelorGraduationDate_W = TearOff.BachelorGraduationDate;
					}
					return _BachelorGraduationDate_W;
				}
			}

			public WhereParameter HighScool
		    {
				get
		        {
					if(_HighScool_W == null)
	        	    {
						_HighScool_W = TearOff.HighScool;
					}
					return _HighScool_W;
				}
			}

			public WhereParameter DegreeSpecialization
		    {
				get
		        {
					if(_DegreeSpecialization_W == null)
	        	    {
						_DegreeSpecialization_W = TearOff.DegreeSpecialization;
					}
					return _DegreeSpecialization_W;
				}
			}

			public WhereParameter KindOfDegree
		    {
				get
		        {
					if(_KindOfDegree_W == null)
	        	    {
						_KindOfDegree_W = TearOff.KindOfDegree;
					}
					return _KindOfDegree_W;
				}
			}

			public WhereParameter College
		    {
				get
		        {
					if(_College_W == null)
	        	    {
						_College_W = TearOff.College;
					}
					return _College_W;
				}
			}

			public WhereParameter DegreeDateOfGraduation
		    {
				get
		        {
					if(_DegreeDateOfGraduation_W == null)
	        	    {
						_DegreeDateOfGraduation_W = TearOff.DegreeDateOfGraduation;
					}
					return _DegreeDateOfGraduation_W;
				}
			}

			public WhereParameter HighSchoolCollege
		    {
				get
		        {
					if(_HighSchoolCollege_W == null)
	        	    {
						_HighSchoolCollege_W = TearOff.HighSchoolCollege;
					}
					return _HighSchoolCollege_W;
				}
			}

			public WhereParameter HighSchoolGradDate
		    {
				get
		        {
					if(_HighSchoolGradDate_W == null)
	        	    {
						_HighSchoolGradDate_W = TearOff.HighSchoolGradDate;
					}
					return _HighSchoolGradDate_W;
				}
			}

			public WhereParameter EnglishSpeak
		    {
				get
		        {
					if(_EnglishSpeak_W == null)
	        	    {
						_EnglishSpeak_W = TearOff.EnglishSpeak;
					}
					return _EnglishSpeak_W;
				}
			}

			public WhereParameter EnglishWritten
		    {
				get
		        {
					if(_EnglishWritten_W == null)
	        	    {
						_EnglishWritten_W = TearOff.EnglishWritten;
					}
					return _EnglishWritten_W;
				}
			}

			public WhereParameter FrenchSpeak
		    {
				get
		        {
					if(_FrenchSpeak_W == null)
	        	    {
						_FrenchSpeak_W = TearOff.FrenchSpeak;
					}
					return _FrenchSpeak_W;
				}
			}

			public WhereParameter FrenshWritten
		    {
				get
		        {
					if(_FrenshWritten_W == null)
	        	    {
						_FrenshWritten_W = TearOff.FrenshWritten;
					}
					return _FrenshWritten_W;
				}
			}

			private WhereParameter _ApplicationDataID_W = null;
			private WhereParameter _StudentID_W = null;
			private WhereParameter _SelectedCourseID_W = null;
			private WhereParameter _FamilyName_W = null;
			private WhereParameter _MiddleName_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _DateOfBirth_W = null;
			private WhereParameter _CountryOfBirthID_W = null;
			private WhereParameter _Hieght_W = null;
			private WhereParameter _Weight_W = null;
			private WhereParameter _EyeColor_W = null;
			private WhereParameter _HairColor_W = null;
			private WhereParameter _GenderID_W = null;
			private WhereParameter _CitizenShipID_W = null;
			private WhereParameter _PassportNo_W = null;
			private WhereParameter _PassportExpiryDate_W = null;
			private WhereParameter _CountryOfIssueID_W = null;
			private WhereParameter _RecentPhotoPath_W = null;
			private WhereParameter _FatherFamilyName_W = null;
			private WhereParameter _FatherFirstName_W = null;
			private WhereParameter _FatherOccupation_W = null;
			private WhereParameter _FatherHomePhone_W = null;
			private WhereParameter _FatherBusinessPhone_W = null;
			private WhereParameter _FatherCellPhone_W = null;
			private WhereParameter _MotherFamilyName_W = null;
			private WhereParameter _MotherFirstName_W = null;
			private WhereParameter _MotherOccupation_W = null;
			private WhereParameter _StreetAddress_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _TelephoneNumber_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _FaxNumber_W = null;
			private WhereParameter _CellPhone_W = null;
			private WhereParameter _ResidentAddress_W = null;
			private WhereParameter _MasterDegree_W = null;
			private WhereParameter _University_W = null;
			private WhereParameter _DateOfGraduation_W = null;
			private WhereParameter _BachelorDegree_W = null;
			private WhereParameter _BachelorUniversity_W = null;
			private WhereParameter _BachelorGraduationDate_W = null;
			private WhereParameter _HighScool_W = null;
			private WhereParameter _DegreeSpecialization_W = null;
			private WhereParameter _KindOfDegree_W = null;
			private WhereParameter _College_W = null;
			private WhereParameter _DegreeDateOfGraduation_W = null;
			private WhereParameter _HighSchoolCollege_W = null;
			private WhereParameter _HighSchoolGradDate_W = null;
			private WhereParameter _EnglishSpeak_W = null;
			private WhereParameter _EnglishWritten_W = null;
			private WhereParameter _FrenchSpeak_W = null;
			private WhereParameter _FrenshWritten_W = null;

			public void WhereClauseReset()
			{
				_ApplicationDataID_W = null;
				_StudentID_W = null;
				_SelectedCourseID_W = null;
				_FamilyName_W = null;
				_MiddleName_W = null;
				_FirstName_W = null;
				_DateOfBirth_W = null;
				_CountryOfBirthID_W = null;
				_Hieght_W = null;
				_Weight_W = null;
				_EyeColor_W = null;
				_HairColor_W = null;
				_GenderID_W = null;
				_CitizenShipID_W = null;
				_PassportNo_W = null;
				_PassportExpiryDate_W = null;
				_CountryOfIssueID_W = null;
				_RecentPhotoPath_W = null;
				_FatherFamilyName_W = null;
				_FatherFirstName_W = null;
				_FatherOccupation_W = null;
				_FatherHomePhone_W = null;
				_FatherBusinessPhone_W = null;
				_FatherCellPhone_W = null;
				_MotherFamilyName_W = null;
				_MotherFirstName_W = null;
				_MotherOccupation_W = null;
				_StreetAddress_W = null;
				_CountryID_W = null;
				_City_W = null;
				_TelephoneNumber_W = null;
				_Email_W = null;
				_FaxNumber_W = null;
				_CellPhone_W = null;
				_ResidentAddress_W = null;
				_MasterDegree_W = null;
				_University_W = null;
				_DateOfGraduation_W = null;
				_BachelorDegree_W = null;
				_BachelorUniversity_W = null;
				_BachelorGraduationDate_W = null;
				_HighScool_W = null;
				_DegreeSpecialization_W = null;
				_KindOfDegree_W = null;
				_College_W = null;
				_DegreeDateOfGraduation_W = null;
				_HighSchoolCollege_W = null;
				_HighSchoolGradDate_W = null;
				_EnglishSpeak_W = null;
				_EnglishWritten_W = null;
				_FrenchSpeak_W = null;
				_FrenshWritten_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ApplicationDataID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ApplicationDataID, Parameters.ApplicationDataID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StudentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StudentID, Parameters.StudentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SelectedCourseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SelectedCourseID, Parameters.SelectedCourseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FamilyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FamilyName, Parameters.FamilyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfBirth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfBirth, Parameters.DateOfBirth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryOfBirthID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryOfBirthID, Parameters.CountryOfBirthID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Hieght
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Hieght, Parameters.Hieght);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Weight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Weight, Parameters.Weight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EyeColor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EyeColor, Parameters.EyeColor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HairColor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HairColor, Parameters.HairColor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenderID, Parameters.GenderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CitizenShipID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CitizenShipID, Parameters.CitizenShipID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PassportNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PassportNo, Parameters.PassportNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PassportExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PassportExpiryDate, Parameters.PassportExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryOfIssueID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryOfIssueID, Parameters.CountryOfIssueID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RecentPhotoPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RecentPhotoPath, Parameters.RecentPhotoPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherFamilyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherFamilyName, Parameters.FatherFamilyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherFirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherFirstName, Parameters.FatherFirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherOccupation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherOccupation, Parameters.FatherOccupation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherHomePhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherHomePhone, Parameters.FatherHomePhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherBusinessPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherBusinessPhone, Parameters.FatherBusinessPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FatherCellPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FatherCellPhone, Parameters.FatherCellPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherFamilyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherFamilyName, Parameters.MotherFamilyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherFirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherFirstName, Parameters.MotherFirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MotherOccupation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MotherOccupation, Parameters.MotherOccupation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StreetAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TelephoneNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TelephoneNumber, Parameters.TelephoneNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FaxNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FaxNumber, Parameters.FaxNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CellPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CellPhone, Parameters.CellPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ResidentAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ResidentAddress, Parameters.ResidentAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MasterDegree
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MasterDegree, Parameters.MasterDegree);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter University
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.University, Parameters.University);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateOfGraduation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateOfGraduation, Parameters.DateOfGraduation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BachelorDegree
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BachelorDegree, Parameters.BachelorDegree);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BachelorUniversity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BachelorUniversity, Parameters.BachelorUniversity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BachelorGraduationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BachelorGraduationDate, Parameters.BachelorGraduationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighScool
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighScool, Parameters.HighScool);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DegreeSpecialization
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DegreeSpecialization, Parameters.DegreeSpecialization);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter KindOfDegree
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.KindOfDegree, Parameters.KindOfDegree);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter College
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.College, Parameters.College);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DegreeDateOfGraduation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DegreeDateOfGraduation, Parameters.DegreeDateOfGraduation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolCollege
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolCollege, Parameters.HighSchoolCollege);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolGradDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolGradDate, Parameters.HighSchoolGradDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnglishSpeak
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnglishSpeak, Parameters.EnglishSpeak);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnglishWritten
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnglishWritten, Parameters.EnglishWritten);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FrenchSpeak
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FrenchSpeak, Parameters.FrenchSpeak);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FrenshWritten
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FrenshWritten, Parameters.FrenshWritten);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ApplicationDataID
		    {
				get
		        {
					if(_ApplicationDataID_W == null)
	        	    {
						_ApplicationDataID_W = TearOff.ApplicationDataID;
					}
					return _ApplicationDataID_W;
				}
			}

			public AggregateParameter StudentID
		    {
				get
		        {
					if(_StudentID_W == null)
	        	    {
						_StudentID_W = TearOff.StudentID;
					}
					return _StudentID_W;
				}
			}

			public AggregateParameter SelectedCourseID
		    {
				get
		        {
					if(_SelectedCourseID_W == null)
	        	    {
						_SelectedCourseID_W = TearOff.SelectedCourseID;
					}
					return _SelectedCourseID_W;
				}
			}

			public AggregateParameter FamilyName
		    {
				get
		        {
					if(_FamilyName_W == null)
	        	    {
						_FamilyName_W = TearOff.FamilyName;
					}
					return _FamilyName_W;
				}
			}

			public AggregateParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter DateOfBirth
		    {
				get
		        {
					if(_DateOfBirth_W == null)
	        	    {
						_DateOfBirth_W = TearOff.DateOfBirth;
					}
					return _DateOfBirth_W;
				}
			}

			public AggregateParameter CountryOfBirthID
		    {
				get
		        {
					if(_CountryOfBirthID_W == null)
	        	    {
						_CountryOfBirthID_W = TearOff.CountryOfBirthID;
					}
					return _CountryOfBirthID_W;
				}
			}

			public AggregateParameter Hieght
		    {
				get
		        {
					if(_Hieght_W == null)
	        	    {
						_Hieght_W = TearOff.Hieght;
					}
					return _Hieght_W;
				}
			}

			public AggregateParameter Weight
		    {
				get
		        {
					if(_Weight_W == null)
	        	    {
						_Weight_W = TearOff.Weight;
					}
					return _Weight_W;
				}
			}

			public AggregateParameter EyeColor
		    {
				get
		        {
					if(_EyeColor_W == null)
	        	    {
						_EyeColor_W = TearOff.EyeColor;
					}
					return _EyeColor_W;
				}
			}

			public AggregateParameter HairColor
		    {
				get
		        {
					if(_HairColor_W == null)
	        	    {
						_HairColor_W = TearOff.HairColor;
					}
					return _HairColor_W;
				}
			}

			public AggregateParameter GenderID
		    {
				get
		        {
					if(_GenderID_W == null)
	        	    {
						_GenderID_W = TearOff.GenderID;
					}
					return _GenderID_W;
				}
			}

			public AggregateParameter CitizenShipID
		    {
				get
		        {
					if(_CitizenShipID_W == null)
	        	    {
						_CitizenShipID_W = TearOff.CitizenShipID;
					}
					return _CitizenShipID_W;
				}
			}

			public AggregateParameter PassportNo
		    {
				get
		        {
					if(_PassportNo_W == null)
	        	    {
						_PassportNo_W = TearOff.PassportNo;
					}
					return _PassportNo_W;
				}
			}

			public AggregateParameter PassportExpiryDate
		    {
				get
		        {
					if(_PassportExpiryDate_W == null)
	        	    {
						_PassportExpiryDate_W = TearOff.PassportExpiryDate;
					}
					return _PassportExpiryDate_W;
				}
			}

			public AggregateParameter CountryOfIssueID
		    {
				get
		        {
					if(_CountryOfIssueID_W == null)
	        	    {
						_CountryOfIssueID_W = TearOff.CountryOfIssueID;
					}
					return _CountryOfIssueID_W;
				}
			}

			public AggregateParameter RecentPhotoPath
		    {
				get
		        {
					if(_RecentPhotoPath_W == null)
	        	    {
						_RecentPhotoPath_W = TearOff.RecentPhotoPath;
					}
					return _RecentPhotoPath_W;
				}
			}

			public AggregateParameter FatherFamilyName
		    {
				get
		        {
					if(_FatherFamilyName_W == null)
	        	    {
						_FatherFamilyName_W = TearOff.FatherFamilyName;
					}
					return _FatherFamilyName_W;
				}
			}

			public AggregateParameter FatherFirstName
		    {
				get
		        {
					if(_FatherFirstName_W == null)
	        	    {
						_FatherFirstName_W = TearOff.FatherFirstName;
					}
					return _FatherFirstName_W;
				}
			}

			public AggregateParameter FatherOccupation
		    {
				get
		        {
					if(_FatherOccupation_W == null)
	        	    {
						_FatherOccupation_W = TearOff.FatherOccupation;
					}
					return _FatherOccupation_W;
				}
			}

			public AggregateParameter FatherHomePhone
		    {
				get
		        {
					if(_FatherHomePhone_W == null)
	        	    {
						_FatherHomePhone_W = TearOff.FatherHomePhone;
					}
					return _FatherHomePhone_W;
				}
			}

			public AggregateParameter FatherBusinessPhone
		    {
				get
		        {
					if(_FatherBusinessPhone_W == null)
	        	    {
						_FatherBusinessPhone_W = TearOff.FatherBusinessPhone;
					}
					return _FatherBusinessPhone_W;
				}
			}

			public AggregateParameter FatherCellPhone
		    {
				get
		        {
					if(_FatherCellPhone_W == null)
	        	    {
						_FatherCellPhone_W = TearOff.FatherCellPhone;
					}
					return _FatherCellPhone_W;
				}
			}

			public AggregateParameter MotherFamilyName
		    {
				get
		        {
					if(_MotherFamilyName_W == null)
	        	    {
						_MotherFamilyName_W = TearOff.MotherFamilyName;
					}
					return _MotherFamilyName_W;
				}
			}

			public AggregateParameter MotherFirstName
		    {
				get
		        {
					if(_MotherFirstName_W == null)
	        	    {
						_MotherFirstName_W = TearOff.MotherFirstName;
					}
					return _MotherFirstName_W;
				}
			}

			public AggregateParameter MotherOccupation
		    {
				get
		        {
					if(_MotherOccupation_W == null)
	        	    {
						_MotherOccupation_W = TearOff.MotherOccupation;
					}
					return _MotherOccupation_W;
				}
			}

			public AggregateParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter TelephoneNumber
		    {
				get
		        {
					if(_TelephoneNumber_W == null)
	        	    {
						_TelephoneNumber_W = TearOff.TelephoneNumber;
					}
					return _TelephoneNumber_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter FaxNumber
		    {
				get
		        {
					if(_FaxNumber_W == null)
	        	    {
						_FaxNumber_W = TearOff.FaxNumber;
					}
					return _FaxNumber_W;
				}
			}

			public AggregateParameter CellPhone
		    {
				get
		        {
					if(_CellPhone_W == null)
	        	    {
						_CellPhone_W = TearOff.CellPhone;
					}
					return _CellPhone_W;
				}
			}

			public AggregateParameter ResidentAddress
		    {
				get
		        {
					if(_ResidentAddress_W == null)
	        	    {
						_ResidentAddress_W = TearOff.ResidentAddress;
					}
					return _ResidentAddress_W;
				}
			}

			public AggregateParameter MasterDegree
		    {
				get
		        {
					if(_MasterDegree_W == null)
	        	    {
						_MasterDegree_W = TearOff.MasterDegree;
					}
					return _MasterDegree_W;
				}
			}

			public AggregateParameter University
		    {
				get
		        {
					if(_University_W == null)
	        	    {
						_University_W = TearOff.University;
					}
					return _University_W;
				}
			}

			public AggregateParameter DateOfGraduation
		    {
				get
		        {
					if(_DateOfGraduation_W == null)
	        	    {
						_DateOfGraduation_W = TearOff.DateOfGraduation;
					}
					return _DateOfGraduation_W;
				}
			}

			public AggregateParameter BachelorDegree
		    {
				get
		        {
					if(_BachelorDegree_W == null)
	        	    {
						_BachelorDegree_W = TearOff.BachelorDegree;
					}
					return _BachelorDegree_W;
				}
			}

			public AggregateParameter BachelorUniversity
		    {
				get
		        {
					if(_BachelorUniversity_W == null)
	        	    {
						_BachelorUniversity_W = TearOff.BachelorUniversity;
					}
					return _BachelorUniversity_W;
				}
			}

			public AggregateParameter BachelorGraduationDate
		    {
				get
		        {
					if(_BachelorGraduationDate_W == null)
	        	    {
						_BachelorGraduationDate_W = TearOff.BachelorGraduationDate;
					}
					return _BachelorGraduationDate_W;
				}
			}

			public AggregateParameter HighScool
		    {
				get
		        {
					if(_HighScool_W == null)
	        	    {
						_HighScool_W = TearOff.HighScool;
					}
					return _HighScool_W;
				}
			}

			public AggregateParameter DegreeSpecialization
		    {
				get
		        {
					if(_DegreeSpecialization_W == null)
	        	    {
						_DegreeSpecialization_W = TearOff.DegreeSpecialization;
					}
					return _DegreeSpecialization_W;
				}
			}

			public AggregateParameter KindOfDegree
		    {
				get
		        {
					if(_KindOfDegree_W == null)
	        	    {
						_KindOfDegree_W = TearOff.KindOfDegree;
					}
					return _KindOfDegree_W;
				}
			}

			public AggregateParameter College
		    {
				get
		        {
					if(_College_W == null)
	        	    {
						_College_W = TearOff.College;
					}
					return _College_W;
				}
			}

			public AggregateParameter DegreeDateOfGraduation
		    {
				get
		        {
					if(_DegreeDateOfGraduation_W == null)
	        	    {
						_DegreeDateOfGraduation_W = TearOff.DegreeDateOfGraduation;
					}
					return _DegreeDateOfGraduation_W;
				}
			}

			public AggregateParameter HighSchoolCollege
		    {
				get
		        {
					if(_HighSchoolCollege_W == null)
	        	    {
						_HighSchoolCollege_W = TearOff.HighSchoolCollege;
					}
					return _HighSchoolCollege_W;
				}
			}

			public AggregateParameter HighSchoolGradDate
		    {
				get
		        {
					if(_HighSchoolGradDate_W == null)
	        	    {
						_HighSchoolGradDate_W = TearOff.HighSchoolGradDate;
					}
					return _HighSchoolGradDate_W;
				}
			}

			public AggregateParameter EnglishSpeak
		    {
				get
		        {
					if(_EnglishSpeak_W == null)
	        	    {
						_EnglishSpeak_W = TearOff.EnglishSpeak;
					}
					return _EnglishSpeak_W;
				}
			}

			public AggregateParameter EnglishWritten
		    {
				get
		        {
					if(_EnglishWritten_W == null)
	        	    {
						_EnglishWritten_W = TearOff.EnglishWritten;
					}
					return _EnglishWritten_W;
				}
			}

			public AggregateParameter FrenchSpeak
		    {
				get
		        {
					if(_FrenchSpeak_W == null)
	        	    {
						_FrenchSpeak_W = TearOff.FrenchSpeak;
					}
					return _FrenchSpeak_W;
				}
			}

			public AggregateParameter FrenshWritten
		    {
				get
		        {
					if(_FrenshWritten_W == null)
	        	    {
						_FrenshWritten_W = TearOff.FrenshWritten;
					}
					return _FrenshWritten_W;
				}
			}

			private AggregateParameter _ApplicationDataID_W = null;
			private AggregateParameter _StudentID_W = null;
			private AggregateParameter _SelectedCourseID_W = null;
			private AggregateParameter _FamilyName_W = null;
			private AggregateParameter _MiddleName_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _DateOfBirth_W = null;
			private AggregateParameter _CountryOfBirthID_W = null;
			private AggregateParameter _Hieght_W = null;
			private AggregateParameter _Weight_W = null;
			private AggregateParameter _EyeColor_W = null;
			private AggregateParameter _HairColor_W = null;
			private AggregateParameter _GenderID_W = null;
			private AggregateParameter _CitizenShipID_W = null;
			private AggregateParameter _PassportNo_W = null;
			private AggregateParameter _PassportExpiryDate_W = null;
			private AggregateParameter _CountryOfIssueID_W = null;
			private AggregateParameter _RecentPhotoPath_W = null;
			private AggregateParameter _FatherFamilyName_W = null;
			private AggregateParameter _FatherFirstName_W = null;
			private AggregateParameter _FatherOccupation_W = null;
			private AggregateParameter _FatherHomePhone_W = null;
			private AggregateParameter _FatherBusinessPhone_W = null;
			private AggregateParameter _FatherCellPhone_W = null;
			private AggregateParameter _MotherFamilyName_W = null;
			private AggregateParameter _MotherFirstName_W = null;
			private AggregateParameter _MotherOccupation_W = null;
			private AggregateParameter _StreetAddress_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _TelephoneNumber_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _FaxNumber_W = null;
			private AggregateParameter _CellPhone_W = null;
			private AggregateParameter _ResidentAddress_W = null;
			private AggregateParameter _MasterDegree_W = null;
			private AggregateParameter _University_W = null;
			private AggregateParameter _DateOfGraduation_W = null;
			private AggregateParameter _BachelorDegree_W = null;
			private AggregateParameter _BachelorUniversity_W = null;
			private AggregateParameter _BachelorGraduationDate_W = null;
			private AggregateParameter _HighScool_W = null;
			private AggregateParameter _DegreeSpecialization_W = null;
			private AggregateParameter _KindOfDegree_W = null;
			private AggregateParameter _College_W = null;
			private AggregateParameter _DegreeDateOfGraduation_W = null;
			private AggregateParameter _HighSchoolCollege_W = null;
			private AggregateParameter _HighSchoolGradDate_W = null;
			private AggregateParameter _EnglishSpeak_W = null;
			private AggregateParameter _EnglishWritten_W = null;
			private AggregateParameter _FrenchSpeak_W = null;
			private AggregateParameter _FrenshWritten_W = null;

			public void AggregateClauseReset()
			{
				_ApplicationDataID_W = null;
				_StudentID_W = null;
				_SelectedCourseID_W = null;
				_FamilyName_W = null;
				_MiddleName_W = null;
				_FirstName_W = null;
				_DateOfBirth_W = null;
				_CountryOfBirthID_W = null;
				_Hieght_W = null;
				_Weight_W = null;
				_EyeColor_W = null;
				_HairColor_W = null;
				_GenderID_W = null;
				_CitizenShipID_W = null;
				_PassportNo_W = null;
				_PassportExpiryDate_W = null;
				_CountryOfIssueID_W = null;
				_RecentPhotoPath_W = null;
				_FatherFamilyName_W = null;
				_FatherFirstName_W = null;
				_FatherOccupation_W = null;
				_FatherHomePhone_W = null;
				_FatherBusinessPhone_W = null;
				_FatherCellPhone_W = null;
				_MotherFamilyName_W = null;
				_MotherFirstName_W = null;
				_MotherOccupation_W = null;
				_StreetAddress_W = null;
				_CountryID_W = null;
				_City_W = null;
				_TelephoneNumber_W = null;
				_Email_W = null;
				_FaxNumber_W = null;
				_CellPhone_W = null;
				_ResidentAddress_W = null;
				_MasterDegree_W = null;
				_University_W = null;
				_DateOfGraduation_W = null;
				_BachelorDegree_W = null;
				_BachelorUniversity_W = null;
				_BachelorGraduationDate_W = null;
				_HighScool_W = null;
				_DegreeSpecialization_W = null;
				_KindOfDegree_W = null;
				_College_W = null;
				_DegreeDateOfGraduation_W = null;
				_HighSchoolCollege_W = null;
				_HighSchoolGradDate_W = null;
				_EnglishSpeak_W = null;
				_EnglishWritten_W = null;
				_FrenchSpeak_W = null;
				_FrenshWritten_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationDataInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ApplicationDataID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationDataUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ApplicationDataDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ApplicationDataID);
			p.SourceColumn = ColumnNames.ApplicationDataID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ApplicationDataID);
			p.SourceColumn = ColumnNames.ApplicationDataID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StudentID);
			p.SourceColumn = ColumnNames.StudentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SelectedCourseID);
			p.SourceColumn = ColumnNames.SelectedCourseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FamilyName);
			p.SourceColumn = ColumnNames.FamilyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleName);
			p.SourceColumn = ColumnNames.MiddleName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfBirth);
			p.SourceColumn = ColumnNames.DateOfBirth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryOfBirthID);
			p.SourceColumn = ColumnNames.CountryOfBirthID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Hieght);
			p.SourceColumn = ColumnNames.Hieght;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Weight);
			p.SourceColumn = ColumnNames.Weight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EyeColor);
			p.SourceColumn = ColumnNames.EyeColor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HairColor);
			p.SourceColumn = ColumnNames.HairColor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenderID);
			p.SourceColumn = ColumnNames.GenderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CitizenShipID);
			p.SourceColumn = ColumnNames.CitizenShipID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PassportNo);
			p.SourceColumn = ColumnNames.PassportNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PassportExpiryDate);
			p.SourceColumn = ColumnNames.PassportExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryOfIssueID);
			p.SourceColumn = ColumnNames.CountryOfIssueID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RecentPhotoPath);
			p.SourceColumn = ColumnNames.RecentPhotoPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherFamilyName);
			p.SourceColumn = ColumnNames.FatherFamilyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherFirstName);
			p.SourceColumn = ColumnNames.FatherFirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherOccupation);
			p.SourceColumn = ColumnNames.FatherOccupation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherHomePhone);
			p.SourceColumn = ColumnNames.FatherHomePhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherBusinessPhone);
			p.SourceColumn = ColumnNames.FatherBusinessPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FatherCellPhone);
			p.SourceColumn = ColumnNames.FatherCellPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherFamilyName);
			p.SourceColumn = ColumnNames.MotherFamilyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherFirstName);
			p.SourceColumn = ColumnNames.MotherFirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MotherOccupation);
			p.SourceColumn = ColumnNames.MotherOccupation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StreetAddress);
			p.SourceColumn = ColumnNames.StreetAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.City);
			p.SourceColumn = ColumnNames.City;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TelephoneNumber);
			p.SourceColumn = ColumnNames.TelephoneNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FaxNumber);
			p.SourceColumn = ColumnNames.FaxNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CellPhone);
			p.SourceColumn = ColumnNames.CellPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ResidentAddress);
			p.SourceColumn = ColumnNames.ResidentAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MasterDegree);
			p.SourceColumn = ColumnNames.MasterDegree;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.University);
			p.SourceColumn = ColumnNames.University;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateOfGraduation);
			p.SourceColumn = ColumnNames.DateOfGraduation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BachelorDegree);
			p.SourceColumn = ColumnNames.BachelorDegree;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BachelorUniversity);
			p.SourceColumn = ColumnNames.BachelorUniversity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BachelorGraduationDate);
			p.SourceColumn = ColumnNames.BachelorGraduationDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighScool);
			p.SourceColumn = ColumnNames.HighScool;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DegreeSpecialization);
			p.SourceColumn = ColumnNames.DegreeSpecialization;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.KindOfDegree);
			p.SourceColumn = ColumnNames.KindOfDegree;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.College);
			p.SourceColumn = ColumnNames.College;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DegreeDateOfGraduation);
			p.SourceColumn = ColumnNames.DegreeDateOfGraduation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolCollege);
			p.SourceColumn = ColumnNames.HighSchoolCollege;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolGradDate);
			p.SourceColumn = ColumnNames.HighSchoolGradDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnglishSpeak);
			p.SourceColumn = ColumnNames.EnglishSpeak;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnglishWritten);
			p.SourceColumn = ColumnNames.EnglishWritten;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FrenchSpeak);
			p.SourceColumn = ColumnNames.FrenchSpeak;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FrenshWritten);
			p.SourceColumn = ColumnNames.FrenshWritten;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
