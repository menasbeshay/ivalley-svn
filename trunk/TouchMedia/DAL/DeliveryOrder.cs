
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Your.Namespace
{
	public abstract class _DeliveryOrder : SqlClientEntity
	{
		public _DeliveryOrder()
		{
			this.QuerySource = "DeliveryOrder";
			this.MappingName = "DeliveryOrder";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeliveryOrderLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int DeliveryOrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.DeliveryOrderID, DeliveryOrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeliveryOrderLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter DeliveryOrderID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter KilometerCounterBefore
			{
				get
				{
					return new SqlParameter("@KilometerCounterBefore", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter KilometerCounterAfter
			{
				get
				{
					return new SqlParameter("@KilometerCounterAfter", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TotalPrice
			{
				get
				{
					return new SqlParameter("@TotalPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DeliveryOrderStatusID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter GeneralDeliveryCode
			{
				get
				{
					return new SqlParameter("@GeneralDeliveryCode", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string DeliveryOrderID = "DeliveryOrderID";
            public const string KilometerCounterBefore = "KilometerCounterBefore";
            public const string KilometerCounterAfter = "KilometerCounterAfter";
            public const string TotalPrice = "TotalPrice";
            public const string DeliveryOrderStatusID = "DeliveryOrderStatusID";
            public const string GeneralDeliveryCode = "GeneralDeliveryCode";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeliveryOrderID] = _DeliveryOrder.PropertyNames.DeliveryOrderID;
					ht[KilometerCounterBefore] = _DeliveryOrder.PropertyNames.KilometerCounterBefore;
					ht[KilometerCounterAfter] = _DeliveryOrder.PropertyNames.KilometerCounterAfter;
					ht[TotalPrice] = _DeliveryOrder.PropertyNames.TotalPrice;
					ht[DeliveryOrderStatusID] = _DeliveryOrder.PropertyNames.DeliveryOrderStatusID;
					ht[GeneralDeliveryCode] = _DeliveryOrder.PropertyNames.GeneralDeliveryCode;
					ht[CreatedBy] = _DeliveryOrder.PropertyNames.CreatedBy;
					ht[CreatedDate] = _DeliveryOrder.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _DeliveryOrder.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _DeliveryOrder.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string DeliveryOrderID = "DeliveryOrderID";
            public const string KilometerCounterBefore = "KilometerCounterBefore";
            public const string KilometerCounterAfter = "KilometerCounterAfter";
            public const string TotalPrice = "TotalPrice";
            public const string DeliveryOrderStatusID = "DeliveryOrderStatusID";
            public const string GeneralDeliveryCode = "GeneralDeliveryCode";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeliveryOrderID] = _DeliveryOrder.ColumnNames.DeliveryOrderID;
					ht[KilometerCounterBefore] = _DeliveryOrder.ColumnNames.KilometerCounterBefore;
					ht[KilometerCounterAfter] = _DeliveryOrder.ColumnNames.KilometerCounterAfter;
					ht[TotalPrice] = _DeliveryOrder.ColumnNames.TotalPrice;
					ht[DeliveryOrderStatusID] = _DeliveryOrder.ColumnNames.DeliveryOrderStatusID;
					ht[GeneralDeliveryCode] = _DeliveryOrder.ColumnNames.GeneralDeliveryCode;
					ht[CreatedBy] = _DeliveryOrder.ColumnNames.CreatedBy;
					ht[CreatedDate] = _DeliveryOrder.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _DeliveryOrder.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _DeliveryOrder.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string DeliveryOrderID = "s_DeliveryOrderID";
            public const string KilometerCounterBefore = "s_KilometerCounterBefore";
            public const string KilometerCounterAfter = "s_KilometerCounterAfter";
            public const string TotalPrice = "s_TotalPrice";
            public const string DeliveryOrderStatusID = "s_DeliveryOrderStatusID";
            public const string GeneralDeliveryCode = "s_GeneralDeliveryCode";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int DeliveryOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderID, value);
			}
		}

		public virtual decimal KilometerCounterBefore
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.KilometerCounterBefore);
			}
			set
	        {
				base.Setdecimal(ColumnNames.KilometerCounterBefore, value);
			}
		}

		public virtual decimal KilometerCounterAfter
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.KilometerCounterAfter);
			}
			set
	        {
				base.Setdecimal(ColumnNames.KilometerCounterAfter, value);
			}
		}

		public virtual double TotalPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalPrice, value);
			}
		}

		public virtual int DeliveryOrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderStatusID, value);
			}
		}

		public virtual string GeneralDeliveryCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.GeneralDeliveryCode);
			}
			set
	        {
				base.Setstring(ColumnNames.GeneralDeliveryCode, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_DeliveryOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderID);
				else
					this.DeliveryOrderID = base.SetintAsString(ColumnNames.DeliveryOrderID, value);
			}
		}

		public virtual string s_KilometerCounterBefore
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.KilometerCounterBefore) ? string.Empty : base.GetdecimalAsString(ColumnNames.KilometerCounterBefore);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.KilometerCounterBefore);
				else
					this.KilometerCounterBefore = base.SetdecimalAsString(ColumnNames.KilometerCounterBefore, value);
			}
		}

		public virtual string s_KilometerCounterAfter
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.KilometerCounterAfter) ? string.Empty : base.GetdecimalAsString(ColumnNames.KilometerCounterAfter);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.KilometerCounterAfter);
				else
					this.KilometerCounterAfter = base.SetdecimalAsString(ColumnNames.KilometerCounterAfter, value);
			}
		}

		public virtual string s_TotalPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalPrice);
				else
					this.TotalPrice = base.SetdoubleAsString(ColumnNames.TotalPrice, value);
			}
		}

		public virtual string s_DeliveryOrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderStatusID);
				else
					this.DeliveryOrderStatusID = base.SetintAsString(ColumnNames.DeliveryOrderStatusID, value);
			}
		}

		public virtual string s_GeneralDeliveryCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GeneralDeliveryCode) ? string.Empty : base.GetstringAsString(ColumnNames.GeneralDeliveryCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GeneralDeliveryCode);
				else
					this.GeneralDeliveryCode = base.SetstringAsString(ColumnNames.GeneralDeliveryCode, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter DeliveryOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderID, Parameters.DeliveryOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter KilometerCounterBefore
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.KilometerCounterBefore, Parameters.KilometerCounterBefore);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter KilometerCounterAfter
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.KilometerCounterAfter, Parameters.KilometerCounterAfter);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryOrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderStatusID, Parameters.DeliveryOrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GeneralDeliveryCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GeneralDeliveryCode, Parameters.GeneralDeliveryCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter DeliveryOrderID
		    {
				get
		        {
					if(_DeliveryOrderID_W == null)
	        	    {
						_DeliveryOrderID_W = TearOff.DeliveryOrderID;
					}
					return _DeliveryOrderID_W;
				}
			}

			public WhereParameter KilometerCounterBefore
		    {
				get
		        {
					if(_KilometerCounterBefore_W == null)
	        	    {
						_KilometerCounterBefore_W = TearOff.KilometerCounterBefore;
					}
					return _KilometerCounterBefore_W;
				}
			}

			public WhereParameter KilometerCounterAfter
		    {
				get
		        {
					if(_KilometerCounterAfter_W == null)
	        	    {
						_KilometerCounterAfter_W = TearOff.KilometerCounterAfter;
					}
					return _KilometerCounterAfter_W;
				}
			}

			public WhereParameter TotalPrice
		    {
				get
		        {
					if(_TotalPrice_W == null)
	        	    {
						_TotalPrice_W = TearOff.TotalPrice;
					}
					return _TotalPrice_W;
				}
			}

			public WhereParameter DeliveryOrderStatusID
		    {
				get
		        {
					if(_DeliveryOrderStatusID_W == null)
	        	    {
						_DeliveryOrderStatusID_W = TearOff.DeliveryOrderStatusID;
					}
					return _DeliveryOrderStatusID_W;
				}
			}

			public WhereParameter GeneralDeliveryCode
		    {
				get
		        {
					if(_GeneralDeliveryCode_W == null)
	        	    {
						_GeneralDeliveryCode_W = TearOff.GeneralDeliveryCode;
					}
					return _GeneralDeliveryCode_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _DeliveryOrderID_W = null;
			private WhereParameter _KilometerCounterBefore_W = null;
			private WhereParameter _KilometerCounterAfter_W = null;
			private WhereParameter _TotalPrice_W = null;
			private WhereParameter _DeliveryOrderStatusID_W = null;
			private WhereParameter _GeneralDeliveryCode_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_DeliveryOrderID_W = null;
				_KilometerCounterBefore_W = null;
				_KilometerCounterAfter_W = null;
				_TotalPrice_W = null;
				_DeliveryOrderStatusID_W = null;
				_GeneralDeliveryCode_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter DeliveryOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderID, Parameters.DeliveryOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter KilometerCounterBefore
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.KilometerCounterBefore, Parameters.KilometerCounterBefore);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter KilometerCounterAfter
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.KilometerCounterAfter, Parameters.KilometerCounterAfter);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryOrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderStatusID, Parameters.DeliveryOrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GeneralDeliveryCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GeneralDeliveryCode, Parameters.GeneralDeliveryCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter DeliveryOrderID
		    {
				get
		        {
					if(_DeliveryOrderID_W == null)
	        	    {
						_DeliveryOrderID_W = TearOff.DeliveryOrderID;
					}
					return _DeliveryOrderID_W;
				}
			}

			public AggregateParameter KilometerCounterBefore
		    {
				get
		        {
					if(_KilometerCounterBefore_W == null)
	        	    {
						_KilometerCounterBefore_W = TearOff.KilometerCounterBefore;
					}
					return _KilometerCounterBefore_W;
				}
			}

			public AggregateParameter KilometerCounterAfter
		    {
				get
		        {
					if(_KilometerCounterAfter_W == null)
	        	    {
						_KilometerCounterAfter_W = TearOff.KilometerCounterAfter;
					}
					return _KilometerCounterAfter_W;
				}
			}

			public AggregateParameter TotalPrice
		    {
				get
		        {
					if(_TotalPrice_W == null)
	        	    {
						_TotalPrice_W = TearOff.TotalPrice;
					}
					return _TotalPrice_W;
				}
			}

			public AggregateParameter DeliveryOrderStatusID
		    {
				get
		        {
					if(_DeliveryOrderStatusID_W == null)
	        	    {
						_DeliveryOrderStatusID_W = TearOff.DeliveryOrderStatusID;
					}
					return _DeliveryOrderStatusID_W;
				}
			}

			public AggregateParameter GeneralDeliveryCode
		    {
				get
		        {
					if(_GeneralDeliveryCode_W == null)
	        	    {
						_GeneralDeliveryCode_W = TearOff.GeneralDeliveryCode;
					}
					return _GeneralDeliveryCode_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _DeliveryOrderID_W = null;
			private AggregateParameter _KilometerCounterBefore_W = null;
			private AggregateParameter _KilometerCounterAfter_W = null;
			private AggregateParameter _TotalPrice_W = null;
			private AggregateParameter _DeliveryOrderStatusID_W = null;
			private AggregateParameter _GeneralDeliveryCode_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_DeliveryOrderID_W = null;
				_KilometerCounterBefore_W = null;
				_KilometerCounterAfter_W = null;
				_TotalPrice_W = null;
				_DeliveryOrderStatusID_W = null;
				_GeneralDeliveryCode_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.DeliveryOrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.DeliveryOrderID);
			p.SourceColumn = ColumnNames.DeliveryOrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.DeliveryOrderID);
			p.SourceColumn = ColumnNames.DeliveryOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.KilometerCounterBefore);
			p.SourceColumn = ColumnNames.KilometerCounterBefore;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.KilometerCounterAfter);
			p.SourceColumn = ColumnNames.KilometerCounterAfter;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalPrice);
			p.SourceColumn = ColumnNames.TotalPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryOrderStatusID);
			p.SourceColumn = ColumnNames.DeliveryOrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GeneralDeliveryCode);
			p.SourceColumn = ColumnNames.GeneralDeliveryCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
