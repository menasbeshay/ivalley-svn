
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace TouchMediaGUI
{
	public abstract class _InAndOutDoorDetails : SqlClientEntity
	{
		public _InAndOutDoorDetails()
		{
			this.QuerySource = "InAndOutDoorDetails";
			this.MappingName = "InAndOutDoorDetails";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InAndOutDoorDetailsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InAndOutDoorDetailsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InAndOutDoorDetailsID, InAndOutDoorDetailsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InAndOutDoorDetailsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InAndOutDoorDetailsID
			{
				get
				{
					return new SqlParameter("@InAndOutDoorDetailsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Item
			{
				get
				{
					return new SqlParameter("@Item", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter MaterialID
			{
				get
				{
					return new SqlParameter("@MaterialID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LaminationID
			{
				get
				{
					return new SqlParameter("@LaminationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ServiceID
			{
				get
				{
					return new SqlParameter("@ServiceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Picture
			{
				get
				{
					return new SqlParameter("@Picture", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter DeliveryDate
			{
				get
				{
					return new SqlParameter("@DeliveryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Width
			{
				get
				{
					return new SqlParameter("@Width", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Hight
			{
				get
				{
					return new SqlParameter("@Hight", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TotalSize
			{
				get
				{
					return new SqlParameter("@TotalSize", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter DeliveryTo
			{
				get
				{
					return new SqlParameter("@DeliveryTo", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter JobOrderStatusID
			{
				get
				{
					return new SqlParameter("@JobOrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderID
			{
				get
				{
					return new SqlParameter("@JobOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InAndOutDoorDetailsID = "InAndOutDoorDetailsID";
            public const string Item = "Item";
            public const string MaterialID = "MaterialID";
            public const string LaminationID = "LaminationID";
            public const string ServiceID = "ServiceID";
            public const string Picture = "Picture";
            public const string DeliveryDate = "DeliveryDate";
            public const string Width = "Width";
            public const string Hight = "Hight";
            public const string TotalSize = "TotalSize";
            public const string DeliveryTo = "DeliveryTo";
            public const string JobOrderStatusID = "JobOrderStatusID";
            public const string JobOrderID = "JobOrderID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InAndOutDoorDetailsID] = _InAndOutDoorDetails.PropertyNames.InAndOutDoorDetailsID;
					ht[Item] = _InAndOutDoorDetails.PropertyNames.Item;
					ht[MaterialID] = _InAndOutDoorDetails.PropertyNames.MaterialID;
					ht[LaminationID] = _InAndOutDoorDetails.PropertyNames.LaminationID;
					ht[ServiceID] = _InAndOutDoorDetails.PropertyNames.ServiceID;
					ht[Picture] = _InAndOutDoorDetails.PropertyNames.Picture;
					ht[DeliveryDate] = _InAndOutDoorDetails.PropertyNames.DeliveryDate;
					ht[Width] = _InAndOutDoorDetails.PropertyNames.Width;
					ht[Hight] = _InAndOutDoorDetails.PropertyNames.Hight;
					ht[TotalSize] = _InAndOutDoorDetails.PropertyNames.TotalSize;
					ht[DeliveryTo] = _InAndOutDoorDetails.PropertyNames.DeliveryTo;
					ht[JobOrderStatusID] = _InAndOutDoorDetails.PropertyNames.JobOrderStatusID;
					ht[JobOrderID] = _InAndOutDoorDetails.PropertyNames.JobOrderID;
					ht[CreatedBy] = _InAndOutDoorDetails.PropertyNames.CreatedBy;
					ht[CreatedDate] = _InAndOutDoorDetails.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _InAndOutDoorDetails.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _InAndOutDoorDetails.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InAndOutDoorDetailsID = "InAndOutDoorDetailsID";
            public const string Item = "Item";
            public const string MaterialID = "MaterialID";
            public const string LaminationID = "LaminationID";
            public const string ServiceID = "ServiceID";
            public const string Picture = "Picture";
            public const string DeliveryDate = "DeliveryDate";
            public const string Width = "Width";
            public const string Hight = "Hight";
            public const string TotalSize = "TotalSize";
            public const string DeliveryTo = "DeliveryTo";
            public const string JobOrderStatusID = "JobOrderStatusID";
            public const string JobOrderID = "JobOrderID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InAndOutDoorDetailsID] = _InAndOutDoorDetails.ColumnNames.InAndOutDoorDetailsID;
					ht[Item] = _InAndOutDoorDetails.ColumnNames.Item;
					ht[MaterialID] = _InAndOutDoorDetails.ColumnNames.MaterialID;
					ht[LaminationID] = _InAndOutDoorDetails.ColumnNames.LaminationID;
					ht[ServiceID] = _InAndOutDoorDetails.ColumnNames.ServiceID;
					ht[Picture] = _InAndOutDoorDetails.ColumnNames.Picture;
					ht[DeliveryDate] = _InAndOutDoorDetails.ColumnNames.DeliveryDate;
					ht[Width] = _InAndOutDoorDetails.ColumnNames.Width;
					ht[Hight] = _InAndOutDoorDetails.ColumnNames.Hight;
					ht[TotalSize] = _InAndOutDoorDetails.ColumnNames.TotalSize;
					ht[DeliveryTo] = _InAndOutDoorDetails.ColumnNames.DeliveryTo;
					ht[JobOrderStatusID] = _InAndOutDoorDetails.ColumnNames.JobOrderStatusID;
					ht[JobOrderID] = _InAndOutDoorDetails.ColumnNames.JobOrderID;
					ht[CreatedBy] = _InAndOutDoorDetails.ColumnNames.CreatedBy;
					ht[CreatedDate] = _InAndOutDoorDetails.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _InAndOutDoorDetails.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _InAndOutDoorDetails.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InAndOutDoorDetailsID = "s_InAndOutDoorDetailsID";
            public const string Item = "s_Item";
            public const string MaterialID = "s_MaterialID";
            public const string LaminationID = "s_LaminationID";
            public const string ServiceID = "s_ServiceID";
            public const string Picture = "s_Picture";
            public const string DeliveryDate = "s_DeliveryDate";
            public const string Width = "s_Width";
            public const string Hight = "s_Hight";
            public const string TotalSize = "s_TotalSize";
            public const string DeliveryTo = "s_DeliveryTo";
            public const string JobOrderStatusID = "s_JobOrderStatusID";
            public const string JobOrderID = "s_JobOrderID";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InAndOutDoorDetailsID
	    {
			get
	        {
				return base.Getint(ColumnNames.InAndOutDoorDetailsID);
			}
			set
	        {
				base.Setint(ColumnNames.InAndOutDoorDetailsID, value);
			}
		}

		public virtual string Item
	    {
			get
	        {
				return base.Getstring(ColumnNames.Item);
			}
			set
	        {
				base.Setstring(ColumnNames.Item, value);
			}
		}

		public virtual int MaterialID
	    {
			get
	        {
				return base.Getint(ColumnNames.MaterialID);
			}
			set
	        {
				base.Setint(ColumnNames.MaterialID, value);
			}
		}

		public virtual int LaminationID
	    {
			get
	        {
				return base.Getint(ColumnNames.LaminationID);
			}
			set
	        {
				base.Setint(ColumnNames.LaminationID, value);
			}
		}

		public virtual int ServiceID
	    {
			get
	        {
				return base.Getint(ColumnNames.ServiceID);
			}
			set
	        {
				base.Setint(ColumnNames.ServiceID, value);
			}
		}

		public virtual string Picture
	    {
			get
	        {
				return base.Getstring(ColumnNames.Picture);
			}
			set
	        {
				base.Setstring(ColumnNames.Picture, value);
			}
		}

		public virtual DateTime DeliveryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DeliveryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual decimal Width
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Width);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Width, value);
			}
		}

		public virtual decimal Hight
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Hight);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Hight, value);
			}
		}

		public virtual decimal TotalSize
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TotalSize);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TotalSize, value);
			}
		}

		public virtual string DeliveryTo
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryTo);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual int JobOrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderStatusID, value);
			}
		}

		public virtual int JobOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderID, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InAndOutDoorDetailsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InAndOutDoorDetailsID) ? string.Empty : base.GetintAsString(ColumnNames.InAndOutDoorDetailsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InAndOutDoorDetailsID);
				else
					this.InAndOutDoorDetailsID = base.SetintAsString(ColumnNames.InAndOutDoorDetailsID, value);
			}
		}

		public virtual string s_Item
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Item) ? string.Empty : base.GetstringAsString(ColumnNames.Item);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Item);
				else
					this.Item = base.SetstringAsString(ColumnNames.Item, value);
			}
		}

		public virtual string s_MaterialID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaterialID) ? string.Empty : base.GetintAsString(ColumnNames.MaterialID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaterialID);
				else
					this.MaterialID = base.SetintAsString(ColumnNames.MaterialID, value);
			}
		}

		public virtual string s_LaminationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LaminationID) ? string.Empty : base.GetintAsString(ColumnNames.LaminationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LaminationID);
				else
					this.LaminationID = base.SetintAsString(ColumnNames.LaminationID, value);
			}
		}

		public virtual string s_ServiceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ServiceID) ? string.Empty : base.GetintAsString(ColumnNames.ServiceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ServiceID);
				else
					this.ServiceID = base.SetintAsString(ColumnNames.ServiceID, value);
			}
		}

		public virtual string s_Picture
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Picture) ? string.Empty : base.GetstringAsString(ColumnNames.Picture);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Picture);
				else
					this.Picture = base.SetstringAsString(ColumnNames.Picture, value);
			}
		}

		public virtual string s_DeliveryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DeliveryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryDate);
				else
					this.DeliveryDate = base.SetDateTimeAsString(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual string s_Width
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Width) ? string.Empty : base.GetdecimalAsString(ColumnNames.Width);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Width);
				else
					this.Width = base.SetdecimalAsString(ColumnNames.Width, value);
			}
		}

		public virtual string s_Hight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Hight) ? string.Empty : base.GetdecimalAsString(ColumnNames.Hight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Hight);
				else
					this.Hight = base.SetdecimalAsString(ColumnNames.Hight, value);
			}
		}

		public virtual string s_TotalSize
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalSize) ? string.Empty : base.GetdecimalAsString(ColumnNames.TotalSize);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalSize);
				else
					this.TotalSize = base.SetdecimalAsString(ColumnNames.TotalSize, value);
			}
		}

		public virtual string s_DeliveryTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryTo) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryTo);
				else
					this.DeliveryTo = base.SetstringAsString(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual string s_JobOrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderStatusID);
				else
					this.JobOrderStatusID = base.SetintAsString(ColumnNames.JobOrderStatusID, value);
			}
		}

		public virtual string s_JobOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderID);
				else
					this.JobOrderID = base.SetintAsString(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InAndOutDoorDetailsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InAndOutDoorDetailsID, Parameters.InAndOutDoorDetailsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Item
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Item, Parameters.Item);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaterialID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaterialID, Parameters.MaterialID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LaminationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LaminationID, Parameters.LaminationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ServiceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ServiceID, Parameters.ServiceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Picture
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Picture, Parameters.Picture);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Width
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Hight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Hight, Parameters.Hight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalSize
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalSize, Parameters.TotalSize);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderStatusID, Parameters.JobOrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InAndOutDoorDetailsID
		    {
				get
		        {
					if(_InAndOutDoorDetailsID_W == null)
	        	    {
						_InAndOutDoorDetailsID_W = TearOff.InAndOutDoorDetailsID;
					}
					return _InAndOutDoorDetailsID_W;
				}
			}

			public WhereParameter Item
		    {
				get
		        {
					if(_Item_W == null)
	        	    {
						_Item_W = TearOff.Item;
					}
					return _Item_W;
				}
			}

			public WhereParameter MaterialID
		    {
				get
		        {
					if(_MaterialID_W == null)
	        	    {
						_MaterialID_W = TearOff.MaterialID;
					}
					return _MaterialID_W;
				}
			}

			public WhereParameter LaminationID
		    {
				get
		        {
					if(_LaminationID_W == null)
	        	    {
						_LaminationID_W = TearOff.LaminationID;
					}
					return _LaminationID_W;
				}
			}

			public WhereParameter ServiceID
		    {
				get
		        {
					if(_ServiceID_W == null)
	        	    {
						_ServiceID_W = TearOff.ServiceID;
					}
					return _ServiceID_W;
				}
			}

			public WhereParameter Picture
		    {
				get
		        {
					if(_Picture_W == null)
	        	    {
						_Picture_W = TearOff.Picture;
					}
					return _Picture_W;
				}
			}

			public WhereParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public WhereParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public WhereParameter Hight
		    {
				get
		        {
					if(_Hight_W == null)
	        	    {
						_Hight_W = TearOff.Hight;
					}
					return _Hight_W;
				}
			}

			public WhereParameter TotalSize
		    {
				get
		        {
					if(_TotalSize_W == null)
	        	    {
						_TotalSize_W = TearOff.TotalSize;
					}
					return _TotalSize_W;
				}
			}

			public WhereParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public WhereParameter JobOrderStatusID
		    {
				get
		        {
					if(_JobOrderStatusID_W == null)
	        	    {
						_JobOrderStatusID_W = TearOff.JobOrderStatusID;
					}
					return _JobOrderStatusID_W;
				}
			}

			public WhereParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _InAndOutDoorDetailsID_W = null;
			private WhereParameter _Item_W = null;
			private WhereParameter _MaterialID_W = null;
			private WhereParameter _LaminationID_W = null;
			private WhereParameter _ServiceID_W = null;
			private WhereParameter _Picture_W = null;
			private WhereParameter _DeliveryDate_W = null;
			private WhereParameter _Width_W = null;
			private WhereParameter _Hight_W = null;
			private WhereParameter _TotalSize_W = null;
			private WhereParameter _DeliveryTo_W = null;
			private WhereParameter _JobOrderStatusID_W = null;
			private WhereParameter _JobOrderID_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_InAndOutDoorDetailsID_W = null;
				_Item_W = null;
				_MaterialID_W = null;
				_LaminationID_W = null;
				_ServiceID_W = null;
				_Picture_W = null;
				_DeliveryDate_W = null;
				_Width_W = null;
				_Hight_W = null;
				_TotalSize_W = null;
				_DeliveryTo_W = null;
				_JobOrderStatusID_W = null;
				_JobOrderID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InAndOutDoorDetailsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InAndOutDoorDetailsID, Parameters.InAndOutDoorDetailsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Item
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Item, Parameters.Item);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaterialID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaterialID, Parameters.MaterialID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LaminationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LaminationID, Parameters.LaminationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ServiceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ServiceID, Parameters.ServiceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Picture
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Picture, Parameters.Picture);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Width
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Width, Parameters.Width);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Hight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Hight, Parameters.Hight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalSize
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalSize, Parameters.TotalSize);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderStatusID, Parameters.JobOrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InAndOutDoorDetailsID
		    {
				get
		        {
					if(_InAndOutDoorDetailsID_W == null)
	        	    {
						_InAndOutDoorDetailsID_W = TearOff.InAndOutDoorDetailsID;
					}
					return _InAndOutDoorDetailsID_W;
				}
			}

			public AggregateParameter Item
		    {
				get
		        {
					if(_Item_W == null)
	        	    {
						_Item_W = TearOff.Item;
					}
					return _Item_W;
				}
			}

			public AggregateParameter MaterialID
		    {
				get
		        {
					if(_MaterialID_W == null)
	        	    {
						_MaterialID_W = TearOff.MaterialID;
					}
					return _MaterialID_W;
				}
			}

			public AggregateParameter LaminationID
		    {
				get
		        {
					if(_LaminationID_W == null)
	        	    {
						_LaminationID_W = TearOff.LaminationID;
					}
					return _LaminationID_W;
				}
			}

			public AggregateParameter ServiceID
		    {
				get
		        {
					if(_ServiceID_W == null)
	        	    {
						_ServiceID_W = TearOff.ServiceID;
					}
					return _ServiceID_W;
				}
			}

			public AggregateParameter Picture
		    {
				get
		        {
					if(_Picture_W == null)
	        	    {
						_Picture_W = TearOff.Picture;
					}
					return _Picture_W;
				}
			}

			public AggregateParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public AggregateParameter Width
		    {
				get
		        {
					if(_Width_W == null)
	        	    {
						_Width_W = TearOff.Width;
					}
					return _Width_W;
				}
			}

			public AggregateParameter Hight
		    {
				get
		        {
					if(_Hight_W == null)
	        	    {
						_Hight_W = TearOff.Hight;
					}
					return _Hight_W;
				}
			}

			public AggregateParameter TotalSize
		    {
				get
		        {
					if(_TotalSize_W == null)
	        	    {
						_TotalSize_W = TearOff.TotalSize;
					}
					return _TotalSize_W;
				}
			}

			public AggregateParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public AggregateParameter JobOrderStatusID
		    {
				get
		        {
					if(_JobOrderStatusID_W == null)
	        	    {
						_JobOrderStatusID_W = TearOff.JobOrderStatusID;
					}
					return _JobOrderStatusID_W;
				}
			}

			public AggregateParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _InAndOutDoorDetailsID_W = null;
			private AggregateParameter _Item_W = null;
			private AggregateParameter _MaterialID_W = null;
			private AggregateParameter _LaminationID_W = null;
			private AggregateParameter _ServiceID_W = null;
			private AggregateParameter _Picture_W = null;
			private AggregateParameter _DeliveryDate_W = null;
			private AggregateParameter _Width_W = null;
			private AggregateParameter _Hight_W = null;
			private AggregateParameter _TotalSize_W = null;
			private AggregateParameter _DeliveryTo_W = null;
			private AggregateParameter _JobOrderStatusID_W = null;
			private AggregateParameter _JobOrderID_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_InAndOutDoorDetailsID_W = null;
				_Item_W = null;
				_MaterialID_W = null;
				_LaminationID_W = null;
				_ServiceID_W = null;
				_Picture_W = null;
				_DeliveryDate_W = null;
				_Width_W = null;
				_Hight_W = null;
				_TotalSize_W = null;
				_DeliveryTo_W = null;
				_JobOrderStatusID_W = null;
				_JobOrderID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InAndOutDoorDetailsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InAndOutDoorDetailsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InAndOutDoorDetailsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InAndOutDoorDetailsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InAndOutDoorDetailsID);
			p.SourceColumn = ColumnNames.InAndOutDoorDetailsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InAndOutDoorDetailsID);
			p.SourceColumn = ColumnNames.InAndOutDoorDetailsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Item);
			p.SourceColumn = ColumnNames.Item;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaterialID);
			p.SourceColumn = ColumnNames.MaterialID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LaminationID);
			p.SourceColumn = ColumnNames.LaminationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ServiceID);
			p.SourceColumn = ColumnNames.ServiceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Picture);
			p.SourceColumn = ColumnNames.Picture;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryDate);
			p.SourceColumn = ColumnNames.DeliveryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Width);
			p.SourceColumn = ColumnNames.Width;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Hight);
			p.SourceColumn = ColumnNames.Hight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalSize);
			p.SourceColumn = ColumnNames.TotalSize;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryTo);
			p.SourceColumn = ColumnNames.DeliveryTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderStatusID);
			p.SourceColumn = ColumnNames.JobOrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderID);
			p.SourceColumn = ColumnNames.JobOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
