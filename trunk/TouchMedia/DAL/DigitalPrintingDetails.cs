
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _DigitalPrintingDetails : SqlClientEntity
	{
		public _DigitalPrintingDetails()
		{
			this.QuerySource = "DigitalPrintingDetails";
			this.MappingName = "DigitalPrintingDetails";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DigitalPrintingDetailsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int DigitalPrintingDetailsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.DigitalPrintingDetailsID, DigitalPrintingDetailsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DigitalPrintingDetailsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter DigitalPrintingDetailsID
			{
				get
				{
					return new SqlParameter("@DigitalPrintingDetailsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderID
			{
				get
				{
					return new SqlParameter("@JobOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PrintingTypeID
			{
				get
				{
					return new SqlParameter("@PrintingTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsRAndV
			{
				get
				{
					return new SqlParameter("@IsRAndV", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryDoneTo
			{
				get
				{
					return new SqlParameter("@DeliveryDoneTo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderStatusID
			{
				get
				{
					return new SqlParameter("@JobOrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string DigitalPrintingDetailsID = "DigitalPrintingDetailsID";
            public const string JobOrderID = "JobOrderID";
            public const string PrintingTypeID = "PrintingTypeID";
            public const string IsRAndV = "IsRAndV";
            public const string SupplierID = "SupplierID";
            public const string DeliveryDoneTo = "DeliveryDoneTo";
            public const string JobOrderStatusID = "JobOrderStatusID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DigitalPrintingDetailsID] = _DigitalPrintingDetails.PropertyNames.DigitalPrintingDetailsID;
					ht[JobOrderID] = _DigitalPrintingDetails.PropertyNames.JobOrderID;
					ht[PrintingTypeID] = _DigitalPrintingDetails.PropertyNames.PrintingTypeID;
					ht[IsRAndV] = _DigitalPrintingDetails.PropertyNames.IsRAndV;
					ht[SupplierID] = _DigitalPrintingDetails.PropertyNames.SupplierID;
					ht[DeliveryDoneTo] = _DigitalPrintingDetails.PropertyNames.DeliveryDoneTo;
					ht[JobOrderStatusID] = _DigitalPrintingDetails.PropertyNames.JobOrderStatusID;
					ht[CreatedBy] = _DigitalPrintingDetails.PropertyNames.CreatedBy;
					ht[CreatedDate] = _DigitalPrintingDetails.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _DigitalPrintingDetails.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _DigitalPrintingDetails.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string DigitalPrintingDetailsID = "DigitalPrintingDetailsID";
            public const string JobOrderID = "JobOrderID";
            public const string PrintingTypeID = "PrintingTypeID";
            public const string IsRAndV = "IsRAndV";
            public const string SupplierID = "SupplierID";
            public const string DeliveryDoneTo = "DeliveryDoneTo";
            public const string JobOrderStatusID = "JobOrderStatusID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DigitalPrintingDetailsID] = _DigitalPrintingDetails.ColumnNames.DigitalPrintingDetailsID;
					ht[JobOrderID] = _DigitalPrintingDetails.ColumnNames.JobOrderID;
					ht[PrintingTypeID] = _DigitalPrintingDetails.ColumnNames.PrintingTypeID;
					ht[IsRAndV] = _DigitalPrintingDetails.ColumnNames.IsRAndV;
					ht[SupplierID] = _DigitalPrintingDetails.ColumnNames.SupplierID;
					ht[DeliveryDoneTo] = _DigitalPrintingDetails.ColumnNames.DeliveryDoneTo;
					ht[JobOrderStatusID] = _DigitalPrintingDetails.ColumnNames.JobOrderStatusID;
					ht[CreatedBy] = _DigitalPrintingDetails.ColumnNames.CreatedBy;
					ht[CreatedDate] = _DigitalPrintingDetails.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _DigitalPrintingDetails.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _DigitalPrintingDetails.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string DigitalPrintingDetailsID = "s_DigitalPrintingDetailsID";
            public const string JobOrderID = "s_JobOrderID";
            public const string PrintingTypeID = "s_PrintingTypeID";
            public const string IsRAndV = "s_IsRAndV";
            public const string SupplierID = "s_SupplierID";
            public const string DeliveryDoneTo = "s_DeliveryDoneTo";
            public const string JobOrderStatusID = "s_JobOrderStatusID";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int DigitalPrintingDetailsID
	    {
			get
	        {
				return base.Getint(ColumnNames.DigitalPrintingDetailsID);
			}
			set
	        {
				base.Setint(ColumnNames.DigitalPrintingDetailsID, value);
			}
		}

		public virtual int JobOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderID, value);
			}
		}

		public virtual int PrintingTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.PrintingTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.PrintingTypeID, value);
			}
		}

		public virtual bool IsRAndV
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsRAndV);
			}
			set
	        {
				base.Setbool(ColumnNames.IsRAndV, value);
			}
		}

		public virtual int SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual int DeliveryDoneTo
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryDoneTo);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryDoneTo, value);
			}
		}

		public virtual int JobOrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderStatusID, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_DigitalPrintingDetailsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DigitalPrintingDetailsID) ? string.Empty : base.GetintAsString(ColumnNames.DigitalPrintingDetailsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DigitalPrintingDetailsID);
				else
					this.DigitalPrintingDetailsID = base.SetintAsString(ColumnNames.DigitalPrintingDetailsID, value);
			}
		}

		public virtual string s_JobOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderID);
				else
					this.JobOrderID = base.SetintAsString(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string s_PrintingTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PrintingTypeID) ? string.Empty : base.GetintAsString(ColumnNames.PrintingTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PrintingTypeID);
				else
					this.PrintingTypeID = base.SetintAsString(ColumnNames.PrintingTypeID, value);
			}
		}

		public virtual string s_IsRAndV
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsRAndV) ? string.Empty : base.GetboolAsString(ColumnNames.IsRAndV);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsRAndV);
				else
					this.IsRAndV = base.SetboolAsString(ColumnNames.IsRAndV, value);
			}
		}

		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_DeliveryDoneTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryDoneTo) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryDoneTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryDoneTo);
				else
					this.DeliveryDoneTo = base.SetintAsString(ColumnNames.DeliveryDoneTo, value);
			}
		}

		public virtual string s_JobOrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderStatusID);
				else
					this.JobOrderStatusID = base.SetintAsString(ColumnNames.JobOrderStatusID, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter DigitalPrintingDetailsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DigitalPrintingDetailsID, Parameters.DigitalPrintingDetailsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PrintingTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PrintingTypeID, Parameters.PrintingTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsRAndV
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsRAndV, Parameters.IsRAndV);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryDoneTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryDoneTo, Parameters.DeliveryDoneTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderStatusID, Parameters.JobOrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter DigitalPrintingDetailsID
		    {
				get
		        {
					if(_DigitalPrintingDetailsID_W == null)
	        	    {
						_DigitalPrintingDetailsID_W = TearOff.DigitalPrintingDetailsID;
					}
					return _DigitalPrintingDetailsID_W;
				}
			}

			public WhereParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public WhereParameter PrintingTypeID
		    {
				get
		        {
					if(_PrintingTypeID_W == null)
	        	    {
						_PrintingTypeID_W = TearOff.PrintingTypeID;
					}
					return _PrintingTypeID_W;
				}
			}

			public WhereParameter IsRAndV
		    {
				get
		        {
					if(_IsRAndV_W == null)
	        	    {
						_IsRAndV_W = TearOff.IsRAndV;
					}
					return _IsRAndV_W;
				}
			}

			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter DeliveryDoneTo
		    {
				get
		        {
					if(_DeliveryDoneTo_W == null)
	        	    {
						_DeliveryDoneTo_W = TearOff.DeliveryDoneTo;
					}
					return _DeliveryDoneTo_W;
				}
			}

			public WhereParameter JobOrderStatusID
		    {
				get
		        {
					if(_JobOrderStatusID_W == null)
	        	    {
						_JobOrderStatusID_W = TearOff.JobOrderStatusID;
					}
					return _JobOrderStatusID_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _DigitalPrintingDetailsID_W = null;
			private WhereParameter _JobOrderID_W = null;
			private WhereParameter _PrintingTypeID_W = null;
			private WhereParameter _IsRAndV_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _DeliveryDoneTo_W = null;
			private WhereParameter _JobOrderStatusID_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_DigitalPrintingDetailsID_W = null;
				_JobOrderID_W = null;
				_PrintingTypeID_W = null;
				_IsRAndV_W = null;
				_SupplierID_W = null;
				_DeliveryDoneTo_W = null;
				_JobOrderStatusID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter DigitalPrintingDetailsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DigitalPrintingDetailsID, Parameters.DigitalPrintingDetailsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PrintingTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PrintingTypeID, Parameters.PrintingTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsRAndV
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsRAndV, Parameters.IsRAndV);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryDoneTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryDoneTo, Parameters.DeliveryDoneTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderStatusID, Parameters.JobOrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter DigitalPrintingDetailsID
		    {
				get
		        {
					if(_DigitalPrintingDetailsID_W == null)
	        	    {
						_DigitalPrintingDetailsID_W = TearOff.DigitalPrintingDetailsID;
					}
					return _DigitalPrintingDetailsID_W;
				}
			}

			public AggregateParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public AggregateParameter PrintingTypeID
		    {
				get
		        {
					if(_PrintingTypeID_W == null)
	        	    {
						_PrintingTypeID_W = TearOff.PrintingTypeID;
					}
					return _PrintingTypeID_W;
				}
			}

			public AggregateParameter IsRAndV
		    {
				get
		        {
					if(_IsRAndV_W == null)
	        	    {
						_IsRAndV_W = TearOff.IsRAndV;
					}
					return _IsRAndV_W;
				}
			}

			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter DeliveryDoneTo
		    {
				get
		        {
					if(_DeliveryDoneTo_W == null)
	        	    {
						_DeliveryDoneTo_W = TearOff.DeliveryDoneTo;
					}
					return _DeliveryDoneTo_W;
				}
			}

			public AggregateParameter JobOrderStatusID
		    {
				get
		        {
					if(_JobOrderStatusID_W == null)
	        	    {
						_JobOrderStatusID_W = TearOff.JobOrderStatusID;
					}
					return _JobOrderStatusID_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _DigitalPrintingDetailsID_W = null;
			private AggregateParameter _JobOrderID_W = null;
			private AggregateParameter _PrintingTypeID_W = null;
			private AggregateParameter _IsRAndV_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _DeliveryDoneTo_W = null;
			private AggregateParameter _JobOrderStatusID_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_DigitalPrintingDetailsID_W = null;
				_JobOrderID_W = null;
				_PrintingTypeID_W = null;
				_IsRAndV_W = null;
				_SupplierID_W = null;
				_DeliveryDoneTo_W = null;
				_JobOrderStatusID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DigitalPrintingDetailsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.DigitalPrintingDetailsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DigitalPrintingDetailsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DigitalPrintingDetailsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.DigitalPrintingDetailsID);
			p.SourceColumn = ColumnNames.DigitalPrintingDetailsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.DigitalPrintingDetailsID);
			p.SourceColumn = ColumnNames.DigitalPrintingDetailsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderID);
			p.SourceColumn = ColumnNames.JobOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PrintingTypeID);
			p.SourceColumn = ColumnNames.PrintingTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsRAndV);
			p.SourceColumn = ColumnNames.IsRAndV;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryDoneTo);
			p.SourceColumn = ColumnNames.DeliveryDoneTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderStatusID);
			p.SourceColumn = ColumnNames.JobOrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
