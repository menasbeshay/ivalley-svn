
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Production : SqlClientEntity
	{
		public _Production()
		{
			this.QuerySource = "Production";
			this.MappingName = "Production";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductionLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ProductionID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ProductionID, ProductionID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductionLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ProductionID
			{
				get
				{
					return new SqlParameter("@ProductionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobOrderID
			{
				get
				{
					return new SqlParameter("@JobOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ItemID
			{
				get
				{
					return new SqlParameter("@ItemID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Size
			{
				get
				{
					return new SqlParameter("@Size", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter MaterialID
			{
				get
				{
					return new SqlParameter("@MaterialID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryDate
			{
				get
				{
					return new SqlParameter("@DeliveryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SupplierID
			{
				get
				{
					return new SqlParameter("@SupplierID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryTo
			{
				get
				{
					return new SqlParameter("@DeliveryTo", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter ISRemovable
			{
				get
				{
					return new SqlParameter("@ISRemovable", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RemovableDate
			{
				get
				{
					return new SqlParameter("@RemovableDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InstallationDate
			{
				get
				{
					return new SqlParameter("@InstallationDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ProductStatusID
			{
				get
				{
					return new SqlParameter("@ProductStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InstallStationID
			{
				get
				{
					return new SqlParameter("@InstallStationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Note
			{
				get
				{
					return new SqlParameter("@Note", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ProductionID = "ProductionID";
            public const string JobOrderID = "JobOrderID";
            public const string ItemID = "ItemID";
            public const string Size = "Size";
            public const string MaterialID = "MaterialID";
            public const string DeliveryDate = "DeliveryDate";
            public const string SupplierID = "SupplierID";
            public const string DeliveryTo = "DeliveryTo";
            public const string ISRemovable = "ISRemovable";
            public const string RemovableDate = "RemovableDate";
            public const string InstallationDate = "installationDate";
            public const string ProductStatusID = "ProductStatusID";
            public const string InstallStationID = "InstallStationID";
            public const string Note = "Note";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductionID] = _Production.PropertyNames.ProductionID;
					ht[JobOrderID] = _Production.PropertyNames.JobOrderID;
					ht[ItemID] = _Production.PropertyNames.ItemID;
					ht[Size] = _Production.PropertyNames.Size;
					ht[MaterialID] = _Production.PropertyNames.MaterialID;
					ht[DeliveryDate] = _Production.PropertyNames.DeliveryDate;
					ht[SupplierID] = _Production.PropertyNames.SupplierID;
					ht[DeliveryTo] = _Production.PropertyNames.DeliveryTo;
					ht[ISRemovable] = _Production.PropertyNames.ISRemovable;
					ht[RemovableDate] = _Production.PropertyNames.RemovableDate;
					ht[InstallationDate] = _Production.PropertyNames.InstallationDate;
					ht[ProductStatusID] = _Production.PropertyNames.ProductStatusID;
					ht[InstallStationID] = _Production.PropertyNames.InstallStationID;
					ht[Note] = _Production.PropertyNames.Note;
					ht[CreatedBy] = _Production.PropertyNames.CreatedBy;
					ht[CreatedDate] = _Production.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _Production.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _Production.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ProductionID = "ProductionID";
            public const string JobOrderID = "JobOrderID";
            public const string ItemID = "ItemID";
            public const string Size = "Size";
            public const string MaterialID = "MaterialID";
            public const string DeliveryDate = "DeliveryDate";
            public const string SupplierID = "SupplierID";
            public const string DeliveryTo = "DeliveryTo";
            public const string ISRemovable = "ISRemovable";
            public const string RemovableDate = "RemovableDate";
            public const string InstallationDate = "InstallationDate";
            public const string ProductStatusID = "ProductStatusID";
            public const string InstallStationID = "InstallStationID";
            public const string Note = "Note";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductionID] = _Production.ColumnNames.ProductionID;
					ht[JobOrderID] = _Production.ColumnNames.JobOrderID;
					ht[ItemID] = _Production.ColumnNames.ItemID;
					ht[Size] = _Production.ColumnNames.Size;
					ht[MaterialID] = _Production.ColumnNames.MaterialID;
					ht[DeliveryDate] = _Production.ColumnNames.DeliveryDate;
					ht[SupplierID] = _Production.ColumnNames.SupplierID;
					ht[DeliveryTo] = _Production.ColumnNames.DeliveryTo;
					ht[ISRemovable] = _Production.ColumnNames.ISRemovable;
					ht[RemovableDate] = _Production.ColumnNames.RemovableDate;
					ht[InstallationDate] = _Production.ColumnNames.InstallationDate;
					ht[ProductStatusID] = _Production.ColumnNames.ProductStatusID;
					ht[InstallStationID] = _Production.ColumnNames.InstallStationID;
					ht[Note] = _Production.ColumnNames.Note;
					ht[CreatedBy] = _Production.ColumnNames.CreatedBy;
					ht[CreatedDate] = _Production.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _Production.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _Production.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ProductionID = "s_ProductionID";
            public const string JobOrderID = "s_JobOrderID";
            public const string ItemID = "s_ItemID";
            public const string Size = "s_Size";
            public const string MaterialID = "s_MaterialID";
            public const string DeliveryDate = "s_DeliveryDate";
            public const string SupplierID = "s_SupplierID";
            public const string DeliveryTo = "s_DeliveryTo";
            public const string ISRemovable = "s_ISRemovable";
            public const string RemovableDate = "s_RemovableDate";
            public const string InstallationDate = "s_InstallationDate";
            public const string ProductStatusID = "s_ProductStatusID";
            public const string InstallStationID = "s_InstallStationID";
            public const string Note = "s_Note";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ProductionID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductionID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductionID, value);
			}
		}

		public virtual int JobOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.JobOrderID, value);
			}
		}

		public virtual int ItemID
	    {
			get
	        {
				return base.Getint(ColumnNames.ItemID);
			}
			set
	        {
				base.Setint(ColumnNames.ItemID, value);
			}
		}

		public virtual decimal Size
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Size);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Size, value);
			}
		}

		public virtual int MaterialID
	    {
			get
	        {
				return base.Getint(ColumnNames.MaterialID);
			}
			set
	        {
				base.Setint(ColumnNames.MaterialID, value);
			}
		}

		public virtual DateTime DeliveryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DeliveryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual int SupplierID
	    {
			get
	        {
				return base.Getint(ColumnNames.SupplierID);
			}
			set
	        {
				base.Setint(ColumnNames.SupplierID, value);
			}
		}

		public virtual string DeliveryTo
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryTo);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual bool ISRemovable
	    {
			get
	        {
				return base.Getbool(ColumnNames.ISRemovable);
			}
			set
	        {
				base.Setbool(ColumnNames.ISRemovable, value);
			}
		}

		public virtual DateTime RemovableDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RemovableDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RemovableDate, value);
			}
		}

		public virtual DateTime InstallationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InstallationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InstallationDate, value);
			}
		}

		public virtual int ProductStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductStatusID, value);
			}
		}

		public virtual int InstallStationID
	    {
			get
	        {
				return base.Getint(ColumnNames.InstallStationID);
			}
			set
	        {
				base.Setint(ColumnNames.InstallStationID, value);
			}
		}

		public virtual string Note
	    {
			get
	        {
				return base.Getstring(ColumnNames.Note);
			}
			set
	        {
				base.Setstring(ColumnNames.Note, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ProductionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductionID) ? string.Empty : base.GetintAsString(ColumnNames.ProductionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductionID);
				else
					this.ProductionID = base.SetintAsString(ColumnNames.ProductionID, value);
			}
		}

		public virtual string s_JobOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobOrderID) ? string.Empty : base.GetintAsString(ColumnNames.JobOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobOrderID);
				else
					this.JobOrderID = base.SetintAsString(ColumnNames.JobOrderID, value);
			}
		}

		public virtual string s_ItemID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ItemID) ? string.Empty : base.GetintAsString(ColumnNames.ItemID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ItemID);
				else
					this.ItemID = base.SetintAsString(ColumnNames.ItemID, value);
			}
		}

		public virtual string s_Size
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Size) ? string.Empty : base.GetdecimalAsString(ColumnNames.Size);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Size);
				else
					this.Size = base.SetdecimalAsString(ColumnNames.Size, value);
			}
		}

		public virtual string s_MaterialID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaterialID) ? string.Empty : base.GetintAsString(ColumnNames.MaterialID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaterialID);
				else
					this.MaterialID = base.SetintAsString(ColumnNames.MaterialID, value);
			}
		}

		public virtual string s_DeliveryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DeliveryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryDate);
				else
					this.DeliveryDate = base.SetDateTimeAsString(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual string s_SupplierID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SupplierID) ? string.Empty : base.GetintAsString(ColumnNames.SupplierID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SupplierID);
				else
					this.SupplierID = base.SetintAsString(ColumnNames.SupplierID, value);
			}
		}

		public virtual string s_DeliveryTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryTo) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryTo);
				else
					this.DeliveryTo = base.SetstringAsString(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual string s_ISRemovable
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ISRemovable) ? string.Empty : base.GetboolAsString(ColumnNames.ISRemovable);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ISRemovable);
				else
					this.ISRemovable = base.SetboolAsString(ColumnNames.ISRemovable, value);
			}
		}

		public virtual string s_RemovableDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RemovableDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RemovableDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RemovableDate);
				else
					this.RemovableDate = base.SetDateTimeAsString(ColumnNames.RemovableDate, value);
			}
		}

		public virtual string s_InstallationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InstallationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InstallationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InstallationDate);
				else
					this.InstallationDate = base.SetDateTimeAsString(ColumnNames.InstallationDate, value);
			}
		}

		public virtual string s_ProductStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductStatusID) ? string.Empty : base.GetintAsString(ColumnNames.ProductStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductStatusID);
				else
					this.ProductStatusID = base.SetintAsString(ColumnNames.ProductStatusID, value);
			}
		}

		public virtual string s_InstallStationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InstallStationID) ? string.Empty : base.GetintAsString(ColumnNames.InstallStationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InstallStationID);
				else
					this.InstallStationID = base.SetintAsString(ColumnNames.InstallStationID, value);
			}
		}

		public virtual string s_Note
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Note) ? string.Empty : base.GetstringAsString(ColumnNames.Note);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Note);
				else
					this.Note = base.SetstringAsString(ColumnNames.Note, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ProductionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductionID, Parameters.ProductionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ItemID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Size
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Size, Parameters.Size);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaterialID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaterialID, Parameters.MaterialID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SupplierID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ISRemovable
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ISRemovable, Parameters.ISRemovable);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RemovableDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RemovableDate, Parameters.RemovableDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InstallationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InstallationDate, Parameters.InstallationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProductStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductStatusID, Parameters.ProductStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InstallStationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InstallStationID, Parameters.InstallStationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Note
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Note, Parameters.Note);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ProductionID
		    {
				get
		        {
					if(_ProductionID_W == null)
	        	    {
						_ProductionID_W = TearOff.ProductionID;
					}
					return _ProductionID_W;
				}
			}

			public WhereParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public WhereParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public WhereParameter Size
		    {
				get
		        {
					if(_Size_W == null)
	        	    {
						_Size_W = TearOff.Size;
					}
					return _Size_W;
				}
			}

			public WhereParameter MaterialID
		    {
				get
		        {
					if(_MaterialID_W == null)
	        	    {
						_MaterialID_W = TearOff.MaterialID;
					}
					return _MaterialID_W;
				}
			}

			public WhereParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public WhereParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public WhereParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public WhereParameter ISRemovable
		    {
				get
		        {
					if(_ISRemovable_W == null)
	        	    {
						_ISRemovable_W = TearOff.ISRemovable;
					}
					return _ISRemovable_W;
				}
			}

			public WhereParameter RemovableDate
		    {
				get
		        {
					if(_RemovableDate_W == null)
	        	    {
						_RemovableDate_W = TearOff.RemovableDate;
					}
					return _RemovableDate_W;
				}
			}

			public WhereParameter InstallationDate
		    {
				get
		        {
					if(_InstallationDate_W == null)
	        	    {
						_InstallationDate_W = TearOff.InstallationDate;
					}
					return _InstallationDate_W;
				}
			}

			public WhereParameter ProductStatusID
		    {
				get
		        {
					if(_ProductStatusID_W == null)
	        	    {
						_ProductStatusID_W = TearOff.ProductStatusID;
					}
					return _ProductStatusID_W;
				}
			}

			public WhereParameter InstallStationID
		    {
				get
		        {
					if(_InstallStationID_W == null)
	        	    {
						_InstallStationID_W = TearOff.InstallStationID;
					}
					return _InstallStationID_W;
				}
			}

			public WhereParameter Note
		    {
				get
		        {
					if(_Note_W == null)
	        	    {
						_Note_W = TearOff.Note;
					}
					return _Note_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _ProductionID_W = null;
			private WhereParameter _JobOrderID_W = null;
			private WhereParameter _ItemID_W = null;
			private WhereParameter _Size_W = null;
			private WhereParameter _MaterialID_W = null;
			private WhereParameter _DeliveryDate_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _DeliveryTo_W = null;
			private WhereParameter _ISRemovable_W = null;
			private WhereParameter _RemovableDate_W = null;
			private WhereParameter _InstallationDate_W = null;
			private WhereParameter _ProductStatusID_W = null;
			private WhereParameter _InstallStationID_W = null;
			private WhereParameter _Note_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_ProductionID_W = null;
				_JobOrderID_W = null;
				_ItemID_W = null;
				_Size_W = null;
				_MaterialID_W = null;
				_DeliveryDate_W = null;
				_SupplierID_W = null;
				_DeliveryTo_W = null;
				_ISRemovable_W = null;
				_RemovableDate_W = null;
				_InstallationDate_W = null;
				_ProductStatusID_W = null;
				_InstallStationID_W = null;
				_Note_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ProductionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductionID, Parameters.ProductionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobOrderID, Parameters.JobOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ItemID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ItemID, Parameters.ItemID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Size
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Size, Parameters.Size);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaterialID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaterialID, Parameters.MaterialID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SupplierID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SupplierID, Parameters.SupplierID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ISRemovable
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ISRemovable, Parameters.ISRemovable);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RemovableDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RemovableDate, Parameters.RemovableDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InstallationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InstallationDate, Parameters.InstallationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProductStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductStatusID, Parameters.ProductStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InstallStationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InstallStationID, Parameters.InstallStationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Note
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Note, Parameters.Note);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ProductionID
		    {
				get
		        {
					if(_ProductionID_W == null)
	        	    {
						_ProductionID_W = TearOff.ProductionID;
					}
					return _ProductionID_W;
				}
			}

			public AggregateParameter JobOrderID
		    {
				get
		        {
					if(_JobOrderID_W == null)
	        	    {
						_JobOrderID_W = TearOff.JobOrderID;
					}
					return _JobOrderID_W;
				}
			}

			public AggregateParameter ItemID
		    {
				get
		        {
					if(_ItemID_W == null)
	        	    {
						_ItemID_W = TearOff.ItemID;
					}
					return _ItemID_W;
				}
			}

			public AggregateParameter Size
		    {
				get
		        {
					if(_Size_W == null)
	        	    {
						_Size_W = TearOff.Size;
					}
					return _Size_W;
				}
			}

			public AggregateParameter MaterialID
		    {
				get
		        {
					if(_MaterialID_W == null)
	        	    {
						_MaterialID_W = TearOff.MaterialID;
					}
					return _MaterialID_W;
				}
			}

			public AggregateParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public AggregateParameter SupplierID
		    {
				get
		        {
					if(_SupplierID_W == null)
	        	    {
						_SupplierID_W = TearOff.SupplierID;
					}
					return _SupplierID_W;
				}
			}

			public AggregateParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public AggregateParameter ISRemovable
		    {
				get
		        {
					if(_ISRemovable_W == null)
	        	    {
						_ISRemovable_W = TearOff.ISRemovable;
					}
					return _ISRemovable_W;
				}
			}

			public AggregateParameter RemovableDate
		    {
				get
		        {
					if(_RemovableDate_W == null)
	        	    {
						_RemovableDate_W = TearOff.RemovableDate;
					}
					return _RemovableDate_W;
				}
			}

			public AggregateParameter InstallationDate
		    {
				get
		        {
					if(_InstallationDate_W == null)
	        	    {
						_InstallationDate_W = TearOff.InstallationDate;
					}
					return _InstallationDate_W;
				}
			}

			public AggregateParameter ProductStatusID
		    {
				get
		        {
					if(_ProductStatusID_W == null)
	        	    {
						_ProductStatusID_W = TearOff.ProductStatusID;
					}
					return _ProductStatusID_W;
				}
			}

			public AggregateParameter InstallStationID
		    {
				get
		        {
					if(_InstallStationID_W == null)
	        	    {
						_InstallStationID_W = TearOff.InstallStationID;
					}
					return _InstallStationID_W;
				}
			}

			public AggregateParameter Note
		    {
				get
		        {
					if(_Note_W == null)
	        	    {
						_Note_W = TearOff.Note;
					}
					return _Note_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _ProductionID_W = null;
			private AggregateParameter _JobOrderID_W = null;
			private AggregateParameter _ItemID_W = null;
			private AggregateParameter _Size_W = null;
			private AggregateParameter _MaterialID_W = null;
			private AggregateParameter _DeliveryDate_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _DeliveryTo_W = null;
			private AggregateParameter _ISRemovable_W = null;
			private AggregateParameter _RemovableDate_W = null;
			private AggregateParameter _InstallationDate_W = null;
			private AggregateParameter _ProductStatusID_W = null;
			private AggregateParameter _InstallStationID_W = null;
			private AggregateParameter _Note_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_ProductionID_W = null;
				_JobOrderID_W = null;
				_ItemID_W = null;
				_Size_W = null;
				_MaterialID_W = null;
				_DeliveryDate_W = null;
				_SupplierID_W = null;
				_DeliveryTo_W = null;
				_ISRemovable_W = null;
				_RemovableDate_W = null;
				_InstallationDate_W = null;
				_ProductStatusID_W = null;
				_InstallStationID_W = null;
				_Note_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductionInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ProductionID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductionUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductionDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ProductionID);
			p.SourceColumn = ColumnNames.ProductionID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ProductionID);
			p.SourceColumn = ColumnNames.ProductionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobOrderID);
			p.SourceColumn = ColumnNames.JobOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ItemID);
			p.SourceColumn = ColumnNames.ItemID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Size);
			p.SourceColumn = ColumnNames.Size;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaterialID);
			p.SourceColumn = ColumnNames.MaterialID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryDate);
			p.SourceColumn = ColumnNames.DeliveryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SupplierID);
			p.SourceColumn = ColumnNames.SupplierID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryTo);
			p.SourceColumn = ColumnNames.DeliveryTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ISRemovable);
			p.SourceColumn = ColumnNames.ISRemovable;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RemovableDate);
			p.SourceColumn = ColumnNames.RemovableDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InstallationDate);
			p.SourceColumn = ColumnNames.InstallationDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProductStatusID);
			p.SourceColumn = ColumnNames.ProductStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InstallStationID);
			p.SourceColumn = ColumnNames.InstallStationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Note);
			p.SourceColumn = ColumnNames.Note;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
