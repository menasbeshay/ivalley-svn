
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PurchaseOrderDetails : SqlClientEntity
	{
		public _PurchaseOrderDetails()
		{
			this.QuerySource = "PurchaseOrderDetails";
			this.MappingName = "PurchaseOrderDetails";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PurchaseOrderDetailsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PurchaseOrderDetailsID, PurchaseOrderDetailsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PurchaseOrderDetailsID
			{
				get
				{
					return new SqlParameter("@PurchaseOrderDetailsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PurchaseOrderID
			{
				get
				{
					return new SqlParameter("@PurchaseOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalValue
			{
				get
				{
					return new SqlParameter("@TotalValue", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter UnitPrice
			{
				get
				{
					return new SqlParameter("@UnitPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter QuantityRequired
			{
				get
				{
					return new SqlParameter("@QuantityRequired", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StockOnHand
			{
				get
				{
					return new SqlParameter("@StockOnHand", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Unit
			{
				get
				{
					return new SqlParameter("@Unit", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Description
			{
				get
				{
					return new SqlParameter("@Description", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Serial
			{
				get
				{
					return new SqlParameter("@Serial", SqlDbType.NVarChar, 1);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PurchaseOrderDetailsID = "PurchaseOrderDetailsID";
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string TotalValue = "TotalValue";
            public const string UnitPrice = "UnitPrice";
            public const string QuantityRequired = "QuantityRequired";
            public const string StockOnHand = "StockOnHand";
            public const string Unit = "Unit";
            public const string Description = "Description";
            public const string Serial = "Serial";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderDetailsID] = _PurchaseOrderDetails.PropertyNames.PurchaseOrderDetailsID;
					ht[PurchaseOrderID] = _PurchaseOrderDetails.PropertyNames.PurchaseOrderID;
					ht[TotalValue] = _PurchaseOrderDetails.PropertyNames.TotalValue;
					ht[UnitPrice] = _PurchaseOrderDetails.PropertyNames.UnitPrice;
					ht[QuantityRequired] = _PurchaseOrderDetails.PropertyNames.QuantityRequired;
					ht[StockOnHand] = _PurchaseOrderDetails.PropertyNames.StockOnHand;
					ht[Unit] = _PurchaseOrderDetails.PropertyNames.Unit;
					ht[Description] = _PurchaseOrderDetails.PropertyNames.Description;
					ht[Serial] = _PurchaseOrderDetails.PropertyNames.Serial;
					ht[CreatedBy] = _PurchaseOrderDetails.PropertyNames.CreatedBy;
					ht[CreatedDate] = _PurchaseOrderDetails.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _PurchaseOrderDetails.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _PurchaseOrderDetails.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PurchaseOrderDetailsID = "PurchaseOrderDetailsID";
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string TotalValue = "TotalValue";
            public const string UnitPrice = "UnitPrice";
            public const string QuantityRequired = "QuantityRequired";
            public const string StockOnHand = "StockOnHand";
            public const string Unit = "Unit";
            public const string Description = "Description";
            public const string Serial = "Serial";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderDetailsID] = _PurchaseOrderDetails.ColumnNames.PurchaseOrderDetailsID;
					ht[PurchaseOrderID] = _PurchaseOrderDetails.ColumnNames.PurchaseOrderID;
					ht[TotalValue] = _PurchaseOrderDetails.ColumnNames.TotalValue;
					ht[UnitPrice] = _PurchaseOrderDetails.ColumnNames.UnitPrice;
					ht[QuantityRequired] = _PurchaseOrderDetails.ColumnNames.QuantityRequired;
					ht[StockOnHand] = _PurchaseOrderDetails.ColumnNames.StockOnHand;
					ht[Unit] = _PurchaseOrderDetails.ColumnNames.Unit;
					ht[Description] = _PurchaseOrderDetails.ColumnNames.Description;
					ht[Serial] = _PurchaseOrderDetails.ColumnNames.Serial;
					ht[CreatedBy] = _PurchaseOrderDetails.ColumnNames.CreatedBy;
					ht[CreatedDate] = _PurchaseOrderDetails.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _PurchaseOrderDetails.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _PurchaseOrderDetails.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PurchaseOrderDetailsID = "s_PurchaseOrderDetailsID";
            public const string PurchaseOrderID = "s_PurchaseOrderID";
            public const string TotalValue = "s_TotalValue";
            public const string UnitPrice = "s_UnitPrice";
            public const string QuantityRequired = "s_QuantityRequired";
            public const string StockOnHand = "s_StockOnHand";
            public const string Unit = "s_Unit";
            public const string Description = "s_Description";
            public const string Serial = "s_Serial";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PurchaseOrderDetailsID
	    {
			get
	        {
				return base.Getint(ColumnNames.PurchaseOrderDetailsID);
			}
			set
	        {
				base.Setint(ColumnNames.PurchaseOrderDetailsID, value);
			}
		}

		public virtual int PurchaseOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual double TotalValue
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalValue);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalValue, value);
			}
		}

		public virtual double UnitPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.UnitPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.UnitPrice, value);
			}
		}

		public virtual int QuantityRequired
	    {
			get
	        {
				return base.Getint(ColumnNames.QuantityRequired);
			}
			set
	        {
				base.Setint(ColumnNames.QuantityRequired, value);
			}
		}

		public virtual int StockOnHand
	    {
			get
	        {
				return base.Getint(ColumnNames.StockOnHand);
			}
			set
	        {
				base.Setint(ColumnNames.StockOnHand, value);
			}
		}

		public virtual int Unit
	    {
			get
	        {
				return base.Getint(ColumnNames.Unit);
			}
			set
	        {
				base.Setint(ColumnNames.Unit, value);
			}
		}

		public virtual string Description
	    {
			get
	        {
				return base.Getstring(ColumnNames.Description);
			}
			set
	        {
				base.Setstring(ColumnNames.Description, value);
			}
		}

		public virtual string Serial
	    {
			get
	        {
				return base.Getstring(ColumnNames.Serial);
			}
			set
	        {
				base.Setstring(ColumnNames.Serial, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PurchaseOrderDetailsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderDetailsID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderDetailsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderDetailsID);
				else
					this.PurchaseOrderDetailsID = base.SetintAsString(ColumnNames.PurchaseOrderDetailsID, value);
			}
		}

		public virtual string s_PurchaseOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderID);
				else
					this.PurchaseOrderID = base.SetintAsString(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual string s_TotalValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalValue) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalValue);
				else
					this.TotalValue = base.SetdoubleAsString(ColumnNames.TotalValue, value);
			}
		}

		public virtual string s_UnitPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.UnitPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitPrice);
				else
					this.UnitPrice = base.SetdoubleAsString(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string s_QuantityRequired
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QuantityRequired) ? string.Empty : base.GetintAsString(ColumnNames.QuantityRequired);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QuantityRequired);
				else
					this.QuantityRequired = base.SetintAsString(ColumnNames.QuantityRequired, value);
			}
		}

		public virtual string s_StockOnHand
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StockOnHand) ? string.Empty : base.GetintAsString(ColumnNames.StockOnHand);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StockOnHand);
				else
					this.StockOnHand = base.SetintAsString(ColumnNames.StockOnHand, value);
			}
		}

		public virtual string s_Unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Unit) ? string.Empty : base.GetintAsString(ColumnNames.Unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Unit);
				else
					this.Unit = base.SetintAsString(ColumnNames.Unit, value);
			}
		}

		public virtual string s_Description
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Description);
				else
					this.Description = base.SetstringAsString(ColumnNames.Description, value);
			}
		}

		public virtual string s_Serial
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Serial) ? string.Empty : base.GetstringAsString(ColumnNames.Serial);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Serial);
				else
					this.Serial = base.SetstringAsString(ColumnNames.Serial, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PurchaseOrderDetailsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderDetailsID, Parameters.PurchaseOrderDetailsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PurchaseOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalValue, Parameters.TotalValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QuantityRequired
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QuantityRequired, Parameters.QuantityRequired);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StockOnHand
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StockOnHand, Parameters.StockOnHand);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Unit, Parameters.Unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Description
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Serial
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Serial, Parameters.Serial);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PurchaseOrderDetailsID
		    {
				get
		        {
					if(_PurchaseOrderDetailsID_W == null)
	        	    {
						_PurchaseOrderDetailsID_W = TearOff.PurchaseOrderDetailsID;
					}
					return _PurchaseOrderDetailsID_W;
				}
			}

			public WhereParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public WhereParameter TotalValue
		    {
				get
		        {
					if(_TotalValue_W == null)
	        	    {
						_TotalValue_W = TearOff.TotalValue;
					}
					return _TotalValue_W;
				}
			}

			public WhereParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public WhereParameter QuantityRequired
		    {
				get
		        {
					if(_QuantityRequired_W == null)
	        	    {
						_QuantityRequired_W = TearOff.QuantityRequired;
					}
					return _QuantityRequired_W;
				}
			}

			public WhereParameter StockOnHand
		    {
				get
		        {
					if(_StockOnHand_W == null)
	        	    {
						_StockOnHand_W = TearOff.StockOnHand;
					}
					return _StockOnHand_W;
				}
			}

			public WhereParameter Unit
		    {
				get
		        {
					if(_Unit_W == null)
	        	    {
						_Unit_W = TearOff.Unit;
					}
					return _Unit_W;
				}
			}

			public WhereParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public WhereParameter Serial
		    {
				get
		        {
					if(_Serial_W == null)
	        	    {
						_Serial_W = TearOff.Serial;
					}
					return _Serial_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _PurchaseOrderDetailsID_W = null;
			private WhereParameter _PurchaseOrderID_W = null;
			private WhereParameter _TotalValue_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _QuantityRequired_W = null;
			private WhereParameter _StockOnHand_W = null;
			private WhereParameter _Unit_W = null;
			private WhereParameter _Description_W = null;
			private WhereParameter _Serial_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_PurchaseOrderDetailsID_W = null;
				_PurchaseOrderID_W = null;
				_TotalValue_W = null;
				_UnitPrice_W = null;
				_QuantityRequired_W = null;
				_StockOnHand_W = null;
				_Unit_W = null;
				_Description_W = null;
				_Serial_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PurchaseOrderDetailsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderDetailsID, Parameters.PurchaseOrderDetailsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PurchaseOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalValue, Parameters.TotalValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QuantityRequired
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuantityRequired, Parameters.QuantityRequired);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StockOnHand
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockOnHand, Parameters.StockOnHand);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Unit, Parameters.Unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Description
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Serial
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Serial, Parameters.Serial);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PurchaseOrderDetailsID
		    {
				get
		        {
					if(_PurchaseOrderDetailsID_W == null)
	        	    {
						_PurchaseOrderDetailsID_W = TearOff.PurchaseOrderDetailsID;
					}
					return _PurchaseOrderDetailsID_W;
				}
			}

			public AggregateParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public AggregateParameter TotalValue
		    {
				get
		        {
					if(_TotalValue_W == null)
	        	    {
						_TotalValue_W = TearOff.TotalValue;
					}
					return _TotalValue_W;
				}
			}

			public AggregateParameter UnitPrice
		    {
				get
		        {
					if(_UnitPrice_W == null)
	        	    {
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public AggregateParameter QuantityRequired
		    {
				get
		        {
					if(_QuantityRequired_W == null)
	        	    {
						_QuantityRequired_W = TearOff.QuantityRequired;
					}
					return _QuantityRequired_W;
				}
			}

			public AggregateParameter StockOnHand
		    {
				get
		        {
					if(_StockOnHand_W == null)
	        	    {
						_StockOnHand_W = TearOff.StockOnHand;
					}
					return _StockOnHand_W;
				}
			}

			public AggregateParameter Unit
		    {
				get
		        {
					if(_Unit_W == null)
	        	    {
						_Unit_W = TearOff.Unit;
					}
					return _Unit_W;
				}
			}

			public AggregateParameter Description
		    {
				get
		        {
					if(_Description_W == null)
	        	    {
						_Description_W = TearOff.Description;
					}
					return _Description_W;
				}
			}

			public AggregateParameter Serial
		    {
				get
		        {
					if(_Serial_W == null)
	        	    {
						_Serial_W = TearOff.Serial;
					}
					return _Serial_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _PurchaseOrderDetailsID_W = null;
			private AggregateParameter _PurchaseOrderID_W = null;
			private AggregateParameter _TotalValue_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _QuantityRequired_W = null;
			private AggregateParameter _StockOnHand_W = null;
			private AggregateParameter _Unit_W = null;
			private AggregateParameter _Description_W = null;
			private AggregateParameter _Serial_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PurchaseOrderDetailsID_W = null;
				_PurchaseOrderID_W = null;
				_TotalValue_W = null;
				_UnitPrice_W = null;
				_QuantityRequired_W = null;
				_StockOnHand_W = null;
				_Unit_W = null;
				_Description_W = null;
				_Serial_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PurchaseOrderDetailsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDetailsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PurchaseOrderDetailsID);
			p.SourceColumn = ColumnNames.PurchaseOrderDetailsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PurchaseOrderDetailsID);
			p.SourceColumn = ColumnNames.PurchaseOrderDetailsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
			p.SourceColumn = ColumnNames.PurchaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalValue);
			p.SourceColumn = ColumnNames.TotalValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UnitPrice);
			p.SourceColumn = ColumnNames.UnitPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QuantityRequired);
			p.SourceColumn = ColumnNames.QuantityRequired;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StockOnHand);
			p.SourceColumn = ColumnNames.StockOnHand;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Unit);
			p.SourceColumn = ColumnNames.Unit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Description);
			p.SourceColumn = ColumnNames.Description;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Serial);
			p.SourceColumn = ColumnNames.Serial;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
