
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Your.Namespace
{
	public abstract class _PurchaseOrder : SqlClientEntity
	{
		public _PurchaseOrder()
		{
			this.QuerySource = "PurchaseOrder";
			this.MappingName = "PurchaseOrder";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PurchaseOrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PurchaseOrderID, PurchaseOrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PurchaseOrderLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PurchaseOrderID
			{
				get
				{
					return new SqlParameter("@PurchaseOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PurchaseOrderNumber
			{
				get
				{
					return new SqlParameter("@PurchaseOrderNumber", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter PurchaseOrderDate
			{
				get
				{
					return new SqlParameter("@PurchaseOrderDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Management
			{
				get
				{
					return new SqlParameter("@Management", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter ISFinalProduct
			{
				get
				{
					return new SqlParameter("@ISFinalProduct", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ISSample
			{
				get
				{
					return new SqlParameter("@ISSample", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ISProductUnderManufacturing
			{
				get
				{
					return new SqlParameter("@ISProductUnderManufacturing", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DeliveryDate
			{
				get
				{
					return new SqlParameter("@DeliveryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DeliveryPlace
			{
				get
				{
					return new SqlParameter("@DeliveryPlace", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PaymentRequierment
			{
				get
				{
					return new SqlParameter("@PaymentRequierment", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter ManagerName
			{
				get
				{
					return new SqlParameter("@ManagerName", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter Signature
			{
				get
				{
					return new SqlParameter("@Signature", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string PurchaseOrderNumber = "PurchaseOrderNumber";
            public const string PurchaseOrderDate = "PurchaseOrderDate";
            public const string Management = "Management";
            public const string ISFinalProduct = "ISFinalProduct";
            public const string ISSample = "ISSample";
            public const string ISProductUnderManufacturing = "ISProductUnderManufacturing";
            public const string DeliveryDate = "DeliveryDate";
            public const string DeliveryPlace = "DeliveryPlace";
            public const string PaymentRequierment = "PaymentRequierment";
            public const string ManagerName = "ManagerName";
            public const string Signature = "Signature";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderID] = _PurchaseOrder.PropertyNames.PurchaseOrderID;
					ht[PurchaseOrderNumber] = _PurchaseOrder.PropertyNames.PurchaseOrderNumber;
					ht[PurchaseOrderDate] = _PurchaseOrder.PropertyNames.PurchaseOrderDate;
					ht[Management] = _PurchaseOrder.PropertyNames.Management;
					ht[ISFinalProduct] = _PurchaseOrder.PropertyNames.ISFinalProduct;
					ht[ISSample] = _PurchaseOrder.PropertyNames.ISSample;
					ht[ISProductUnderManufacturing] = _PurchaseOrder.PropertyNames.ISProductUnderManufacturing;
					ht[DeliveryDate] = _PurchaseOrder.PropertyNames.DeliveryDate;
					ht[DeliveryPlace] = _PurchaseOrder.PropertyNames.DeliveryPlace;
					ht[PaymentRequierment] = _PurchaseOrder.PropertyNames.PaymentRequierment;
					ht[ManagerName] = _PurchaseOrder.PropertyNames.ManagerName;
					ht[Signature] = _PurchaseOrder.PropertyNames.Signature;
					ht[CreatedBy] = _PurchaseOrder.PropertyNames.CreatedBy;
					ht[CreatedDate] = _PurchaseOrder.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _PurchaseOrder.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _PurchaseOrder.PropertyNames.LastUpdatedDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PurchaseOrderID = "PurchaseOrderID";
            public const string PurchaseOrderNumber = "PurchaseOrderNumber";
            public const string PurchaseOrderDate = "PurchaseOrderDate";
            public const string Management = "Management";
            public const string ISFinalProduct = "ISFinalProduct";
            public const string ISSample = "ISSample";
            public const string ISProductUnderManufacturing = "ISProductUnderManufacturing";
            public const string DeliveryDate = "DeliveryDate";
            public const string DeliveryPlace = "DeliveryPlace";
            public const string PaymentRequierment = "PaymentRequierment";
            public const string ManagerName = "ManagerName";
            public const string Signature = "Signature";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PurchaseOrderID] = _PurchaseOrder.ColumnNames.PurchaseOrderID;
					ht[PurchaseOrderNumber] = _PurchaseOrder.ColumnNames.PurchaseOrderNumber;
					ht[PurchaseOrderDate] = _PurchaseOrder.ColumnNames.PurchaseOrderDate;
					ht[Management] = _PurchaseOrder.ColumnNames.Management;
					ht[ISFinalProduct] = _PurchaseOrder.ColumnNames.ISFinalProduct;
					ht[ISSample] = _PurchaseOrder.ColumnNames.ISSample;
					ht[ISProductUnderManufacturing] = _PurchaseOrder.ColumnNames.ISProductUnderManufacturing;
					ht[DeliveryDate] = _PurchaseOrder.ColumnNames.DeliveryDate;
					ht[DeliveryPlace] = _PurchaseOrder.ColumnNames.DeliveryPlace;
					ht[PaymentRequierment] = _PurchaseOrder.ColumnNames.PaymentRequierment;
					ht[ManagerName] = _PurchaseOrder.ColumnNames.ManagerName;
					ht[Signature] = _PurchaseOrder.ColumnNames.Signature;
					ht[CreatedBy] = _PurchaseOrder.ColumnNames.CreatedBy;
					ht[CreatedDate] = _PurchaseOrder.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _PurchaseOrder.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _PurchaseOrder.ColumnNames.LastUpdatedDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PurchaseOrderID = "s_PurchaseOrderID";
            public const string PurchaseOrderNumber = "s_PurchaseOrderNumber";
            public const string PurchaseOrderDate = "s_PurchaseOrderDate";
            public const string Management = "s_Management";
            public const string ISFinalProduct = "s_ISFinalProduct";
            public const string ISSample = "s_ISSample";
            public const string ISProductUnderManufacturing = "s_ISProductUnderManufacturing";
            public const string DeliveryDate = "s_DeliveryDate";
            public const string DeliveryPlace = "s_DeliveryPlace";
            public const string PaymentRequierment = "s_PaymentRequierment";
            public const string ManagerName = "s_ManagerName";
            public const string Signature = "s_Signature";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PurchaseOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual string PurchaseOrderNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.PurchaseOrderNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.PurchaseOrderNumber, value);
			}
		}

		public virtual DateTime PurchaseOrderDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PurchaseOrderDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PurchaseOrderDate, value);
			}
		}

		public virtual string Management
	    {
			get
	        {
				return base.Getstring(ColumnNames.Management);
			}
			set
	        {
				base.Setstring(ColumnNames.Management, value);
			}
		}

		public virtual bool ISFinalProduct
	    {
			get
	        {
				return base.Getbool(ColumnNames.ISFinalProduct);
			}
			set
	        {
				base.Setbool(ColumnNames.ISFinalProduct, value);
			}
		}

		public virtual bool ISSample
	    {
			get
	        {
				return base.Getbool(ColumnNames.ISSample);
			}
			set
	        {
				base.Setbool(ColumnNames.ISSample, value);
			}
		}

		public virtual bool ISProductUnderManufacturing
	    {
			get
	        {
				return base.Getbool(ColumnNames.ISProductUnderManufacturing);
			}
			set
	        {
				base.Setbool(ColumnNames.ISProductUnderManufacturing, value);
			}
		}

		public virtual DateTime DeliveryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DeliveryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual string DeliveryPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryPlace, value);
			}
		}

		public virtual string PaymentRequierment
	    {
			get
	        {
				return base.Getstring(ColumnNames.PaymentRequierment);
			}
			set
	        {
				base.Setstring(ColumnNames.PaymentRequierment, value);
			}
		}

		public virtual string ManagerName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ManagerName);
			}
			set
	        {
				base.Setstring(ColumnNames.ManagerName, value);
			}
		}

		public virtual string Signature
	    {
			get
	        {
				return base.Getstring(ColumnNames.Signature);
			}
			set
	        {
				base.Setstring(ColumnNames.Signature, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PurchaseOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderID) ? string.Empty : base.GetintAsString(ColumnNames.PurchaseOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderID);
				else
					this.PurchaseOrderID = base.SetintAsString(ColumnNames.PurchaseOrderID, value);
			}
		}

		public virtual string s_PurchaseOrderNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderNumber) ? string.Empty : base.GetstringAsString(ColumnNames.PurchaseOrderNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderNumber);
				else
					this.PurchaseOrderNumber = base.SetstringAsString(ColumnNames.PurchaseOrderNumber, value);
			}
		}

		public virtual string s_PurchaseOrderDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PurchaseOrderDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PurchaseOrderDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PurchaseOrderDate);
				else
					this.PurchaseOrderDate = base.SetDateTimeAsString(ColumnNames.PurchaseOrderDate, value);
			}
		}

		public virtual string s_Management
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Management) ? string.Empty : base.GetstringAsString(ColumnNames.Management);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Management);
				else
					this.Management = base.SetstringAsString(ColumnNames.Management, value);
			}
		}

		public virtual string s_ISFinalProduct
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ISFinalProduct) ? string.Empty : base.GetboolAsString(ColumnNames.ISFinalProduct);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ISFinalProduct);
				else
					this.ISFinalProduct = base.SetboolAsString(ColumnNames.ISFinalProduct, value);
			}
		}

		public virtual string s_ISSample
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ISSample) ? string.Empty : base.GetboolAsString(ColumnNames.ISSample);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ISSample);
				else
					this.ISSample = base.SetboolAsString(ColumnNames.ISSample, value);
			}
		}

		public virtual string s_ISProductUnderManufacturing
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ISProductUnderManufacturing) ? string.Empty : base.GetboolAsString(ColumnNames.ISProductUnderManufacturing);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ISProductUnderManufacturing);
				else
					this.ISProductUnderManufacturing = base.SetboolAsString(ColumnNames.ISProductUnderManufacturing, value);
			}
		}

		public virtual string s_DeliveryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DeliveryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryDate);
				else
					this.DeliveryDate = base.SetDateTimeAsString(ColumnNames.DeliveryDate, value);
			}
		}

		public virtual string s_DeliveryPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryPlace) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryPlace);
				else
					this.DeliveryPlace = base.SetstringAsString(ColumnNames.DeliveryPlace, value);
			}
		}

		public virtual string s_PaymentRequierment
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentRequierment) ? string.Empty : base.GetstringAsString(ColumnNames.PaymentRequierment);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentRequierment);
				else
					this.PaymentRequierment = base.SetstringAsString(ColumnNames.PaymentRequierment, value);
			}
		}

		public virtual string s_ManagerName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManagerName) ? string.Empty : base.GetstringAsString(ColumnNames.ManagerName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManagerName);
				else
					this.ManagerName = base.SetstringAsString(ColumnNames.ManagerName, value);
			}
		}

		public virtual string s_Signature
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Signature) ? string.Empty : base.GetstringAsString(ColumnNames.Signature);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Signature);
				else
					this.Signature = base.SetstringAsString(ColumnNames.Signature, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PurchaseOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PurchaseOrderNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderNumber, Parameters.PurchaseOrderNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PurchaseOrderDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PurchaseOrderDate, Parameters.PurchaseOrderDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Management
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Management, Parameters.Management);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ISFinalProduct
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ISFinalProduct, Parameters.ISFinalProduct);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ISSample
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ISSample, Parameters.ISSample);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ISProductUnderManufacturing
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ISProductUnderManufacturing, Parameters.ISProductUnderManufacturing);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryPlace, Parameters.DeliveryPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentRequierment
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentRequierment, Parameters.PaymentRequierment);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManagerName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManagerName, Parameters.ManagerName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Signature
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Signature, Parameters.Signature);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public WhereParameter PurchaseOrderNumber
		    {
				get
		        {
					if(_PurchaseOrderNumber_W == null)
	        	    {
						_PurchaseOrderNumber_W = TearOff.PurchaseOrderNumber;
					}
					return _PurchaseOrderNumber_W;
				}
			}

			public WhereParameter PurchaseOrderDate
		    {
				get
		        {
					if(_PurchaseOrderDate_W == null)
	        	    {
						_PurchaseOrderDate_W = TearOff.PurchaseOrderDate;
					}
					return _PurchaseOrderDate_W;
				}
			}

			public WhereParameter Management
		    {
				get
		        {
					if(_Management_W == null)
	        	    {
						_Management_W = TearOff.Management;
					}
					return _Management_W;
				}
			}

			public WhereParameter ISFinalProduct
		    {
				get
		        {
					if(_ISFinalProduct_W == null)
	        	    {
						_ISFinalProduct_W = TearOff.ISFinalProduct;
					}
					return _ISFinalProduct_W;
				}
			}

			public WhereParameter ISSample
		    {
				get
		        {
					if(_ISSample_W == null)
	        	    {
						_ISSample_W = TearOff.ISSample;
					}
					return _ISSample_W;
				}
			}

			public WhereParameter ISProductUnderManufacturing
		    {
				get
		        {
					if(_ISProductUnderManufacturing_W == null)
	        	    {
						_ISProductUnderManufacturing_W = TearOff.ISProductUnderManufacturing;
					}
					return _ISProductUnderManufacturing_W;
				}
			}

			public WhereParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public WhereParameter DeliveryPlace
		    {
				get
		        {
					if(_DeliveryPlace_W == null)
	        	    {
						_DeliveryPlace_W = TearOff.DeliveryPlace;
					}
					return _DeliveryPlace_W;
				}
			}

			public WhereParameter PaymentRequierment
		    {
				get
		        {
					if(_PaymentRequierment_W == null)
	        	    {
						_PaymentRequierment_W = TearOff.PaymentRequierment;
					}
					return _PaymentRequierment_W;
				}
			}

			public WhereParameter ManagerName
		    {
				get
		        {
					if(_ManagerName_W == null)
	        	    {
						_ManagerName_W = TearOff.ManagerName;
					}
					return _ManagerName_W;
				}
			}

			public WhereParameter Signature
		    {
				get
		        {
					if(_Signature_W == null)
	        	    {
						_Signature_W = TearOff.Signature;
					}
					return _Signature_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private WhereParameter _PurchaseOrderID_W = null;
			private WhereParameter _PurchaseOrderNumber_W = null;
			private WhereParameter _PurchaseOrderDate_W = null;
			private WhereParameter _Management_W = null;
			private WhereParameter _ISFinalProduct_W = null;
			private WhereParameter _ISSample_W = null;
			private WhereParameter _ISProductUnderManufacturing_W = null;
			private WhereParameter _DeliveryDate_W = null;
			private WhereParameter _DeliveryPlace_W = null;
			private WhereParameter _PaymentRequierment_W = null;
			private WhereParameter _ManagerName_W = null;
			private WhereParameter _Signature_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;

			public void WhereClauseReset()
			{
				_PurchaseOrderID_W = null;
				_PurchaseOrderNumber_W = null;
				_PurchaseOrderDate_W = null;
				_Management_W = null;
				_ISFinalProduct_W = null;
				_ISSample_W = null;
				_ISProductUnderManufacturing_W = null;
				_DeliveryDate_W = null;
				_DeliveryPlace_W = null;
				_PaymentRequierment_W = null;
				_ManagerName_W = null;
				_Signature_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PurchaseOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderID, Parameters.PurchaseOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PurchaseOrderNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderNumber, Parameters.PurchaseOrderNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PurchaseOrderDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PurchaseOrderDate, Parameters.PurchaseOrderDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Management
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Management, Parameters.Management);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ISFinalProduct
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ISFinalProduct, Parameters.ISFinalProduct);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ISSample
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ISSample, Parameters.ISSample);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ISProductUnderManufacturing
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ISProductUnderManufacturing, Parameters.ISProductUnderManufacturing);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryDate, Parameters.DeliveryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryPlace, Parameters.DeliveryPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentRequierment
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentRequierment, Parameters.PaymentRequierment);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManagerName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManagerName, Parameters.ManagerName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Signature
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Signature, Parameters.Signature);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PurchaseOrderID
		    {
				get
		        {
					if(_PurchaseOrderID_W == null)
	        	    {
						_PurchaseOrderID_W = TearOff.PurchaseOrderID;
					}
					return _PurchaseOrderID_W;
				}
			}

			public AggregateParameter PurchaseOrderNumber
		    {
				get
		        {
					if(_PurchaseOrderNumber_W == null)
	        	    {
						_PurchaseOrderNumber_W = TearOff.PurchaseOrderNumber;
					}
					return _PurchaseOrderNumber_W;
				}
			}

			public AggregateParameter PurchaseOrderDate
		    {
				get
		        {
					if(_PurchaseOrderDate_W == null)
	        	    {
						_PurchaseOrderDate_W = TearOff.PurchaseOrderDate;
					}
					return _PurchaseOrderDate_W;
				}
			}

			public AggregateParameter Management
		    {
				get
		        {
					if(_Management_W == null)
	        	    {
						_Management_W = TearOff.Management;
					}
					return _Management_W;
				}
			}

			public AggregateParameter ISFinalProduct
		    {
				get
		        {
					if(_ISFinalProduct_W == null)
	        	    {
						_ISFinalProduct_W = TearOff.ISFinalProduct;
					}
					return _ISFinalProduct_W;
				}
			}

			public AggregateParameter ISSample
		    {
				get
		        {
					if(_ISSample_W == null)
	        	    {
						_ISSample_W = TearOff.ISSample;
					}
					return _ISSample_W;
				}
			}

			public AggregateParameter ISProductUnderManufacturing
		    {
				get
		        {
					if(_ISProductUnderManufacturing_W == null)
	        	    {
						_ISProductUnderManufacturing_W = TearOff.ISProductUnderManufacturing;
					}
					return _ISProductUnderManufacturing_W;
				}
			}

			public AggregateParameter DeliveryDate
		    {
				get
		        {
					if(_DeliveryDate_W == null)
	        	    {
						_DeliveryDate_W = TearOff.DeliveryDate;
					}
					return _DeliveryDate_W;
				}
			}

			public AggregateParameter DeliveryPlace
		    {
				get
		        {
					if(_DeliveryPlace_W == null)
	        	    {
						_DeliveryPlace_W = TearOff.DeliveryPlace;
					}
					return _DeliveryPlace_W;
				}
			}

			public AggregateParameter PaymentRequierment
		    {
				get
		        {
					if(_PaymentRequierment_W == null)
	        	    {
						_PaymentRequierment_W = TearOff.PaymentRequierment;
					}
					return _PaymentRequierment_W;
				}
			}

			public AggregateParameter ManagerName
		    {
				get
		        {
					if(_ManagerName_W == null)
	        	    {
						_ManagerName_W = TearOff.ManagerName;
					}
					return _ManagerName_W;
				}
			}

			public AggregateParameter Signature
		    {
				get
		        {
					if(_Signature_W == null)
	        	    {
						_Signature_W = TearOff.Signature;
					}
					return _Signature_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			private AggregateParameter _PurchaseOrderID_W = null;
			private AggregateParameter _PurchaseOrderNumber_W = null;
			private AggregateParameter _PurchaseOrderDate_W = null;
			private AggregateParameter _Management_W = null;
			private AggregateParameter _ISFinalProduct_W = null;
			private AggregateParameter _ISSample_W = null;
			private AggregateParameter _ISProductUnderManufacturing_W = null;
			private AggregateParameter _DeliveryDate_W = null;
			private AggregateParameter _DeliveryPlace_W = null;
			private AggregateParameter _PaymentRequierment_W = null;
			private AggregateParameter _ManagerName_W = null;
			private AggregateParameter _Signature_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;

			public void AggregateClauseReset()
			{
				_PurchaseOrderID_W = null;
				_PurchaseOrderNumber_W = null;
				_PurchaseOrderDate_W = null;
				_Management_W = null;
				_ISFinalProduct_W = null;
				_ISSample_W = null;
				_ISProductUnderManufacturing_W = null;
				_DeliveryDate_W = null;
				_DeliveryPlace_W = null;
				_PaymentRequierment_W = null;
				_ManagerName_W = null;
				_Signature_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PurchaseOrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PurchaseOrderDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
			p.SourceColumn = ColumnNames.PurchaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PurchaseOrderID);
			p.SourceColumn = ColumnNames.PurchaseOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PurchaseOrderNumber);
			p.SourceColumn = ColumnNames.PurchaseOrderNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PurchaseOrderDate);
			p.SourceColumn = ColumnNames.PurchaseOrderDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Management);
			p.SourceColumn = ColumnNames.Management;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ISFinalProduct);
			p.SourceColumn = ColumnNames.ISFinalProduct;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ISSample);
			p.SourceColumn = ColumnNames.ISSample;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ISProductUnderManufacturing);
			p.SourceColumn = ColumnNames.ISProductUnderManufacturing;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryDate);
			p.SourceColumn = ColumnNames.DeliveryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryPlace);
			p.SourceColumn = ColumnNames.DeliveryPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentRequierment);
			p.SourceColumn = ColumnNames.PaymentRequierment;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManagerName);
			p.SourceColumn = ColumnNames.ManagerName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Signature);
			p.SourceColumn = ColumnNames.Signature;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
