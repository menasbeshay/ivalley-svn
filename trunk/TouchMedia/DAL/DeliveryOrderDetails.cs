
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _DeliveryOrderDetails : SqlClientEntity
	{
		public _DeliveryOrderDetails()
		{
			this.QuerySource = "DeliveryOrderDetails";
			this.MappingName = "DeliveryOrderDetails";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDetailsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int DeliveryOrderDetailsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.DeliveryOrderDetailsID, DeliveryOrderDetailsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDetailsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter DeliveryOrderDetailsID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderDetailsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryOrderID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryOrderStatusID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DeliveryFrom
			{
				get
				{
					return new SqlParameter("@DeliveryFrom", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter DeliveryTo
			{
				get
				{
					return new SqlParameter("@DeliveryTo", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter DateFrom
			{
				get
				{
					return new SqlParameter("@DateFrom", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DateTo
			{
				get
				{
					return new SqlParameter("@DateTo", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReceivableName
			{
				get
				{
					return new SqlParameter("@ReceivableName", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter ReceivableTelephone
			{
				get
				{
					return new SqlParameter("@ReceivableTelephone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Price
			{
				get
				{
					return new SqlParameter("@Price", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DeliveryOrderCode
			{
				get
				{
					return new SqlParameter("@DeliveryOrderCode", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter DeliveryOrderDetailsStatusID
			{
				get
				{
					return new SqlParameter("@DeliveryOrderDetailsStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter LastUpdatedDate
			{
				get
				{
					return new SqlParameter("@LastUpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter WatingHours
			{
				get
				{
					return new SqlParameter("@WatingHours", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string DeliveryOrderDetailsID = "DeliveryOrderDetailsID";
            public const string DeliveryOrderID = "DeliveryOrderID";
            public const string DeliveryOrderStatusID = "DeliveryOrderStatusID";
            public const string DeliveryFrom = "DeliveryFrom";
            public const string DeliveryTo = "DeliveryTo";
            public const string DateFrom = "DateFrom";
            public const string DateTo = "DateTo";
            public const string ReceivableName = "ReceivableName";
            public const string ReceivableTelephone = "ReceivableTelephone";
            public const string Price = "Price";
            public const string DeliveryOrderCode = "DeliveryOrderCode";
            public const string DeliveryOrderDetailsStatusID = "DeliveryOrderDetailsStatusID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";
            public const string WatingHours = "WatingHours";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeliveryOrderDetailsID] = _DeliveryOrderDetails.PropertyNames.DeliveryOrderDetailsID;
					ht[DeliveryOrderID] = _DeliveryOrderDetails.PropertyNames.DeliveryOrderID;
					ht[DeliveryOrderStatusID] = _DeliveryOrderDetails.PropertyNames.DeliveryOrderStatusID;
					ht[DeliveryFrom] = _DeliveryOrderDetails.PropertyNames.DeliveryFrom;
					ht[DeliveryTo] = _DeliveryOrderDetails.PropertyNames.DeliveryTo;
					ht[DateFrom] = _DeliveryOrderDetails.PropertyNames.DateFrom;
					ht[DateTo] = _DeliveryOrderDetails.PropertyNames.DateTo;
					ht[ReceivableName] = _DeliveryOrderDetails.PropertyNames.ReceivableName;
					ht[ReceivableTelephone] = _DeliveryOrderDetails.PropertyNames.ReceivableTelephone;
					ht[Price] = _DeliveryOrderDetails.PropertyNames.Price;
					ht[DeliveryOrderCode] = _DeliveryOrderDetails.PropertyNames.DeliveryOrderCode;
					ht[DeliveryOrderDetailsStatusID] = _DeliveryOrderDetails.PropertyNames.DeliveryOrderDetailsStatusID;
					ht[CreatedBy] = _DeliveryOrderDetails.PropertyNames.CreatedBy;
					ht[CreatedDate] = _DeliveryOrderDetails.PropertyNames.CreatedDate;
					ht[UpdatedBy] = _DeliveryOrderDetails.PropertyNames.UpdatedBy;
					ht[LastUpdatedDate] = _DeliveryOrderDetails.PropertyNames.LastUpdatedDate;
					ht[WatingHours] = _DeliveryOrderDetails.PropertyNames.WatingHours;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string DeliveryOrderDetailsID = "DeliveryOrderDetailsID";
            public const string DeliveryOrderID = "DeliveryOrderID";
            public const string DeliveryOrderStatusID = "DeliveryOrderStatusID";
            public const string DeliveryFrom = "DeliveryFrom";
            public const string DeliveryTo = "DeliveryTo";
            public const string DateFrom = "DateFrom";
            public const string DateTo = "DateTo";
            public const string ReceivableName = "ReceivableName";
            public const string ReceivableTelephone = "ReceivableTelephone";
            public const string Price = "Price";
            public const string DeliveryOrderCode = "DeliveryOrderCode";
            public const string DeliveryOrderDetailsStatusID = "DeliveryOrderDetailsStatusID";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string LastUpdatedDate = "LastUpdatedDate";
            public const string WatingHours = "WatingHours";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[DeliveryOrderDetailsID] = _DeliveryOrderDetails.ColumnNames.DeliveryOrderDetailsID;
					ht[DeliveryOrderID] = _DeliveryOrderDetails.ColumnNames.DeliveryOrderID;
					ht[DeliveryOrderStatusID] = _DeliveryOrderDetails.ColumnNames.DeliveryOrderStatusID;
					ht[DeliveryFrom] = _DeliveryOrderDetails.ColumnNames.DeliveryFrom;
					ht[DeliveryTo] = _DeliveryOrderDetails.ColumnNames.DeliveryTo;
					ht[DateFrom] = _DeliveryOrderDetails.ColumnNames.DateFrom;
					ht[DateTo] = _DeliveryOrderDetails.ColumnNames.DateTo;
					ht[ReceivableName] = _DeliveryOrderDetails.ColumnNames.ReceivableName;
					ht[ReceivableTelephone] = _DeliveryOrderDetails.ColumnNames.ReceivableTelephone;
					ht[Price] = _DeliveryOrderDetails.ColumnNames.Price;
					ht[DeliveryOrderCode] = _DeliveryOrderDetails.ColumnNames.DeliveryOrderCode;
					ht[DeliveryOrderDetailsStatusID] = _DeliveryOrderDetails.ColumnNames.DeliveryOrderDetailsStatusID;
					ht[CreatedBy] = _DeliveryOrderDetails.ColumnNames.CreatedBy;
					ht[CreatedDate] = _DeliveryOrderDetails.ColumnNames.CreatedDate;
					ht[UpdatedBy] = _DeliveryOrderDetails.ColumnNames.UpdatedBy;
					ht[LastUpdatedDate] = _DeliveryOrderDetails.ColumnNames.LastUpdatedDate;
					ht[WatingHours] = _DeliveryOrderDetails.ColumnNames.WatingHours;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string DeliveryOrderDetailsID = "s_DeliveryOrderDetailsID";
            public const string DeliveryOrderID = "s_DeliveryOrderID";
            public const string DeliveryOrderStatusID = "s_DeliveryOrderStatusID";
            public const string DeliveryFrom = "s_DeliveryFrom";
            public const string DeliveryTo = "s_DeliveryTo";
            public const string DateFrom = "s_DateFrom";
            public const string DateTo = "s_DateTo";
            public const string ReceivableName = "s_ReceivableName";
            public const string ReceivableTelephone = "s_ReceivableTelephone";
            public const string Price = "s_Price";
            public const string DeliveryOrderCode = "s_DeliveryOrderCode";
            public const string DeliveryOrderDetailsStatusID = "s_DeliveryOrderDetailsStatusID";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string LastUpdatedDate = "s_LastUpdatedDate";
            public const string WatingHours = "s_WatingHours";

		}
		#endregion		
		
		#region Properties
	
		public virtual int DeliveryOrderDetailsID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderDetailsID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderDetailsID, value);
			}
		}

		public virtual int DeliveryOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderID, value);
			}
		}

		public virtual int DeliveryOrderStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderStatusID, value);
			}
		}

		public virtual string DeliveryFrom
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryFrom);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryFrom, value);
			}
		}

		public virtual string DeliveryTo
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryTo);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual DateTime DateFrom
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateFrom);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateFrom, value);
			}
		}

		public virtual DateTime DateTo
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateTo);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateTo, value);
			}
		}

		public virtual string ReceivableName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReceivableName);
			}
			set
	        {
				base.Setstring(ColumnNames.ReceivableName, value);
			}
		}

		public virtual string ReceivableTelephone
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReceivableTelephone);
			}
			set
	        {
				base.Setstring(ColumnNames.ReceivableTelephone, value);
			}
		}

		public virtual double Price
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Price);
			}
			set
	        {
				base.Setdouble(ColumnNames.Price, value);
			}
		}

		public virtual string DeliveryOrderCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.DeliveryOrderCode);
			}
			set
	        {
				base.Setstring(ColumnNames.DeliveryOrderCode, value);
			}
		}

		public virtual int DeliveryOrderDetailsStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.DeliveryOrderDetailsStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.DeliveryOrderDetailsStatusID, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual DateTime LastUpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastUpdatedDate, value);
			}
		}

		public virtual double WatingHours
	    {
			get
	        {
				return base.Getdouble(ColumnNames.WatingHours);
			}
			set
	        {
				base.Setdouble(ColumnNames.WatingHours, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_DeliveryOrderDetailsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderDetailsID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderDetailsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderDetailsID);
				else
					this.DeliveryOrderDetailsID = base.SetintAsString(ColumnNames.DeliveryOrderDetailsID, value);
			}
		}

		public virtual string s_DeliveryOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderID);
				else
					this.DeliveryOrderID = base.SetintAsString(ColumnNames.DeliveryOrderID, value);
			}
		}

		public virtual string s_DeliveryOrderStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderStatusID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderStatusID);
				else
					this.DeliveryOrderStatusID = base.SetintAsString(ColumnNames.DeliveryOrderStatusID, value);
			}
		}

		public virtual string s_DeliveryFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryFrom) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryFrom);
				else
					this.DeliveryFrom = base.SetstringAsString(ColumnNames.DeliveryFrom, value);
			}
		}

		public virtual string s_DeliveryTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryTo) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryTo);
				else
					this.DeliveryTo = base.SetstringAsString(ColumnNames.DeliveryTo, value);
			}
		}

		public virtual string s_DateFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateFrom) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateFrom);
				else
					this.DateFrom = base.SetDateTimeAsString(ColumnNames.DateFrom, value);
			}
		}

		public virtual string s_DateTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateTo) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateTo);
				else
					this.DateTo = base.SetDateTimeAsString(ColumnNames.DateTo, value);
			}
		}

		public virtual string s_ReceivableName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivableName) ? string.Empty : base.GetstringAsString(ColumnNames.ReceivableName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivableName);
				else
					this.ReceivableName = base.SetstringAsString(ColumnNames.ReceivableName, value);
			}
		}

		public virtual string s_ReceivableTelephone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceivableTelephone) ? string.Empty : base.GetstringAsString(ColumnNames.ReceivableTelephone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceivableTelephone);
				else
					this.ReceivableTelephone = base.SetstringAsString(ColumnNames.ReceivableTelephone, value);
			}
		}

		public virtual string s_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price) ? string.Empty : base.GetdoubleAsString(ColumnNames.Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price);
				else
					this.Price = base.SetdoubleAsString(ColumnNames.Price, value);
			}
		}

		public virtual string s_DeliveryOrderCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderCode) ? string.Empty : base.GetstringAsString(ColumnNames.DeliveryOrderCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderCode);
				else
					this.DeliveryOrderCode = base.SetstringAsString(ColumnNames.DeliveryOrderCode, value);
			}
		}

		public virtual string s_DeliveryOrderDetailsStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DeliveryOrderDetailsStatusID) ? string.Empty : base.GetintAsString(ColumnNames.DeliveryOrderDetailsStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DeliveryOrderDetailsStatusID);
				else
					this.DeliveryOrderDetailsStatusID = base.SetintAsString(ColumnNames.DeliveryOrderDetailsStatusID, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_LastUpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastUpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastUpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastUpdatedDate);
				else
					this.LastUpdatedDate = base.SetDateTimeAsString(ColumnNames.LastUpdatedDate, value);
			}
		}

		public virtual string s_WatingHours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WatingHours) ? string.Empty : base.GetdoubleAsString(ColumnNames.WatingHours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WatingHours);
				else
					this.WatingHours = base.SetdoubleAsString(ColumnNames.WatingHours, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter DeliveryOrderDetailsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderDetailsID, Parameters.DeliveryOrderDetailsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderID, Parameters.DeliveryOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryOrderStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderStatusID, Parameters.DeliveryOrderStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryFrom, Parameters.DeliveryFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateFrom, Parameters.DateFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateTo, Parameters.DateTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivableName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivableName, Parameters.ReceivableName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceivableTelephone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceivableTelephone, Parameters.ReceivableTelephone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryOrderCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderCode, Parameters.DeliveryOrderCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DeliveryOrderDetailsStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DeliveryOrderDetailsStatusID, Parameters.DeliveryOrderDetailsStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastUpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WatingHours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WatingHours, Parameters.WatingHours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter DeliveryOrderDetailsID
		    {
				get
		        {
					if(_DeliveryOrderDetailsID_W == null)
	        	    {
						_DeliveryOrderDetailsID_W = TearOff.DeliveryOrderDetailsID;
					}
					return _DeliveryOrderDetailsID_W;
				}
			}

			public WhereParameter DeliveryOrderID
		    {
				get
		        {
					if(_DeliveryOrderID_W == null)
	        	    {
						_DeliveryOrderID_W = TearOff.DeliveryOrderID;
					}
					return _DeliveryOrderID_W;
				}
			}

			public WhereParameter DeliveryOrderStatusID
		    {
				get
		        {
					if(_DeliveryOrderStatusID_W == null)
	        	    {
						_DeliveryOrderStatusID_W = TearOff.DeliveryOrderStatusID;
					}
					return _DeliveryOrderStatusID_W;
				}
			}

			public WhereParameter DeliveryFrom
		    {
				get
		        {
					if(_DeliveryFrom_W == null)
	        	    {
						_DeliveryFrom_W = TearOff.DeliveryFrom;
					}
					return _DeliveryFrom_W;
				}
			}

			public WhereParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public WhereParameter DateFrom
		    {
				get
		        {
					if(_DateFrom_W == null)
	        	    {
						_DateFrom_W = TearOff.DateFrom;
					}
					return _DateFrom_W;
				}
			}

			public WhereParameter DateTo
		    {
				get
		        {
					if(_DateTo_W == null)
	        	    {
						_DateTo_W = TearOff.DateTo;
					}
					return _DateTo_W;
				}
			}

			public WhereParameter ReceivableName
		    {
				get
		        {
					if(_ReceivableName_W == null)
	        	    {
						_ReceivableName_W = TearOff.ReceivableName;
					}
					return _ReceivableName_W;
				}
			}

			public WhereParameter ReceivableTelephone
		    {
				get
		        {
					if(_ReceivableTelephone_W == null)
	        	    {
						_ReceivableTelephone_W = TearOff.ReceivableTelephone;
					}
					return _ReceivableTelephone_W;
				}
			}

			public WhereParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public WhereParameter DeliveryOrderCode
		    {
				get
		        {
					if(_DeliveryOrderCode_W == null)
	        	    {
						_DeliveryOrderCode_W = TearOff.DeliveryOrderCode;
					}
					return _DeliveryOrderCode_W;
				}
			}

			public WhereParameter DeliveryOrderDetailsStatusID
		    {
				get
		        {
					if(_DeliveryOrderDetailsStatusID_W == null)
	        	    {
						_DeliveryOrderDetailsStatusID_W = TearOff.DeliveryOrderDetailsStatusID;
					}
					return _DeliveryOrderDetailsStatusID_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			public WhereParameter WatingHours
		    {
				get
		        {
					if(_WatingHours_W == null)
	        	    {
						_WatingHours_W = TearOff.WatingHours;
					}
					return _WatingHours_W;
				}
			}

			private WhereParameter _DeliveryOrderDetailsID_W = null;
			private WhereParameter _DeliveryOrderID_W = null;
			private WhereParameter _DeliveryOrderStatusID_W = null;
			private WhereParameter _DeliveryFrom_W = null;
			private WhereParameter _DeliveryTo_W = null;
			private WhereParameter _DateFrom_W = null;
			private WhereParameter _DateTo_W = null;
			private WhereParameter _ReceivableName_W = null;
			private WhereParameter _ReceivableTelephone_W = null;
			private WhereParameter _Price_W = null;
			private WhereParameter _DeliveryOrderCode_W = null;
			private WhereParameter _DeliveryOrderDetailsStatusID_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _LastUpdatedDate_W = null;
			private WhereParameter _WatingHours_W = null;

			public void WhereClauseReset()
			{
				_DeliveryOrderDetailsID_W = null;
				_DeliveryOrderID_W = null;
				_DeliveryOrderStatusID_W = null;
				_DeliveryFrom_W = null;
				_DeliveryTo_W = null;
				_DateFrom_W = null;
				_DateTo_W = null;
				_ReceivableName_W = null;
				_ReceivableTelephone_W = null;
				_Price_W = null;
				_DeliveryOrderCode_W = null;
				_DeliveryOrderDetailsStatusID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;
				_WatingHours_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter DeliveryOrderDetailsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderDetailsID, Parameters.DeliveryOrderDetailsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderID, Parameters.DeliveryOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryOrderStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderStatusID, Parameters.DeliveryOrderStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryFrom, Parameters.DeliveryFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryTo, Parameters.DeliveryTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateFrom, Parameters.DateFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateTo, Parameters.DateTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivableName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivableName, Parameters.ReceivableName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceivableTelephone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceivableTelephone, Parameters.ReceivableTelephone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryOrderCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderCode, Parameters.DeliveryOrderCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DeliveryOrderDetailsStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DeliveryOrderDetailsStatusID, Parameters.DeliveryOrderDetailsStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastUpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastUpdatedDate, Parameters.LastUpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WatingHours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WatingHours, Parameters.WatingHours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter DeliveryOrderDetailsID
		    {
				get
		        {
					if(_DeliveryOrderDetailsID_W == null)
	        	    {
						_DeliveryOrderDetailsID_W = TearOff.DeliveryOrderDetailsID;
					}
					return _DeliveryOrderDetailsID_W;
				}
			}

			public AggregateParameter DeliveryOrderID
		    {
				get
		        {
					if(_DeliveryOrderID_W == null)
	        	    {
						_DeliveryOrderID_W = TearOff.DeliveryOrderID;
					}
					return _DeliveryOrderID_W;
				}
			}

			public AggregateParameter DeliveryOrderStatusID
		    {
				get
		        {
					if(_DeliveryOrderStatusID_W == null)
	        	    {
						_DeliveryOrderStatusID_W = TearOff.DeliveryOrderStatusID;
					}
					return _DeliveryOrderStatusID_W;
				}
			}

			public AggregateParameter DeliveryFrom
		    {
				get
		        {
					if(_DeliveryFrom_W == null)
	        	    {
						_DeliveryFrom_W = TearOff.DeliveryFrom;
					}
					return _DeliveryFrom_W;
				}
			}

			public AggregateParameter DeliveryTo
		    {
				get
		        {
					if(_DeliveryTo_W == null)
	        	    {
						_DeliveryTo_W = TearOff.DeliveryTo;
					}
					return _DeliveryTo_W;
				}
			}

			public AggregateParameter DateFrom
		    {
				get
		        {
					if(_DateFrom_W == null)
	        	    {
						_DateFrom_W = TearOff.DateFrom;
					}
					return _DateFrom_W;
				}
			}

			public AggregateParameter DateTo
		    {
				get
		        {
					if(_DateTo_W == null)
	        	    {
						_DateTo_W = TearOff.DateTo;
					}
					return _DateTo_W;
				}
			}

			public AggregateParameter ReceivableName
		    {
				get
		        {
					if(_ReceivableName_W == null)
	        	    {
						_ReceivableName_W = TearOff.ReceivableName;
					}
					return _ReceivableName_W;
				}
			}

			public AggregateParameter ReceivableTelephone
		    {
				get
		        {
					if(_ReceivableTelephone_W == null)
	        	    {
						_ReceivableTelephone_W = TearOff.ReceivableTelephone;
					}
					return _ReceivableTelephone_W;
				}
			}

			public AggregateParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public AggregateParameter DeliveryOrderCode
		    {
				get
		        {
					if(_DeliveryOrderCode_W == null)
	        	    {
						_DeliveryOrderCode_W = TearOff.DeliveryOrderCode;
					}
					return _DeliveryOrderCode_W;
				}
			}

			public AggregateParameter DeliveryOrderDetailsStatusID
		    {
				get
		        {
					if(_DeliveryOrderDetailsStatusID_W == null)
	        	    {
						_DeliveryOrderDetailsStatusID_W = TearOff.DeliveryOrderDetailsStatusID;
					}
					return _DeliveryOrderDetailsStatusID_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter LastUpdatedDate
		    {
				get
		        {
					if(_LastUpdatedDate_W == null)
	        	    {
						_LastUpdatedDate_W = TearOff.LastUpdatedDate;
					}
					return _LastUpdatedDate_W;
				}
			}

			public AggregateParameter WatingHours
		    {
				get
		        {
					if(_WatingHours_W == null)
	        	    {
						_WatingHours_W = TearOff.WatingHours;
					}
					return _WatingHours_W;
				}
			}

			private AggregateParameter _DeliveryOrderDetailsID_W = null;
			private AggregateParameter _DeliveryOrderID_W = null;
			private AggregateParameter _DeliveryOrderStatusID_W = null;
			private AggregateParameter _DeliveryFrom_W = null;
			private AggregateParameter _DeliveryTo_W = null;
			private AggregateParameter _DateFrom_W = null;
			private AggregateParameter _DateTo_W = null;
			private AggregateParameter _ReceivableName_W = null;
			private AggregateParameter _ReceivableTelephone_W = null;
			private AggregateParameter _Price_W = null;
			private AggregateParameter _DeliveryOrderCode_W = null;
			private AggregateParameter _DeliveryOrderDetailsStatusID_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _LastUpdatedDate_W = null;
			private AggregateParameter _WatingHours_W = null;

			public void AggregateClauseReset()
			{
				_DeliveryOrderDetailsID_W = null;
				_DeliveryOrderID_W = null;
				_DeliveryOrderStatusID_W = null;
				_DeliveryFrom_W = null;
				_DeliveryTo_W = null;
				_DateFrom_W = null;
				_DateTo_W = null;
				_ReceivableName_W = null;
				_ReceivableTelephone_W = null;
				_Price_W = null;
				_DeliveryOrderCode_W = null;
				_DeliveryOrderDetailsStatusID_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_UpdatedBy_W = null;
				_LastUpdatedDate_W = null;
				_WatingHours_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDetailsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.DeliveryOrderDetailsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDetailsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_DeliveryOrderDetailsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.DeliveryOrderDetailsID);
			p.SourceColumn = ColumnNames.DeliveryOrderDetailsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.DeliveryOrderDetailsID);
			p.SourceColumn = ColumnNames.DeliveryOrderDetailsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryOrderID);
			p.SourceColumn = ColumnNames.DeliveryOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryOrderStatusID);
			p.SourceColumn = ColumnNames.DeliveryOrderStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryFrom);
			p.SourceColumn = ColumnNames.DeliveryFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryTo);
			p.SourceColumn = ColumnNames.DeliveryTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateFrom);
			p.SourceColumn = ColumnNames.DateFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateTo);
			p.SourceColumn = ColumnNames.DateTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivableName);
			p.SourceColumn = ColumnNames.ReceivableName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceivableTelephone);
			p.SourceColumn = ColumnNames.ReceivableTelephone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price);
			p.SourceColumn = ColumnNames.Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryOrderCode);
			p.SourceColumn = ColumnNames.DeliveryOrderCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DeliveryOrderDetailsStatusID);
			p.SourceColumn = ColumnNames.DeliveryOrderDetailsStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastUpdatedDate);
			p.SourceColumn = ColumnNames.LastUpdatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WatingHours);
			p.SourceColumn = ColumnNames.WatingHours;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
