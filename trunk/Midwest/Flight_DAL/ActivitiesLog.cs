
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _ActivitiesLog : SqlClientEntity
	{
		public _ActivitiesLog()
		{
			this.QuerySource = "ActivitiesLog";
			this.MappingName = "ActivitiesLog";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ActivitiesLogLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ActivitiesLogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ActivitiesLogID, ActivitiesLogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ActivitiesLogLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ActivitiesLogID
			{
				get
				{
					return new SqlParameter("@ActivitiesLogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Date
			{
				get
				{
					return new SqlParameter("@Date", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ActivityID
			{
				get
				{
					return new SqlParameter("@ActivityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CrewID
			{
				get
				{
					return new SqlParameter("@CrewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromDate
			{
				get
				{
					return new SqlParameter("@FromDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TODate
			{
				get
				{
					return new SqlParameter("@TODate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ActivitiesLogID = "ActivitiesLogID";
            public const string Date = "Date";
            public const string ActivityID = "ActivityID";
            public const string CrewID = "CrewID";
            public const string FromDate = "FromDate";
            public const string TODate = "TODate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ActivitiesLogID] = _ActivitiesLog.PropertyNames.ActivitiesLogID;
					ht[Date] = _ActivitiesLog.PropertyNames.Date;
					ht[ActivityID] = _ActivitiesLog.PropertyNames.ActivityID;
					ht[CrewID] = _ActivitiesLog.PropertyNames.CrewID;
					ht[FromDate] = _ActivitiesLog.PropertyNames.FromDate;
					ht[TODate] = _ActivitiesLog.PropertyNames.TODate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ActivitiesLogID = "ActivitiesLogID";
            public const string Date = "Date";
            public const string ActivityID = "ActivityID";
            public const string CrewID = "CrewID";
            public const string FromDate = "FromDate";
            public const string TODate = "TODate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ActivitiesLogID] = _ActivitiesLog.ColumnNames.ActivitiesLogID;
					ht[Date] = _ActivitiesLog.ColumnNames.Date;
					ht[ActivityID] = _ActivitiesLog.ColumnNames.ActivityID;
					ht[CrewID] = _ActivitiesLog.ColumnNames.CrewID;
					ht[FromDate] = _ActivitiesLog.ColumnNames.FromDate;
					ht[TODate] = _ActivitiesLog.ColumnNames.TODate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ActivitiesLogID = "s_ActivitiesLogID";
            public const string Date = "s_Date";
            public const string ActivityID = "s_ActivityID";
            public const string CrewID = "s_CrewID";
            public const string FromDate = "s_FromDate";
            public const string TODate = "s_TODate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ActivitiesLogID
	    {
			get
	        {
				return base.Getint(ColumnNames.ActivitiesLogID);
			}
			set
	        {
				base.Setint(ColumnNames.ActivitiesLogID, value);
			}
		}

		public virtual DateTime Date
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Date);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Date, value);
			}
		}

		public virtual int ActivityID
	    {
			get
	        {
				return base.Getint(ColumnNames.ActivityID);
			}
			set
	        {
				base.Setint(ColumnNames.ActivityID, value);
			}
		}

		public virtual int CrewID
	    {
			get
	        {
				return base.Getint(ColumnNames.CrewID);
			}
			set
	        {
				base.Setint(ColumnNames.CrewID, value);
			}
		}

		public virtual DateTime FromDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FromDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FromDate, value);
			}
		}

		public virtual DateTime TODate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TODate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TODate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ActivitiesLogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivitiesLogID) ? string.Empty : base.GetintAsString(ColumnNames.ActivitiesLogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivitiesLogID);
				else
					this.ActivitiesLogID = base.SetintAsString(ColumnNames.ActivitiesLogID, value);
			}
		}

		public virtual string s_Date
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Date) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Date);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Date);
				else
					this.Date = base.SetDateTimeAsString(ColumnNames.Date, value);
			}
		}

		public virtual string s_ActivityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivityID) ? string.Empty : base.GetintAsString(ColumnNames.ActivityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivityID);
				else
					this.ActivityID = base.SetintAsString(ColumnNames.ActivityID, value);
			}
		}

		public virtual string s_CrewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CrewID) ? string.Empty : base.GetintAsString(ColumnNames.CrewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CrewID);
				else
					this.CrewID = base.SetintAsString(ColumnNames.CrewID, value);
			}
		}

		public virtual string s_FromDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FromDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromDate);
				else
					this.FromDate = base.SetDateTimeAsString(ColumnNames.FromDate, value);
			}
		}

		public virtual string s_TODate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TODate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TODate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TODate);
				else
					this.TODate = base.SetDateTimeAsString(ColumnNames.TODate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ActivitiesLogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivitiesLogID, Parameters.ActivitiesLogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Date
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CrewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TODate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TODate, Parameters.TODate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ActivitiesLogID
		    {
				get
		        {
					if(_ActivitiesLogID_W == null)
	        	    {
						_ActivitiesLogID_W = TearOff.ActivitiesLogID;
					}
					return _ActivitiesLogID_W;
				}
			}

			public WhereParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public WhereParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public WhereParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			public WhereParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public WhereParameter TODate
		    {
				get
		        {
					if(_TODate_W == null)
	        	    {
						_TODate_W = TearOff.TODate;
					}
					return _TODate_W;
				}
			}

			private WhereParameter _ActivitiesLogID_W = null;
			private WhereParameter _Date_W = null;
			private WhereParameter _ActivityID_W = null;
			private WhereParameter _CrewID_W = null;
			private WhereParameter _FromDate_W = null;
			private WhereParameter _TODate_W = null;

			public void WhereClauseReset()
			{
				_ActivitiesLogID_W = null;
				_Date_W = null;
				_ActivityID_W = null;
				_CrewID_W = null;
				_FromDate_W = null;
				_TODate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ActivitiesLogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivitiesLogID, Parameters.ActivitiesLogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Date
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Date, Parameters.Date);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivityID, Parameters.ActivityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CrewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TODate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TODate, Parameters.TODate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ActivitiesLogID
		    {
				get
		        {
					if(_ActivitiesLogID_W == null)
	        	    {
						_ActivitiesLogID_W = TearOff.ActivitiesLogID;
					}
					return _ActivitiesLogID_W;
				}
			}

			public AggregateParameter Date
		    {
				get
		        {
					if(_Date_W == null)
	        	    {
						_Date_W = TearOff.Date;
					}
					return _Date_W;
				}
			}

			public AggregateParameter ActivityID
		    {
				get
		        {
					if(_ActivityID_W == null)
	        	    {
						_ActivityID_W = TearOff.ActivityID;
					}
					return _ActivityID_W;
				}
			}

			public AggregateParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			public AggregateParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public AggregateParameter TODate
		    {
				get
		        {
					if(_TODate_W == null)
	        	    {
						_TODate_W = TearOff.TODate;
					}
					return _TODate_W;
				}
			}

			private AggregateParameter _ActivitiesLogID_W = null;
			private AggregateParameter _Date_W = null;
			private AggregateParameter _ActivityID_W = null;
			private AggregateParameter _CrewID_W = null;
			private AggregateParameter _FromDate_W = null;
			private AggregateParameter _TODate_W = null;

			public void AggregateClauseReset()
			{
				_ActivitiesLogID_W = null;
				_Date_W = null;
				_ActivityID_W = null;
				_CrewID_W = null;
				_FromDate_W = null;
				_TODate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ActivitiesLogInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ActivitiesLogID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ActivitiesLogUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ActivitiesLogDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ActivitiesLogID);
			p.SourceColumn = ColumnNames.ActivitiesLogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ActivitiesLogID);
			p.SourceColumn = ColumnNames.ActivitiesLogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Date);
			p.SourceColumn = ColumnNames.Date;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivityID);
			p.SourceColumn = ColumnNames.ActivityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CrewID);
			p.SourceColumn = ColumnNames.CrewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromDate);
			p.SourceColumn = ColumnNames.FromDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TODate);
			p.SourceColumn = ColumnNames.TODate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
