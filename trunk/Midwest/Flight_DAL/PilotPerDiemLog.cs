
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _PilotPerDiemLog : SqlClientEntity
	{
		public _PilotPerDiemLog()
		{
			this.QuerySource = "PilotPerDiemLog";
			this.MappingName = "PilotPerDiemLog";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotPerDiemLogLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int LogID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.LogID, LogID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotPerDiemLogLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter LogID
			{
				get
				{
					return new SqlParameter("@LogID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotID
			{
				get
				{
					return new SqlParameter("@PilotID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromDate
			{
				get
				{
					return new SqlParameter("@FromDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ToDate
			{
				get
				{
					return new SqlParameter("@ToDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Days
			{
				get
				{
					return new SqlParameter("@Days", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InsertedDate
			{
				get
				{
					return new SqlParameter("@InsertedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string LogID = "LogID";
            public const string PilotID = "PilotID";
            public const string FromDate = "FromDate";
            public const string ToDate = "ToDate";
            public const string Days = "Days";
            public const string InsertedDate = "InsertedDate";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _PilotPerDiemLog.PropertyNames.LogID;
					ht[PilotID] = _PilotPerDiemLog.PropertyNames.PilotID;
					ht[FromDate] = _PilotPerDiemLog.PropertyNames.FromDate;
					ht[ToDate] = _PilotPerDiemLog.PropertyNames.ToDate;
					ht[Days] = _PilotPerDiemLog.PropertyNames.Days;
					ht[InsertedDate] = _PilotPerDiemLog.PropertyNames.InsertedDate;
					ht[StartDate] = _PilotPerDiemLog.PropertyNames.StartDate;
					ht[EndDate] = _PilotPerDiemLog.PropertyNames.EndDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string LogID = "LogID";
            public const string PilotID = "PilotID";
            public const string FromDate = "FromDate";
            public const string ToDate = "ToDate";
            public const string Days = "Days";
            public const string InsertedDate = "InsertedDate";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[LogID] = _PilotPerDiemLog.ColumnNames.LogID;
					ht[PilotID] = _PilotPerDiemLog.ColumnNames.PilotID;
					ht[FromDate] = _PilotPerDiemLog.ColumnNames.FromDate;
					ht[ToDate] = _PilotPerDiemLog.ColumnNames.ToDate;
					ht[Days] = _PilotPerDiemLog.ColumnNames.Days;
					ht[InsertedDate] = _PilotPerDiemLog.ColumnNames.InsertedDate;
					ht[StartDate] = _PilotPerDiemLog.ColumnNames.StartDate;
					ht[EndDate] = _PilotPerDiemLog.ColumnNames.EndDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string LogID = "s_LogID";
            public const string PilotID = "s_PilotID";
            public const string FromDate = "s_FromDate";
            public const string ToDate = "s_ToDate";
            public const string Days = "s_Days";
            public const string InsertedDate = "s_InsertedDate";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int LogID
	    {
			get
	        {
				return base.Getint(ColumnNames.LogID);
			}
			set
	        {
				base.Setint(ColumnNames.LogID, value);
			}
		}

		public virtual int PilotID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotID, value);
			}
		}

		public virtual DateTime FromDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FromDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FromDate, value);
			}
		}

		public virtual DateTime ToDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ToDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ToDate, value);
			}
		}

		public virtual int Days
	    {
			get
	        {
				return base.Getint(ColumnNames.Days);
			}
			set
	        {
				base.Setint(ColumnNames.Days, value);
			}
		}

		public virtual DateTime InsertedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InsertedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InsertedDate, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_LogID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogID) ? string.Empty : base.GetintAsString(ColumnNames.LogID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogID);
				else
					this.LogID = base.SetintAsString(ColumnNames.LogID, value);
			}
		}

		public virtual string s_PilotID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotID) ? string.Empty : base.GetintAsString(ColumnNames.PilotID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotID);
				else
					this.PilotID = base.SetintAsString(ColumnNames.PilotID, value);
			}
		}

		public virtual string s_FromDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FromDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromDate);
				else
					this.FromDate = base.SetDateTimeAsString(ColumnNames.FromDate, value);
			}
		}

		public virtual string s_ToDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ToDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToDate);
				else
					this.ToDate = base.SetDateTimeAsString(ColumnNames.ToDate, value);
			}
		}

		public virtual string s_Days
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Days) ? string.Empty : base.GetintAsString(ColumnNames.Days);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Days);
				else
					this.Days = base.SetintAsString(ColumnNames.Days, value);
			}
		}

		public virtual string s_InsertedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InsertedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InsertedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InsertedDate);
				else
					this.InsertedDate = base.SetDateTimeAsString(ColumnNames.InsertedDate, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter LogID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToDate, Parameters.ToDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Days
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Days, Parameters.Days);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InsertedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InsertedDate, Parameters.InsertedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public WhereParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public WhereParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public WhereParameter ToDate
		    {
				get
		        {
					if(_ToDate_W == null)
	        	    {
						_ToDate_W = TearOff.ToDate;
					}
					return _ToDate_W;
				}
			}

			public WhereParameter Days
		    {
				get
		        {
					if(_Days_W == null)
	        	    {
						_Days_W = TearOff.Days;
					}
					return _Days_W;
				}
			}

			public WhereParameter InsertedDate
		    {
				get
		        {
					if(_InsertedDate_W == null)
	        	    {
						_InsertedDate_W = TearOff.InsertedDate;
					}
					return _InsertedDate_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			private WhereParameter _LogID_W = null;
			private WhereParameter _PilotID_W = null;
			private WhereParameter _FromDate_W = null;
			private WhereParameter _ToDate_W = null;
			private WhereParameter _Days_W = null;
			private WhereParameter _InsertedDate_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;

			public void WhereClauseReset()
			{
				_LogID_W = null;
				_PilotID_W = null;
				_FromDate_W = null;
				_ToDate_W = null;
				_Days_W = null;
				_InsertedDate_W = null;
				_StartDate_W = null;
				_EndDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter LogID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogID, Parameters.LogID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToDate, Parameters.ToDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Days
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Days, Parameters.Days);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InsertedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InsertedDate, Parameters.InsertedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter LogID
		    {
				get
		        {
					if(_LogID_W == null)
	        	    {
						_LogID_W = TearOff.LogID;
					}
					return _LogID_W;
				}
			}

			public AggregateParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public AggregateParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public AggregateParameter ToDate
		    {
				get
		        {
					if(_ToDate_W == null)
	        	    {
						_ToDate_W = TearOff.ToDate;
					}
					return _ToDate_W;
				}
			}

			public AggregateParameter Days
		    {
				get
		        {
					if(_Days_W == null)
	        	    {
						_Days_W = TearOff.Days;
					}
					return _Days_W;
				}
			}

			public AggregateParameter InsertedDate
		    {
				get
		        {
					if(_InsertedDate_W == null)
	        	    {
						_InsertedDate_W = TearOff.InsertedDate;
					}
					return _InsertedDate_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			private AggregateParameter _LogID_W = null;
			private AggregateParameter _PilotID_W = null;
			private AggregateParameter _FromDate_W = null;
			private AggregateParameter _ToDate_W = null;
			private AggregateParameter _Days_W = null;
			private AggregateParameter _InsertedDate_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;

			public void AggregateClauseReset()
			{
				_LogID_W = null;
				_PilotID_W = null;
				_FromDate_W = null;
				_ToDate_W = null;
				_Days_W = null;
				_InsertedDate_W = null;
				_StartDate_W = null;
				_EndDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotPerDiemLogInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.LogID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotPerDiemLogUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotPerDiemLogDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.LogID);
			p.SourceColumn = ColumnNames.LogID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromDate);
			p.SourceColumn = ColumnNames.FromDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToDate);
			p.SourceColumn = ColumnNames.ToDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Days);
			p.SourceColumn = ColumnNames.Days;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InsertedDate);
			p.SourceColumn = ColumnNames.InsertedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
