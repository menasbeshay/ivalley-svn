
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _IOSA_SubQuestion : SqlClientEntity
	{
		public _IOSA_SubQuestion()
		{
			this.QuerySource = "IOSA_SubQuestion";
			this.MappingName = "IOSA_SubQuestion";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_IOSA_SubQuestionLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SubQuestID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SubQuestID, SubQuestID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_IOSA_SubQuestionLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SubQuestID
			{
				get
				{
					return new SqlParameter("@SubQuestID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QuestionID
			{
				get
				{
					return new SqlParameter("@QuestionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ParentID
			{
				get
				{
					return new SqlParameter("@ParentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SubQuestText
			{
				get
				{
					return new SqlParameter("@SubQuestText", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter AnswerText
			{
				get
				{
					return new SqlParameter("@AnswerText", SqlDbType.NVarChar, 2000);
				}
			}
			
			public static SqlParameter SubQuestNumber
			{
				get
				{
					return new SqlParameter("@SubQuestNumber", SqlDbType.NVarChar, 5);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 1000);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SubQuestID = "SubQuestID";
            public const string QuestionID = "QuestionID";
            public const string ParentID = "ParentID";
            public const string SubQuestText = "SubQuestText";
            public const string AnswerText = "AnswerText";
            public const string SubQuestNumber = "SubQuestNumber";
            public const string Notes = "Notes";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SubQuestID] = _IOSA_SubQuestion.PropertyNames.SubQuestID;
					ht[QuestionID] = _IOSA_SubQuestion.PropertyNames.QuestionID;
					ht[ParentID] = _IOSA_SubQuestion.PropertyNames.ParentID;
					ht[SubQuestText] = _IOSA_SubQuestion.PropertyNames.SubQuestText;
					ht[AnswerText] = _IOSA_SubQuestion.PropertyNames.AnswerText;
					ht[SubQuestNumber] = _IOSA_SubQuestion.PropertyNames.SubQuestNumber;
					ht[Notes] = _IOSA_SubQuestion.PropertyNames.Notes;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SubQuestID = "SubQuestID";
            public const string QuestionID = "QuestionID";
            public const string ParentID = "ParentID";
            public const string SubQuestText = "SubQuestText";
            public const string AnswerText = "AnswerText";
            public const string SubQuestNumber = "SubQuestNumber";
            public const string Notes = "Notes";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SubQuestID] = _IOSA_SubQuestion.ColumnNames.SubQuestID;
					ht[QuestionID] = _IOSA_SubQuestion.ColumnNames.QuestionID;
					ht[ParentID] = _IOSA_SubQuestion.ColumnNames.ParentID;
					ht[SubQuestText] = _IOSA_SubQuestion.ColumnNames.SubQuestText;
					ht[AnswerText] = _IOSA_SubQuestion.ColumnNames.AnswerText;
					ht[SubQuestNumber] = _IOSA_SubQuestion.ColumnNames.SubQuestNumber;
					ht[Notes] = _IOSA_SubQuestion.ColumnNames.Notes;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SubQuestID = "s_SubQuestID";
            public const string QuestionID = "s_QuestionID";
            public const string ParentID = "s_ParentID";
            public const string SubQuestText = "s_SubQuestText";
            public const string AnswerText = "s_AnswerText";
            public const string SubQuestNumber = "s_SubQuestNumber";
            public const string Notes = "s_Notes";

		}
		#endregion		
		
		#region Properties
	
		public virtual int SubQuestID
	    {
			get
	        {
				return base.Getint(ColumnNames.SubQuestID);
			}
			set
	        {
				base.Setint(ColumnNames.SubQuestID, value);
			}
		}

		public virtual int QuestionID
	    {
			get
	        {
				return base.Getint(ColumnNames.QuestionID);
			}
			set
	        {
				base.Setint(ColumnNames.QuestionID, value);
			}
		}

		public virtual int ParentID
	    {
			get
	        {
				return base.Getint(ColumnNames.ParentID);
			}
			set
	        {
				base.Setint(ColumnNames.ParentID, value);
			}
		}

		public virtual string SubQuestText
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubQuestText);
			}
			set
	        {
				base.Setstring(ColumnNames.SubQuestText, value);
			}
		}

		public virtual string AnswerText
	    {
			get
	        {
				return base.Getstring(ColumnNames.AnswerText);
			}
			set
	        {
				base.Setstring(ColumnNames.AnswerText, value);
			}
		}

		public virtual string SubQuestNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubQuestNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.SubQuestNumber, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SubQuestID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubQuestID) ? string.Empty : base.GetintAsString(ColumnNames.SubQuestID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubQuestID);
				else
					this.SubQuestID = base.SetintAsString(ColumnNames.SubQuestID, value);
			}
		}

		public virtual string s_QuestionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QuestionID) ? string.Empty : base.GetintAsString(ColumnNames.QuestionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QuestionID);
				else
					this.QuestionID = base.SetintAsString(ColumnNames.QuestionID, value);
			}
		}

		public virtual string s_ParentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ParentID) ? string.Empty : base.GetintAsString(ColumnNames.ParentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ParentID);
				else
					this.ParentID = base.SetintAsString(ColumnNames.ParentID, value);
			}
		}

		public virtual string s_SubQuestText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubQuestText) ? string.Empty : base.GetstringAsString(ColumnNames.SubQuestText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubQuestText);
				else
					this.SubQuestText = base.SetstringAsString(ColumnNames.SubQuestText, value);
			}
		}

		public virtual string s_AnswerText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AnswerText) ? string.Empty : base.GetstringAsString(ColumnNames.AnswerText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AnswerText);
				else
					this.AnswerText = base.SetstringAsString(ColumnNames.AnswerText, value);
			}
		}

		public virtual string s_SubQuestNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubQuestNumber) ? string.Empty : base.GetstringAsString(ColumnNames.SubQuestNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubQuestNumber);
				else
					this.SubQuestNumber = base.SetstringAsString(ColumnNames.SubQuestNumber, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SubQuestID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubQuestID, Parameters.SubQuestID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QuestionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QuestionID, Parameters.QuestionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ParentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ParentID, Parameters.ParentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubQuestText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubQuestText, Parameters.SubQuestText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AnswerText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AnswerText, Parameters.AnswerText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubQuestNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubQuestNumber, Parameters.SubQuestNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SubQuestID
		    {
				get
		        {
					if(_SubQuestID_W == null)
	        	    {
						_SubQuestID_W = TearOff.SubQuestID;
					}
					return _SubQuestID_W;
				}
			}

			public WhereParameter QuestionID
		    {
				get
		        {
					if(_QuestionID_W == null)
	        	    {
						_QuestionID_W = TearOff.QuestionID;
					}
					return _QuestionID_W;
				}
			}

			public WhereParameter ParentID
		    {
				get
		        {
					if(_ParentID_W == null)
	        	    {
						_ParentID_W = TearOff.ParentID;
					}
					return _ParentID_W;
				}
			}

			public WhereParameter SubQuestText
		    {
				get
		        {
					if(_SubQuestText_W == null)
	        	    {
						_SubQuestText_W = TearOff.SubQuestText;
					}
					return _SubQuestText_W;
				}
			}

			public WhereParameter AnswerText
		    {
				get
		        {
					if(_AnswerText_W == null)
	        	    {
						_AnswerText_W = TearOff.AnswerText;
					}
					return _AnswerText_W;
				}
			}

			public WhereParameter SubQuestNumber
		    {
				get
		        {
					if(_SubQuestNumber_W == null)
	        	    {
						_SubQuestNumber_W = TearOff.SubQuestNumber;
					}
					return _SubQuestNumber_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			private WhereParameter _SubQuestID_W = null;
			private WhereParameter _QuestionID_W = null;
			private WhereParameter _ParentID_W = null;
			private WhereParameter _SubQuestText_W = null;
			private WhereParameter _AnswerText_W = null;
			private WhereParameter _SubQuestNumber_W = null;
			private WhereParameter _Notes_W = null;

			public void WhereClauseReset()
			{
				_SubQuestID_W = null;
				_QuestionID_W = null;
				_ParentID_W = null;
				_SubQuestText_W = null;
				_AnswerText_W = null;
				_SubQuestNumber_W = null;
				_Notes_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SubQuestID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubQuestID, Parameters.SubQuestID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QuestionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QuestionID, Parameters.QuestionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ParentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ParentID, Parameters.ParentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubQuestText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubQuestText, Parameters.SubQuestText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AnswerText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AnswerText, Parameters.AnswerText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubQuestNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubQuestNumber, Parameters.SubQuestNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SubQuestID
		    {
				get
		        {
					if(_SubQuestID_W == null)
	        	    {
						_SubQuestID_W = TearOff.SubQuestID;
					}
					return _SubQuestID_W;
				}
			}

			public AggregateParameter QuestionID
		    {
				get
		        {
					if(_QuestionID_W == null)
	        	    {
						_QuestionID_W = TearOff.QuestionID;
					}
					return _QuestionID_W;
				}
			}

			public AggregateParameter ParentID
		    {
				get
		        {
					if(_ParentID_W == null)
	        	    {
						_ParentID_W = TearOff.ParentID;
					}
					return _ParentID_W;
				}
			}

			public AggregateParameter SubQuestText
		    {
				get
		        {
					if(_SubQuestText_W == null)
	        	    {
						_SubQuestText_W = TearOff.SubQuestText;
					}
					return _SubQuestText_W;
				}
			}

			public AggregateParameter AnswerText
		    {
				get
		        {
					if(_AnswerText_W == null)
	        	    {
						_AnswerText_W = TearOff.AnswerText;
					}
					return _AnswerText_W;
				}
			}

			public AggregateParameter SubQuestNumber
		    {
				get
		        {
					if(_SubQuestNumber_W == null)
	        	    {
						_SubQuestNumber_W = TearOff.SubQuestNumber;
					}
					return _SubQuestNumber_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			private AggregateParameter _SubQuestID_W = null;
			private AggregateParameter _QuestionID_W = null;
			private AggregateParameter _ParentID_W = null;
			private AggregateParameter _SubQuestText_W = null;
			private AggregateParameter _AnswerText_W = null;
			private AggregateParameter _SubQuestNumber_W = null;
			private AggregateParameter _Notes_W = null;

			public void AggregateClauseReset()
			{
				_SubQuestID_W = null;
				_QuestionID_W = null;
				_ParentID_W = null;
				_SubQuestText_W = null;
				_AnswerText_W = null;
				_SubQuestNumber_W = null;
				_Notes_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IOSA_SubQuestionInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SubQuestID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IOSA_SubQuestionUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_IOSA_SubQuestionDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SubQuestID);
			p.SourceColumn = ColumnNames.SubQuestID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SubQuestID);
			p.SourceColumn = ColumnNames.SubQuestID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QuestionID);
			p.SourceColumn = ColumnNames.QuestionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ParentID);
			p.SourceColumn = ColumnNames.ParentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubQuestText);
			p.SourceColumn = ColumnNames.SubQuestText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AnswerText);
			p.SourceColumn = ColumnNames.AnswerText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubQuestNumber);
			p.SourceColumn = ColumnNames.SubQuestNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
