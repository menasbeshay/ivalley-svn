
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Pricing.DAL
{
	public abstract class _SUBSTANCE_SUPPLIER : SqlClientEntity
	{
		public _SUBSTANCE_SUPPLIER()
		{
			this.QuerySource = "SUBSTANCE_SUPPLIER";
			this.MappingName = "SUBSTANCE_SUPPLIER";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SUBSTANCE_SUPPLIERLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SUBSTANCE_SUPPLIERLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DRUG_REQUEST_SUBSTANCE_ID
			{
				get
				{
					return new SqlParameter("@DRUG_REQUEST_SUBSTANCE_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UNIT_ID
			{
				get
				{
					return new SqlParameter("@UNIT_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter QUANTITY
			{
				get
				{
					return new SqlParameter("@QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter EQUI_NAME_SUBSTANCE
			{
				get
				{
					return new SqlParameter("@EQUI_NAME_SUBSTANCE", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EQUI_QUANTITY
			{
				get
				{
					return new SqlParameter("@EQUI_QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter EQUI_UNIT
			{
				get
				{
					return new SqlParameter("@EQUI_UNIT", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OVER_QUANTITY
			{
				get
				{
					return new SqlParameter("@OVER_QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter OVER_UNIT_ID
			{
				get
				{
					return new SqlParameter("@OVER_UNIT_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OVER_EQUI_QUANTITY
			{
				get
				{
					return new SqlParameter("@OVER_EQUI_QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter OVER_EQUI_UNIT
			{
				get
				{
					return new SqlParameter("@OVER_EQUI_UNIT", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SPECIFICATION
			{
				get
				{
					return new SqlParameter("@SPECIFICATION", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter FUNCTION_
			{
				get
				{
					return new SqlParameter("@FUNCTION_", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter EQUE_SPECIFICATION
			{
				get
				{
					return new SqlParameter("@EQUE_SPECIFICATION", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter EQUE_FUNCTION
			{
				get
				{
					return new SqlParameter("@EQUE_FUNCTION", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter PHONE
			{
				get
				{
					return new SqlParameter("@PHONE", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter FAX
			{
				get
				{
					return new SqlParameter("@FAX", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter EMAIL
			{
				get
				{
					return new SqlParameter("@EMAIL", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter ADDRESS
			{
				get
				{
					return new SqlParameter("@ADDRESS", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter MANUFACTURE
			{
				get
				{
					return new SqlParameter("@MANUFACTURE", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter INSPECTED_FOR_GMP
			{
				get
				{
					return new SqlParameter("@INSPECTED_FOR_GMP", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PHONE_EQ
			{
				get
				{
					return new SqlParameter("@PHONE_EQ", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter EMAIL_EQ
			{
				get
				{
					return new SqlParameter("@EMAIL_EQ", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter ADDRESS_EQ
			{
				get
				{
					return new SqlParameter("@ADDRESS_EQ", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter MANUFACTURE_EQ
			{
				get
				{
					return new SqlParameter("@MANUFACTURE_EQ", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter FAX_EQ
			{
				get
				{
					return new SqlParameter("@FAX_EQ", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter INSPECTED_FOR_GMP_EQ
			{
				get
				{
					return new SqlParameter("@INSPECTED_FOR_GMP_EQ", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Equiv_Substance_ID
			{
				get
				{
					return new SqlParameter("@Equiv_Substance_ID", SqlDbType.Float, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string DRUG_REQUEST_SUBSTANCE_ID = "DRUG_REQUEST_SUBSTANCE_ID";
            public const string UNIT_ID = "UNIT_ID";
            public const string QUANTITY = "QUANTITY";
            public const string EQUI_NAME_SUBSTANCE = "EQUI_NAME_SUBSTANCE";
            public const string EQUI_QUANTITY = "EQUI_QUANTITY";
            public const string EQUI_UNIT = "EQUI_UNIT";
            public const string OVER_QUANTITY = "OVER_QUANTITY";
            public const string OVER_UNIT_ID = "OVER_UNIT_ID";
            public const string OVER_EQUI_QUANTITY = "OVER_EQUI_QUANTITY";
            public const string OVER_EQUI_UNIT = "OVER_EQUI_UNIT";
            public const string SPECIFICATION = "SPECIFICATION";
            public const string FUNCTION_ = "FUNCTION_";
            public const string EQUE_SPECIFICATION = "EQUE_SPECIFICATION";
            public const string EQUE_FUNCTION = "EQUE_FUNCTION";
            public const string PHONE = "PHONE";
            public const string FAX = "FAX";
            public const string EMAIL = "EMAIL";
            public const string ADDRESS = "ADDRESS";
            public const string MANUFACTURE = "MANUFACTURE";
            public const string INSPECTED_FOR_GMP = "INSPECTED_FOR_GMP";
            public const string PHONE_EQ = "PHONE_EQ";
            public const string EMAIL_EQ = "EMAIL_EQ";
            public const string ADDRESS_EQ = "ADDRESS_EQ";
            public const string MANUFACTURE_EQ = "MANUFACTURE_EQ";
            public const string FAX_EQ = "FAX_EQ";
            public const string INSPECTED_FOR_GMP_EQ = "INSPECTED_FOR_GMP_EQ";
            public const string Equiv_Substance_ID = "Equiv_Substance_ID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _SUBSTANCE_SUPPLIER.PropertyNames.ID;
					ht[DRUG_REQUEST_SUBSTANCE_ID] = _SUBSTANCE_SUPPLIER.PropertyNames.DRUG_REQUEST_SUBSTANCE_ID;
					ht[UNIT_ID] = _SUBSTANCE_SUPPLIER.PropertyNames.UNIT_ID;
					ht[QUANTITY] = _SUBSTANCE_SUPPLIER.PropertyNames.QUANTITY;
					ht[EQUI_NAME_SUBSTANCE] = _SUBSTANCE_SUPPLIER.PropertyNames.EQUI_NAME_SUBSTANCE;
					ht[EQUI_QUANTITY] = _SUBSTANCE_SUPPLIER.PropertyNames.EQUI_QUANTITY;
					ht[EQUI_UNIT] = _SUBSTANCE_SUPPLIER.PropertyNames.EQUI_UNIT;
					ht[OVER_QUANTITY] = _SUBSTANCE_SUPPLIER.PropertyNames.OVER_QUANTITY;
					ht[OVER_UNIT_ID] = _SUBSTANCE_SUPPLIER.PropertyNames.OVER_UNIT_ID;
					ht[OVER_EQUI_QUANTITY] = _SUBSTANCE_SUPPLIER.PropertyNames.OVER_EQUI_QUANTITY;
					ht[OVER_EQUI_UNIT] = _SUBSTANCE_SUPPLIER.PropertyNames.OVER_EQUI_UNIT;
					ht[SPECIFICATION] = _SUBSTANCE_SUPPLIER.PropertyNames.SPECIFICATION;
					ht[FUNCTION_] = _SUBSTANCE_SUPPLIER.PropertyNames.FUNCTION_;
					ht[EQUE_SPECIFICATION] = _SUBSTANCE_SUPPLIER.PropertyNames.EQUE_SPECIFICATION;
					ht[EQUE_FUNCTION] = _SUBSTANCE_SUPPLIER.PropertyNames.EQUE_FUNCTION;
					ht[PHONE] = _SUBSTANCE_SUPPLIER.PropertyNames.PHONE;
					ht[FAX] = _SUBSTANCE_SUPPLIER.PropertyNames.FAX;
					ht[EMAIL] = _SUBSTANCE_SUPPLIER.PropertyNames.EMAIL;
					ht[ADDRESS] = _SUBSTANCE_SUPPLIER.PropertyNames.ADDRESS;
					ht[MANUFACTURE] = _SUBSTANCE_SUPPLIER.PropertyNames.MANUFACTURE;
					ht[INSPECTED_FOR_GMP] = _SUBSTANCE_SUPPLIER.PropertyNames.INSPECTED_FOR_GMP;
					ht[PHONE_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.PHONE_EQ;
					ht[EMAIL_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.EMAIL_EQ;
					ht[ADDRESS_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.ADDRESS_EQ;
					ht[MANUFACTURE_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.MANUFACTURE_EQ;
					ht[FAX_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.FAX_EQ;
					ht[INSPECTED_FOR_GMP_EQ] = _SUBSTANCE_SUPPLIER.PropertyNames.INSPECTED_FOR_GMP_EQ;
					ht[Equiv_Substance_ID] = _SUBSTANCE_SUPPLIER.PropertyNames.Equiv_Substance_ID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string DRUG_REQUEST_SUBSTANCE_ID = "DRUG_REQUEST_SUBSTANCE_ID";
            public const string UNIT_ID = "UNIT_ID";
            public const string QUANTITY = "QUANTITY";
            public const string EQUI_NAME_SUBSTANCE = "EQUI_NAME_SUBSTANCE";
            public const string EQUI_QUANTITY = "EQUI_QUANTITY";
            public const string EQUI_UNIT = "EQUI_UNIT";
            public const string OVER_QUANTITY = "OVER_QUANTITY";
            public const string OVER_UNIT_ID = "OVER_UNIT_ID";
            public const string OVER_EQUI_QUANTITY = "OVER_EQUI_QUANTITY";
            public const string OVER_EQUI_UNIT = "OVER_EQUI_UNIT";
            public const string SPECIFICATION = "SPECIFICATION";
            public const string FUNCTION_ = "FUNCTION_";
            public const string EQUE_SPECIFICATION = "EQUE_SPECIFICATION";
            public const string EQUE_FUNCTION = "EQUE_FUNCTION";
            public const string PHONE = "PHONE";
            public const string FAX = "FAX";
            public const string EMAIL = "EMAIL";
            public const string ADDRESS = "ADDRESS";
            public const string MANUFACTURE = "MANUFACTURE";
            public const string INSPECTED_FOR_GMP = "INSPECTED_FOR_GMP";
            public const string PHONE_EQ = "PHONE_EQ";
            public const string EMAIL_EQ = "EMAIL_EQ";
            public const string ADDRESS_EQ = "ADDRESS_EQ";
            public const string MANUFACTURE_EQ = "MANUFACTURE_EQ";
            public const string FAX_EQ = "FAX_EQ";
            public const string INSPECTED_FOR_GMP_EQ = "INSPECTED_FOR_GMP_EQ";
            public const string Equiv_Substance_ID = "Equiv_Substance_ID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _SUBSTANCE_SUPPLIER.ColumnNames.ID;
					ht[DRUG_REQUEST_SUBSTANCE_ID] = _SUBSTANCE_SUPPLIER.ColumnNames.DRUG_REQUEST_SUBSTANCE_ID;
					ht[UNIT_ID] = _SUBSTANCE_SUPPLIER.ColumnNames.UNIT_ID;
					ht[QUANTITY] = _SUBSTANCE_SUPPLIER.ColumnNames.QUANTITY;
					ht[EQUI_NAME_SUBSTANCE] = _SUBSTANCE_SUPPLIER.ColumnNames.EQUI_NAME_SUBSTANCE;
					ht[EQUI_QUANTITY] = _SUBSTANCE_SUPPLIER.ColumnNames.EQUI_QUANTITY;
					ht[EQUI_UNIT] = _SUBSTANCE_SUPPLIER.ColumnNames.EQUI_UNIT;
					ht[OVER_QUANTITY] = _SUBSTANCE_SUPPLIER.ColumnNames.OVER_QUANTITY;
					ht[OVER_UNIT_ID] = _SUBSTANCE_SUPPLIER.ColumnNames.OVER_UNIT_ID;
					ht[OVER_EQUI_QUANTITY] = _SUBSTANCE_SUPPLIER.ColumnNames.OVER_EQUI_QUANTITY;
					ht[OVER_EQUI_UNIT] = _SUBSTANCE_SUPPLIER.ColumnNames.OVER_EQUI_UNIT;
					ht[SPECIFICATION] = _SUBSTANCE_SUPPLIER.ColumnNames.SPECIFICATION;
					ht[FUNCTION_] = _SUBSTANCE_SUPPLIER.ColumnNames.FUNCTION_;
					ht[EQUE_SPECIFICATION] = _SUBSTANCE_SUPPLIER.ColumnNames.EQUE_SPECIFICATION;
					ht[EQUE_FUNCTION] = _SUBSTANCE_SUPPLIER.ColumnNames.EQUE_FUNCTION;
					ht[PHONE] = _SUBSTANCE_SUPPLIER.ColumnNames.PHONE;
					ht[FAX] = _SUBSTANCE_SUPPLIER.ColumnNames.FAX;
					ht[EMAIL] = _SUBSTANCE_SUPPLIER.ColumnNames.EMAIL;
					ht[ADDRESS] = _SUBSTANCE_SUPPLIER.ColumnNames.ADDRESS;
					ht[MANUFACTURE] = _SUBSTANCE_SUPPLIER.ColumnNames.MANUFACTURE;
					ht[INSPECTED_FOR_GMP] = _SUBSTANCE_SUPPLIER.ColumnNames.INSPECTED_FOR_GMP;
					ht[PHONE_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.PHONE_EQ;
					ht[EMAIL_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.EMAIL_EQ;
					ht[ADDRESS_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.ADDRESS_EQ;
					ht[MANUFACTURE_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.MANUFACTURE_EQ;
					ht[FAX_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.FAX_EQ;
					ht[INSPECTED_FOR_GMP_EQ] = _SUBSTANCE_SUPPLIER.ColumnNames.INSPECTED_FOR_GMP_EQ;
					ht[Equiv_Substance_ID] = _SUBSTANCE_SUPPLIER.ColumnNames.Equiv_Substance_ID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string DRUG_REQUEST_SUBSTANCE_ID = "s_DRUG_REQUEST_SUBSTANCE_ID";
            public const string UNIT_ID = "s_UNIT_ID";
            public const string QUANTITY = "s_QUANTITY";
            public const string EQUI_NAME_SUBSTANCE = "s_EQUI_NAME_SUBSTANCE";
            public const string EQUI_QUANTITY = "s_EQUI_QUANTITY";
            public const string EQUI_UNIT = "s_EQUI_UNIT";
            public const string OVER_QUANTITY = "s_OVER_QUANTITY";
            public const string OVER_UNIT_ID = "s_OVER_UNIT_ID";
            public const string OVER_EQUI_QUANTITY = "s_OVER_EQUI_QUANTITY";
            public const string OVER_EQUI_UNIT = "s_OVER_EQUI_UNIT";
            public const string SPECIFICATION = "s_SPECIFICATION";
            public const string FUNCTION_ = "s_FUNCTION_";
            public const string EQUE_SPECIFICATION = "s_EQUE_SPECIFICATION";
            public const string EQUE_FUNCTION = "s_EQUE_FUNCTION";
            public const string PHONE = "s_PHONE";
            public const string FAX = "s_FAX";
            public const string EMAIL = "s_EMAIL";
            public const string ADDRESS = "s_ADDRESS";
            public const string MANUFACTURE = "s_MANUFACTURE";
            public const string INSPECTED_FOR_GMP = "s_INSPECTED_FOR_GMP";
            public const string PHONE_EQ = "s_PHONE_EQ";
            public const string EMAIL_EQ = "s_EMAIL_EQ";
            public const string ADDRESS_EQ = "s_ADDRESS_EQ";
            public const string MANUFACTURE_EQ = "s_MANUFACTURE_EQ";
            public const string FAX_EQ = "s_FAX_EQ";
            public const string INSPECTED_FOR_GMP_EQ = "s_INSPECTED_FOR_GMP_EQ";
            public const string Equiv_Substance_ID = "s_Equiv_Substance_ID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ID
	    {
			get
	        {
				return base.Getint(ColumnNames.ID);
			}
			set
	        {
				base.Setint(ColumnNames.ID, value);
			}
		}

		public virtual int DRUG_REQUEST_SUBSTANCE_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID);
			}
			set
	        {
				base.Setint(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID, value);
			}
		}

		public virtual int UNIT_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.UNIT_ID);
			}
			set
	        {
				base.Setint(ColumnNames.UNIT_ID, value);
			}
		}

		public virtual double QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.QUANTITY, value);
			}
		}

		public virtual int EQUI_NAME_SUBSTANCE
	    {
			get
	        {
				return base.Getint(ColumnNames.EQUI_NAME_SUBSTANCE);
			}
			set
	        {
				base.Setint(ColumnNames.EQUI_NAME_SUBSTANCE, value);
			}
		}

		public virtual double EQUI_QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.EQUI_QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.EQUI_QUANTITY, value);
			}
		}

		public virtual int EQUI_UNIT
	    {
			get
	        {
				return base.Getint(ColumnNames.EQUI_UNIT);
			}
			set
	        {
				base.Setint(ColumnNames.EQUI_UNIT, value);
			}
		}

		public virtual double OVER_QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OVER_QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.OVER_QUANTITY, value);
			}
		}

		public virtual int OVER_UNIT_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.OVER_UNIT_ID);
			}
			set
	        {
				base.Setint(ColumnNames.OVER_UNIT_ID, value);
			}
		}

		public virtual double OVER_EQUI_QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OVER_EQUI_QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.OVER_EQUI_QUANTITY, value);
			}
		}

		public virtual int OVER_EQUI_UNIT
	    {
			get
	        {
				return base.Getint(ColumnNames.OVER_EQUI_UNIT);
			}
			set
	        {
				base.Setint(ColumnNames.OVER_EQUI_UNIT, value);
			}
		}

		public virtual string SPECIFICATION
	    {
			get
	        {
				return base.Getstring(ColumnNames.SPECIFICATION);
			}
			set
	        {
				base.Setstring(ColumnNames.SPECIFICATION, value);
			}
		}

		public virtual string FUNCTION_
	    {
			get
	        {
				return base.Getstring(ColumnNames.FUNCTION_);
			}
			set
	        {
				base.Setstring(ColumnNames.FUNCTION_, value);
			}
		}

		public virtual string EQUE_SPECIFICATION
	    {
			get
	        {
				return base.Getstring(ColumnNames.EQUE_SPECIFICATION);
			}
			set
	        {
				base.Setstring(ColumnNames.EQUE_SPECIFICATION, value);
			}
		}

		public virtual string EQUE_FUNCTION
	    {
			get
	        {
				return base.Getstring(ColumnNames.EQUE_FUNCTION);
			}
			set
	        {
				base.Setstring(ColumnNames.EQUE_FUNCTION, value);
			}
		}

		public virtual string PHONE
	    {
			get
	        {
				return base.Getstring(ColumnNames.PHONE);
			}
			set
	        {
				base.Setstring(ColumnNames.PHONE, value);
			}
		}

		public virtual string FAX
	    {
			get
	        {
				return base.Getstring(ColumnNames.FAX);
			}
			set
	        {
				base.Setstring(ColumnNames.FAX, value);
			}
		}

		public virtual string EMAIL
	    {
			get
	        {
				return base.Getstring(ColumnNames.EMAIL);
			}
			set
	        {
				base.Setstring(ColumnNames.EMAIL, value);
			}
		}

		public virtual string ADDRESS
	    {
			get
	        {
				return base.Getstring(ColumnNames.ADDRESS);
			}
			set
	        {
				base.Setstring(ColumnNames.ADDRESS, value);
			}
		}

		public virtual string MANUFACTURE
	    {
			get
	        {
				return base.Getstring(ColumnNames.MANUFACTURE);
			}
			set
	        {
				base.Setstring(ColumnNames.MANUFACTURE, value);
			}
		}

		public virtual double INSPECTED_FOR_GMP
	    {
			get
	        {
				return base.Getdouble(ColumnNames.INSPECTED_FOR_GMP);
			}
			set
	        {
				base.Setdouble(ColumnNames.INSPECTED_FOR_GMP, value);
			}
		}

		public virtual string PHONE_EQ
	    {
			get
	        {
				return base.Getstring(ColumnNames.PHONE_EQ);
			}
			set
	        {
				base.Setstring(ColumnNames.PHONE_EQ, value);
			}
		}

		public virtual string EMAIL_EQ
	    {
			get
	        {
				return base.Getstring(ColumnNames.EMAIL_EQ);
			}
			set
	        {
				base.Setstring(ColumnNames.EMAIL_EQ, value);
			}
		}

		public virtual string ADDRESS_EQ
	    {
			get
	        {
				return base.Getstring(ColumnNames.ADDRESS_EQ);
			}
			set
	        {
				base.Setstring(ColumnNames.ADDRESS_EQ, value);
			}
		}

		public virtual string MANUFACTURE_EQ
	    {
			get
	        {
				return base.Getstring(ColumnNames.MANUFACTURE_EQ);
			}
			set
	        {
				base.Setstring(ColumnNames.MANUFACTURE_EQ, value);
			}
		}

		public virtual string FAX_EQ
	    {
			get
	        {
				return base.Getstring(ColumnNames.FAX_EQ);
			}
			set
	        {
				base.Setstring(ColumnNames.FAX_EQ, value);
			}
		}

		public virtual double INSPECTED_FOR_GMP_EQ
	    {
			get
	        {
				return base.Getdouble(ColumnNames.INSPECTED_FOR_GMP_EQ);
			}
			set
	        {
				base.Setdouble(ColumnNames.INSPECTED_FOR_GMP_EQ, value);
			}
		}

		public virtual double Equiv_Substance_ID
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Equiv_Substance_ID);
			}
			set
	        {
				base.Setdouble(ColumnNames.Equiv_Substance_ID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetintAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_DRUG_REQUEST_SUBSTANCE_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID) ? string.Empty : base.GetintAsString(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID);
				else
					this.DRUG_REQUEST_SUBSTANCE_ID = base.SetintAsString(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID, value);
			}
		}

		public virtual string s_UNIT_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UNIT_ID) ? string.Empty : base.GetintAsString(ColumnNames.UNIT_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UNIT_ID);
				else
					this.UNIT_ID = base.SetintAsString(ColumnNames.UNIT_ID, value);
			}
		}

		public virtual string s_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QUANTITY);
				else
					this.QUANTITY = base.SetdoubleAsString(ColumnNames.QUANTITY, value);
			}
		}

		public virtual string s_EQUI_NAME_SUBSTANCE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUI_NAME_SUBSTANCE) ? string.Empty : base.GetintAsString(ColumnNames.EQUI_NAME_SUBSTANCE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUI_NAME_SUBSTANCE);
				else
					this.EQUI_NAME_SUBSTANCE = base.SetintAsString(ColumnNames.EQUI_NAME_SUBSTANCE, value);
			}
		}

		public virtual string s_EQUI_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUI_QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.EQUI_QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUI_QUANTITY);
				else
					this.EQUI_QUANTITY = base.SetdoubleAsString(ColumnNames.EQUI_QUANTITY, value);
			}
		}

		public virtual string s_EQUI_UNIT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUI_UNIT) ? string.Empty : base.GetintAsString(ColumnNames.EQUI_UNIT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUI_UNIT);
				else
					this.EQUI_UNIT = base.SetintAsString(ColumnNames.EQUI_UNIT, value);
			}
		}

		public virtual string s_OVER_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OVER_QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.OVER_QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OVER_QUANTITY);
				else
					this.OVER_QUANTITY = base.SetdoubleAsString(ColumnNames.OVER_QUANTITY, value);
			}
		}

		public virtual string s_OVER_UNIT_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OVER_UNIT_ID) ? string.Empty : base.GetintAsString(ColumnNames.OVER_UNIT_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OVER_UNIT_ID);
				else
					this.OVER_UNIT_ID = base.SetintAsString(ColumnNames.OVER_UNIT_ID, value);
			}
		}

		public virtual string s_OVER_EQUI_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OVER_EQUI_QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.OVER_EQUI_QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OVER_EQUI_QUANTITY);
				else
					this.OVER_EQUI_QUANTITY = base.SetdoubleAsString(ColumnNames.OVER_EQUI_QUANTITY, value);
			}
		}

		public virtual string s_OVER_EQUI_UNIT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OVER_EQUI_UNIT) ? string.Empty : base.GetintAsString(ColumnNames.OVER_EQUI_UNIT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OVER_EQUI_UNIT);
				else
					this.OVER_EQUI_UNIT = base.SetintAsString(ColumnNames.OVER_EQUI_UNIT, value);
			}
		}

		public virtual string s_SPECIFICATION
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SPECIFICATION) ? string.Empty : base.GetstringAsString(ColumnNames.SPECIFICATION);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SPECIFICATION);
				else
					this.SPECIFICATION = base.SetstringAsString(ColumnNames.SPECIFICATION, value);
			}
		}

		public virtual string s_FUNCTION_
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FUNCTION_) ? string.Empty : base.GetstringAsString(ColumnNames.FUNCTION_);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FUNCTION_);
				else
					this.FUNCTION_ = base.SetstringAsString(ColumnNames.FUNCTION_, value);
			}
		}

		public virtual string s_EQUE_SPECIFICATION
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUE_SPECIFICATION) ? string.Empty : base.GetstringAsString(ColumnNames.EQUE_SPECIFICATION);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUE_SPECIFICATION);
				else
					this.EQUE_SPECIFICATION = base.SetstringAsString(ColumnNames.EQUE_SPECIFICATION, value);
			}
		}

		public virtual string s_EQUE_FUNCTION
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUE_FUNCTION) ? string.Empty : base.GetstringAsString(ColumnNames.EQUE_FUNCTION);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUE_FUNCTION);
				else
					this.EQUE_FUNCTION = base.SetstringAsString(ColumnNames.EQUE_FUNCTION, value);
			}
		}

		public virtual string s_PHONE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PHONE) ? string.Empty : base.GetstringAsString(ColumnNames.PHONE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PHONE);
				else
					this.PHONE = base.SetstringAsString(ColumnNames.PHONE, value);
			}
		}

		public virtual string s_FAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FAX) ? string.Empty : base.GetstringAsString(ColumnNames.FAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FAX);
				else
					this.FAX = base.SetstringAsString(ColumnNames.FAX, value);
			}
		}

		public virtual string s_EMAIL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EMAIL) ? string.Empty : base.GetstringAsString(ColumnNames.EMAIL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EMAIL);
				else
					this.EMAIL = base.SetstringAsString(ColumnNames.EMAIL, value);
			}
		}

		public virtual string s_ADDRESS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ADDRESS) ? string.Empty : base.GetstringAsString(ColumnNames.ADDRESS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ADDRESS);
				else
					this.ADDRESS = base.SetstringAsString(ColumnNames.ADDRESS, value);
			}
		}

		public virtual string s_MANUFACTURE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MANUFACTURE) ? string.Empty : base.GetstringAsString(ColumnNames.MANUFACTURE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MANUFACTURE);
				else
					this.MANUFACTURE = base.SetstringAsString(ColumnNames.MANUFACTURE, value);
			}
		}

		public virtual string s_INSPECTED_FOR_GMP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.INSPECTED_FOR_GMP) ? string.Empty : base.GetdoubleAsString(ColumnNames.INSPECTED_FOR_GMP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.INSPECTED_FOR_GMP);
				else
					this.INSPECTED_FOR_GMP = base.SetdoubleAsString(ColumnNames.INSPECTED_FOR_GMP, value);
			}
		}

		public virtual string s_PHONE_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PHONE_EQ) ? string.Empty : base.GetstringAsString(ColumnNames.PHONE_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PHONE_EQ);
				else
					this.PHONE_EQ = base.SetstringAsString(ColumnNames.PHONE_EQ, value);
			}
		}

		public virtual string s_EMAIL_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EMAIL_EQ) ? string.Empty : base.GetstringAsString(ColumnNames.EMAIL_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EMAIL_EQ);
				else
					this.EMAIL_EQ = base.SetstringAsString(ColumnNames.EMAIL_EQ, value);
			}
		}

		public virtual string s_ADDRESS_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ADDRESS_EQ) ? string.Empty : base.GetstringAsString(ColumnNames.ADDRESS_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ADDRESS_EQ);
				else
					this.ADDRESS_EQ = base.SetstringAsString(ColumnNames.ADDRESS_EQ, value);
			}
		}

		public virtual string s_MANUFACTURE_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MANUFACTURE_EQ) ? string.Empty : base.GetstringAsString(ColumnNames.MANUFACTURE_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MANUFACTURE_EQ);
				else
					this.MANUFACTURE_EQ = base.SetstringAsString(ColumnNames.MANUFACTURE_EQ, value);
			}
		}

		public virtual string s_FAX_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FAX_EQ) ? string.Empty : base.GetstringAsString(ColumnNames.FAX_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FAX_EQ);
				else
					this.FAX_EQ = base.SetstringAsString(ColumnNames.FAX_EQ, value);
			}
		}

		public virtual string s_INSPECTED_FOR_GMP_EQ
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.INSPECTED_FOR_GMP_EQ) ? string.Empty : base.GetdoubleAsString(ColumnNames.INSPECTED_FOR_GMP_EQ);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.INSPECTED_FOR_GMP_EQ);
				else
					this.INSPECTED_FOR_GMP_EQ = base.SetdoubleAsString(ColumnNames.INSPECTED_FOR_GMP_EQ, value);
			}
		}

		public virtual string s_Equiv_Substance_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Equiv_Substance_ID) ? string.Empty : base.GetdoubleAsString(ColumnNames.Equiv_Substance_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Equiv_Substance_ID);
				else
					this.Equiv_Substance_ID = base.SetdoubleAsString(ColumnNames.Equiv_Substance_ID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DRUG_REQUEST_SUBSTANCE_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID, Parameters.DRUG_REQUEST_SUBSTANCE_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UNIT_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UNIT_ID, Parameters.UNIT_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QUANTITY, Parameters.QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUI_NAME_SUBSTANCE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUI_NAME_SUBSTANCE, Parameters.EQUI_NAME_SUBSTANCE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUI_QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUI_QUANTITY, Parameters.EQUI_QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUI_UNIT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUI_UNIT, Parameters.EQUI_UNIT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OVER_QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OVER_QUANTITY, Parameters.OVER_QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OVER_UNIT_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OVER_UNIT_ID, Parameters.OVER_UNIT_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OVER_EQUI_QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OVER_EQUI_QUANTITY, Parameters.OVER_EQUI_QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OVER_EQUI_UNIT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OVER_EQUI_UNIT, Parameters.OVER_EQUI_UNIT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SPECIFICATION
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SPECIFICATION, Parameters.SPECIFICATION);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FUNCTION_
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FUNCTION_, Parameters.FUNCTION_);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUE_SPECIFICATION
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUE_SPECIFICATION, Parameters.EQUE_SPECIFICATION);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUE_FUNCTION
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUE_FUNCTION, Parameters.EQUE_FUNCTION);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PHONE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PHONE, Parameters.PHONE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FAX, Parameters.FAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EMAIL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EMAIL, Parameters.EMAIL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ADDRESS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ADDRESS, Parameters.ADDRESS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MANUFACTURE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MANUFACTURE, Parameters.MANUFACTURE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter INSPECTED_FOR_GMP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.INSPECTED_FOR_GMP, Parameters.INSPECTED_FOR_GMP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PHONE_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PHONE_EQ, Parameters.PHONE_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EMAIL_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EMAIL_EQ, Parameters.EMAIL_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ADDRESS_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ADDRESS_EQ, Parameters.ADDRESS_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MANUFACTURE_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MANUFACTURE_EQ, Parameters.MANUFACTURE_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FAX_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FAX_EQ, Parameters.FAX_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter INSPECTED_FOR_GMP_EQ
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.INSPECTED_FOR_GMP_EQ, Parameters.INSPECTED_FOR_GMP_EQ);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Equiv_Substance_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Equiv_Substance_ID, Parameters.Equiv_Substance_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter DRUG_REQUEST_SUBSTANCE_ID
		    {
				get
		        {
					if(_DRUG_REQUEST_SUBSTANCE_ID_W == null)
	        	    {
						_DRUG_REQUEST_SUBSTANCE_ID_W = TearOff.DRUG_REQUEST_SUBSTANCE_ID;
					}
					return _DRUG_REQUEST_SUBSTANCE_ID_W;
				}
			}

			public WhereParameter UNIT_ID
		    {
				get
		        {
					if(_UNIT_ID_W == null)
	        	    {
						_UNIT_ID_W = TearOff.UNIT_ID;
					}
					return _UNIT_ID_W;
				}
			}

			public WhereParameter QUANTITY
		    {
				get
		        {
					if(_QUANTITY_W == null)
	        	    {
						_QUANTITY_W = TearOff.QUANTITY;
					}
					return _QUANTITY_W;
				}
			}

			public WhereParameter EQUI_NAME_SUBSTANCE
		    {
				get
		        {
					if(_EQUI_NAME_SUBSTANCE_W == null)
	        	    {
						_EQUI_NAME_SUBSTANCE_W = TearOff.EQUI_NAME_SUBSTANCE;
					}
					return _EQUI_NAME_SUBSTANCE_W;
				}
			}

			public WhereParameter EQUI_QUANTITY
		    {
				get
		        {
					if(_EQUI_QUANTITY_W == null)
	        	    {
						_EQUI_QUANTITY_W = TearOff.EQUI_QUANTITY;
					}
					return _EQUI_QUANTITY_W;
				}
			}

			public WhereParameter EQUI_UNIT
		    {
				get
		        {
					if(_EQUI_UNIT_W == null)
	        	    {
						_EQUI_UNIT_W = TearOff.EQUI_UNIT;
					}
					return _EQUI_UNIT_W;
				}
			}

			public WhereParameter OVER_QUANTITY
		    {
				get
		        {
					if(_OVER_QUANTITY_W == null)
	        	    {
						_OVER_QUANTITY_W = TearOff.OVER_QUANTITY;
					}
					return _OVER_QUANTITY_W;
				}
			}

			public WhereParameter OVER_UNIT_ID
		    {
				get
		        {
					if(_OVER_UNIT_ID_W == null)
	        	    {
						_OVER_UNIT_ID_W = TearOff.OVER_UNIT_ID;
					}
					return _OVER_UNIT_ID_W;
				}
			}

			public WhereParameter OVER_EQUI_QUANTITY
		    {
				get
		        {
					if(_OVER_EQUI_QUANTITY_W == null)
	        	    {
						_OVER_EQUI_QUANTITY_W = TearOff.OVER_EQUI_QUANTITY;
					}
					return _OVER_EQUI_QUANTITY_W;
				}
			}

			public WhereParameter OVER_EQUI_UNIT
		    {
				get
		        {
					if(_OVER_EQUI_UNIT_W == null)
	        	    {
						_OVER_EQUI_UNIT_W = TearOff.OVER_EQUI_UNIT;
					}
					return _OVER_EQUI_UNIT_W;
				}
			}

			public WhereParameter SPECIFICATION
		    {
				get
		        {
					if(_SPECIFICATION_W == null)
	        	    {
						_SPECIFICATION_W = TearOff.SPECIFICATION;
					}
					return _SPECIFICATION_W;
				}
			}

			public WhereParameter FUNCTION_
		    {
				get
		        {
					if(_FUNCTION__W == null)
	        	    {
						_FUNCTION__W = TearOff.FUNCTION_;
					}
					return _FUNCTION__W;
				}
			}

			public WhereParameter EQUE_SPECIFICATION
		    {
				get
		        {
					if(_EQUE_SPECIFICATION_W == null)
	        	    {
						_EQUE_SPECIFICATION_W = TearOff.EQUE_SPECIFICATION;
					}
					return _EQUE_SPECIFICATION_W;
				}
			}

			public WhereParameter EQUE_FUNCTION
		    {
				get
		        {
					if(_EQUE_FUNCTION_W == null)
	        	    {
						_EQUE_FUNCTION_W = TearOff.EQUE_FUNCTION;
					}
					return _EQUE_FUNCTION_W;
				}
			}

			public WhereParameter PHONE
		    {
				get
		        {
					if(_PHONE_W == null)
	        	    {
						_PHONE_W = TearOff.PHONE;
					}
					return _PHONE_W;
				}
			}

			public WhereParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			public WhereParameter EMAIL
		    {
				get
		        {
					if(_EMAIL_W == null)
	        	    {
						_EMAIL_W = TearOff.EMAIL;
					}
					return _EMAIL_W;
				}
			}

			public WhereParameter ADDRESS
		    {
				get
		        {
					if(_ADDRESS_W == null)
	        	    {
						_ADDRESS_W = TearOff.ADDRESS;
					}
					return _ADDRESS_W;
				}
			}

			public WhereParameter MANUFACTURE
		    {
				get
		        {
					if(_MANUFACTURE_W == null)
	        	    {
						_MANUFACTURE_W = TearOff.MANUFACTURE;
					}
					return _MANUFACTURE_W;
				}
			}

			public WhereParameter INSPECTED_FOR_GMP
		    {
				get
		        {
					if(_INSPECTED_FOR_GMP_W == null)
	        	    {
						_INSPECTED_FOR_GMP_W = TearOff.INSPECTED_FOR_GMP;
					}
					return _INSPECTED_FOR_GMP_W;
				}
			}

			public WhereParameter PHONE_EQ
		    {
				get
		        {
					if(_PHONE_EQ_W == null)
	        	    {
						_PHONE_EQ_W = TearOff.PHONE_EQ;
					}
					return _PHONE_EQ_W;
				}
			}

			public WhereParameter EMAIL_EQ
		    {
				get
		        {
					if(_EMAIL_EQ_W == null)
	        	    {
						_EMAIL_EQ_W = TearOff.EMAIL_EQ;
					}
					return _EMAIL_EQ_W;
				}
			}

			public WhereParameter ADDRESS_EQ
		    {
				get
		        {
					if(_ADDRESS_EQ_W == null)
	        	    {
						_ADDRESS_EQ_W = TearOff.ADDRESS_EQ;
					}
					return _ADDRESS_EQ_W;
				}
			}

			public WhereParameter MANUFACTURE_EQ
		    {
				get
		        {
					if(_MANUFACTURE_EQ_W == null)
	        	    {
						_MANUFACTURE_EQ_W = TearOff.MANUFACTURE_EQ;
					}
					return _MANUFACTURE_EQ_W;
				}
			}

			public WhereParameter FAX_EQ
		    {
				get
		        {
					if(_FAX_EQ_W == null)
	        	    {
						_FAX_EQ_W = TearOff.FAX_EQ;
					}
					return _FAX_EQ_W;
				}
			}

			public WhereParameter INSPECTED_FOR_GMP_EQ
		    {
				get
		        {
					if(_INSPECTED_FOR_GMP_EQ_W == null)
	        	    {
						_INSPECTED_FOR_GMP_EQ_W = TearOff.INSPECTED_FOR_GMP_EQ;
					}
					return _INSPECTED_FOR_GMP_EQ_W;
				}
			}

			public WhereParameter Equiv_Substance_ID
		    {
				get
		        {
					if(_Equiv_Substance_ID_W == null)
	        	    {
						_Equiv_Substance_ID_W = TearOff.Equiv_Substance_ID;
					}
					return _Equiv_Substance_ID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _DRUG_REQUEST_SUBSTANCE_ID_W = null;
			private WhereParameter _UNIT_ID_W = null;
			private WhereParameter _QUANTITY_W = null;
			private WhereParameter _EQUI_NAME_SUBSTANCE_W = null;
			private WhereParameter _EQUI_QUANTITY_W = null;
			private WhereParameter _EQUI_UNIT_W = null;
			private WhereParameter _OVER_QUANTITY_W = null;
			private WhereParameter _OVER_UNIT_ID_W = null;
			private WhereParameter _OVER_EQUI_QUANTITY_W = null;
			private WhereParameter _OVER_EQUI_UNIT_W = null;
			private WhereParameter _SPECIFICATION_W = null;
			private WhereParameter _FUNCTION__W = null;
			private WhereParameter _EQUE_SPECIFICATION_W = null;
			private WhereParameter _EQUE_FUNCTION_W = null;
			private WhereParameter _PHONE_W = null;
			private WhereParameter _FAX_W = null;
			private WhereParameter _EMAIL_W = null;
			private WhereParameter _ADDRESS_W = null;
			private WhereParameter _MANUFACTURE_W = null;
			private WhereParameter _INSPECTED_FOR_GMP_W = null;
			private WhereParameter _PHONE_EQ_W = null;
			private WhereParameter _EMAIL_EQ_W = null;
			private WhereParameter _ADDRESS_EQ_W = null;
			private WhereParameter _MANUFACTURE_EQ_W = null;
			private WhereParameter _FAX_EQ_W = null;
			private WhereParameter _INSPECTED_FOR_GMP_EQ_W = null;
			private WhereParameter _Equiv_Substance_ID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_DRUG_REQUEST_SUBSTANCE_ID_W = null;
				_UNIT_ID_W = null;
				_QUANTITY_W = null;
				_EQUI_NAME_SUBSTANCE_W = null;
				_EQUI_QUANTITY_W = null;
				_EQUI_UNIT_W = null;
				_OVER_QUANTITY_W = null;
				_OVER_UNIT_ID_W = null;
				_OVER_EQUI_QUANTITY_W = null;
				_OVER_EQUI_UNIT_W = null;
				_SPECIFICATION_W = null;
				_FUNCTION__W = null;
				_EQUE_SPECIFICATION_W = null;
				_EQUE_FUNCTION_W = null;
				_PHONE_W = null;
				_FAX_W = null;
				_EMAIL_W = null;
				_ADDRESS_W = null;
				_MANUFACTURE_W = null;
				_INSPECTED_FOR_GMP_W = null;
				_PHONE_EQ_W = null;
				_EMAIL_EQ_W = null;
				_ADDRESS_EQ_W = null;
				_MANUFACTURE_EQ_W = null;
				_FAX_EQ_W = null;
				_INSPECTED_FOR_GMP_EQ_W = null;
				_Equiv_Substance_ID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DRUG_REQUEST_SUBSTANCE_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DRUG_REQUEST_SUBSTANCE_ID, Parameters.DRUG_REQUEST_SUBSTANCE_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UNIT_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UNIT_ID, Parameters.UNIT_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QUANTITY, Parameters.QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUI_NAME_SUBSTANCE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUI_NAME_SUBSTANCE, Parameters.EQUI_NAME_SUBSTANCE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUI_QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUI_QUANTITY, Parameters.EQUI_QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUI_UNIT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUI_UNIT, Parameters.EQUI_UNIT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OVER_QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OVER_QUANTITY, Parameters.OVER_QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OVER_UNIT_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OVER_UNIT_ID, Parameters.OVER_UNIT_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OVER_EQUI_QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OVER_EQUI_QUANTITY, Parameters.OVER_EQUI_QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OVER_EQUI_UNIT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OVER_EQUI_UNIT, Parameters.OVER_EQUI_UNIT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SPECIFICATION
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SPECIFICATION, Parameters.SPECIFICATION);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FUNCTION_
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FUNCTION_, Parameters.FUNCTION_);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUE_SPECIFICATION
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUE_SPECIFICATION, Parameters.EQUE_SPECIFICATION);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUE_FUNCTION
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUE_FUNCTION, Parameters.EQUE_FUNCTION);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PHONE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PHONE, Parameters.PHONE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FAX, Parameters.FAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EMAIL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EMAIL, Parameters.EMAIL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ADDRESS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ADDRESS, Parameters.ADDRESS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MANUFACTURE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MANUFACTURE, Parameters.MANUFACTURE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter INSPECTED_FOR_GMP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.INSPECTED_FOR_GMP, Parameters.INSPECTED_FOR_GMP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PHONE_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PHONE_EQ, Parameters.PHONE_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EMAIL_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EMAIL_EQ, Parameters.EMAIL_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ADDRESS_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ADDRESS_EQ, Parameters.ADDRESS_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MANUFACTURE_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MANUFACTURE_EQ, Parameters.MANUFACTURE_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FAX_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FAX_EQ, Parameters.FAX_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter INSPECTED_FOR_GMP_EQ
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.INSPECTED_FOR_GMP_EQ, Parameters.INSPECTED_FOR_GMP_EQ);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Equiv_Substance_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Equiv_Substance_ID, Parameters.Equiv_Substance_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter DRUG_REQUEST_SUBSTANCE_ID
		    {
				get
		        {
					if(_DRUG_REQUEST_SUBSTANCE_ID_W == null)
	        	    {
						_DRUG_REQUEST_SUBSTANCE_ID_W = TearOff.DRUG_REQUEST_SUBSTANCE_ID;
					}
					return _DRUG_REQUEST_SUBSTANCE_ID_W;
				}
			}

			public AggregateParameter UNIT_ID
		    {
				get
		        {
					if(_UNIT_ID_W == null)
	        	    {
						_UNIT_ID_W = TearOff.UNIT_ID;
					}
					return _UNIT_ID_W;
				}
			}

			public AggregateParameter QUANTITY
		    {
				get
		        {
					if(_QUANTITY_W == null)
	        	    {
						_QUANTITY_W = TearOff.QUANTITY;
					}
					return _QUANTITY_W;
				}
			}

			public AggregateParameter EQUI_NAME_SUBSTANCE
		    {
				get
		        {
					if(_EQUI_NAME_SUBSTANCE_W == null)
	        	    {
						_EQUI_NAME_SUBSTANCE_W = TearOff.EQUI_NAME_SUBSTANCE;
					}
					return _EQUI_NAME_SUBSTANCE_W;
				}
			}

			public AggregateParameter EQUI_QUANTITY
		    {
				get
		        {
					if(_EQUI_QUANTITY_W == null)
	        	    {
						_EQUI_QUANTITY_W = TearOff.EQUI_QUANTITY;
					}
					return _EQUI_QUANTITY_W;
				}
			}

			public AggregateParameter EQUI_UNIT
		    {
				get
		        {
					if(_EQUI_UNIT_W == null)
	        	    {
						_EQUI_UNIT_W = TearOff.EQUI_UNIT;
					}
					return _EQUI_UNIT_W;
				}
			}

			public AggregateParameter OVER_QUANTITY
		    {
				get
		        {
					if(_OVER_QUANTITY_W == null)
	        	    {
						_OVER_QUANTITY_W = TearOff.OVER_QUANTITY;
					}
					return _OVER_QUANTITY_W;
				}
			}

			public AggregateParameter OVER_UNIT_ID
		    {
				get
		        {
					if(_OVER_UNIT_ID_W == null)
	        	    {
						_OVER_UNIT_ID_W = TearOff.OVER_UNIT_ID;
					}
					return _OVER_UNIT_ID_W;
				}
			}

			public AggregateParameter OVER_EQUI_QUANTITY
		    {
				get
		        {
					if(_OVER_EQUI_QUANTITY_W == null)
	        	    {
						_OVER_EQUI_QUANTITY_W = TearOff.OVER_EQUI_QUANTITY;
					}
					return _OVER_EQUI_QUANTITY_W;
				}
			}

			public AggregateParameter OVER_EQUI_UNIT
		    {
				get
		        {
					if(_OVER_EQUI_UNIT_W == null)
	        	    {
						_OVER_EQUI_UNIT_W = TearOff.OVER_EQUI_UNIT;
					}
					return _OVER_EQUI_UNIT_W;
				}
			}

			public AggregateParameter SPECIFICATION
		    {
				get
		        {
					if(_SPECIFICATION_W == null)
	        	    {
						_SPECIFICATION_W = TearOff.SPECIFICATION;
					}
					return _SPECIFICATION_W;
				}
			}

			public AggregateParameter FUNCTION_
		    {
				get
		        {
					if(_FUNCTION__W == null)
	        	    {
						_FUNCTION__W = TearOff.FUNCTION_;
					}
					return _FUNCTION__W;
				}
			}

			public AggregateParameter EQUE_SPECIFICATION
		    {
				get
		        {
					if(_EQUE_SPECIFICATION_W == null)
	        	    {
						_EQUE_SPECIFICATION_W = TearOff.EQUE_SPECIFICATION;
					}
					return _EQUE_SPECIFICATION_W;
				}
			}

			public AggregateParameter EQUE_FUNCTION
		    {
				get
		        {
					if(_EQUE_FUNCTION_W == null)
	        	    {
						_EQUE_FUNCTION_W = TearOff.EQUE_FUNCTION;
					}
					return _EQUE_FUNCTION_W;
				}
			}

			public AggregateParameter PHONE
		    {
				get
		        {
					if(_PHONE_W == null)
	        	    {
						_PHONE_W = TearOff.PHONE;
					}
					return _PHONE_W;
				}
			}

			public AggregateParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			public AggregateParameter EMAIL
		    {
				get
		        {
					if(_EMAIL_W == null)
	        	    {
						_EMAIL_W = TearOff.EMAIL;
					}
					return _EMAIL_W;
				}
			}

			public AggregateParameter ADDRESS
		    {
				get
		        {
					if(_ADDRESS_W == null)
	        	    {
						_ADDRESS_W = TearOff.ADDRESS;
					}
					return _ADDRESS_W;
				}
			}

			public AggregateParameter MANUFACTURE
		    {
				get
		        {
					if(_MANUFACTURE_W == null)
	        	    {
						_MANUFACTURE_W = TearOff.MANUFACTURE;
					}
					return _MANUFACTURE_W;
				}
			}

			public AggregateParameter INSPECTED_FOR_GMP
		    {
				get
		        {
					if(_INSPECTED_FOR_GMP_W == null)
	        	    {
						_INSPECTED_FOR_GMP_W = TearOff.INSPECTED_FOR_GMP;
					}
					return _INSPECTED_FOR_GMP_W;
				}
			}

			public AggregateParameter PHONE_EQ
		    {
				get
		        {
					if(_PHONE_EQ_W == null)
	        	    {
						_PHONE_EQ_W = TearOff.PHONE_EQ;
					}
					return _PHONE_EQ_W;
				}
			}

			public AggregateParameter EMAIL_EQ
		    {
				get
		        {
					if(_EMAIL_EQ_W == null)
	        	    {
						_EMAIL_EQ_W = TearOff.EMAIL_EQ;
					}
					return _EMAIL_EQ_W;
				}
			}

			public AggregateParameter ADDRESS_EQ
		    {
				get
		        {
					if(_ADDRESS_EQ_W == null)
	        	    {
						_ADDRESS_EQ_W = TearOff.ADDRESS_EQ;
					}
					return _ADDRESS_EQ_W;
				}
			}

			public AggregateParameter MANUFACTURE_EQ
		    {
				get
		        {
					if(_MANUFACTURE_EQ_W == null)
	        	    {
						_MANUFACTURE_EQ_W = TearOff.MANUFACTURE_EQ;
					}
					return _MANUFACTURE_EQ_W;
				}
			}

			public AggregateParameter FAX_EQ
		    {
				get
		        {
					if(_FAX_EQ_W == null)
	        	    {
						_FAX_EQ_W = TearOff.FAX_EQ;
					}
					return _FAX_EQ_W;
				}
			}

			public AggregateParameter INSPECTED_FOR_GMP_EQ
		    {
				get
		        {
					if(_INSPECTED_FOR_GMP_EQ_W == null)
	        	    {
						_INSPECTED_FOR_GMP_EQ_W = TearOff.INSPECTED_FOR_GMP_EQ;
					}
					return _INSPECTED_FOR_GMP_EQ_W;
				}
			}

			public AggregateParameter Equiv_Substance_ID
		    {
				get
		        {
					if(_Equiv_Substance_ID_W == null)
	        	    {
						_Equiv_Substance_ID_W = TearOff.Equiv_Substance_ID;
					}
					return _Equiv_Substance_ID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _DRUG_REQUEST_SUBSTANCE_ID_W = null;
			private AggregateParameter _UNIT_ID_W = null;
			private AggregateParameter _QUANTITY_W = null;
			private AggregateParameter _EQUI_NAME_SUBSTANCE_W = null;
			private AggregateParameter _EQUI_QUANTITY_W = null;
			private AggregateParameter _EQUI_UNIT_W = null;
			private AggregateParameter _OVER_QUANTITY_W = null;
			private AggregateParameter _OVER_UNIT_ID_W = null;
			private AggregateParameter _OVER_EQUI_QUANTITY_W = null;
			private AggregateParameter _OVER_EQUI_UNIT_W = null;
			private AggregateParameter _SPECIFICATION_W = null;
			private AggregateParameter _FUNCTION__W = null;
			private AggregateParameter _EQUE_SPECIFICATION_W = null;
			private AggregateParameter _EQUE_FUNCTION_W = null;
			private AggregateParameter _PHONE_W = null;
			private AggregateParameter _FAX_W = null;
			private AggregateParameter _EMAIL_W = null;
			private AggregateParameter _ADDRESS_W = null;
			private AggregateParameter _MANUFACTURE_W = null;
			private AggregateParameter _INSPECTED_FOR_GMP_W = null;
			private AggregateParameter _PHONE_EQ_W = null;
			private AggregateParameter _EMAIL_EQ_W = null;
			private AggregateParameter _ADDRESS_EQ_W = null;
			private AggregateParameter _MANUFACTURE_EQ_W = null;
			private AggregateParameter _FAX_EQ_W = null;
			private AggregateParameter _INSPECTED_FOR_GMP_EQ_W = null;
			private AggregateParameter _Equiv_Substance_ID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_DRUG_REQUEST_SUBSTANCE_ID_W = null;
				_UNIT_ID_W = null;
				_QUANTITY_W = null;
				_EQUI_NAME_SUBSTANCE_W = null;
				_EQUI_QUANTITY_W = null;
				_EQUI_UNIT_W = null;
				_OVER_QUANTITY_W = null;
				_OVER_UNIT_ID_W = null;
				_OVER_EQUI_QUANTITY_W = null;
				_OVER_EQUI_UNIT_W = null;
				_SPECIFICATION_W = null;
				_FUNCTION__W = null;
				_EQUE_SPECIFICATION_W = null;
				_EQUE_FUNCTION_W = null;
				_PHONE_W = null;
				_FAX_W = null;
				_EMAIL_W = null;
				_ADDRESS_W = null;
				_MANUFACTURE_W = null;
				_INSPECTED_FOR_GMP_W = null;
				_PHONE_EQ_W = null;
				_EMAIL_EQ_W = null;
				_ADDRESS_EQ_W = null;
				_MANUFACTURE_EQ_W = null;
				_FAX_EQ_W = null;
				_INSPECTED_FOR_GMP_EQ_W = null;
				_Equiv_Substance_ID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SUBSTANCE_SUPPLIERInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SUBSTANCE_SUPPLIERUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SUBSTANCE_SUPPLIERDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DRUG_REQUEST_SUBSTANCE_ID);
			p.SourceColumn = ColumnNames.DRUG_REQUEST_SUBSTANCE_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UNIT_ID);
			p.SourceColumn = ColumnNames.UNIT_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.QUANTITY);
			p.SourceColumn = ColumnNames.QUANTITY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EQUI_NAME_SUBSTANCE);
			p.SourceColumn = ColumnNames.EQUI_NAME_SUBSTANCE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EQUI_QUANTITY);
			p.SourceColumn = ColumnNames.EQUI_QUANTITY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EQUI_UNIT);
			p.SourceColumn = ColumnNames.EQUI_UNIT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OVER_QUANTITY);
			p.SourceColumn = ColumnNames.OVER_QUANTITY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OVER_UNIT_ID);
			p.SourceColumn = ColumnNames.OVER_UNIT_ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OVER_EQUI_QUANTITY);
			p.SourceColumn = ColumnNames.OVER_EQUI_QUANTITY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OVER_EQUI_UNIT);
			p.SourceColumn = ColumnNames.OVER_EQUI_UNIT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SPECIFICATION);
			p.SourceColumn = ColumnNames.SPECIFICATION;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FUNCTION_);
			p.SourceColumn = ColumnNames.FUNCTION_;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EQUE_SPECIFICATION);
			p.SourceColumn = ColumnNames.EQUE_SPECIFICATION;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EQUE_FUNCTION);
			p.SourceColumn = ColumnNames.EQUE_FUNCTION;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PHONE);
			p.SourceColumn = ColumnNames.PHONE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FAX);
			p.SourceColumn = ColumnNames.FAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EMAIL);
			p.SourceColumn = ColumnNames.EMAIL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ADDRESS);
			p.SourceColumn = ColumnNames.ADDRESS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MANUFACTURE);
			p.SourceColumn = ColumnNames.MANUFACTURE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.INSPECTED_FOR_GMP);
			p.SourceColumn = ColumnNames.INSPECTED_FOR_GMP;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PHONE_EQ);
			p.SourceColumn = ColumnNames.PHONE_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EMAIL_EQ);
			p.SourceColumn = ColumnNames.EMAIL_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ADDRESS_EQ);
			p.SourceColumn = ColumnNames.ADDRESS_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MANUFACTURE_EQ);
			p.SourceColumn = ColumnNames.MANUFACTURE_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FAX_EQ);
			p.SourceColumn = ColumnNames.FAX_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.INSPECTED_FOR_GMP_EQ);
			p.SourceColumn = ColumnNames.INSPECTED_FOR_GMP_EQ;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Equiv_Substance_ID);
			p.SourceColumn = ColumnNames.Equiv_Substance_ID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
