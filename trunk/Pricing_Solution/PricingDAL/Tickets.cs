
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Pricing.DAL
{
	public abstract class _Tickets : SqlClientEntity
	{
		public _Tickets()
		{
			this.QuerySource = "Tickets";
			this.MappingName = "Tickets";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TicketsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TicketID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TicketID, TicketID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TicketsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TicketID
			{
				get
				{
					return new SqlParameter("@TicketID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TicketTypeID
			{
				get
				{
					return new SqlParameter("@TicketTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradePricingID
			{
				get
				{
					return new SqlParameter("@TradePricingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteeHistoryID
			{
				get
				{
					return new SqlParameter("@CommitteeHistoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LastCommitteeDate
			{
				get
				{
					return new SqlParameter("@LastCommitteeDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastDescision
			{
				get
				{
					return new SqlParameter("@LastDescision", SqlDbType.NVarChar, 2500);
				}
			}
			
			public static SqlParameter CurrentPrice
			{
				get
				{
					return new SqlParameter("@CurrentPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SuggestedPrice
			{
				get
				{
					return new SqlParameter("@SuggestedPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter TextRequest
			{
				get
				{
					return new SqlParameter("@TextRequest", SqlDbType.NVarChar, 2500);
				}
			}
			
			public static SqlParameter FileAttachement
			{
				get
				{
					return new SqlParameter("@FileAttachement", SqlDbType.NVarChar, 350);
				}
			}
			
			public static SqlParameter InitiateDate
			{
				get
				{
					return new SqlParameter("@InitiateDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TicketID = "TicketID";
            public const string TicketTypeID = "TicketTypeID";
            public const string CompanyID = "CompanyID";
            public const string TradePricingID = "TradePricingID";
            public const string CommitteeHistoryID = "CommitteeHistoryID";
            public const string LastCommitteeDate = "LastCommitteeDate";
            public const string LastDescision = "LastDescision";
            public const string CurrentPrice = "CurrentPrice";
            public const string SuggestedPrice = "SuggestedPrice";
            public const string TextRequest = "TextRequest";
            public const string FileAttachement = "FileAttachement";
            public const string InitiateDate = "InitiateDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TicketID] = _Tickets.PropertyNames.TicketID;
					ht[TicketTypeID] = _Tickets.PropertyNames.TicketTypeID;
					ht[CompanyID] = _Tickets.PropertyNames.CompanyID;
					ht[TradePricingID] = _Tickets.PropertyNames.TradePricingID;
					ht[CommitteeHistoryID] = _Tickets.PropertyNames.CommitteeHistoryID;
					ht[LastCommitteeDate] = _Tickets.PropertyNames.LastCommitteeDate;
					ht[LastDescision] = _Tickets.PropertyNames.LastDescision;
					ht[CurrentPrice] = _Tickets.PropertyNames.CurrentPrice;
					ht[SuggestedPrice] = _Tickets.PropertyNames.SuggestedPrice;
					ht[TextRequest] = _Tickets.PropertyNames.TextRequest;
					ht[FileAttachement] = _Tickets.PropertyNames.FileAttachement;
					ht[InitiateDate] = _Tickets.PropertyNames.InitiateDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TicketID = "TicketID";
            public const string TicketTypeID = "TicketTypeID";
            public const string CompanyID = "CompanyID";
            public const string TradePricingID = "TradePricingID";
            public const string CommitteeHistoryID = "CommitteeHistoryID";
            public const string LastCommitteeDate = "LastCommitteeDate";
            public const string LastDescision = "LastDescision";
            public const string CurrentPrice = "CurrentPrice";
            public const string SuggestedPrice = "SuggestedPrice";
            public const string TextRequest = "TextRequest";
            public const string FileAttachement = "FileAttachement";
            public const string InitiateDate = "InitiateDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TicketID] = _Tickets.ColumnNames.TicketID;
					ht[TicketTypeID] = _Tickets.ColumnNames.TicketTypeID;
					ht[CompanyID] = _Tickets.ColumnNames.CompanyID;
					ht[TradePricingID] = _Tickets.ColumnNames.TradePricingID;
					ht[CommitteeHistoryID] = _Tickets.ColumnNames.CommitteeHistoryID;
					ht[LastCommitteeDate] = _Tickets.ColumnNames.LastCommitteeDate;
					ht[LastDescision] = _Tickets.ColumnNames.LastDescision;
					ht[CurrentPrice] = _Tickets.ColumnNames.CurrentPrice;
					ht[SuggestedPrice] = _Tickets.ColumnNames.SuggestedPrice;
					ht[TextRequest] = _Tickets.ColumnNames.TextRequest;
					ht[FileAttachement] = _Tickets.ColumnNames.FileAttachement;
					ht[InitiateDate] = _Tickets.ColumnNames.InitiateDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TicketID = "s_TicketID";
            public const string TicketTypeID = "s_TicketTypeID";
            public const string CompanyID = "s_CompanyID";
            public const string TradePricingID = "s_TradePricingID";
            public const string CommitteeHistoryID = "s_CommitteeHistoryID";
            public const string LastCommitteeDate = "s_LastCommitteeDate";
            public const string LastDescision = "s_LastDescision";
            public const string CurrentPrice = "s_CurrentPrice";
            public const string SuggestedPrice = "s_SuggestedPrice";
            public const string TextRequest = "s_TextRequest";
            public const string FileAttachement = "s_FileAttachement";
            public const string InitiateDate = "s_InitiateDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TicketID
	    {
			get
	        {
				return base.Getint(ColumnNames.TicketID);
			}
			set
	        {
				base.Setint(ColumnNames.TicketID, value);
			}
		}

		public virtual int TicketTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.TicketTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.TicketTypeID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual int TradePricingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingID, value);
			}
		}

		public virtual int CommitteeHistoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CommitteeHistoryID);
			}
			set
	        {
				base.Setint(ColumnNames.CommitteeHistoryID, value);
			}
		}

		public virtual DateTime LastCommitteeDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastCommitteeDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastCommitteeDate, value);
			}
		}

		public virtual string LastDescision
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastDescision);
			}
			set
	        {
				base.Setstring(ColumnNames.LastDescision, value);
			}
		}

		public virtual double CurrentPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CurrentPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CurrentPrice, value);
			}
		}

		public virtual double SuggestedPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.SuggestedPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.SuggestedPrice, value);
			}
		}

		public virtual string TextRequest
	    {
			get
	        {
				return base.Getstring(ColumnNames.TextRequest);
			}
			set
	        {
				base.Setstring(ColumnNames.TextRequest, value);
			}
		}

		public virtual string FileAttachement
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileAttachement);
			}
			set
	        {
				base.Setstring(ColumnNames.FileAttachement, value);
			}
		}

		public virtual DateTime InitiateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InitiateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InitiateDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TicketID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TicketID) ? string.Empty : base.GetintAsString(ColumnNames.TicketID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TicketID);
				else
					this.TicketID = base.SetintAsString(ColumnNames.TicketID, value);
			}
		}

		public virtual string s_TicketTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TicketTypeID) ? string.Empty : base.GetintAsString(ColumnNames.TicketTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TicketTypeID);
				else
					this.TicketTypeID = base.SetintAsString(ColumnNames.TicketTypeID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_TradePricingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingID);
				else
					this.TradePricingID = base.SetintAsString(ColumnNames.TradePricingID, value);
			}
		}

		public virtual string s_CommitteeHistoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteeHistoryID) ? string.Empty : base.GetintAsString(ColumnNames.CommitteeHistoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteeHistoryID);
				else
					this.CommitteeHistoryID = base.SetintAsString(ColumnNames.CommitteeHistoryID, value);
			}
		}

		public virtual string s_LastCommitteeDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastCommitteeDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastCommitteeDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastCommitteeDate);
				else
					this.LastCommitteeDate = base.SetDateTimeAsString(ColumnNames.LastCommitteeDate, value);
			}
		}

		public virtual string s_LastDescision
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastDescision) ? string.Empty : base.GetstringAsString(ColumnNames.LastDescision);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastDescision);
				else
					this.LastDescision = base.SetstringAsString(ColumnNames.LastDescision, value);
			}
		}

		public virtual string s_CurrentPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CurrentPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentPrice);
				else
					this.CurrentPrice = base.SetdoubleAsString(ColumnNames.CurrentPrice, value);
			}
		}

		public virtual string s_SuggestedPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SuggestedPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.SuggestedPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SuggestedPrice);
				else
					this.SuggestedPrice = base.SetdoubleAsString(ColumnNames.SuggestedPrice, value);
			}
		}

		public virtual string s_TextRequest
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TextRequest) ? string.Empty : base.GetstringAsString(ColumnNames.TextRequest);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TextRequest);
				else
					this.TextRequest = base.SetstringAsString(ColumnNames.TextRequest, value);
			}
		}

		public virtual string s_FileAttachement
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileAttachement) ? string.Empty : base.GetstringAsString(ColumnNames.FileAttachement);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileAttachement);
				else
					this.FileAttachement = base.SetstringAsString(ColumnNames.FileAttachement, value);
			}
		}

		public virtual string s_InitiateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InitiateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InitiateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InitiateDate);
				else
					this.InitiateDate = base.SetDateTimeAsString(ColumnNames.InitiateDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TicketID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TicketID, Parameters.TicketID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TicketTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TicketTypeID, Parameters.TicketTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradePricingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteeHistoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteeHistoryID, Parameters.CommitteeHistoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastCommitteeDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastCommitteeDate, Parameters.LastCommitteeDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastDescision
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastDescision, Parameters.LastDescision);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentPrice, Parameters.CurrentPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SuggestedPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SuggestedPrice, Parameters.SuggestedPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TextRequest
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TextRequest, Parameters.TextRequest);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileAttachement
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileAttachement, Parameters.FileAttachement);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InitiateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InitiateDate, Parameters.InitiateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TicketID
		    {
				get
		        {
					if(_TicketID_W == null)
	        	    {
						_TicketID_W = TearOff.TicketID;
					}
					return _TicketID_W;
				}
			}

			public WhereParameter TicketTypeID
		    {
				get
		        {
					if(_TicketTypeID_W == null)
	        	    {
						_TicketTypeID_W = TearOff.TicketTypeID;
					}
					return _TicketTypeID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public WhereParameter CommitteeHistoryID
		    {
				get
		        {
					if(_CommitteeHistoryID_W == null)
	        	    {
						_CommitteeHistoryID_W = TearOff.CommitteeHistoryID;
					}
					return _CommitteeHistoryID_W;
				}
			}

			public WhereParameter LastCommitteeDate
		    {
				get
		        {
					if(_LastCommitteeDate_W == null)
	        	    {
						_LastCommitteeDate_W = TearOff.LastCommitteeDate;
					}
					return _LastCommitteeDate_W;
				}
			}

			public WhereParameter LastDescision
		    {
				get
		        {
					if(_LastDescision_W == null)
	        	    {
						_LastDescision_W = TearOff.LastDescision;
					}
					return _LastDescision_W;
				}
			}

			public WhereParameter CurrentPrice
		    {
				get
		        {
					if(_CurrentPrice_W == null)
	        	    {
						_CurrentPrice_W = TearOff.CurrentPrice;
					}
					return _CurrentPrice_W;
				}
			}

			public WhereParameter SuggestedPrice
		    {
				get
		        {
					if(_SuggestedPrice_W == null)
	        	    {
						_SuggestedPrice_W = TearOff.SuggestedPrice;
					}
					return _SuggestedPrice_W;
				}
			}

			public WhereParameter TextRequest
		    {
				get
		        {
					if(_TextRequest_W == null)
	        	    {
						_TextRequest_W = TearOff.TextRequest;
					}
					return _TextRequest_W;
				}
			}

			public WhereParameter FileAttachement
		    {
				get
		        {
					if(_FileAttachement_W == null)
	        	    {
						_FileAttachement_W = TearOff.FileAttachement;
					}
					return _FileAttachement_W;
				}
			}

			public WhereParameter InitiateDate
		    {
				get
		        {
					if(_InitiateDate_W == null)
	        	    {
						_InitiateDate_W = TearOff.InitiateDate;
					}
					return _InitiateDate_W;
				}
			}

			private WhereParameter _TicketID_W = null;
			private WhereParameter _TicketTypeID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _TradePricingID_W = null;
			private WhereParameter _CommitteeHistoryID_W = null;
			private WhereParameter _LastCommitteeDate_W = null;
			private WhereParameter _LastDescision_W = null;
			private WhereParameter _CurrentPrice_W = null;
			private WhereParameter _SuggestedPrice_W = null;
			private WhereParameter _TextRequest_W = null;
			private WhereParameter _FileAttachement_W = null;
			private WhereParameter _InitiateDate_W = null;

			public void WhereClauseReset()
			{
				_TicketID_W = null;
				_TicketTypeID_W = null;
				_CompanyID_W = null;
				_TradePricingID_W = null;
				_CommitteeHistoryID_W = null;
				_LastCommitteeDate_W = null;
				_LastDescision_W = null;
				_CurrentPrice_W = null;
				_SuggestedPrice_W = null;
				_TextRequest_W = null;
				_FileAttachement_W = null;
				_InitiateDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TicketID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TicketID, Parameters.TicketID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TicketTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TicketTypeID, Parameters.TicketTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradePricingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteeHistoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteeHistoryID, Parameters.CommitteeHistoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastCommitteeDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastCommitteeDate, Parameters.LastCommitteeDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastDescision
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastDescision, Parameters.LastDescision);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentPrice, Parameters.CurrentPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SuggestedPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SuggestedPrice, Parameters.SuggestedPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TextRequest
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TextRequest, Parameters.TextRequest);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileAttachement
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileAttachement, Parameters.FileAttachement);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InitiateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InitiateDate, Parameters.InitiateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TicketID
		    {
				get
		        {
					if(_TicketID_W == null)
	        	    {
						_TicketID_W = TearOff.TicketID;
					}
					return _TicketID_W;
				}
			}

			public AggregateParameter TicketTypeID
		    {
				get
		        {
					if(_TicketTypeID_W == null)
	        	    {
						_TicketTypeID_W = TearOff.TicketTypeID;
					}
					return _TicketTypeID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public AggregateParameter CommitteeHistoryID
		    {
				get
		        {
					if(_CommitteeHistoryID_W == null)
	        	    {
						_CommitteeHistoryID_W = TearOff.CommitteeHistoryID;
					}
					return _CommitteeHistoryID_W;
				}
			}

			public AggregateParameter LastCommitteeDate
		    {
				get
		        {
					if(_LastCommitteeDate_W == null)
	        	    {
						_LastCommitteeDate_W = TearOff.LastCommitteeDate;
					}
					return _LastCommitteeDate_W;
				}
			}

			public AggregateParameter LastDescision
		    {
				get
		        {
					if(_LastDescision_W == null)
	        	    {
						_LastDescision_W = TearOff.LastDescision;
					}
					return _LastDescision_W;
				}
			}

			public AggregateParameter CurrentPrice
		    {
				get
		        {
					if(_CurrentPrice_W == null)
	        	    {
						_CurrentPrice_W = TearOff.CurrentPrice;
					}
					return _CurrentPrice_W;
				}
			}

			public AggregateParameter SuggestedPrice
		    {
				get
		        {
					if(_SuggestedPrice_W == null)
	        	    {
						_SuggestedPrice_W = TearOff.SuggestedPrice;
					}
					return _SuggestedPrice_W;
				}
			}

			public AggregateParameter TextRequest
		    {
				get
		        {
					if(_TextRequest_W == null)
	        	    {
						_TextRequest_W = TearOff.TextRequest;
					}
					return _TextRequest_W;
				}
			}

			public AggregateParameter FileAttachement
		    {
				get
		        {
					if(_FileAttachement_W == null)
	        	    {
						_FileAttachement_W = TearOff.FileAttachement;
					}
					return _FileAttachement_W;
				}
			}

			public AggregateParameter InitiateDate
		    {
				get
		        {
					if(_InitiateDate_W == null)
	        	    {
						_InitiateDate_W = TearOff.InitiateDate;
					}
					return _InitiateDate_W;
				}
			}

			private AggregateParameter _TicketID_W = null;
			private AggregateParameter _TicketTypeID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _TradePricingID_W = null;
			private AggregateParameter _CommitteeHistoryID_W = null;
			private AggregateParameter _LastCommitteeDate_W = null;
			private AggregateParameter _LastDescision_W = null;
			private AggregateParameter _CurrentPrice_W = null;
			private AggregateParameter _SuggestedPrice_W = null;
			private AggregateParameter _TextRequest_W = null;
			private AggregateParameter _FileAttachement_W = null;
			private AggregateParameter _InitiateDate_W = null;

			public void AggregateClauseReset()
			{
				_TicketID_W = null;
				_TicketTypeID_W = null;
				_CompanyID_W = null;
				_TradePricingID_W = null;
				_CommitteeHistoryID_W = null;
				_LastCommitteeDate_W = null;
				_LastDescision_W = null;
				_CurrentPrice_W = null;
				_SuggestedPrice_W = null;
				_TextRequest_W = null;
				_FileAttachement_W = null;
				_InitiateDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TicketID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TicketID);
			p.SourceColumn = ColumnNames.TicketID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TicketID);
			p.SourceColumn = ColumnNames.TicketID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TicketTypeID);
			p.SourceColumn = ColumnNames.TicketTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteeHistoryID);
			p.SourceColumn = ColumnNames.CommitteeHistoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastCommitteeDate);
			p.SourceColumn = ColumnNames.LastCommitteeDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastDescision);
			p.SourceColumn = ColumnNames.LastDescision;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentPrice);
			p.SourceColumn = ColumnNames.CurrentPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SuggestedPrice);
			p.SourceColumn = ColumnNames.SuggestedPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TextRequest);
			p.SourceColumn = ColumnNames.TextRequest;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileAttachement);
			p.SourceColumn = ColumnNames.FileAttachement;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InitiateDate);
			p.SourceColumn = ColumnNames.InitiateDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
