
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Pricing.DAL
{
	public abstract class _TradePricing : SqlClientEntity
	{
		public _TradePricing()
		{
			this.QuerySource = "TradePricing";
			this.MappingName = "TradePricing";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TradePricingLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TradePricingID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TradePricingID, TradePricingID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TradePricingLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TradePricingID
			{
				get
				{
					return new SqlParameter("@TradePricingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PricingStatusID
			{
				get
				{
					return new SqlParameter("@PricingStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RegistrationCommitteTypeID
			{
				get
				{
					return new SqlParameter("@RegistrationCommitteTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DosageFormID
			{
				get
				{
					return new SqlParameter("@DosageFormID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FileTypeID
			{
				get
				{
					return new SqlParameter("@FileTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufactureID
			{
				get
				{
					return new SqlParameter("@ManufactureID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AssignedUserID
			{
				get
				{
					return new SqlParameter("@AssignedUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradeName
			{
				get
				{
					return new SqlParameter("@TradeName", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter Generics
			{
				get
				{
					return new SqlParameter("@Generics", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter CompanyPrice
			{
				get
				{
					return new SqlParameter("@CompanyPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CommittePrice
			{
				get
				{
					return new SqlParameter("@CommittePrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CommitteDate
			{
				get
				{
					return new SqlParameter("@CommitteDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DiscussionDate
			{
				get
				{
					return new SqlParameter("@DiscussionDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SubmissionDate
			{
				get
				{
					return new SqlParameter("@SubmissionDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pack
			{
				get
				{
					return new SqlParameter("@Pack", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FileNo
			{
				get
				{
					return new SqlParameter("@FileNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter FilePath
			{
				get
				{
					return new SqlParameter("@FilePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter Generic
			{
				get
				{
					return new SqlParameter("@Generic", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter GenericStrength
			{
				get
				{
					return new SqlParameter("@GenericStrength", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ImportedManufacture
			{
				get
				{
					return new SqlParameter("@ImportedManufacture", SqlDbType.NVarChar, 1500);
				}
			}
			
			public static SqlParameter RegNo
			{
				get
				{
					return new SqlParameter("@RegNo", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Reference
			{
				get
				{
					return new SqlParameter("@Reference", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Indication
			{
				get
				{
					return new SqlParameter("@Indication", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Dose
			{
				get
				{
					return new SqlParameter("@Dose", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter SubmittedToSpecialized
			{
				get
				{
					return new SqlParameter("@SubmittedToSpecialized", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SalesTaxes
			{
				get
				{
					return new SqlParameter("@SalesTaxes", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter EssentialDrugList
			{
				get
				{
					return new SqlParameter("@EssentialDrugList", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter TradePricingStatusID
			{
				get
				{
					return new SqlParameter("@TradePricingStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradePricingLicenseTypeID
			{
				get
				{
					return new SqlParameter("@TradePricingLicenseTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SectorTypeID
			{
				get
				{
					return new SqlParameter("@SectorTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteePrice
			{
				get
				{
					return new SqlParameter("@CommitteePrice", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter CommiteeDate
			{
				get
				{
					return new SqlParameter("@CommiteeDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RationalForPricing
			{
				get
				{
					return new SqlParameter("@RationalForPricing", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter NoInBox
			{
				get
				{
					return new SqlParameter("@NoInBox", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LowestIntPrice
			{
				get
				{
					return new SqlParameter("@LowestIntPrice", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PriceInEgy
			{
				get
				{
					return new SqlParameter("@PriceInEgy", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PriceAfter30
			{
				get
				{
					return new SqlParameter("@PriceAfter30", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PriceAfter35HighTech
			{
				get
				{
					return new SqlParameter("@PriceAfter35HighTech", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PriceAfter35FirstGeneric
			{
				get
				{
					return new SqlParameter("@PriceAfter35FirstGeneric", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PriceAfter40SecondGeneric
			{
				get
				{
					return new SqlParameter("@PriceAfter40SecondGeneric", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter LowestPriceGeneric
			{
				get
				{
					return new SqlParameter("@LowestPriceGeneric", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter FinalPrice
			{
				get
				{
					return new SqlParameter("@FinalPrice", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter IsPricedTo499
			{
				get
				{
					return new SqlParameter("@IsPricedTo499", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter MainGroup
			{
				get
				{
					return new SqlParameter("@MainGroup", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Similar
			{
				get
				{
					return new SqlParameter("@Similar", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter MonthYear
			{
				get
				{
					return new SqlParameter("@MonthYear", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter PreviousPrice
			{
				get
				{
					return new SqlParameter("@PreviousPrice", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter PreviousPack
			{
				get
				{
					return new SqlParameter("@PreviousPack", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TradePricingID = "TradePricingID";
            public const string CompanyID = "CompanyID";
            public const string PricingStatusID = "PricingStatusID";
            public const string RegistrationCommitteTypeID = "RegistrationCommitteTypeID";
            public const string DosageFormID = "DosageFormID";
            public const string FileTypeID = "FileTypeID";
            public const string ManufactureID = "ManufactureID";
            public const string AssignedUserID = "AssignedUserID";
            public const string TradeName = "TradeName";
            public const string Generics = "Generics";
            public const string CompanyPrice = "CompanyPrice";
            public const string CommittePrice = "CommittePrice";
            public const string CommitteDate = "CommitteDate";
            public const string DiscussionDate = "DiscussionDate";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string GenericStrength = "GenericStrength";
            public const string ImportedManufacture = "ImportedManufacture";
            public const string RegNo = "RegNo";
            public const string Reference = "Reference";
            public const string Indication = "Indication";
            public const string Dose = "Dose";
            public const string SubmittedToSpecialized = "SubmittedToSpecialized";
            public const string SalesTaxes = "SalesTaxes";
            public const string EssentialDrugList = "EssentialDrugList";
            public const string TradePricingStatusID = "TradePricingStatusID";
            public const string TradePricingLicenseTypeID = "TradePricingLicenseTypeID";
            public const string SectorTypeID = "SectorTypeID";
            public const string CommitteePrice = "CommitteePrice";
            public const string CommiteeDate = "CommiteeDate";
            public const string RationalForPricing = "RationalForPricing";
            public const string NoInBox = "NoInBox";
            public const string LowestIntPrice = "LowestIntPrice";
            public const string PriceInEgy = "PriceInEgy";
            public const string PriceAfter30 = "PriceAfter30";
            public const string PriceAfter35HighTech = "PriceAfter35HighTech";
            public const string PriceAfter35FirstGeneric = "PriceAfter35FirstGeneric";
            public const string PriceAfter40SecondGeneric = "PriceAfter40SecondGeneric";
            public const string LowestPriceGeneric = "LowestPriceGeneric";
            public const string FinalPrice = "FinalPrice";
            public const string IsPricedTo499 = "IsPricedTo499";
            public const string Notes = "Notes";
            public const string MainGroup = "MainGroup";
            public const string Similar = "Similar";
            public const string MonthYear = "MonthYear";
            public const string PreviousPrice = "PreviousPrice";
            public const string PreviousPack = "PreviousPack";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradePricingID] = _TradePricing.PropertyNames.TradePricingID;
					ht[CompanyID] = _TradePricing.PropertyNames.CompanyID;
					ht[PricingStatusID] = _TradePricing.PropertyNames.PricingStatusID;
					ht[RegistrationCommitteTypeID] = _TradePricing.PropertyNames.RegistrationCommitteTypeID;
					ht[DosageFormID] = _TradePricing.PropertyNames.DosageFormID;
					ht[FileTypeID] = _TradePricing.PropertyNames.FileTypeID;
					ht[ManufactureID] = _TradePricing.PropertyNames.ManufactureID;
					ht[AssignedUserID] = _TradePricing.PropertyNames.AssignedUserID;
					ht[TradeName] = _TradePricing.PropertyNames.TradeName;
					ht[Generics] = _TradePricing.PropertyNames.Generics;
					ht[CompanyPrice] = _TradePricing.PropertyNames.CompanyPrice;
					ht[CommittePrice] = _TradePricing.PropertyNames.CommittePrice;
					ht[CommitteDate] = _TradePricing.PropertyNames.CommitteDate;
					ht[DiscussionDate] = _TradePricing.PropertyNames.DiscussionDate;
					ht[SubmissionDate] = _TradePricing.PropertyNames.SubmissionDate;
					ht[Pack] = _TradePricing.PropertyNames.Pack;
					ht[FileNo] = _TradePricing.PropertyNames.FileNo;
					ht[FilePath] = _TradePricing.PropertyNames.FilePath;
					ht[Generic] = _TradePricing.PropertyNames.Generic;
					ht[GenericStrength] = _TradePricing.PropertyNames.GenericStrength;
					ht[ImportedManufacture] = _TradePricing.PropertyNames.ImportedManufacture;
					ht[RegNo] = _TradePricing.PropertyNames.RegNo;
					ht[Reference] = _TradePricing.PropertyNames.Reference;
					ht[Indication] = _TradePricing.PropertyNames.Indication;
					ht[Dose] = _TradePricing.PropertyNames.Dose;
					ht[SubmittedToSpecialized] = _TradePricing.PropertyNames.SubmittedToSpecialized;
					ht[SalesTaxes] = _TradePricing.PropertyNames.SalesTaxes;
					ht[EssentialDrugList] = _TradePricing.PropertyNames.EssentialDrugList;
					ht[TradePricingStatusID] = _TradePricing.PropertyNames.TradePricingStatusID;
					ht[TradePricingLicenseTypeID] = _TradePricing.PropertyNames.TradePricingLicenseTypeID;
					ht[SectorTypeID] = _TradePricing.PropertyNames.SectorTypeID;
					ht[CommitteePrice] = _TradePricing.PropertyNames.CommitteePrice;
					ht[CommiteeDate] = _TradePricing.PropertyNames.CommiteeDate;
					ht[RationalForPricing] = _TradePricing.PropertyNames.RationalForPricing;
					ht[NoInBox] = _TradePricing.PropertyNames.NoInBox;
					ht[LowestIntPrice] = _TradePricing.PropertyNames.LowestIntPrice;
					ht[PriceInEgy] = _TradePricing.PropertyNames.PriceInEgy;
					ht[PriceAfter30] = _TradePricing.PropertyNames.PriceAfter30;
					ht[PriceAfter35HighTech] = _TradePricing.PropertyNames.PriceAfter35HighTech;
					ht[PriceAfter35FirstGeneric] = _TradePricing.PropertyNames.PriceAfter35FirstGeneric;
					ht[PriceAfter40SecondGeneric] = _TradePricing.PropertyNames.PriceAfter40SecondGeneric;
					ht[LowestPriceGeneric] = _TradePricing.PropertyNames.LowestPriceGeneric;
					ht[FinalPrice] = _TradePricing.PropertyNames.FinalPrice;
					ht[IsPricedTo499] = _TradePricing.PropertyNames.IsPricedTo499;
					ht[Notes] = _TradePricing.PropertyNames.Notes;
					ht[MainGroup] = _TradePricing.PropertyNames.MainGroup;
					ht[Similar] = _TradePricing.PropertyNames.Similar;
					ht[MonthYear] = _TradePricing.PropertyNames.MonthYear;
					ht[PreviousPrice] = _TradePricing.PropertyNames.PreviousPrice;
					ht[PreviousPack] = _TradePricing.PropertyNames.PreviousPack;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TradePricingID = "TradePricingID";
            public const string CompanyID = "CompanyID";
            public const string PricingStatusID = "PricingStatusID";
            public const string RegistrationCommitteTypeID = "RegistrationCommitteTypeID";
            public const string DosageFormID = "DosageFormID";
            public const string FileTypeID = "FileTypeID";
            public const string ManufactureID = "ManufactureID";
            public const string AssignedUserID = "AssignedUserID";
            public const string TradeName = "TradeName";
            public const string Generics = "Generics";
            public const string CompanyPrice = "CompanyPrice";
            public const string CommittePrice = "CommittePrice";
            public const string CommitteDate = "CommitteDate";
            public const string DiscussionDate = "DiscussionDate";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string GenericStrength = "GenericStrength";
            public const string ImportedManufacture = "ImportedManufacture";
            public const string RegNo = "RegNo";
            public const string Reference = "Reference";
            public const string Indication = "Indication";
            public const string Dose = "Dose";
            public const string SubmittedToSpecialized = "SubmittedToSpecialized";
            public const string SalesTaxes = "SalesTaxes";
            public const string EssentialDrugList = "EssentialDrugList";
            public const string TradePricingStatusID = "TradePricingStatusID";
            public const string TradePricingLicenseTypeID = "TradePricingLicenseTypeID";
            public const string SectorTypeID = "SectorTypeID";
            public const string CommitteePrice = "CommitteePrice";
            public const string CommiteeDate = "CommiteeDate";
            public const string RationalForPricing = "RationalForPricing";
            public const string NoInBox = "NoInBox";
            public const string LowestIntPrice = "LowestIntPrice";
            public const string PriceInEgy = "PriceInEgy";
            public const string PriceAfter30 = "PriceAfter30";
            public const string PriceAfter35HighTech = "PriceAfter35HighTech";
            public const string PriceAfter35FirstGeneric = "PriceAfter35FirstGeneric";
            public const string PriceAfter40SecondGeneric = "PriceAfter40SecondGeneric";
            public const string LowestPriceGeneric = "LowestPriceGeneric";
            public const string FinalPrice = "FinalPrice";
            public const string IsPricedTo499 = "IsPricedTo499";
            public const string Notes = "Notes";
            public const string MainGroup = "MainGroup";
            public const string Similar = "Similar";
            public const string MonthYear = "MonthYear";
            public const string PreviousPrice = "PreviousPrice";
            public const string PreviousPack = "PreviousPack";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradePricingID] = _TradePricing.ColumnNames.TradePricingID;
					ht[CompanyID] = _TradePricing.ColumnNames.CompanyID;
					ht[PricingStatusID] = _TradePricing.ColumnNames.PricingStatusID;
					ht[RegistrationCommitteTypeID] = _TradePricing.ColumnNames.RegistrationCommitteTypeID;
					ht[DosageFormID] = _TradePricing.ColumnNames.DosageFormID;
					ht[FileTypeID] = _TradePricing.ColumnNames.FileTypeID;
					ht[ManufactureID] = _TradePricing.ColumnNames.ManufactureID;
					ht[AssignedUserID] = _TradePricing.ColumnNames.AssignedUserID;
					ht[TradeName] = _TradePricing.ColumnNames.TradeName;
					ht[Generics] = _TradePricing.ColumnNames.Generics;
					ht[CompanyPrice] = _TradePricing.ColumnNames.CompanyPrice;
					ht[CommittePrice] = _TradePricing.ColumnNames.CommittePrice;
					ht[CommitteDate] = _TradePricing.ColumnNames.CommitteDate;
					ht[DiscussionDate] = _TradePricing.ColumnNames.DiscussionDate;
					ht[SubmissionDate] = _TradePricing.ColumnNames.SubmissionDate;
					ht[Pack] = _TradePricing.ColumnNames.Pack;
					ht[FileNo] = _TradePricing.ColumnNames.FileNo;
					ht[FilePath] = _TradePricing.ColumnNames.FilePath;
					ht[Generic] = _TradePricing.ColumnNames.Generic;
					ht[GenericStrength] = _TradePricing.ColumnNames.GenericStrength;
					ht[ImportedManufacture] = _TradePricing.ColumnNames.ImportedManufacture;
					ht[RegNo] = _TradePricing.ColumnNames.RegNo;
					ht[Reference] = _TradePricing.ColumnNames.Reference;
					ht[Indication] = _TradePricing.ColumnNames.Indication;
					ht[Dose] = _TradePricing.ColumnNames.Dose;
					ht[SubmittedToSpecialized] = _TradePricing.ColumnNames.SubmittedToSpecialized;
					ht[SalesTaxes] = _TradePricing.ColumnNames.SalesTaxes;
					ht[EssentialDrugList] = _TradePricing.ColumnNames.EssentialDrugList;
					ht[TradePricingStatusID] = _TradePricing.ColumnNames.TradePricingStatusID;
					ht[TradePricingLicenseTypeID] = _TradePricing.ColumnNames.TradePricingLicenseTypeID;
					ht[SectorTypeID] = _TradePricing.ColumnNames.SectorTypeID;
					ht[CommitteePrice] = _TradePricing.ColumnNames.CommitteePrice;
					ht[CommiteeDate] = _TradePricing.ColumnNames.CommiteeDate;
					ht[RationalForPricing] = _TradePricing.ColumnNames.RationalForPricing;
					ht[NoInBox] = _TradePricing.ColumnNames.NoInBox;
					ht[LowestIntPrice] = _TradePricing.ColumnNames.LowestIntPrice;
					ht[PriceInEgy] = _TradePricing.ColumnNames.PriceInEgy;
					ht[PriceAfter30] = _TradePricing.ColumnNames.PriceAfter30;
					ht[PriceAfter35HighTech] = _TradePricing.ColumnNames.PriceAfter35HighTech;
					ht[PriceAfter35FirstGeneric] = _TradePricing.ColumnNames.PriceAfter35FirstGeneric;
					ht[PriceAfter40SecondGeneric] = _TradePricing.ColumnNames.PriceAfter40SecondGeneric;
					ht[LowestPriceGeneric] = _TradePricing.ColumnNames.LowestPriceGeneric;
					ht[FinalPrice] = _TradePricing.ColumnNames.FinalPrice;
					ht[IsPricedTo499] = _TradePricing.ColumnNames.IsPricedTo499;
					ht[Notes] = _TradePricing.ColumnNames.Notes;
					ht[MainGroup] = _TradePricing.ColumnNames.MainGroup;
					ht[Similar] = _TradePricing.ColumnNames.Similar;
					ht[MonthYear] = _TradePricing.ColumnNames.MonthYear;
					ht[PreviousPrice] = _TradePricing.ColumnNames.PreviousPrice;
					ht[PreviousPack] = _TradePricing.ColumnNames.PreviousPack;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TradePricingID = "s_TradePricingID";
            public const string CompanyID = "s_CompanyID";
            public const string PricingStatusID = "s_PricingStatusID";
            public const string RegistrationCommitteTypeID = "s_RegistrationCommitteTypeID";
            public const string DosageFormID = "s_DosageFormID";
            public const string FileTypeID = "s_FileTypeID";
            public const string ManufactureID = "s_ManufactureID";
            public const string AssignedUserID = "s_AssignedUserID";
            public const string TradeName = "s_TradeName";
            public const string Generics = "s_Generics";
            public const string CompanyPrice = "s_CompanyPrice";
            public const string CommittePrice = "s_CommittePrice";
            public const string CommitteDate = "s_CommitteDate";
            public const string DiscussionDate = "s_DiscussionDate";
            public const string SubmissionDate = "s_SubmissionDate";
            public const string Pack = "s_Pack";
            public const string FileNo = "s_FileNo";
            public const string FilePath = "s_FilePath";
            public const string Generic = "s_Generic";
            public const string GenericStrength = "s_GenericStrength";
            public const string ImportedManufacture = "s_ImportedManufacture";
            public const string RegNo = "s_RegNo";
            public const string Reference = "s_Reference";
            public const string Indication = "s_Indication";
            public const string Dose = "s_Dose";
            public const string SubmittedToSpecialized = "s_SubmittedToSpecialized";
            public const string SalesTaxes = "s_SalesTaxes";
            public const string EssentialDrugList = "s_EssentialDrugList";
            public const string TradePricingStatusID = "s_TradePricingStatusID";
            public const string TradePricingLicenseTypeID = "s_TradePricingLicenseTypeID";
            public const string SectorTypeID = "s_SectorTypeID";
            public const string CommitteePrice = "s_CommitteePrice";
            public const string CommiteeDate = "s_CommiteeDate";
            public const string RationalForPricing = "s_RationalForPricing";
            public const string NoInBox = "s_NoInBox";
            public const string LowestIntPrice = "s_LowestIntPrice";
            public const string PriceInEgy = "s_PriceInEgy";
            public const string PriceAfter30 = "s_PriceAfter30";
            public const string PriceAfter35HighTech = "s_PriceAfter35HighTech";
            public const string PriceAfter35FirstGeneric = "s_PriceAfter35FirstGeneric";
            public const string PriceAfter40SecondGeneric = "s_PriceAfter40SecondGeneric";
            public const string LowestPriceGeneric = "s_LowestPriceGeneric";
            public const string FinalPrice = "s_FinalPrice";
            public const string IsPricedTo499 = "s_IsPricedTo499";
            public const string Notes = "s_Notes";
            public const string MainGroup = "s_MainGroup";
            public const string Similar = "s_Similar";
            public const string MonthYear = "s_MonthYear";
            public const string PreviousPrice = "s_PreviousPrice";
            public const string PreviousPack = "s_PreviousPack";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TradePricingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual int PricingStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.PricingStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual int RegistrationCommitteTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RegistrationCommitteTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RegistrationCommitteTypeID, value);
			}
		}

		public virtual int DosageFormID
	    {
			get
	        {
				return base.Getint(ColumnNames.DosageFormID);
			}
			set
	        {
				base.Setint(ColumnNames.DosageFormID, value);
			}
		}

		public virtual int FileTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FileTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FileTypeID, value);
			}
		}

		public virtual int ManufactureID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufactureID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufactureID, value);
			}
		}

		public virtual int AssignedUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.AssignedUserID);
			}
			set
	        {
				base.Setint(ColumnNames.AssignedUserID, value);
			}
		}

		public virtual string TradeName
	    {
			get
	        {
				return base.Getstring(ColumnNames.TradeName);
			}
			set
	        {
				base.Setstring(ColumnNames.TradeName, value);
			}
		}

		public virtual string Generics
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generics);
			}
			set
	        {
				base.Setstring(ColumnNames.Generics, value);
			}
		}

		public virtual double CompanyPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CompanyPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual double CommittePrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CommittePrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CommittePrice, value);
			}
		}

		public virtual string CommitteDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommitteDate);
			}
			set
	        {
				base.Setstring(ColumnNames.CommitteDate, value);
			}
		}

		public virtual string DiscussionDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.DiscussionDate);
			}
			set
	        {
				base.Setstring(ColumnNames.DiscussionDate, value);
			}
		}

		public virtual string SubmissionDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubmissionDate);
			}
			set
	        {
				base.Setstring(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string Pack
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pack);
			}
			set
	        {
				base.Setstring(ColumnNames.Pack, value);
			}
		}

		public virtual string FileNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FileNo, value);
			}
		}

		public virtual string FilePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilePath);
			}
			set
	        {
				base.Setstring(ColumnNames.FilePath, value);
			}
		}

		public virtual string Generic
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generic);
			}
			set
	        {
				base.Setstring(ColumnNames.Generic, value);
			}
		}

		public virtual string GenericStrength
	    {
			get
	        {
				return base.Getstring(ColumnNames.GenericStrength);
			}
			set
	        {
				base.Setstring(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string ImportedManufacture
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImportedManufacture);
			}
			set
	        {
				base.Setstring(ColumnNames.ImportedManufacture, value);
			}
		}

		public virtual string RegNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.RegNo);
			}
			set
	        {
				base.Setstring(ColumnNames.RegNo, value);
			}
		}

		public virtual string Reference
	    {
			get
	        {
				return base.Getstring(ColumnNames.Reference);
			}
			set
	        {
				base.Setstring(ColumnNames.Reference, value);
			}
		}

		public virtual string Indication
	    {
			get
	        {
				return base.Getstring(ColumnNames.Indication);
			}
			set
	        {
				base.Setstring(ColumnNames.Indication, value);
			}
		}

		public virtual string Dose
	    {
			get
	        {
				return base.Getstring(ColumnNames.Dose);
			}
			set
	        {
				base.Setstring(ColumnNames.Dose, value);
			}
		}

		public virtual bool SubmittedToSpecialized
	    {
			get
	        {
				return base.Getbool(ColumnNames.SubmittedToSpecialized);
			}
			set
	        {
				base.Setbool(ColumnNames.SubmittedToSpecialized, value);
			}
		}

		public virtual bool SalesTaxes
	    {
			get
	        {
				return base.Getbool(ColumnNames.SalesTaxes);
			}
			set
	        {
				base.Setbool(ColumnNames.SalesTaxes, value);
			}
		}

		public virtual bool EssentialDrugList
	    {
			get
	        {
				return base.Getbool(ColumnNames.EssentialDrugList);
			}
			set
	        {
				base.Setbool(ColumnNames.EssentialDrugList, value);
			}
		}

		public virtual int TradePricingStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingStatusID, value);
			}
		}

		public virtual int TradePricingLicenseTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingLicenseTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingLicenseTypeID, value);
			}
		}

		public virtual int SectorTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.SectorTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.SectorTypeID, value);
			}
		}

		public virtual string CommitteePrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommitteePrice);
			}
			set
	        {
				base.Setstring(ColumnNames.CommitteePrice, value);
			}
		}

		public virtual DateTime CommiteeDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CommiteeDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CommiteeDate, value);
			}
		}

		public virtual string RationalForPricing
	    {
			get
	        {
				return base.Getstring(ColumnNames.RationalForPricing);
			}
			set
	        {
				base.Setstring(ColumnNames.RationalForPricing, value);
			}
		}

		public virtual int NoInBox
	    {
			get
	        {
				return base.Getint(ColumnNames.NoInBox);
			}
			set
	        {
				base.Setint(ColumnNames.NoInBox, value);
			}
		}

		public virtual string LowestIntPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.LowestIntPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.LowestIntPrice, value);
			}
		}

		public virtual string PriceInEgy
	    {
			get
	        {
				return base.Getstring(ColumnNames.PriceInEgy);
			}
			set
	        {
				base.Setstring(ColumnNames.PriceInEgy, value);
			}
		}

		public virtual string PriceAfter30
	    {
			get
	        {
				return base.Getstring(ColumnNames.PriceAfter30);
			}
			set
	        {
				base.Setstring(ColumnNames.PriceAfter30, value);
			}
		}

		public virtual string PriceAfter35HighTech
	    {
			get
	        {
				return base.Getstring(ColumnNames.PriceAfter35HighTech);
			}
			set
	        {
				base.Setstring(ColumnNames.PriceAfter35HighTech, value);
			}
		}

		public virtual string PriceAfter35FirstGeneric
	    {
			get
	        {
				return base.Getstring(ColumnNames.PriceAfter35FirstGeneric);
			}
			set
	        {
				base.Setstring(ColumnNames.PriceAfter35FirstGeneric, value);
			}
		}

		public virtual string PriceAfter40SecondGeneric
	    {
			get
	        {
				return base.Getstring(ColumnNames.PriceAfter40SecondGeneric);
			}
			set
	        {
				base.Setstring(ColumnNames.PriceAfter40SecondGeneric, value);
			}
		}

		public virtual string LowestPriceGeneric
	    {
			get
	        {
				return base.Getstring(ColumnNames.LowestPriceGeneric);
			}
			set
	        {
				base.Setstring(ColumnNames.LowestPriceGeneric, value);
			}
		}

		public virtual string FinalPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.FinalPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.FinalPrice, value);
			}
		}

		public virtual bool IsPricedTo499
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsPricedTo499);
			}
			set
	        {
				base.Setbool(ColumnNames.IsPricedTo499, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual string MainGroup
	    {
			get
	        {
				return base.Getstring(ColumnNames.MainGroup);
			}
			set
	        {
				base.Setstring(ColumnNames.MainGroup, value);
			}
		}

		public virtual bool Similar
	    {
			get
	        {
				return base.Getbool(ColumnNames.Similar);
			}
			set
	        {
				base.Setbool(ColumnNames.Similar, value);
			}
		}

		public virtual string MonthYear
	    {
			get
	        {
				return base.Getstring(ColumnNames.MonthYear);
			}
			set
	        {
				base.Setstring(ColumnNames.MonthYear, value);
			}
		}

		public virtual string PreviousPrice
	    {
			get
	        {
				return base.Getstring(ColumnNames.PreviousPrice);
			}
			set
	        {
				base.Setstring(ColumnNames.PreviousPrice, value);
			}
		}

		public virtual string PreviousPack
	    {
			get
	        {
				return base.Getstring(ColumnNames.PreviousPack);
			}
			set
	        {
				base.Setstring(ColumnNames.PreviousPack, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TradePricingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingID);
				else
					this.TradePricingID = base.SetintAsString(ColumnNames.TradePricingID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_PricingStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PricingStatusID) ? string.Empty : base.GetintAsString(ColumnNames.PricingStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PricingStatusID);
				else
					this.PricingStatusID = base.SetintAsString(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual string s_RegistrationCommitteTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegistrationCommitteTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RegistrationCommitteTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegistrationCommitteTypeID);
				else
					this.RegistrationCommitteTypeID = base.SetintAsString(ColumnNames.RegistrationCommitteTypeID, value);
			}
		}

		public virtual string s_DosageFormID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DosageFormID) ? string.Empty : base.GetintAsString(ColumnNames.DosageFormID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DosageFormID);
				else
					this.DosageFormID = base.SetintAsString(ColumnNames.DosageFormID, value);
			}
		}

		public virtual string s_FileTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FileTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileTypeID);
				else
					this.FileTypeID = base.SetintAsString(ColumnNames.FileTypeID, value);
			}
		}

		public virtual string s_ManufactureID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufactureID) ? string.Empty : base.GetintAsString(ColumnNames.ManufactureID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufactureID);
				else
					this.ManufactureID = base.SetintAsString(ColumnNames.ManufactureID, value);
			}
		}

		public virtual string s_AssignedUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AssignedUserID) ? string.Empty : base.GetintAsString(ColumnNames.AssignedUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AssignedUserID);
				else
					this.AssignedUserID = base.SetintAsString(ColumnNames.AssignedUserID, value);
			}
		}

		public virtual string s_TradeName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeName) ? string.Empty : base.GetstringAsString(ColumnNames.TradeName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeName);
				else
					this.TradeName = base.SetstringAsString(ColumnNames.TradeName, value);
			}
		}

		public virtual string s_Generics
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generics) ? string.Empty : base.GetstringAsString(ColumnNames.Generics);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generics);
				else
					this.Generics = base.SetstringAsString(ColumnNames.Generics, value);
			}
		}

		public virtual string s_CompanyPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CompanyPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyPrice);
				else
					this.CompanyPrice = base.SetdoubleAsString(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual string s_CommittePrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommittePrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CommittePrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommittePrice);
				else
					this.CommittePrice = base.SetdoubleAsString(ColumnNames.CommittePrice, value);
			}
		}

		public virtual string s_CommitteDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteDate) ? string.Empty : base.GetstringAsString(ColumnNames.CommitteDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteDate);
				else
					this.CommitteDate = base.SetstringAsString(ColumnNames.CommitteDate, value);
			}
		}

		public virtual string s_DiscussionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DiscussionDate) ? string.Empty : base.GetstringAsString(ColumnNames.DiscussionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DiscussionDate);
				else
					this.DiscussionDate = base.SetstringAsString(ColumnNames.DiscussionDate, value);
			}
		}

		public virtual string s_SubmissionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubmissionDate) ? string.Empty : base.GetstringAsString(ColumnNames.SubmissionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubmissionDate);
				else
					this.SubmissionDate = base.SetstringAsString(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string s_Pack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack) ? string.Empty : base.GetstringAsString(ColumnNames.Pack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack);
				else
					this.Pack = base.SetstringAsString(ColumnNames.Pack, value);
			}
		}

		public virtual string s_FileNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileNo) ? string.Empty : base.GetstringAsString(ColumnNames.FileNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileNo);
				else
					this.FileNo = base.SetstringAsString(ColumnNames.FileNo, value);
			}
		}

		public virtual string s_FilePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilePath) ? string.Empty : base.GetstringAsString(ColumnNames.FilePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilePath);
				else
					this.FilePath = base.SetstringAsString(ColumnNames.FilePath, value);
			}
		}

		public virtual string s_Generic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generic) ? string.Empty : base.GetstringAsString(ColumnNames.Generic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generic);
				else
					this.Generic = base.SetstringAsString(ColumnNames.Generic, value);
			}
		}

		public virtual string s_GenericStrength
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericStrength) ? string.Empty : base.GetstringAsString(ColumnNames.GenericStrength);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericStrength);
				else
					this.GenericStrength = base.SetstringAsString(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string s_ImportedManufacture
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImportedManufacture) ? string.Empty : base.GetstringAsString(ColumnNames.ImportedManufacture);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImportedManufacture);
				else
					this.ImportedManufacture = base.SetstringAsString(ColumnNames.ImportedManufacture, value);
			}
		}

		public virtual string s_RegNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegNo) ? string.Empty : base.GetstringAsString(ColumnNames.RegNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegNo);
				else
					this.RegNo = base.SetstringAsString(ColumnNames.RegNo, value);
			}
		}

		public virtual string s_Reference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Reference) ? string.Empty : base.GetstringAsString(ColumnNames.Reference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Reference);
				else
					this.Reference = base.SetstringAsString(ColumnNames.Reference, value);
			}
		}

		public virtual string s_Indication
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Indication) ? string.Empty : base.GetstringAsString(ColumnNames.Indication);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Indication);
				else
					this.Indication = base.SetstringAsString(ColumnNames.Indication, value);
			}
		}

		public virtual string s_Dose
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dose) ? string.Empty : base.GetstringAsString(ColumnNames.Dose);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dose);
				else
					this.Dose = base.SetstringAsString(ColumnNames.Dose, value);
			}
		}

		public virtual string s_SubmittedToSpecialized
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubmittedToSpecialized) ? string.Empty : base.GetboolAsString(ColumnNames.SubmittedToSpecialized);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubmittedToSpecialized);
				else
					this.SubmittedToSpecialized = base.SetboolAsString(ColumnNames.SubmittedToSpecialized, value);
			}
		}

		public virtual string s_SalesTaxes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SalesTaxes) ? string.Empty : base.GetboolAsString(ColumnNames.SalesTaxes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SalesTaxes);
				else
					this.SalesTaxes = base.SetboolAsString(ColumnNames.SalesTaxes, value);
			}
		}

		public virtual string s_EssentialDrugList
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EssentialDrugList) ? string.Empty : base.GetboolAsString(ColumnNames.EssentialDrugList);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EssentialDrugList);
				else
					this.EssentialDrugList = base.SetboolAsString(ColumnNames.EssentialDrugList, value);
			}
		}

		public virtual string s_TradePricingStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingStatusID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingStatusID);
				else
					this.TradePricingStatusID = base.SetintAsString(ColumnNames.TradePricingStatusID, value);
			}
		}

		public virtual string s_TradePricingLicenseTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingLicenseTypeID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingLicenseTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingLicenseTypeID);
				else
					this.TradePricingLicenseTypeID = base.SetintAsString(ColumnNames.TradePricingLicenseTypeID, value);
			}
		}

		public virtual string s_SectorTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SectorTypeID) ? string.Empty : base.GetintAsString(ColumnNames.SectorTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SectorTypeID);
				else
					this.SectorTypeID = base.SetintAsString(ColumnNames.SectorTypeID, value);
			}
		}

		public virtual string s_CommitteePrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteePrice) ? string.Empty : base.GetstringAsString(ColumnNames.CommitteePrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteePrice);
				else
					this.CommitteePrice = base.SetstringAsString(ColumnNames.CommitteePrice, value);
			}
		}

		public virtual string s_CommiteeDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommiteeDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CommiteeDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommiteeDate);
				else
					this.CommiteeDate = base.SetDateTimeAsString(ColumnNames.CommiteeDate, value);
			}
		}

		public virtual string s_RationalForPricing
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RationalForPricing) ? string.Empty : base.GetstringAsString(ColumnNames.RationalForPricing);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RationalForPricing);
				else
					this.RationalForPricing = base.SetstringAsString(ColumnNames.RationalForPricing, value);
			}
		}

		public virtual string s_NoInBox
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoInBox) ? string.Empty : base.GetintAsString(ColumnNames.NoInBox);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoInBox);
				else
					this.NoInBox = base.SetintAsString(ColumnNames.NoInBox, value);
			}
		}

		public virtual string s_LowestIntPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LowestIntPrice) ? string.Empty : base.GetstringAsString(ColumnNames.LowestIntPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LowestIntPrice);
				else
					this.LowestIntPrice = base.SetstringAsString(ColumnNames.LowestIntPrice, value);
			}
		}

		public virtual string s_PriceInEgy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceInEgy) ? string.Empty : base.GetstringAsString(ColumnNames.PriceInEgy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceInEgy);
				else
					this.PriceInEgy = base.SetstringAsString(ColumnNames.PriceInEgy, value);
			}
		}

		public virtual string s_PriceAfter30
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceAfter30) ? string.Empty : base.GetstringAsString(ColumnNames.PriceAfter30);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceAfter30);
				else
					this.PriceAfter30 = base.SetstringAsString(ColumnNames.PriceAfter30, value);
			}
		}

		public virtual string s_PriceAfter35HighTech
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceAfter35HighTech) ? string.Empty : base.GetstringAsString(ColumnNames.PriceAfter35HighTech);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceAfter35HighTech);
				else
					this.PriceAfter35HighTech = base.SetstringAsString(ColumnNames.PriceAfter35HighTech, value);
			}
		}

		public virtual string s_PriceAfter35FirstGeneric
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceAfter35FirstGeneric) ? string.Empty : base.GetstringAsString(ColumnNames.PriceAfter35FirstGeneric);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceAfter35FirstGeneric);
				else
					this.PriceAfter35FirstGeneric = base.SetstringAsString(ColumnNames.PriceAfter35FirstGeneric, value);
			}
		}

		public virtual string s_PriceAfter40SecondGeneric
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceAfter40SecondGeneric) ? string.Empty : base.GetstringAsString(ColumnNames.PriceAfter40SecondGeneric);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceAfter40SecondGeneric);
				else
					this.PriceAfter40SecondGeneric = base.SetstringAsString(ColumnNames.PriceAfter40SecondGeneric, value);
			}
		}

		public virtual string s_LowestPriceGeneric
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LowestPriceGeneric) ? string.Empty : base.GetstringAsString(ColumnNames.LowestPriceGeneric);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LowestPriceGeneric);
				else
					this.LowestPriceGeneric = base.SetstringAsString(ColumnNames.LowestPriceGeneric, value);
			}
		}

		public virtual string s_FinalPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FinalPrice) ? string.Empty : base.GetstringAsString(ColumnNames.FinalPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FinalPrice);
				else
					this.FinalPrice = base.SetstringAsString(ColumnNames.FinalPrice, value);
			}
		}

		public virtual string s_IsPricedTo499
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsPricedTo499) ? string.Empty : base.GetboolAsString(ColumnNames.IsPricedTo499);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsPricedTo499);
				else
					this.IsPricedTo499 = base.SetboolAsString(ColumnNames.IsPricedTo499, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_MainGroup
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MainGroup) ? string.Empty : base.GetstringAsString(ColumnNames.MainGroup);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MainGroup);
				else
					this.MainGroup = base.SetstringAsString(ColumnNames.MainGroup, value);
			}
		}

		public virtual string s_Similar
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Similar) ? string.Empty : base.GetboolAsString(ColumnNames.Similar);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Similar);
				else
					this.Similar = base.SetboolAsString(ColumnNames.Similar, value);
			}
		}

		public virtual string s_MonthYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MonthYear) ? string.Empty : base.GetstringAsString(ColumnNames.MonthYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MonthYear);
				else
					this.MonthYear = base.SetstringAsString(ColumnNames.MonthYear, value);
			}
		}

		public virtual string s_PreviousPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PreviousPrice) ? string.Empty : base.GetstringAsString(ColumnNames.PreviousPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PreviousPrice);
				else
					this.PreviousPrice = base.SetstringAsString(ColumnNames.PreviousPrice, value);
			}
		}

		public virtual string s_PreviousPack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PreviousPack) ? string.Empty : base.GetstringAsString(ColumnNames.PreviousPack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PreviousPack);
				else
					this.PreviousPack = base.SetstringAsString(ColumnNames.PreviousPack, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TradePricingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PricingStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegistrationCommitteTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegistrationCommitteTypeID, Parameters.RegistrationCommitteTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DosageFormID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufactureID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AssignedUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AssignedUserID, Parameters.AssignedUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradeName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generics
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommittePrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommittePrice, Parameters.CommittePrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DiscussionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DiscussionDate, Parameters.DiscussionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubmissionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenericStrength
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImportedManufacture
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImportedManufacture, Parameters.ImportedManufacture);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegNo, Parameters.RegNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Reference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Reference, Parameters.Reference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Indication
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Indication, Parameters.Indication);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dose
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dose, Parameters.Dose);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubmittedToSpecialized
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubmittedToSpecialized, Parameters.SubmittedToSpecialized);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SalesTaxes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SalesTaxes, Parameters.SalesTaxes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EssentialDrugList
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EssentialDrugList, Parameters.EssentialDrugList);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradePricingStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingStatusID, Parameters.TradePricingStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradePricingLicenseTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingLicenseTypeID, Parameters.TradePricingLicenseTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SectorTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SectorTypeID, Parameters.SectorTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteePrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteePrice, Parameters.CommitteePrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommiteeDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommiteeDate, Parameters.CommiteeDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RationalForPricing
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RationalForPricing, Parameters.RationalForPricing);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoInBox
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoInBox, Parameters.NoInBox);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LowestIntPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LowestIntPrice, Parameters.LowestIntPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceInEgy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceInEgy, Parameters.PriceInEgy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceAfter30
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceAfter30, Parameters.PriceAfter30);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceAfter35HighTech
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceAfter35HighTech, Parameters.PriceAfter35HighTech);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceAfter35FirstGeneric
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceAfter35FirstGeneric, Parameters.PriceAfter35FirstGeneric);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceAfter40SecondGeneric
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceAfter40SecondGeneric, Parameters.PriceAfter40SecondGeneric);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LowestPriceGeneric
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LowestPriceGeneric, Parameters.LowestPriceGeneric);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FinalPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FinalPrice, Parameters.FinalPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsPricedTo499
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsPricedTo499, Parameters.IsPricedTo499);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MainGroup
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MainGroup, Parameters.MainGroup);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Similar
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Similar, Parameters.Similar);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MonthYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MonthYear, Parameters.MonthYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PreviousPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PreviousPrice, Parameters.PreviousPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PreviousPack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PreviousPack, Parameters.PreviousPack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public WhereParameter RegistrationCommitteTypeID
		    {
				get
		        {
					if(_RegistrationCommitteTypeID_W == null)
	        	    {
						_RegistrationCommitteTypeID_W = TearOff.RegistrationCommitteTypeID;
					}
					return _RegistrationCommitteTypeID_W;
				}
			}

			public WhereParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public WhereParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public WhereParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public WhereParameter AssignedUserID
		    {
				get
		        {
					if(_AssignedUserID_W == null)
	        	    {
						_AssignedUserID_W = TearOff.AssignedUserID;
					}
					return _AssignedUserID_W;
				}
			}

			public WhereParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public WhereParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public WhereParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public WhereParameter CommittePrice
		    {
				get
		        {
					if(_CommittePrice_W == null)
	        	    {
						_CommittePrice_W = TearOff.CommittePrice;
					}
					return _CommittePrice_W;
				}
			}

			public WhereParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public WhereParameter DiscussionDate
		    {
				get
		        {
					if(_DiscussionDate_W == null)
	        	    {
						_DiscussionDate_W = TearOff.DiscussionDate;
					}
					return _DiscussionDate_W;
				}
			}

			public WhereParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public WhereParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public WhereParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public WhereParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public WhereParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public WhereParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public WhereParameter ImportedManufacture
		    {
				get
		        {
					if(_ImportedManufacture_W == null)
	        	    {
						_ImportedManufacture_W = TearOff.ImportedManufacture;
					}
					return _ImportedManufacture_W;
				}
			}

			public WhereParameter RegNo
		    {
				get
		        {
					if(_RegNo_W == null)
	        	    {
						_RegNo_W = TearOff.RegNo;
					}
					return _RegNo_W;
				}
			}

			public WhereParameter Reference
		    {
				get
		        {
					if(_Reference_W == null)
	        	    {
						_Reference_W = TearOff.Reference;
					}
					return _Reference_W;
				}
			}

			public WhereParameter Indication
		    {
				get
		        {
					if(_Indication_W == null)
	        	    {
						_Indication_W = TearOff.Indication;
					}
					return _Indication_W;
				}
			}

			public WhereParameter Dose
		    {
				get
		        {
					if(_Dose_W == null)
	        	    {
						_Dose_W = TearOff.Dose;
					}
					return _Dose_W;
				}
			}

			public WhereParameter SubmittedToSpecialized
		    {
				get
		        {
					if(_SubmittedToSpecialized_W == null)
	        	    {
						_SubmittedToSpecialized_W = TearOff.SubmittedToSpecialized;
					}
					return _SubmittedToSpecialized_W;
				}
			}

			public WhereParameter SalesTaxes
		    {
				get
		        {
					if(_SalesTaxes_W == null)
	        	    {
						_SalesTaxes_W = TearOff.SalesTaxes;
					}
					return _SalesTaxes_W;
				}
			}

			public WhereParameter EssentialDrugList
		    {
				get
		        {
					if(_EssentialDrugList_W == null)
	        	    {
						_EssentialDrugList_W = TearOff.EssentialDrugList;
					}
					return _EssentialDrugList_W;
				}
			}

			public WhereParameter TradePricingStatusID
		    {
				get
		        {
					if(_TradePricingStatusID_W == null)
	        	    {
						_TradePricingStatusID_W = TearOff.TradePricingStatusID;
					}
					return _TradePricingStatusID_W;
				}
			}

			public WhereParameter TradePricingLicenseTypeID
		    {
				get
		        {
					if(_TradePricingLicenseTypeID_W == null)
	        	    {
						_TradePricingLicenseTypeID_W = TearOff.TradePricingLicenseTypeID;
					}
					return _TradePricingLicenseTypeID_W;
				}
			}

			public WhereParameter SectorTypeID
		    {
				get
		        {
					if(_SectorTypeID_W == null)
	        	    {
						_SectorTypeID_W = TearOff.SectorTypeID;
					}
					return _SectorTypeID_W;
				}
			}

			public WhereParameter CommitteePrice
		    {
				get
		        {
					if(_CommitteePrice_W == null)
	        	    {
						_CommitteePrice_W = TearOff.CommitteePrice;
					}
					return _CommitteePrice_W;
				}
			}

			public WhereParameter CommiteeDate
		    {
				get
		        {
					if(_CommiteeDate_W == null)
	        	    {
						_CommiteeDate_W = TearOff.CommiteeDate;
					}
					return _CommiteeDate_W;
				}
			}

			public WhereParameter RationalForPricing
		    {
				get
		        {
					if(_RationalForPricing_W == null)
	        	    {
						_RationalForPricing_W = TearOff.RationalForPricing;
					}
					return _RationalForPricing_W;
				}
			}

			public WhereParameter NoInBox
		    {
				get
		        {
					if(_NoInBox_W == null)
	        	    {
						_NoInBox_W = TearOff.NoInBox;
					}
					return _NoInBox_W;
				}
			}

			public WhereParameter LowestIntPrice
		    {
				get
		        {
					if(_LowestIntPrice_W == null)
	        	    {
						_LowestIntPrice_W = TearOff.LowestIntPrice;
					}
					return _LowestIntPrice_W;
				}
			}

			public WhereParameter PriceInEgy
		    {
				get
		        {
					if(_PriceInEgy_W == null)
	        	    {
						_PriceInEgy_W = TearOff.PriceInEgy;
					}
					return _PriceInEgy_W;
				}
			}

			public WhereParameter PriceAfter30
		    {
				get
		        {
					if(_PriceAfter30_W == null)
	        	    {
						_PriceAfter30_W = TearOff.PriceAfter30;
					}
					return _PriceAfter30_W;
				}
			}

			public WhereParameter PriceAfter35HighTech
		    {
				get
		        {
					if(_PriceAfter35HighTech_W == null)
	        	    {
						_PriceAfter35HighTech_W = TearOff.PriceAfter35HighTech;
					}
					return _PriceAfter35HighTech_W;
				}
			}

			public WhereParameter PriceAfter35FirstGeneric
		    {
				get
		        {
					if(_PriceAfter35FirstGeneric_W == null)
	        	    {
						_PriceAfter35FirstGeneric_W = TearOff.PriceAfter35FirstGeneric;
					}
					return _PriceAfter35FirstGeneric_W;
				}
			}

			public WhereParameter PriceAfter40SecondGeneric
		    {
				get
		        {
					if(_PriceAfter40SecondGeneric_W == null)
	        	    {
						_PriceAfter40SecondGeneric_W = TearOff.PriceAfter40SecondGeneric;
					}
					return _PriceAfter40SecondGeneric_W;
				}
			}

			public WhereParameter LowestPriceGeneric
		    {
				get
		        {
					if(_LowestPriceGeneric_W == null)
	        	    {
						_LowestPriceGeneric_W = TearOff.LowestPriceGeneric;
					}
					return _LowestPriceGeneric_W;
				}
			}

			public WhereParameter FinalPrice
		    {
				get
		        {
					if(_FinalPrice_W == null)
	        	    {
						_FinalPrice_W = TearOff.FinalPrice;
					}
					return _FinalPrice_W;
				}
			}

			public WhereParameter IsPricedTo499
		    {
				get
		        {
					if(_IsPricedTo499_W == null)
	        	    {
						_IsPricedTo499_W = TearOff.IsPricedTo499;
					}
					return _IsPricedTo499_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter MainGroup
		    {
				get
		        {
					if(_MainGroup_W == null)
	        	    {
						_MainGroup_W = TearOff.MainGroup;
					}
					return _MainGroup_W;
				}
			}

			public WhereParameter Similar
		    {
				get
		        {
					if(_Similar_W == null)
	        	    {
						_Similar_W = TearOff.Similar;
					}
					return _Similar_W;
				}
			}

			public WhereParameter MonthYear
		    {
				get
		        {
					if(_MonthYear_W == null)
	        	    {
						_MonthYear_W = TearOff.MonthYear;
					}
					return _MonthYear_W;
				}
			}

			public WhereParameter PreviousPrice
		    {
				get
		        {
					if(_PreviousPrice_W == null)
	        	    {
						_PreviousPrice_W = TearOff.PreviousPrice;
					}
					return _PreviousPrice_W;
				}
			}

			public WhereParameter PreviousPack
		    {
				get
		        {
					if(_PreviousPack_W == null)
	        	    {
						_PreviousPack_W = TearOff.PreviousPack;
					}
					return _PreviousPack_W;
				}
			}

			private WhereParameter _TradePricingID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _PricingStatusID_W = null;
			private WhereParameter _RegistrationCommitteTypeID_W = null;
			private WhereParameter _DosageFormID_W = null;
			private WhereParameter _FileTypeID_W = null;
			private WhereParameter _ManufactureID_W = null;
			private WhereParameter _AssignedUserID_W = null;
			private WhereParameter _TradeName_W = null;
			private WhereParameter _Generics_W = null;
			private WhereParameter _CompanyPrice_W = null;
			private WhereParameter _CommittePrice_W = null;
			private WhereParameter _CommitteDate_W = null;
			private WhereParameter _DiscussionDate_W = null;
			private WhereParameter _SubmissionDate_W = null;
			private WhereParameter _Pack_W = null;
			private WhereParameter _FileNo_W = null;
			private WhereParameter _FilePath_W = null;
			private WhereParameter _Generic_W = null;
			private WhereParameter _GenericStrength_W = null;
			private WhereParameter _ImportedManufacture_W = null;
			private WhereParameter _RegNo_W = null;
			private WhereParameter _Reference_W = null;
			private WhereParameter _Indication_W = null;
			private WhereParameter _Dose_W = null;
			private WhereParameter _SubmittedToSpecialized_W = null;
			private WhereParameter _SalesTaxes_W = null;
			private WhereParameter _EssentialDrugList_W = null;
			private WhereParameter _TradePricingStatusID_W = null;
			private WhereParameter _TradePricingLicenseTypeID_W = null;
			private WhereParameter _SectorTypeID_W = null;
			private WhereParameter _CommitteePrice_W = null;
			private WhereParameter _CommiteeDate_W = null;
			private WhereParameter _RationalForPricing_W = null;
			private WhereParameter _NoInBox_W = null;
			private WhereParameter _LowestIntPrice_W = null;
			private WhereParameter _PriceInEgy_W = null;
			private WhereParameter _PriceAfter30_W = null;
			private WhereParameter _PriceAfter35HighTech_W = null;
			private WhereParameter _PriceAfter35FirstGeneric_W = null;
			private WhereParameter _PriceAfter40SecondGeneric_W = null;
			private WhereParameter _LowestPriceGeneric_W = null;
			private WhereParameter _FinalPrice_W = null;
			private WhereParameter _IsPricedTo499_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _MainGroup_W = null;
			private WhereParameter _Similar_W = null;
			private WhereParameter _MonthYear_W = null;
			private WhereParameter _PreviousPrice_W = null;
			private WhereParameter _PreviousPack_W = null;

			public void WhereClauseReset()
			{
				_TradePricingID_W = null;
				_CompanyID_W = null;
				_PricingStatusID_W = null;
				_RegistrationCommitteTypeID_W = null;
				_DosageFormID_W = null;
				_FileTypeID_W = null;
				_ManufactureID_W = null;
				_AssignedUserID_W = null;
				_TradeName_W = null;
				_Generics_W = null;
				_CompanyPrice_W = null;
				_CommittePrice_W = null;
				_CommitteDate_W = null;
				_DiscussionDate_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_GenericStrength_W = null;
				_ImportedManufacture_W = null;
				_RegNo_W = null;
				_Reference_W = null;
				_Indication_W = null;
				_Dose_W = null;
				_SubmittedToSpecialized_W = null;
				_SalesTaxes_W = null;
				_EssentialDrugList_W = null;
				_TradePricingStatusID_W = null;
				_TradePricingLicenseTypeID_W = null;
				_SectorTypeID_W = null;
				_CommitteePrice_W = null;
				_CommiteeDate_W = null;
				_RationalForPricing_W = null;
				_NoInBox_W = null;
				_LowestIntPrice_W = null;
				_PriceInEgy_W = null;
				_PriceAfter30_W = null;
				_PriceAfter35HighTech_W = null;
				_PriceAfter35FirstGeneric_W = null;
				_PriceAfter40SecondGeneric_W = null;
				_LowestPriceGeneric_W = null;
				_FinalPrice_W = null;
				_IsPricedTo499_W = null;
				_Notes_W = null;
				_MainGroup_W = null;
				_Similar_W = null;
				_MonthYear_W = null;
				_PreviousPrice_W = null;
				_PreviousPack_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TradePricingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PricingStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegistrationCommitteTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegistrationCommitteTypeID, Parameters.RegistrationCommitteTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DosageFormID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufactureID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AssignedUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AssignedUserID, Parameters.AssignedUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradeName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generics
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommittePrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommittePrice, Parameters.CommittePrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DiscussionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DiscussionDate, Parameters.DiscussionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubmissionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenericStrength
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImportedManufacture
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImportedManufacture, Parameters.ImportedManufacture);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegNo, Parameters.RegNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Reference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Reference, Parameters.Reference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Indication
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Indication, Parameters.Indication);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dose
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dose, Parameters.Dose);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubmittedToSpecialized
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubmittedToSpecialized, Parameters.SubmittedToSpecialized);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SalesTaxes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SalesTaxes, Parameters.SalesTaxes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EssentialDrugList
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EssentialDrugList, Parameters.EssentialDrugList);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradePricingStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingStatusID, Parameters.TradePricingStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradePricingLicenseTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingLicenseTypeID, Parameters.TradePricingLicenseTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SectorTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SectorTypeID, Parameters.SectorTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteePrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteePrice, Parameters.CommitteePrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommiteeDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommiteeDate, Parameters.CommiteeDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RationalForPricing
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RationalForPricing, Parameters.RationalForPricing);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoInBox
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoInBox, Parameters.NoInBox);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LowestIntPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LowestIntPrice, Parameters.LowestIntPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceInEgy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceInEgy, Parameters.PriceInEgy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceAfter30
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceAfter30, Parameters.PriceAfter30);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceAfter35HighTech
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceAfter35HighTech, Parameters.PriceAfter35HighTech);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceAfter35FirstGeneric
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceAfter35FirstGeneric, Parameters.PriceAfter35FirstGeneric);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceAfter40SecondGeneric
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceAfter40SecondGeneric, Parameters.PriceAfter40SecondGeneric);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LowestPriceGeneric
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LowestPriceGeneric, Parameters.LowestPriceGeneric);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FinalPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FinalPrice, Parameters.FinalPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsPricedTo499
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPricedTo499, Parameters.IsPricedTo499);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MainGroup
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MainGroup, Parameters.MainGroup);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Similar
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Similar, Parameters.Similar);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MonthYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MonthYear, Parameters.MonthYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PreviousPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreviousPrice, Parameters.PreviousPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PreviousPack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PreviousPack, Parameters.PreviousPack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public AggregateParameter RegistrationCommitteTypeID
		    {
				get
		        {
					if(_RegistrationCommitteTypeID_W == null)
	        	    {
						_RegistrationCommitteTypeID_W = TearOff.RegistrationCommitteTypeID;
					}
					return _RegistrationCommitteTypeID_W;
				}
			}

			public AggregateParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public AggregateParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public AggregateParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public AggregateParameter AssignedUserID
		    {
				get
		        {
					if(_AssignedUserID_W == null)
	        	    {
						_AssignedUserID_W = TearOff.AssignedUserID;
					}
					return _AssignedUserID_W;
				}
			}

			public AggregateParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public AggregateParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public AggregateParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public AggregateParameter CommittePrice
		    {
				get
		        {
					if(_CommittePrice_W == null)
	        	    {
						_CommittePrice_W = TearOff.CommittePrice;
					}
					return _CommittePrice_W;
				}
			}

			public AggregateParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public AggregateParameter DiscussionDate
		    {
				get
		        {
					if(_DiscussionDate_W == null)
	        	    {
						_DiscussionDate_W = TearOff.DiscussionDate;
					}
					return _DiscussionDate_W;
				}
			}

			public AggregateParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public AggregateParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public AggregateParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public AggregateParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public AggregateParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public AggregateParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public AggregateParameter ImportedManufacture
		    {
				get
		        {
					if(_ImportedManufacture_W == null)
	        	    {
						_ImportedManufacture_W = TearOff.ImportedManufacture;
					}
					return _ImportedManufacture_W;
				}
			}

			public AggregateParameter RegNo
		    {
				get
		        {
					if(_RegNo_W == null)
	        	    {
						_RegNo_W = TearOff.RegNo;
					}
					return _RegNo_W;
				}
			}

			public AggregateParameter Reference
		    {
				get
		        {
					if(_Reference_W == null)
	        	    {
						_Reference_W = TearOff.Reference;
					}
					return _Reference_W;
				}
			}

			public AggregateParameter Indication
		    {
				get
		        {
					if(_Indication_W == null)
	        	    {
						_Indication_W = TearOff.Indication;
					}
					return _Indication_W;
				}
			}

			public AggregateParameter Dose
		    {
				get
		        {
					if(_Dose_W == null)
	        	    {
						_Dose_W = TearOff.Dose;
					}
					return _Dose_W;
				}
			}

			public AggregateParameter SubmittedToSpecialized
		    {
				get
		        {
					if(_SubmittedToSpecialized_W == null)
	        	    {
						_SubmittedToSpecialized_W = TearOff.SubmittedToSpecialized;
					}
					return _SubmittedToSpecialized_W;
				}
			}

			public AggregateParameter SalesTaxes
		    {
				get
		        {
					if(_SalesTaxes_W == null)
	        	    {
						_SalesTaxes_W = TearOff.SalesTaxes;
					}
					return _SalesTaxes_W;
				}
			}

			public AggregateParameter EssentialDrugList
		    {
				get
		        {
					if(_EssentialDrugList_W == null)
	        	    {
						_EssentialDrugList_W = TearOff.EssentialDrugList;
					}
					return _EssentialDrugList_W;
				}
			}

			public AggregateParameter TradePricingStatusID
		    {
				get
		        {
					if(_TradePricingStatusID_W == null)
	        	    {
						_TradePricingStatusID_W = TearOff.TradePricingStatusID;
					}
					return _TradePricingStatusID_W;
				}
			}

			public AggregateParameter TradePricingLicenseTypeID
		    {
				get
		        {
					if(_TradePricingLicenseTypeID_W == null)
	        	    {
						_TradePricingLicenseTypeID_W = TearOff.TradePricingLicenseTypeID;
					}
					return _TradePricingLicenseTypeID_W;
				}
			}

			public AggregateParameter SectorTypeID
		    {
				get
		        {
					if(_SectorTypeID_W == null)
	        	    {
						_SectorTypeID_W = TearOff.SectorTypeID;
					}
					return _SectorTypeID_W;
				}
			}

			public AggregateParameter CommitteePrice
		    {
				get
		        {
					if(_CommitteePrice_W == null)
	        	    {
						_CommitteePrice_W = TearOff.CommitteePrice;
					}
					return _CommitteePrice_W;
				}
			}

			public AggregateParameter CommiteeDate
		    {
				get
		        {
					if(_CommiteeDate_W == null)
	        	    {
						_CommiteeDate_W = TearOff.CommiteeDate;
					}
					return _CommiteeDate_W;
				}
			}

			public AggregateParameter RationalForPricing
		    {
				get
		        {
					if(_RationalForPricing_W == null)
	        	    {
						_RationalForPricing_W = TearOff.RationalForPricing;
					}
					return _RationalForPricing_W;
				}
			}

			public AggregateParameter NoInBox
		    {
				get
		        {
					if(_NoInBox_W == null)
	        	    {
						_NoInBox_W = TearOff.NoInBox;
					}
					return _NoInBox_W;
				}
			}

			public AggregateParameter LowestIntPrice
		    {
				get
		        {
					if(_LowestIntPrice_W == null)
	        	    {
						_LowestIntPrice_W = TearOff.LowestIntPrice;
					}
					return _LowestIntPrice_W;
				}
			}

			public AggregateParameter PriceInEgy
		    {
				get
		        {
					if(_PriceInEgy_W == null)
	        	    {
						_PriceInEgy_W = TearOff.PriceInEgy;
					}
					return _PriceInEgy_W;
				}
			}

			public AggregateParameter PriceAfter30
		    {
				get
		        {
					if(_PriceAfter30_W == null)
	        	    {
						_PriceAfter30_W = TearOff.PriceAfter30;
					}
					return _PriceAfter30_W;
				}
			}

			public AggregateParameter PriceAfter35HighTech
		    {
				get
		        {
					if(_PriceAfter35HighTech_W == null)
	        	    {
						_PriceAfter35HighTech_W = TearOff.PriceAfter35HighTech;
					}
					return _PriceAfter35HighTech_W;
				}
			}

			public AggregateParameter PriceAfter35FirstGeneric
		    {
				get
		        {
					if(_PriceAfter35FirstGeneric_W == null)
	        	    {
						_PriceAfter35FirstGeneric_W = TearOff.PriceAfter35FirstGeneric;
					}
					return _PriceAfter35FirstGeneric_W;
				}
			}

			public AggregateParameter PriceAfter40SecondGeneric
		    {
				get
		        {
					if(_PriceAfter40SecondGeneric_W == null)
	        	    {
						_PriceAfter40SecondGeneric_W = TearOff.PriceAfter40SecondGeneric;
					}
					return _PriceAfter40SecondGeneric_W;
				}
			}

			public AggregateParameter LowestPriceGeneric
		    {
				get
		        {
					if(_LowestPriceGeneric_W == null)
	        	    {
						_LowestPriceGeneric_W = TearOff.LowestPriceGeneric;
					}
					return _LowestPriceGeneric_W;
				}
			}

			public AggregateParameter FinalPrice
		    {
				get
		        {
					if(_FinalPrice_W == null)
	        	    {
						_FinalPrice_W = TearOff.FinalPrice;
					}
					return _FinalPrice_W;
				}
			}

			public AggregateParameter IsPricedTo499
		    {
				get
		        {
					if(_IsPricedTo499_W == null)
	        	    {
						_IsPricedTo499_W = TearOff.IsPricedTo499;
					}
					return _IsPricedTo499_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter MainGroup
		    {
				get
		        {
					if(_MainGroup_W == null)
	        	    {
						_MainGroup_W = TearOff.MainGroup;
					}
					return _MainGroup_W;
				}
			}

			public AggregateParameter Similar
		    {
				get
		        {
					if(_Similar_W == null)
	        	    {
						_Similar_W = TearOff.Similar;
					}
					return _Similar_W;
				}
			}

			public AggregateParameter MonthYear
		    {
				get
		        {
					if(_MonthYear_W == null)
	        	    {
						_MonthYear_W = TearOff.MonthYear;
					}
					return _MonthYear_W;
				}
			}

			public AggregateParameter PreviousPrice
		    {
				get
		        {
					if(_PreviousPrice_W == null)
	        	    {
						_PreviousPrice_W = TearOff.PreviousPrice;
					}
					return _PreviousPrice_W;
				}
			}

			public AggregateParameter PreviousPack
		    {
				get
		        {
					if(_PreviousPack_W == null)
	        	    {
						_PreviousPack_W = TearOff.PreviousPack;
					}
					return _PreviousPack_W;
				}
			}

			private AggregateParameter _TradePricingID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _PricingStatusID_W = null;
			private AggregateParameter _RegistrationCommitteTypeID_W = null;
			private AggregateParameter _DosageFormID_W = null;
			private AggregateParameter _FileTypeID_W = null;
			private AggregateParameter _ManufactureID_W = null;
			private AggregateParameter _AssignedUserID_W = null;
			private AggregateParameter _TradeName_W = null;
			private AggregateParameter _Generics_W = null;
			private AggregateParameter _CompanyPrice_W = null;
			private AggregateParameter _CommittePrice_W = null;
			private AggregateParameter _CommitteDate_W = null;
			private AggregateParameter _DiscussionDate_W = null;
			private AggregateParameter _SubmissionDate_W = null;
			private AggregateParameter _Pack_W = null;
			private AggregateParameter _FileNo_W = null;
			private AggregateParameter _FilePath_W = null;
			private AggregateParameter _Generic_W = null;
			private AggregateParameter _GenericStrength_W = null;
			private AggregateParameter _ImportedManufacture_W = null;
			private AggregateParameter _RegNo_W = null;
			private AggregateParameter _Reference_W = null;
			private AggregateParameter _Indication_W = null;
			private AggregateParameter _Dose_W = null;
			private AggregateParameter _SubmittedToSpecialized_W = null;
			private AggregateParameter _SalesTaxes_W = null;
			private AggregateParameter _EssentialDrugList_W = null;
			private AggregateParameter _TradePricingStatusID_W = null;
			private AggregateParameter _TradePricingLicenseTypeID_W = null;
			private AggregateParameter _SectorTypeID_W = null;
			private AggregateParameter _CommitteePrice_W = null;
			private AggregateParameter _CommiteeDate_W = null;
			private AggregateParameter _RationalForPricing_W = null;
			private AggregateParameter _NoInBox_W = null;
			private AggregateParameter _LowestIntPrice_W = null;
			private AggregateParameter _PriceInEgy_W = null;
			private AggregateParameter _PriceAfter30_W = null;
			private AggregateParameter _PriceAfter35HighTech_W = null;
			private AggregateParameter _PriceAfter35FirstGeneric_W = null;
			private AggregateParameter _PriceAfter40SecondGeneric_W = null;
			private AggregateParameter _LowestPriceGeneric_W = null;
			private AggregateParameter _FinalPrice_W = null;
			private AggregateParameter _IsPricedTo499_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _MainGroup_W = null;
			private AggregateParameter _Similar_W = null;
			private AggregateParameter _MonthYear_W = null;
			private AggregateParameter _PreviousPrice_W = null;
			private AggregateParameter _PreviousPack_W = null;

			public void AggregateClauseReset()
			{
				_TradePricingID_W = null;
				_CompanyID_W = null;
				_PricingStatusID_W = null;
				_RegistrationCommitteTypeID_W = null;
				_DosageFormID_W = null;
				_FileTypeID_W = null;
				_ManufactureID_W = null;
				_AssignedUserID_W = null;
				_TradeName_W = null;
				_Generics_W = null;
				_CompanyPrice_W = null;
				_CommittePrice_W = null;
				_CommitteDate_W = null;
				_DiscussionDate_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_GenericStrength_W = null;
				_ImportedManufacture_W = null;
				_RegNo_W = null;
				_Reference_W = null;
				_Indication_W = null;
				_Dose_W = null;
				_SubmittedToSpecialized_W = null;
				_SalesTaxes_W = null;
				_EssentialDrugList_W = null;
				_TradePricingStatusID_W = null;
				_TradePricingLicenseTypeID_W = null;
				_SectorTypeID_W = null;
				_CommitteePrice_W = null;
				_CommiteeDate_W = null;
				_RationalForPricing_W = null;
				_NoInBox_W = null;
				_LowestIntPrice_W = null;
				_PriceInEgy_W = null;
				_PriceAfter30_W = null;
				_PriceAfter35HighTech_W = null;
				_PriceAfter35FirstGeneric_W = null;
				_PriceAfter40SecondGeneric_W = null;
				_LowestPriceGeneric_W = null;
				_FinalPrice_W = null;
				_IsPricedTo499_W = null;
				_Notes_W = null;
				_MainGroup_W = null;
				_Similar_W = null;
				_MonthYear_W = null;
				_PreviousPrice_W = null;
				_PreviousPack_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TradePricingID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PricingStatusID);
			p.SourceColumn = ColumnNames.PricingStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegistrationCommitteTypeID);
			p.SourceColumn = ColumnNames.RegistrationCommitteTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DosageFormID);
			p.SourceColumn = ColumnNames.DosageFormID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileTypeID);
			p.SourceColumn = ColumnNames.FileTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufactureID);
			p.SourceColumn = ColumnNames.ManufactureID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AssignedUserID);
			p.SourceColumn = ColumnNames.AssignedUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradeName);
			p.SourceColumn = ColumnNames.TradeName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Generics);
			p.SourceColumn = ColumnNames.Generics;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyPrice);
			p.SourceColumn = ColumnNames.CompanyPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommittePrice);
			p.SourceColumn = ColumnNames.CommittePrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteDate);
			p.SourceColumn = ColumnNames.CommitteDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DiscussionDate);
			p.SourceColumn = ColumnNames.DiscussionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubmissionDate);
			p.SourceColumn = ColumnNames.SubmissionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pack);
			p.SourceColumn = ColumnNames.Pack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileNo);
			p.SourceColumn = ColumnNames.FileNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilePath);
			p.SourceColumn = ColumnNames.FilePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Generic);
			p.SourceColumn = ColumnNames.Generic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenericStrength);
			p.SourceColumn = ColumnNames.GenericStrength;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImportedManufacture);
			p.SourceColumn = ColumnNames.ImportedManufacture;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegNo);
			p.SourceColumn = ColumnNames.RegNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Reference);
			p.SourceColumn = ColumnNames.Reference;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Indication);
			p.SourceColumn = ColumnNames.Indication;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Dose);
			p.SourceColumn = ColumnNames.Dose;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubmittedToSpecialized);
			p.SourceColumn = ColumnNames.SubmittedToSpecialized;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SalesTaxes);
			p.SourceColumn = ColumnNames.SalesTaxes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EssentialDrugList);
			p.SourceColumn = ColumnNames.EssentialDrugList;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradePricingStatusID);
			p.SourceColumn = ColumnNames.TradePricingStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradePricingLicenseTypeID);
			p.SourceColumn = ColumnNames.TradePricingLicenseTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SectorTypeID);
			p.SourceColumn = ColumnNames.SectorTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteePrice);
			p.SourceColumn = ColumnNames.CommitteePrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommiteeDate);
			p.SourceColumn = ColumnNames.CommiteeDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RationalForPricing);
			p.SourceColumn = ColumnNames.RationalForPricing;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoInBox);
			p.SourceColumn = ColumnNames.NoInBox;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LowestIntPrice);
			p.SourceColumn = ColumnNames.LowestIntPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceInEgy);
			p.SourceColumn = ColumnNames.PriceInEgy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceAfter30);
			p.SourceColumn = ColumnNames.PriceAfter30;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceAfter35HighTech);
			p.SourceColumn = ColumnNames.PriceAfter35HighTech;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceAfter35FirstGeneric);
			p.SourceColumn = ColumnNames.PriceAfter35FirstGeneric;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceAfter40SecondGeneric);
			p.SourceColumn = ColumnNames.PriceAfter40SecondGeneric;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LowestPriceGeneric);
			p.SourceColumn = ColumnNames.LowestPriceGeneric;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FinalPrice);
			p.SourceColumn = ColumnNames.FinalPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsPricedTo499);
			p.SourceColumn = ColumnNames.IsPricedTo499;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MainGroup);
			p.SourceColumn = ColumnNames.MainGroup;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Similar);
			p.SourceColumn = ColumnNames.Similar;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MonthYear);
			p.SourceColumn = ColumnNames.MonthYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PreviousPrice);
			p.SourceColumn = ColumnNames.PreviousPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PreviousPack);
			p.SourceColumn = ColumnNames.PreviousPack;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
