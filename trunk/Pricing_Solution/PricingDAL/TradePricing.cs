
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Pricing.DAL
{
	public abstract class _TradePricing : SqlClientEntity
	{
		public _TradePricing()
		{
			this.QuerySource = "TradePricing";
			this.MappingName = "TradePricing";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TradePricingLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TradePricingID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TradePricingID, TradePricingID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TradePricingLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TradePricingID
			{
				get
				{
					return new SqlParameter("@TradePricingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PricingStatusID
			{
				get
				{
					return new SqlParameter("@PricingStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RegistrationCommitteTypeID
			{
				get
				{
					return new SqlParameter("@RegistrationCommitteTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DosageFormID
			{
				get
				{
					return new SqlParameter("@DosageFormID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FileTypeID
			{
				get
				{
					return new SqlParameter("@FileTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufactureID
			{
				get
				{
					return new SqlParameter("@ManufactureID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradeName
			{
				get
				{
					return new SqlParameter("@TradeName", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter Generics
			{
				get
				{
					return new SqlParameter("@Generics", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter CompanyPrice
			{
				get
				{
					return new SqlParameter("@CompanyPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CommittePrice
			{
				get
				{
					return new SqlParameter("@CommittePrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CommitteDate
			{
				get
				{
					return new SqlParameter("@CommitteDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter DiscussionDate
			{
				get
				{
					return new SqlParameter("@DiscussionDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SubmissionDate
			{
				get
				{
					return new SqlParameter("@SubmissionDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pack
			{
				get
				{
					return new SqlParameter("@Pack", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FileNo
			{
				get
				{
					return new SqlParameter("@FileNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter FilePath
			{
				get
				{
					return new SqlParameter("@FilePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter Generic
			{
				get
				{
					return new SqlParameter("@Generic", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter GenericStrength
			{
				get
				{
					return new SqlParameter("@GenericStrength", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ImportedManufacture
			{
				get
				{
					return new SqlParameter("@ImportedManufacture", SqlDbType.NVarChar, 1500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TradePricingID = "TradePricingID";
            public const string CompanyID = "CompanyID";
            public const string PricingStatusID = "PricingStatusID";
            public const string RegistrationCommitteTypeID = "RegistrationCommitteTypeID";
            public const string DosageFormID = "DosageFormID";
            public const string FileTypeID = "FileTypeID";
            public const string ManufactureID = "ManufactureID";
            public const string TradeName = "TradeName";
            public const string Generics = "Generics";
            public const string CompanyPrice = "CompanyPrice";
            public const string CommittePrice = "CommittePrice";
            public const string CommitteDate = "CommitteDate";
            public const string DiscussionDate = "DiscussionDate";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string GenericStrength = "GenericStrength";
            public const string ImportedManufacture = "ImportedManufacture";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradePricingID] = _TradePricing.PropertyNames.TradePricingID;
					ht[CompanyID] = _TradePricing.PropertyNames.CompanyID;
					ht[PricingStatusID] = _TradePricing.PropertyNames.PricingStatusID;
					ht[RegistrationCommitteTypeID] = _TradePricing.PropertyNames.RegistrationCommitteTypeID;
					ht[DosageFormID] = _TradePricing.PropertyNames.DosageFormID;
					ht[FileTypeID] = _TradePricing.PropertyNames.FileTypeID;
					ht[ManufactureID] = _TradePricing.PropertyNames.ManufactureID;
					ht[TradeName] = _TradePricing.PropertyNames.TradeName;
					ht[Generics] = _TradePricing.PropertyNames.Generics;
					ht[CompanyPrice] = _TradePricing.PropertyNames.CompanyPrice;
					ht[CommittePrice] = _TradePricing.PropertyNames.CommittePrice;
					ht[CommitteDate] = _TradePricing.PropertyNames.CommitteDate;
					ht[DiscussionDate] = _TradePricing.PropertyNames.DiscussionDate;
					ht[SubmissionDate] = _TradePricing.PropertyNames.SubmissionDate;
					ht[Pack] = _TradePricing.PropertyNames.Pack;
					ht[FileNo] = _TradePricing.PropertyNames.FileNo;
					ht[FilePath] = _TradePricing.PropertyNames.FilePath;
					ht[Generic] = _TradePricing.PropertyNames.Generic;
					ht[GenericStrength] = _TradePricing.PropertyNames.GenericStrength;
					ht[ImportedManufacture] = _TradePricing.PropertyNames.ImportedManufacture;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TradePricingID = "TradePricingID";
            public const string CompanyID = "CompanyID";
            public const string PricingStatusID = "PricingStatusID";
            public const string RegistrationCommitteTypeID = "RegistrationCommitteTypeID";
            public const string DosageFormID = "DosageFormID";
            public const string FileTypeID = "FileTypeID";
            public const string ManufactureID = "ManufactureID";
            public const string TradeName = "TradeName";
            public const string Generics = "Generics";
            public const string CompanyPrice = "CompanyPrice";
            public const string CommittePrice = "CommittePrice";
            public const string CommitteDate = "CommitteDate";
            public const string DiscussionDate = "DiscussionDate";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string GenericStrength = "GenericStrength";
            public const string ImportedManufacture = "ImportedManufacture";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TradePricingID] = _TradePricing.ColumnNames.TradePricingID;
					ht[CompanyID] = _TradePricing.ColumnNames.CompanyID;
					ht[PricingStatusID] = _TradePricing.ColumnNames.PricingStatusID;
					ht[RegistrationCommitteTypeID] = _TradePricing.ColumnNames.RegistrationCommitteTypeID;
					ht[DosageFormID] = _TradePricing.ColumnNames.DosageFormID;
					ht[FileTypeID] = _TradePricing.ColumnNames.FileTypeID;
					ht[ManufactureID] = _TradePricing.ColumnNames.ManufactureID;
					ht[TradeName] = _TradePricing.ColumnNames.TradeName;
					ht[Generics] = _TradePricing.ColumnNames.Generics;
					ht[CompanyPrice] = _TradePricing.ColumnNames.CompanyPrice;
					ht[CommittePrice] = _TradePricing.ColumnNames.CommittePrice;
					ht[CommitteDate] = _TradePricing.ColumnNames.CommitteDate;
					ht[DiscussionDate] = _TradePricing.ColumnNames.DiscussionDate;
					ht[SubmissionDate] = _TradePricing.ColumnNames.SubmissionDate;
					ht[Pack] = _TradePricing.ColumnNames.Pack;
					ht[FileNo] = _TradePricing.ColumnNames.FileNo;
					ht[FilePath] = _TradePricing.ColumnNames.FilePath;
					ht[Generic] = _TradePricing.ColumnNames.Generic;
					ht[GenericStrength] = _TradePricing.ColumnNames.GenericStrength;
					ht[ImportedManufacture] = _TradePricing.ColumnNames.ImportedManufacture;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TradePricingID = "s_TradePricingID";
            public const string CompanyID = "s_CompanyID";
            public const string PricingStatusID = "s_PricingStatusID";
            public const string RegistrationCommitteTypeID = "s_RegistrationCommitteTypeID";
            public const string DosageFormID = "s_DosageFormID";
            public const string FileTypeID = "s_FileTypeID";
            public const string ManufactureID = "s_ManufactureID";
            public const string TradeName = "s_TradeName";
            public const string Generics = "s_Generics";
            public const string CompanyPrice = "s_CompanyPrice";
            public const string CommittePrice = "s_CommittePrice";
            public const string CommitteDate = "s_CommitteDate";
            public const string DiscussionDate = "s_DiscussionDate";
            public const string SubmissionDate = "s_SubmissionDate";
            public const string Pack = "s_Pack";
            public const string FileNo = "s_FileNo";
            public const string FilePath = "s_FilePath";
            public const string Generic = "s_Generic";
            public const string GenericStrength = "s_GenericStrength";
            public const string ImportedManufacture = "s_ImportedManufacture";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TradePricingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual int PricingStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.PricingStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual int RegistrationCommitteTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RegistrationCommitteTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.RegistrationCommitteTypeID, value);
			}
		}

		public virtual int DosageFormID
	    {
			get
	        {
				return base.Getint(ColumnNames.DosageFormID);
			}
			set
	        {
				base.Setint(ColumnNames.DosageFormID, value);
			}
		}

		public virtual int FileTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FileTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FileTypeID, value);
			}
		}

		public virtual int ManufactureID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufactureID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufactureID, value);
			}
		}

		public virtual string TradeName
	    {
			get
	        {
				return base.Getstring(ColumnNames.TradeName);
			}
			set
	        {
				base.Setstring(ColumnNames.TradeName, value);
			}
		}

		public virtual string Generics
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generics);
			}
			set
	        {
				base.Setstring(ColumnNames.Generics, value);
			}
		}

		public virtual double CompanyPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CompanyPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual double CommittePrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CommittePrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CommittePrice, value);
			}
		}

		public virtual string CommitteDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommitteDate);
			}
			set
	        {
				base.Setstring(ColumnNames.CommitteDate, value);
			}
		}

		public virtual string DiscussionDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.DiscussionDate);
			}
			set
	        {
				base.Setstring(ColumnNames.DiscussionDate, value);
			}
		}

		public virtual string SubmissionDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubmissionDate);
			}
			set
	        {
				base.Setstring(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string Pack
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pack);
			}
			set
	        {
				base.Setstring(ColumnNames.Pack, value);
			}
		}

		public virtual string FileNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FileNo, value);
			}
		}

		public virtual string FilePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilePath);
			}
			set
	        {
				base.Setstring(ColumnNames.FilePath, value);
			}
		}

		public virtual string Generic
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generic);
			}
			set
	        {
				base.Setstring(ColumnNames.Generic, value);
			}
		}

		public virtual string GenericStrength
	    {
			get
	        {
				return base.Getstring(ColumnNames.GenericStrength);
			}
			set
	        {
				base.Setstring(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string ImportedManufacture
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImportedManufacture);
			}
			set
	        {
				base.Setstring(ColumnNames.ImportedManufacture, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TradePricingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingID);
				else
					this.TradePricingID = base.SetintAsString(ColumnNames.TradePricingID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_PricingStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PricingStatusID) ? string.Empty : base.GetintAsString(ColumnNames.PricingStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PricingStatusID);
				else
					this.PricingStatusID = base.SetintAsString(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual string s_RegistrationCommitteTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegistrationCommitteTypeID) ? string.Empty : base.GetintAsString(ColumnNames.RegistrationCommitteTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegistrationCommitteTypeID);
				else
					this.RegistrationCommitteTypeID = base.SetintAsString(ColumnNames.RegistrationCommitteTypeID, value);
			}
		}

		public virtual string s_DosageFormID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DosageFormID) ? string.Empty : base.GetintAsString(ColumnNames.DosageFormID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DosageFormID);
				else
					this.DosageFormID = base.SetintAsString(ColumnNames.DosageFormID, value);
			}
		}

		public virtual string s_FileTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FileTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileTypeID);
				else
					this.FileTypeID = base.SetintAsString(ColumnNames.FileTypeID, value);
			}
		}

		public virtual string s_ManufactureID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufactureID) ? string.Empty : base.GetintAsString(ColumnNames.ManufactureID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufactureID);
				else
					this.ManufactureID = base.SetintAsString(ColumnNames.ManufactureID, value);
			}
		}

		public virtual string s_TradeName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeName) ? string.Empty : base.GetstringAsString(ColumnNames.TradeName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeName);
				else
					this.TradeName = base.SetstringAsString(ColumnNames.TradeName, value);
			}
		}

		public virtual string s_Generics
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generics) ? string.Empty : base.GetstringAsString(ColumnNames.Generics);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generics);
				else
					this.Generics = base.SetstringAsString(ColumnNames.Generics, value);
			}
		}

		public virtual string s_CompanyPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CompanyPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyPrice);
				else
					this.CompanyPrice = base.SetdoubleAsString(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual string s_CommittePrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommittePrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CommittePrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommittePrice);
				else
					this.CommittePrice = base.SetdoubleAsString(ColumnNames.CommittePrice, value);
			}
		}

		public virtual string s_CommitteDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteDate) ? string.Empty : base.GetstringAsString(ColumnNames.CommitteDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteDate);
				else
					this.CommitteDate = base.SetstringAsString(ColumnNames.CommitteDate, value);
			}
		}

		public virtual string s_DiscussionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DiscussionDate) ? string.Empty : base.GetstringAsString(ColumnNames.DiscussionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DiscussionDate);
				else
					this.DiscussionDate = base.SetstringAsString(ColumnNames.DiscussionDate, value);
			}
		}

		public virtual string s_SubmissionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubmissionDate) ? string.Empty : base.GetstringAsString(ColumnNames.SubmissionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubmissionDate);
				else
					this.SubmissionDate = base.SetstringAsString(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string s_Pack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack) ? string.Empty : base.GetstringAsString(ColumnNames.Pack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack);
				else
					this.Pack = base.SetstringAsString(ColumnNames.Pack, value);
			}
		}

		public virtual string s_FileNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileNo) ? string.Empty : base.GetstringAsString(ColumnNames.FileNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileNo);
				else
					this.FileNo = base.SetstringAsString(ColumnNames.FileNo, value);
			}
		}

		public virtual string s_FilePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilePath) ? string.Empty : base.GetstringAsString(ColumnNames.FilePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilePath);
				else
					this.FilePath = base.SetstringAsString(ColumnNames.FilePath, value);
			}
		}

		public virtual string s_Generic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generic) ? string.Empty : base.GetstringAsString(ColumnNames.Generic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generic);
				else
					this.Generic = base.SetstringAsString(ColumnNames.Generic, value);
			}
		}

		public virtual string s_GenericStrength
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericStrength) ? string.Empty : base.GetstringAsString(ColumnNames.GenericStrength);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericStrength);
				else
					this.GenericStrength = base.SetstringAsString(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string s_ImportedManufacture
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImportedManufacture) ? string.Empty : base.GetstringAsString(ColumnNames.ImportedManufacture);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImportedManufacture);
				else
					this.ImportedManufacture = base.SetstringAsString(ColumnNames.ImportedManufacture, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TradePricingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PricingStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegistrationCommitteTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegistrationCommitteTypeID, Parameters.RegistrationCommitteTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DosageFormID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufactureID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradeName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generics
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommittePrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommittePrice, Parameters.CommittePrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DiscussionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DiscussionDate, Parameters.DiscussionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubmissionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenericStrength
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImportedManufacture
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImportedManufacture, Parameters.ImportedManufacture);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public WhereParameter RegistrationCommitteTypeID
		    {
				get
		        {
					if(_RegistrationCommitteTypeID_W == null)
	        	    {
						_RegistrationCommitteTypeID_W = TearOff.RegistrationCommitteTypeID;
					}
					return _RegistrationCommitteTypeID_W;
				}
			}

			public WhereParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public WhereParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public WhereParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public WhereParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public WhereParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public WhereParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public WhereParameter CommittePrice
		    {
				get
		        {
					if(_CommittePrice_W == null)
	        	    {
						_CommittePrice_W = TearOff.CommittePrice;
					}
					return _CommittePrice_W;
				}
			}

			public WhereParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public WhereParameter DiscussionDate
		    {
				get
		        {
					if(_DiscussionDate_W == null)
	        	    {
						_DiscussionDate_W = TearOff.DiscussionDate;
					}
					return _DiscussionDate_W;
				}
			}

			public WhereParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public WhereParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public WhereParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public WhereParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public WhereParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public WhereParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public WhereParameter ImportedManufacture
		    {
				get
		        {
					if(_ImportedManufacture_W == null)
	        	    {
						_ImportedManufacture_W = TearOff.ImportedManufacture;
					}
					return _ImportedManufacture_W;
				}
			}

			private WhereParameter _TradePricingID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _PricingStatusID_W = null;
			private WhereParameter _RegistrationCommitteTypeID_W = null;
			private WhereParameter _DosageFormID_W = null;
			private WhereParameter _FileTypeID_W = null;
			private WhereParameter _ManufactureID_W = null;
			private WhereParameter _TradeName_W = null;
			private WhereParameter _Generics_W = null;
			private WhereParameter _CompanyPrice_W = null;
			private WhereParameter _CommittePrice_W = null;
			private WhereParameter _CommitteDate_W = null;
			private WhereParameter _DiscussionDate_W = null;
			private WhereParameter _SubmissionDate_W = null;
			private WhereParameter _Pack_W = null;
			private WhereParameter _FileNo_W = null;
			private WhereParameter _FilePath_W = null;
			private WhereParameter _Generic_W = null;
			private WhereParameter _GenericStrength_W = null;
			private WhereParameter _ImportedManufacture_W = null;

			public void WhereClauseReset()
			{
				_TradePricingID_W = null;
				_CompanyID_W = null;
				_PricingStatusID_W = null;
				_RegistrationCommitteTypeID_W = null;
				_DosageFormID_W = null;
				_FileTypeID_W = null;
				_ManufactureID_W = null;
				_TradeName_W = null;
				_Generics_W = null;
				_CompanyPrice_W = null;
				_CommittePrice_W = null;
				_CommitteDate_W = null;
				_DiscussionDate_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_GenericStrength_W = null;
				_ImportedManufacture_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TradePricingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PricingStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegistrationCommitteTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegistrationCommitteTypeID, Parameters.RegistrationCommitteTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DosageFormID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufactureID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradeName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generics
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generics, Parameters.Generics);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommittePrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommittePrice, Parameters.CommittePrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DiscussionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DiscussionDate, Parameters.DiscussionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubmissionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenericStrength
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImportedManufacture
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImportedManufacture, Parameters.ImportedManufacture);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public AggregateParameter RegistrationCommitteTypeID
		    {
				get
		        {
					if(_RegistrationCommitteTypeID_W == null)
	        	    {
						_RegistrationCommitteTypeID_W = TearOff.RegistrationCommitteTypeID;
					}
					return _RegistrationCommitteTypeID_W;
				}
			}

			public AggregateParameter DosageFormID
		    {
				get
		        {
					if(_DosageFormID_W == null)
	        	    {
						_DosageFormID_W = TearOff.DosageFormID;
					}
					return _DosageFormID_W;
				}
			}

			public AggregateParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public AggregateParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public AggregateParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public AggregateParameter Generics
		    {
				get
		        {
					if(_Generics_W == null)
	        	    {
						_Generics_W = TearOff.Generics;
					}
					return _Generics_W;
				}
			}

			public AggregateParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public AggregateParameter CommittePrice
		    {
				get
		        {
					if(_CommittePrice_W == null)
	        	    {
						_CommittePrice_W = TearOff.CommittePrice;
					}
					return _CommittePrice_W;
				}
			}

			public AggregateParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public AggregateParameter DiscussionDate
		    {
				get
		        {
					if(_DiscussionDate_W == null)
	        	    {
						_DiscussionDate_W = TearOff.DiscussionDate;
					}
					return _DiscussionDate_W;
				}
			}

			public AggregateParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public AggregateParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public AggregateParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public AggregateParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public AggregateParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public AggregateParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public AggregateParameter ImportedManufacture
		    {
				get
		        {
					if(_ImportedManufacture_W == null)
	        	    {
						_ImportedManufacture_W = TearOff.ImportedManufacture;
					}
					return _ImportedManufacture_W;
				}
			}

			private AggregateParameter _TradePricingID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _PricingStatusID_W = null;
			private AggregateParameter _RegistrationCommitteTypeID_W = null;
			private AggregateParameter _DosageFormID_W = null;
			private AggregateParameter _FileTypeID_W = null;
			private AggregateParameter _ManufactureID_W = null;
			private AggregateParameter _TradeName_W = null;
			private AggregateParameter _Generics_W = null;
			private AggregateParameter _CompanyPrice_W = null;
			private AggregateParameter _CommittePrice_W = null;
			private AggregateParameter _CommitteDate_W = null;
			private AggregateParameter _DiscussionDate_W = null;
			private AggregateParameter _SubmissionDate_W = null;
			private AggregateParameter _Pack_W = null;
			private AggregateParameter _FileNo_W = null;
			private AggregateParameter _FilePath_W = null;
			private AggregateParameter _Generic_W = null;
			private AggregateParameter _GenericStrength_W = null;
			private AggregateParameter _ImportedManufacture_W = null;

			public void AggregateClauseReset()
			{
				_TradePricingID_W = null;
				_CompanyID_W = null;
				_PricingStatusID_W = null;
				_RegistrationCommitteTypeID_W = null;
				_DosageFormID_W = null;
				_FileTypeID_W = null;
				_ManufactureID_W = null;
				_TradeName_W = null;
				_Generics_W = null;
				_CompanyPrice_W = null;
				_CommittePrice_W = null;
				_CommitteDate_W = null;
				_DiscussionDate_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_GenericStrength_W = null;
				_ImportedManufacture_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TradePricingID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TradePricingDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PricingStatusID);
			p.SourceColumn = ColumnNames.PricingStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegistrationCommitteTypeID);
			p.SourceColumn = ColumnNames.RegistrationCommitteTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DosageFormID);
			p.SourceColumn = ColumnNames.DosageFormID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileTypeID);
			p.SourceColumn = ColumnNames.FileTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManufactureID);
			p.SourceColumn = ColumnNames.ManufactureID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradeName);
			p.SourceColumn = ColumnNames.TradeName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Generics);
			p.SourceColumn = ColumnNames.Generics;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyPrice);
			p.SourceColumn = ColumnNames.CompanyPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommittePrice);
			p.SourceColumn = ColumnNames.CommittePrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteDate);
			p.SourceColumn = ColumnNames.CommitteDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DiscussionDate);
			p.SourceColumn = ColumnNames.DiscussionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SubmissionDate);
			p.SourceColumn = ColumnNames.SubmissionDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Pack);
			p.SourceColumn = ColumnNames.Pack;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileNo);
			p.SourceColumn = ColumnNames.FileNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilePath);
			p.SourceColumn = ColumnNames.FilePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Generic);
			p.SourceColumn = ColumnNames.Generic;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GenericStrength);
			p.SourceColumn = ColumnNames.GenericStrength;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImportedManufacture);
			p.SourceColumn = ColumnNames.ImportedManufacture;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
