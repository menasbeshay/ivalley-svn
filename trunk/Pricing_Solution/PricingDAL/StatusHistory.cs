
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Pricing.DAL
{
	public abstract class _StatusHistory : SqlClientEntity
	{
		public _StatusHistory()
		{
			this.QuerySource = "StatusHistory";
			this.MappingName = "StatusHistory";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_StatusHistoryLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int StatusHistoryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.StatusHistoryID, StatusHistoryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_StatusHistoryLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter StatusHistoryID
			{
				get
				{
					return new SqlParameter("@StatusHistoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradePricingID
			{
				get
				{
					return new SqlParameter("@TradePricingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteeTypeID
			{
				get
				{
					return new SqlParameter("@CommitteeTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteeDescisionID
			{
				get
				{
					return new SqlParameter("@CommitteeDescisionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyDescisionID
			{
				get
				{
					return new SqlParameter("@CompanyDescisionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PricingStatusID
			{
				get
				{
					return new SqlParameter("@PricingStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteDate
			{
				get
				{
					return new SqlParameter("@CommitteDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CurrentPrice
			{
				get
				{
					return new SqlParameter("@CurrentPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Comment
			{
				get
				{
					return new SqlParameter("@Comment", SqlDbType.NVarChar, 2500);
				}
			}
			
			public static SqlParameter AttachementPath
			{
				get
				{
					return new SqlParameter("@AttachementPath", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string StatusHistoryID = "StatusHistoryID";
            public const string TradePricingID = "TradePricingID";
            public const string CommitteeTypeID = "CommitteeTypeID";
            public const string CommitteeDescisionID = "CommitteeDescisionID";
            public const string CompanyDescisionID = "CompanyDescisionID";
            public const string PricingStatusID = "PricingStatusID";
            public const string CommitteDate = "CommitteDate";
            public const string CurrentPrice = "CurrentPrice";
            public const string Comment = "Comment";
            public const string AttachementPath = "AttachementPath";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[StatusHistoryID] = _StatusHistory.PropertyNames.StatusHistoryID;
					ht[TradePricingID] = _StatusHistory.PropertyNames.TradePricingID;
					ht[CommitteeTypeID] = _StatusHistory.PropertyNames.CommitteeTypeID;
					ht[CommitteeDescisionID] = _StatusHistory.PropertyNames.CommitteeDescisionID;
					ht[CompanyDescisionID] = _StatusHistory.PropertyNames.CompanyDescisionID;
					ht[PricingStatusID] = _StatusHistory.PropertyNames.PricingStatusID;
					ht[CommitteDate] = _StatusHistory.PropertyNames.CommitteDate;
					ht[CurrentPrice] = _StatusHistory.PropertyNames.CurrentPrice;
					ht[Comment] = _StatusHistory.PropertyNames.Comment;
					ht[AttachementPath] = _StatusHistory.PropertyNames.AttachementPath;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string StatusHistoryID = "StatusHistoryID";
            public const string TradePricingID = "TradePricingID";
            public const string CommitteeTypeID = "CommitteeTypeID";
            public const string CommitteeDescisionID = "CommitteeDescisionID";
            public const string CompanyDescisionID = "CompanyDescisionID";
            public const string PricingStatusID = "PricingStatusID";
            public const string CommitteDate = "CommitteDate";
            public const string CurrentPrice = "CurrentPrice";
            public const string Comment = "Comment";
            public const string AttachementPath = "AttachementPath";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[StatusHistoryID] = _StatusHistory.ColumnNames.StatusHistoryID;
					ht[TradePricingID] = _StatusHistory.ColumnNames.TradePricingID;
					ht[CommitteeTypeID] = _StatusHistory.ColumnNames.CommitteeTypeID;
					ht[CommitteeDescisionID] = _StatusHistory.ColumnNames.CommitteeDescisionID;
					ht[CompanyDescisionID] = _StatusHistory.ColumnNames.CompanyDescisionID;
					ht[PricingStatusID] = _StatusHistory.ColumnNames.PricingStatusID;
					ht[CommitteDate] = _StatusHistory.ColumnNames.CommitteDate;
					ht[CurrentPrice] = _StatusHistory.ColumnNames.CurrentPrice;
					ht[Comment] = _StatusHistory.ColumnNames.Comment;
					ht[AttachementPath] = _StatusHistory.ColumnNames.AttachementPath;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string StatusHistoryID = "s_StatusHistoryID";
            public const string TradePricingID = "s_TradePricingID";
            public const string CommitteeTypeID = "s_CommitteeTypeID";
            public const string CommitteeDescisionID = "s_CommitteeDescisionID";
            public const string CompanyDescisionID = "s_CompanyDescisionID";
            public const string PricingStatusID = "s_PricingStatusID";
            public const string CommitteDate = "s_CommitteDate";
            public const string CurrentPrice = "s_CurrentPrice";
            public const string Comment = "s_Comment";
            public const string AttachementPath = "s_AttachementPath";

		}
		#endregion		
		
		#region Properties
	
		public virtual int StatusHistoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.StatusHistoryID);
			}
			set
	        {
				base.Setint(ColumnNames.StatusHistoryID, value);
			}
		}

		public virtual int TradePricingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingID, value);
			}
		}

		public virtual int CommitteeTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.CommitteeTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.CommitteeTypeID, value);
			}
		}

		public virtual int CommitteeDescisionID
	    {
			get
	        {
				return base.Getint(ColumnNames.CommitteeDescisionID);
			}
			set
	        {
				base.Setint(ColumnNames.CommitteeDescisionID, value);
			}
		}

		public virtual int CompanyDescisionID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyDescisionID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyDescisionID, value);
			}
		}

		public virtual int PricingStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.PricingStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual DateTime CommitteDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CommitteDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CommitteDate, value);
			}
		}

		public virtual double CurrentPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CurrentPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CurrentPrice, value);
			}
		}

		public virtual string Comment
	    {
			get
	        {
				return base.Getstring(ColumnNames.Comment);
			}
			set
	        {
				base.Setstring(ColumnNames.Comment, value);
			}
		}

		public virtual string AttachementPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.AttachementPath);
			}
			set
	        {
				base.Setstring(ColumnNames.AttachementPath, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_StatusHistoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusHistoryID) ? string.Empty : base.GetintAsString(ColumnNames.StatusHistoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusHistoryID);
				else
					this.StatusHistoryID = base.SetintAsString(ColumnNames.StatusHistoryID, value);
			}
		}

		public virtual string s_TradePricingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingID);
				else
					this.TradePricingID = base.SetintAsString(ColumnNames.TradePricingID, value);
			}
		}

		public virtual string s_CommitteeTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteeTypeID) ? string.Empty : base.GetintAsString(ColumnNames.CommitteeTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteeTypeID);
				else
					this.CommitteeTypeID = base.SetintAsString(ColumnNames.CommitteeTypeID, value);
			}
		}

		public virtual string s_CommitteeDescisionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteeDescisionID) ? string.Empty : base.GetintAsString(ColumnNames.CommitteeDescisionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteeDescisionID);
				else
					this.CommitteeDescisionID = base.SetintAsString(ColumnNames.CommitteeDescisionID, value);
			}
		}

		public virtual string s_CompanyDescisionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyDescisionID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyDescisionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyDescisionID);
				else
					this.CompanyDescisionID = base.SetintAsString(ColumnNames.CompanyDescisionID, value);
			}
		}

		public virtual string s_PricingStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PricingStatusID) ? string.Empty : base.GetintAsString(ColumnNames.PricingStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PricingStatusID);
				else
					this.PricingStatusID = base.SetintAsString(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual string s_CommitteDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CommitteDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteDate);
				else
					this.CommitteDate = base.SetDateTimeAsString(ColumnNames.CommitteDate, value);
			}
		}

		public virtual string s_CurrentPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrentPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CurrentPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrentPrice);
				else
					this.CurrentPrice = base.SetdoubleAsString(ColumnNames.CurrentPrice, value);
			}
		}

		public virtual string s_Comment
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Comment) ? string.Empty : base.GetstringAsString(ColumnNames.Comment);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Comment);
				else
					this.Comment = base.SetstringAsString(ColumnNames.Comment, value);
			}
		}

		public virtual string s_AttachementPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AttachementPath) ? string.Empty : base.GetstringAsString(ColumnNames.AttachementPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AttachementPath);
				else
					this.AttachementPath = base.SetstringAsString(ColumnNames.AttachementPath, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter StatusHistoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusHistoryID, Parameters.StatusHistoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradePricingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteeTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteeTypeID, Parameters.CommitteeTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteeDescisionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteeDescisionID, Parameters.CommitteeDescisionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyDescisionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyDescisionID, Parameters.CompanyDescisionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PricingStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrentPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrentPrice, Parameters.CurrentPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Comment
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Comment, Parameters.Comment);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AttachementPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AttachementPath, Parameters.AttachementPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter StatusHistoryID
		    {
				get
		        {
					if(_StatusHistoryID_W == null)
	        	    {
						_StatusHistoryID_W = TearOff.StatusHistoryID;
					}
					return _StatusHistoryID_W;
				}
			}

			public WhereParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public WhereParameter CommitteeTypeID
		    {
				get
		        {
					if(_CommitteeTypeID_W == null)
	        	    {
						_CommitteeTypeID_W = TearOff.CommitteeTypeID;
					}
					return _CommitteeTypeID_W;
				}
			}

			public WhereParameter CommitteeDescisionID
		    {
				get
		        {
					if(_CommitteeDescisionID_W == null)
	        	    {
						_CommitteeDescisionID_W = TearOff.CommitteeDescisionID;
					}
					return _CommitteeDescisionID_W;
				}
			}

			public WhereParameter CompanyDescisionID
		    {
				get
		        {
					if(_CompanyDescisionID_W == null)
	        	    {
						_CompanyDescisionID_W = TearOff.CompanyDescisionID;
					}
					return _CompanyDescisionID_W;
				}
			}

			public WhereParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public WhereParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public WhereParameter CurrentPrice
		    {
				get
		        {
					if(_CurrentPrice_W == null)
	        	    {
						_CurrentPrice_W = TearOff.CurrentPrice;
					}
					return _CurrentPrice_W;
				}
			}

			public WhereParameter Comment
		    {
				get
		        {
					if(_Comment_W == null)
	        	    {
						_Comment_W = TearOff.Comment;
					}
					return _Comment_W;
				}
			}

			public WhereParameter AttachementPath
		    {
				get
		        {
					if(_AttachementPath_W == null)
	        	    {
						_AttachementPath_W = TearOff.AttachementPath;
					}
					return _AttachementPath_W;
				}
			}

			private WhereParameter _StatusHistoryID_W = null;
			private WhereParameter _TradePricingID_W = null;
			private WhereParameter _CommitteeTypeID_W = null;
			private WhereParameter _CommitteeDescisionID_W = null;
			private WhereParameter _CompanyDescisionID_W = null;
			private WhereParameter _PricingStatusID_W = null;
			private WhereParameter _CommitteDate_W = null;
			private WhereParameter _CurrentPrice_W = null;
			private WhereParameter _Comment_W = null;
			private WhereParameter _AttachementPath_W = null;

			public void WhereClauseReset()
			{
				_StatusHistoryID_W = null;
				_TradePricingID_W = null;
				_CommitteeTypeID_W = null;
				_CommitteeDescisionID_W = null;
				_CompanyDescisionID_W = null;
				_PricingStatusID_W = null;
				_CommitteDate_W = null;
				_CurrentPrice_W = null;
				_Comment_W = null;
				_AttachementPath_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter StatusHistoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusHistoryID, Parameters.StatusHistoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradePricingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteeTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteeTypeID, Parameters.CommitteeTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteeDescisionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteeDescisionID, Parameters.CommitteeDescisionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyDescisionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyDescisionID, Parameters.CompanyDescisionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PricingStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteDate, Parameters.CommitteDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrentPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrentPrice, Parameters.CurrentPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Comment
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Comment, Parameters.Comment);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AttachementPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AttachementPath, Parameters.AttachementPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter StatusHistoryID
		    {
				get
		        {
					if(_StatusHistoryID_W == null)
	        	    {
						_StatusHistoryID_W = TearOff.StatusHistoryID;
					}
					return _StatusHistoryID_W;
				}
			}

			public AggregateParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public AggregateParameter CommitteeTypeID
		    {
				get
		        {
					if(_CommitteeTypeID_W == null)
	        	    {
						_CommitteeTypeID_W = TearOff.CommitteeTypeID;
					}
					return _CommitteeTypeID_W;
				}
			}

			public AggregateParameter CommitteeDescisionID
		    {
				get
		        {
					if(_CommitteeDescisionID_W == null)
	        	    {
						_CommitteeDescisionID_W = TearOff.CommitteeDescisionID;
					}
					return _CommitteeDescisionID_W;
				}
			}

			public AggregateParameter CompanyDescisionID
		    {
				get
		        {
					if(_CompanyDescisionID_W == null)
	        	    {
						_CompanyDescisionID_W = TearOff.CompanyDescisionID;
					}
					return _CompanyDescisionID_W;
				}
			}

			public AggregateParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public AggregateParameter CommitteDate
		    {
				get
		        {
					if(_CommitteDate_W == null)
	        	    {
						_CommitteDate_W = TearOff.CommitteDate;
					}
					return _CommitteDate_W;
				}
			}

			public AggregateParameter CurrentPrice
		    {
				get
		        {
					if(_CurrentPrice_W == null)
	        	    {
						_CurrentPrice_W = TearOff.CurrentPrice;
					}
					return _CurrentPrice_W;
				}
			}

			public AggregateParameter Comment
		    {
				get
		        {
					if(_Comment_W == null)
	        	    {
						_Comment_W = TearOff.Comment;
					}
					return _Comment_W;
				}
			}

			public AggregateParameter AttachementPath
		    {
				get
		        {
					if(_AttachementPath_W == null)
	        	    {
						_AttachementPath_W = TearOff.AttachementPath;
					}
					return _AttachementPath_W;
				}
			}

			private AggregateParameter _StatusHistoryID_W = null;
			private AggregateParameter _TradePricingID_W = null;
			private AggregateParameter _CommitteeTypeID_W = null;
			private AggregateParameter _CommitteeDescisionID_W = null;
			private AggregateParameter _CompanyDescisionID_W = null;
			private AggregateParameter _PricingStatusID_W = null;
			private AggregateParameter _CommitteDate_W = null;
			private AggregateParameter _CurrentPrice_W = null;
			private AggregateParameter _Comment_W = null;
			private AggregateParameter _AttachementPath_W = null;

			public void AggregateClauseReset()
			{
				_StatusHistoryID_W = null;
				_TradePricingID_W = null;
				_CommitteeTypeID_W = null;
				_CommitteeDescisionID_W = null;
				_CompanyDescisionID_W = null;
				_PricingStatusID_W = null;
				_CommitteDate_W = null;
				_CurrentPrice_W = null;
				_Comment_W = null;
				_AttachementPath_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StatusHistoryInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.StatusHistoryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StatusHistoryUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_StatusHistoryDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.StatusHistoryID);
			p.SourceColumn = ColumnNames.StatusHistoryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.StatusHistoryID);
			p.SourceColumn = ColumnNames.StatusHistoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TradePricingID);
			p.SourceColumn = ColumnNames.TradePricingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteeTypeID);
			p.SourceColumn = ColumnNames.CommitteeTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteeDescisionID);
			p.SourceColumn = ColumnNames.CommitteeDescisionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyDescisionID);
			p.SourceColumn = ColumnNames.CompanyDescisionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PricingStatusID);
			p.SourceColumn = ColumnNames.PricingStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CommitteDate);
			p.SourceColumn = ColumnNames.CommitteDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrentPrice);
			p.SourceColumn = ColumnNames.CurrentPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Comment);
			p.SourceColumn = ColumnNames.Comment;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AttachementPath);
			p.SourceColumn = ColumnNames.AttachementPath;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
