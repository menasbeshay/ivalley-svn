/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _v_GetAllGenericInfoByDrugID : SqlClientEntity
	{
		public _v_GetAllGenericInfoByDrugID()
		{
			this.QuerySource = "v_GetAllGenericInfoByDrugID";
			this.MappingName = "v_GetAllGenericInfoByDrugID";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Drug_Req_ID
			{
				get
				{
					return new SqlParameter("@Drug_Req_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Active
			{
				get
				{
					return new SqlParameter("@Active", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter QUANTITY
			{
				get
				{
					return new SqlParameter("@QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter UnitName
			{
				get
				{
					return new SqlParameter("@UnitName", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter OverActiveQuantity
			{
				get
				{
					return new SqlParameter("@OverActiveQuantity", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter OverActiveUnit
			{
				get
				{
					return new SqlParameter("@OverActiveUnit", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter Equi_Active
			{
				get
				{
					return new SqlParameter("@Equi_Active", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter EQUI_QUANTITY
			{
				get
				{
					return new SqlParameter("@EQUI_QUANTITY", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter Equi_Unit
			{
				get
				{
					return new SqlParameter("@Equi_Unit", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter OverEquiActiveQuantity
			{
				get
				{
					return new SqlParameter("@OverEquiActiveQuantity", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter OverEquiActiveUnit
			{
				get
				{
					return new SqlParameter("@OverEquiActiveUnit", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter GenericType
			{
				get
				{
					return new SqlParameter("@GenericType", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter Drug_Reguest_Substances_ID
			{
				get
				{
					return new SqlParameter("@Drug_Reguest_Substances_ID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SubstancesReferenceID
			{
				get
				{
					return new SqlParameter("@SubstancesReferenceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SubstancesReferenceName
			{
				get
				{
					return new SqlParameter("@SubstancesReferenceName", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Drug_Req_ID = "Drug_Req_ID";
            public const string Active = "Active";
            public const string QUANTITY = "QUANTITY";
            public const string UnitName = "UnitName";
            public const string OverActiveQuantity = "OverActiveQuantity";
            public const string OverActiveUnit = "OverActiveUnit";
            public const string Equi_Active = "Equi_Active";
            public const string EQUI_QUANTITY = "EQUI_QUANTITY";
            public const string Equi_Unit = "Equi_Unit";
            public const string OverEquiActiveQuantity = "OverEquiActiveQuantity";
            public const string OverEquiActiveUnit = "OverEquiActiveUnit";
            public const string GenericType = "GenericType";
            public const string Drug_Reguest_Substances_ID = "Drug_Reguest_Substances_ID";
            public const string SubstancesReferenceID = "SubstancesReferenceID";
            public const string SubstancesReferenceName = "SubstancesReferenceName";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Drug_Req_ID] = _v_GetAllGenericInfoByDrugID.PropertyNames.Drug_Req_ID;
					ht[Active] = _v_GetAllGenericInfoByDrugID.PropertyNames.Active;
					ht[QUANTITY] = _v_GetAllGenericInfoByDrugID.PropertyNames.QUANTITY;
					ht[UnitName] = _v_GetAllGenericInfoByDrugID.PropertyNames.UnitName;
					ht[OverActiveQuantity] = _v_GetAllGenericInfoByDrugID.PropertyNames.OverActiveQuantity;
					ht[OverActiveUnit] = _v_GetAllGenericInfoByDrugID.PropertyNames.OverActiveUnit;
					ht[Equi_Active] = _v_GetAllGenericInfoByDrugID.PropertyNames.Equi_Active;
					ht[EQUI_QUANTITY] = _v_GetAllGenericInfoByDrugID.PropertyNames.EQUI_QUANTITY;
					ht[Equi_Unit] = _v_GetAllGenericInfoByDrugID.PropertyNames.Equi_Unit;
					ht[OverEquiActiveQuantity] = _v_GetAllGenericInfoByDrugID.PropertyNames.OverEquiActiveQuantity;
					ht[OverEquiActiveUnit] = _v_GetAllGenericInfoByDrugID.PropertyNames.OverEquiActiveUnit;
					ht[GenericType] = _v_GetAllGenericInfoByDrugID.PropertyNames.GenericType;
					ht[Drug_Reguest_Substances_ID] = _v_GetAllGenericInfoByDrugID.PropertyNames.Drug_Reguest_Substances_ID;
					ht[SubstancesReferenceID] = _v_GetAllGenericInfoByDrugID.PropertyNames.SubstancesReferenceID;
					ht[SubstancesReferenceName] = _v_GetAllGenericInfoByDrugID.PropertyNames.SubstancesReferenceName;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Drug_Req_ID = "Drug_Req_ID";
            public const string Active = "Active";
            public const string QUANTITY = "QUANTITY";
            public const string UnitName = "UnitName";
            public const string OverActiveQuantity = "OverActiveQuantity";
            public const string OverActiveUnit = "OverActiveUnit";
            public const string Equi_Active = "Equi_Active";
            public const string EQUI_QUANTITY = "EQUI_QUANTITY";
            public const string Equi_Unit = "Equi_Unit";
            public const string OverEquiActiveQuantity = "OverEquiActiveQuantity";
            public const string OverEquiActiveUnit = "OverEquiActiveUnit";
            public const string GenericType = "GenericType";
            public const string Drug_Reguest_Substances_ID = "Drug_Reguest_Substances_ID";
            public const string SubstancesReferenceID = "SubstancesReferenceID";
            public const string SubstancesReferenceName = "SubstancesReferenceName";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Drug_Req_ID] = _v_GetAllGenericInfoByDrugID.ColumnNames.Drug_Req_ID;
					ht[Active] = _v_GetAllGenericInfoByDrugID.ColumnNames.Active;
					ht[QUANTITY] = _v_GetAllGenericInfoByDrugID.ColumnNames.QUANTITY;
					ht[UnitName] = _v_GetAllGenericInfoByDrugID.ColumnNames.UnitName;
					ht[OverActiveQuantity] = _v_GetAllGenericInfoByDrugID.ColumnNames.OverActiveQuantity;
					ht[OverActiveUnit] = _v_GetAllGenericInfoByDrugID.ColumnNames.OverActiveUnit;
					ht[Equi_Active] = _v_GetAllGenericInfoByDrugID.ColumnNames.Equi_Active;
					ht[EQUI_QUANTITY] = _v_GetAllGenericInfoByDrugID.ColumnNames.EQUI_QUANTITY;
					ht[Equi_Unit] = _v_GetAllGenericInfoByDrugID.ColumnNames.Equi_Unit;
					ht[OverEquiActiveQuantity] = _v_GetAllGenericInfoByDrugID.ColumnNames.OverEquiActiveQuantity;
					ht[OverEquiActiveUnit] = _v_GetAllGenericInfoByDrugID.ColumnNames.OverEquiActiveUnit;
					ht[GenericType] = _v_GetAllGenericInfoByDrugID.ColumnNames.GenericType;
					ht[Drug_Reguest_Substances_ID] = _v_GetAllGenericInfoByDrugID.ColumnNames.Drug_Reguest_Substances_ID;
					ht[SubstancesReferenceID] = _v_GetAllGenericInfoByDrugID.ColumnNames.SubstancesReferenceID;
					ht[SubstancesReferenceName] = _v_GetAllGenericInfoByDrugID.ColumnNames.SubstancesReferenceName;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Drug_Req_ID = "s_Drug_Req_ID";
            public const string Active = "s_Active";
            public const string QUANTITY = "s_QUANTITY";
            public const string UnitName = "s_UnitName";
            public const string OverActiveQuantity = "s_OverActiveQuantity";
            public const string OverActiveUnit = "s_OverActiveUnit";
            public const string Equi_Active = "s_Equi_Active";
            public const string EQUI_QUANTITY = "s_EQUI_QUANTITY";
            public const string Equi_Unit = "s_Equi_Unit";
            public const string OverEquiActiveQuantity = "s_OverEquiActiveQuantity";
            public const string OverEquiActiveUnit = "s_OverEquiActiveUnit";
            public const string GenericType = "s_GenericType";
            public const string Drug_Reguest_Substances_ID = "s_Drug_Reguest_Substances_ID";
            public const string SubstancesReferenceID = "s_SubstancesReferenceID";
            public const string SubstancesReferenceName = "s_SubstancesReferenceName";

		}
		#endregion	
		
		#region Properties
			public virtual int Drug_Req_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Drug_Req_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Drug_Req_ID, value);
			}
		}

		public virtual string Active
	    {
			get
	        {
				return base.Getstring(ColumnNames.Active);
			}
			set
	        {
				base.Setstring(ColumnNames.Active, value);
			}
		}

		public virtual double QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.QUANTITY, value);
			}
		}

		public virtual string UnitName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UnitName);
			}
			set
	        {
				base.Setstring(ColumnNames.UnitName, value);
			}
		}

		public virtual double OverActiveQuantity
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OverActiveQuantity);
			}
			set
	        {
				base.Setdouble(ColumnNames.OverActiveQuantity, value);
			}
		}

		public virtual string OverActiveUnit
	    {
			get
	        {
				return base.Getstring(ColumnNames.OverActiveUnit);
			}
			set
	        {
				base.Setstring(ColumnNames.OverActiveUnit, value);
			}
		}

		public virtual string Equi_Active
	    {
			get
	        {
				return base.Getstring(ColumnNames.Equi_Active);
			}
			set
	        {
				base.Setstring(ColumnNames.Equi_Active, value);
			}
		}

		public virtual double EQUI_QUANTITY
	    {
			get
	        {
				return base.Getdouble(ColumnNames.EQUI_QUANTITY);
			}
			set
	        {
				base.Setdouble(ColumnNames.EQUI_QUANTITY, value);
			}
		}

		public virtual string Equi_Unit
	    {
			get
	        {
				return base.Getstring(ColumnNames.Equi_Unit);
			}
			set
	        {
				base.Setstring(ColumnNames.Equi_Unit, value);
			}
		}

		public virtual double OverEquiActiveQuantity
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OverEquiActiveQuantity);
			}
			set
	        {
				base.Setdouble(ColumnNames.OverEquiActiveQuantity, value);
			}
		}

		public virtual string OverEquiActiveUnit
	    {
			get
	        {
				return base.Getstring(ColumnNames.OverEquiActiveUnit);
			}
			set
	        {
				base.Setstring(ColumnNames.OverEquiActiveUnit, value);
			}
		}

		public virtual string GenericType
	    {
			get
	        {
				return base.Getstring(ColumnNames.GenericType);
			}
			set
	        {
				base.Setstring(ColumnNames.GenericType, value);
			}
		}

		public virtual int Drug_Reguest_Substances_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.Drug_Reguest_Substances_ID);
			}
			set
	        {
				base.Setint(ColumnNames.Drug_Reguest_Substances_ID, value);
			}
		}

		public virtual int SubstancesReferenceID
	    {
			get
	        {
				return base.Getint(ColumnNames.SubstancesReferenceID);
			}
			set
	        {
				base.Setint(ColumnNames.SubstancesReferenceID, value);
			}
		}

		public virtual string SubstancesReferenceName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubstancesReferenceName);
			}
			set
	        {
				base.Setstring(ColumnNames.SubstancesReferenceName, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Drug_Req_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Drug_Req_ID) ? string.Empty : base.GetintAsString(ColumnNames.Drug_Req_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Drug_Req_ID);
				else
					this.Drug_Req_ID = base.SetintAsString(ColumnNames.Drug_Req_ID, value);
			}
		}

		public virtual string s_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Active) ? string.Empty : base.GetstringAsString(ColumnNames.Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Active);
				else
					this.Active = base.SetstringAsString(ColumnNames.Active, value);
			}
		}

		public virtual string s_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.QUANTITY);
				else
					this.QUANTITY = base.SetdoubleAsString(ColumnNames.QUANTITY, value);
			}
		}

		public virtual string s_UnitName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UnitName) ? string.Empty : base.GetstringAsString(ColumnNames.UnitName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitName);
				else
					this.UnitName = base.SetstringAsString(ColumnNames.UnitName, value);
			}
		}

		public virtual string s_OverActiveQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OverActiveQuantity) ? string.Empty : base.GetdoubleAsString(ColumnNames.OverActiveQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OverActiveQuantity);
				else
					this.OverActiveQuantity = base.SetdoubleAsString(ColumnNames.OverActiveQuantity, value);
			}
		}

		public virtual string s_OverActiveUnit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OverActiveUnit) ? string.Empty : base.GetstringAsString(ColumnNames.OverActiveUnit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OverActiveUnit);
				else
					this.OverActiveUnit = base.SetstringAsString(ColumnNames.OverActiveUnit, value);
			}
		}

		public virtual string s_Equi_Active
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Equi_Active) ? string.Empty : base.GetstringAsString(ColumnNames.Equi_Active);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Equi_Active);
				else
					this.Equi_Active = base.SetstringAsString(ColumnNames.Equi_Active, value);
			}
		}

		public virtual string s_EQUI_QUANTITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EQUI_QUANTITY) ? string.Empty : base.GetdoubleAsString(ColumnNames.EQUI_QUANTITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EQUI_QUANTITY);
				else
					this.EQUI_QUANTITY = base.SetdoubleAsString(ColumnNames.EQUI_QUANTITY, value);
			}
		}

		public virtual string s_Equi_Unit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Equi_Unit) ? string.Empty : base.GetstringAsString(ColumnNames.Equi_Unit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Equi_Unit);
				else
					this.Equi_Unit = base.SetstringAsString(ColumnNames.Equi_Unit, value);
			}
		}

		public virtual string s_OverEquiActiveQuantity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OverEquiActiveQuantity) ? string.Empty : base.GetdoubleAsString(ColumnNames.OverEquiActiveQuantity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OverEquiActiveQuantity);
				else
					this.OverEquiActiveQuantity = base.SetdoubleAsString(ColumnNames.OverEquiActiveQuantity, value);
			}
		}

		public virtual string s_OverEquiActiveUnit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OverEquiActiveUnit) ? string.Empty : base.GetstringAsString(ColumnNames.OverEquiActiveUnit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OverEquiActiveUnit);
				else
					this.OverEquiActiveUnit = base.SetstringAsString(ColumnNames.OverEquiActiveUnit, value);
			}
		}

		public virtual string s_GenericType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericType) ? string.Empty : base.GetstringAsString(ColumnNames.GenericType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericType);
				else
					this.GenericType = base.SetstringAsString(ColumnNames.GenericType, value);
			}
		}

		public virtual string s_Drug_Reguest_Substances_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Drug_Reguest_Substances_ID) ? string.Empty : base.GetintAsString(ColumnNames.Drug_Reguest_Substances_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Drug_Reguest_Substances_ID);
				else
					this.Drug_Reguest_Substances_ID = base.SetintAsString(ColumnNames.Drug_Reguest_Substances_ID, value);
			}
		}

		public virtual string s_SubstancesReferenceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubstancesReferenceID) ? string.Empty : base.GetintAsString(ColumnNames.SubstancesReferenceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubstancesReferenceID);
				else
					this.SubstancesReferenceID = base.SetintAsString(ColumnNames.SubstancesReferenceID, value);
			}
		}

		public virtual string s_SubstancesReferenceName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubstancesReferenceName) ? string.Empty : base.GetstringAsString(ColumnNames.SubstancesReferenceName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubstancesReferenceName);
				else
					this.SubstancesReferenceName = base.SetstringAsString(ColumnNames.SubstancesReferenceName, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Drug_Req_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Drug_Req_ID, Parameters.Drug_Req_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.QUANTITY, Parameters.QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UnitName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UnitName, Parameters.UnitName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OverActiveQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OverActiveQuantity, Parameters.OverActiveQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OverActiveUnit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OverActiveUnit, Parameters.OverActiveUnit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Equi_Active
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Equi_Active, Parameters.Equi_Active);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EQUI_QUANTITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EQUI_QUANTITY, Parameters.EQUI_QUANTITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Equi_Unit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Equi_Unit, Parameters.Equi_Unit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OverEquiActiveQuantity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OverEquiActiveQuantity, Parameters.OverEquiActiveQuantity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OverEquiActiveUnit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OverEquiActiveUnit, Parameters.OverEquiActiveUnit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenericType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericType, Parameters.GenericType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Drug_Reguest_Substances_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Drug_Reguest_Substances_ID, Parameters.Drug_Reguest_Substances_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubstancesReferenceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubstancesReferenceID, Parameters.SubstancesReferenceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubstancesReferenceName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubstancesReferenceName, Parameters.SubstancesReferenceName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Drug_Req_ID
		    {
				get
		        {
					if(_Drug_Req_ID_W == null)
	        	    {
						_Drug_Req_ID_W = TearOff.Drug_Req_ID;
					}
					return _Drug_Req_ID_W;
				}
			}

			public WhereParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public WhereParameter QUANTITY
		    {
				get
		        {
					if(_QUANTITY_W == null)
	        	    {
						_QUANTITY_W = TearOff.QUANTITY;
					}
					return _QUANTITY_W;
				}
			}

			public WhereParameter UnitName
		    {
				get
		        {
					if(_UnitName_W == null)
	        	    {
						_UnitName_W = TearOff.UnitName;
					}
					return _UnitName_W;
				}
			}

			public WhereParameter OverActiveQuantity
		    {
				get
		        {
					if(_OverActiveQuantity_W == null)
	        	    {
						_OverActiveQuantity_W = TearOff.OverActiveQuantity;
					}
					return _OverActiveQuantity_W;
				}
			}

			public WhereParameter OverActiveUnit
		    {
				get
		        {
					if(_OverActiveUnit_W == null)
	        	    {
						_OverActiveUnit_W = TearOff.OverActiveUnit;
					}
					return _OverActiveUnit_W;
				}
			}

			public WhereParameter Equi_Active
		    {
				get
		        {
					if(_Equi_Active_W == null)
	        	    {
						_Equi_Active_W = TearOff.Equi_Active;
					}
					return _Equi_Active_W;
				}
			}

			public WhereParameter EQUI_QUANTITY
		    {
				get
		        {
					if(_EQUI_QUANTITY_W == null)
	        	    {
						_EQUI_QUANTITY_W = TearOff.EQUI_QUANTITY;
					}
					return _EQUI_QUANTITY_W;
				}
			}

			public WhereParameter Equi_Unit
		    {
				get
		        {
					if(_Equi_Unit_W == null)
	        	    {
						_Equi_Unit_W = TearOff.Equi_Unit;
					}
					return _Equi_Unit_W;
				}
			}

			public WhereParameter OverEquiActiveQuantity
		    {
				get
		        {
					if(_OverEquiActiveQuantity_W == null)
	        	    {
						_OverEquiActiveQuantity_W = TearOff.OverEquiActiveQuantity;
					}
					return _OverEquiActiveQuantity_W;
				}
			}

			public WhereParameter OverEquiActiveUnit
		    {
				get
		        {
					if(_OverEquiActiveUnit_W == null)
	        	    {
						_OverEquiActiveUnit_W = TearOff.OverEquiActiveUnit;
					}
					return _OverEquiActiveUnit_W;
				}
			}

			public WhereParameter GenericType
		    {
				get
		        {
					if(_GenericType_W == null)
	        	    {
						_GenericType_W = TearOff.GenericType;
					}
					return _GenericType_W;
				}
			}

			public WhereParameter Drug_Reguest_Substances_ID
		    {
				get
		        {
					if(_Drug_Reguest_Substances_ID_W == null)
	        	    {
						_Drug_Reguest_Substances_ID_W = TearOff.Drug_Reguest_Substances_ID;
					}
					return _Drug_Reguest_Substances_ID_W;
				}
			}

			public WhereParameter SubstancesReferenceID
		    {
				get
		        {
					if(_SubstancesReferenceID_W == null)
	        	    {
						_SubstancesReferenceID_W = TearOff.SubstancesReferenceID;
					}
					return _SubstancesReferenceID_W;
				}
			}

			public WhereParameter SubstancesReferenceName
		    {
				get
		        {
					if(_SubstancesReferenceName_W == null)
	        	    {
						_SubstancesReferenceName_W = TearOff.SubstancesReferenceName;
					}
					return _SubstancesReferenceName_W;
				}
			}

			private WhereParameter _Drug_Req_ID_W = null;
			private WhereParameter _Active_W = null;
			private WhereParameter _QUANTITY_W = null;
			private WhereParameter _UnitName_W = null;
			private WhereParameter _OverActiveQuantity_W = null;
			private WhereParameter _OverActiveUnit_W = null;
			private WhereParameter _Equi_Active_W = null;
			private WhereParameter _EQUI_QUANTITY_W = null;
			private WhereParameter _Equi_Unit_W = null;
			private WhereParameter _OverEquiActiveQuantity_W = null;
			private WhereParameter _OverEquiActiveUnit_W = null;
			private WhereParameter _GenericType_W = null;
			private WhereParameter _Drug_Reguest_Substances_ID_W = null;
			private WhereParameter _SubstancesReferenceID_W = null;
			private WhereParameter _SubstancesReferenceName_W = null;

			public void WhereClauseReset()
			{
				_Drug_Req_ID_W = null;
				_Active_W = null;
				_QUANTITY_W = null;
				_UnitName_W = null;
				_OverActiveQuantity_W = null;
				_OverActiveUnit_W = null;
				_Equi_Active_W = null;
				_EQUI_QUANTITY_W = null;
				_Equi_Unit_W = null;
				_OverEquiActiveQuantity_W = null;
				_OverEquiActiveUnit_W = null;
				_GenericType_W = null;
				_Drug_Reguest_Substances_ID_W = null;
				_SubstancesReferenceID_W = null;
				_SubstancesReferenceName_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Drug_Req_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Drug_Req_ID, Parameters.Drug_Req_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Active, Parameters.Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.QUANTITY, Parameters.QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UnitName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitName, Parameters.UnitName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OverActiveQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OverActiveQuantity, Parameters.OverActiveQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OverActiveUnit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OverActiveUnit, Parameters.OverActiveUnit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Equi_Active
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Equi_Active, Parameters.Equi_Active);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EQUI_QUANTITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EQUI_QUANTITY, Parameters.EQUI_QUANTITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Equi_Unit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Equi_Unit, Parameters.Equi_Unit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OverEquiActiveQuantity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OverEquiActiveQuantity, Parameters.OverEquiActiveQuantity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OverEquiActiveUnit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OverEquiActiveUnit, Parameters.OverEquiActiveUnit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenericType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericType, Parameters.GenericType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Drug_Reguest_Substances_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Drug_Reguest_Substances_ID, Parameters.Drug_Reguest_Substances_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubstancesReferenceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubstancesReferenceID, Parameters.SubstancesReferenceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubstancesReferenceName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubstancesReferenceName, Parameters.SubstancesReferenceName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Drug_Req_ID
		    {
				get
		        {
					if(_Drug_Req_ID_W == null)
	        	    {
						_Drug_Req_ID_W = TearOff.Drug_Req_ID;
					}
					return _Drug_Req_ID_W;
				}
			}

			public AggregateParameter Active
		    {
				get
		        {
					if(_Active_W == null)
	        	    {
						_Active_W = TearOff.Active;
					}
					return _Active_W;
				}
			}

			public AggregateParameter QUANTITY
		    {
				get
		        {
					if(_QUANTITY_W == null)
	        	    {
						_QUANTITY_W = TearOff.QUANTITY;
					}
					return _QUANTITY_W;
				}
			}

			public AggregateParameter UnitName
		    {
				get
		        {
					if(_UnitName_W == null)
	        	    {
						_UnitName_W = TearOff.UnitName;
					}
					return _UnitName_W;
				}
			}

			public AggregateParameter OverActiveQuantity
		    {
				get
		        {
					if(_OverActiveQuantity_W == null)
	        	    {
						_OverActiveQuantity_W = TearOff.OverActiveQuantity;
					}
					return _OverActiveQuantity_W;
				}
			}

			public AggregateParameter OverActiveUnit
		    {
				get
		        {
					if(_OverActiveUnit_W == null)
	        	    {
						_OverActiveUnit_W = TearOff.OverActiveUnit;
					}
					return _OverActiveUnit_W;
				}
			}

			public AggregateParameter Equi_Active
		    {
				get
		        {
					if(_Equi_Active_W == null)
	        	    {
						_Equi_Active_W = TearOff.Equi_Active;
					}
					return _Equi_Active_W;
				}
			}

			public AggregateParameter EQUI_QUANTITY
		    {
				get
		        {
					if(_EQUI_QUANTITY_W == null)
	        	    {
						_EQUI_QUANTITY_W = TearOff.EQUI_QUANTITY;
					}
					return _EQUI_QUANTITY_W;
				}
			}

			public AggregateParameter Equi_Unit
		    {
				get
		        {
					if(_Equi_Unit_W == null)
	        	    {
						_Equi_Unit_W = TearOff.Equi_Unit;
					}
					return _Equi_Unit_W;
				}
			}

			public AggregateParameter OverEquiActiveQuantity
		    {
				get
		        {
					if(_OverEquiActiveQuantity_W == null)
	        	    {
						_OverEquiActiveQuantity_W = TearOff.OverEquiActiveQuantity;
					}
					return _OverEquiActiveQuantity_W;
				}
			}

			public AggregateParameter OverEquiActiveUnit
		    {
				get
		        {
					if(_OverEquiActiveUnit_W == null)
	        	    {
						_OverEquiActiveUnit_W = TearOff.OverEquiActiveUnit;
					}
					return _OverEquiActiveUnit_W;
				}
			}

			public AggregateParameter GenericType
		    {
				get
		        {
					if(_GenericType_W == null)
	        	    {
						_GenericType_W = TearOff.GenericType;
					}
					return _GenericType_W;
				}
			}

			public AggregateParameter Drug_Reguest_Substances_ID
		    {
				get
		        {
					if(_Drug_Reguest_Substances_ID_W == null)
	        	    {
						_Drug_Reguest_Substances_ID_W = TearOff.Drug_Reguest_Substances_ID;
					}
					return _Drug_Reguest_Substances_ID_W;
				}
			}

			public AggregateParameter SubstancesReferenceID
		    {
				get
		        {
					if(_SubstancesReferenceID_W == null)
	        	    {
						_SubstancesReferenceID_W = TearOff.SubstancesReferenceID;
					}
					return _SubstancesReferenceID_W;
				}
			}

			public AggregateParameter SubstancesReferenceName
		    {
				get
		        {
					if(_SubstancesReferenceName_W == null)
	        	    {
						_SubstancesReferenceName_W = TearOff.SubstancesReferenceName;
					}
					return _SubstancesReferenceName_W;
				}
			}

			private AggregateParameter _Drug_Req_ID_W = null;
			private AggregateParameter _Active_W = null;
			private AggregateParameter _QUANTITY_W = null;
			private AggregateParameter _UnitName_W = null;
			private AggregateParameter _OverActiveQuantity_W = null;
			private AggregateParameter _OverActiveUnit_W = null;
			private AggregateParameter _Equi_Active_W = null;
			private AggregateParameter _EQUI_QUANTITY_W = null;
			private AggregateParameter _Equi_Unit_W = null;
			private AggregateParameter _OverEquiActiveQuantity_W = null;
			private AggregateParameter _OverEquiActiveUnit_W = null;
			private AggregateParameter _GenericType_W = null;
			private AggregateParameter _Drug_Reguest_Substances_ID_W = null;
			private AggregateParameter _SubstancesReferenceID_W = null;
			private AggregateParameter _SubstancesReferenceName_W = null;

			public void AggregateClauseReset()
			{
				_Drug_Req_ID_W = null;
				_Active_W = null;
				_QUANTITY_W = null;
				_UnitName_W = null;
				_OverActiveQuantity_W = null;
				_OverActiveUnit_W = null;
				_Equi_Active_W = null;
				_EQUI_QUANTITY_W = null;
				_Equi_Unit_W = null;
				_OverEquiActiveQuantity_W = null;
				_OverEquiActiveUnit_W = null;
				_GenericType_W = null;
				_Drug_Reguest_Substances_ID_W = null;
				_SubstancesReferenceID_W = null;
				_SubstancesReferenceName_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
