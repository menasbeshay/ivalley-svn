/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace View
{
	public class _v_PriceSchedual : SqlClientEntity
	{
		public _v_PriceSchedual()
		{
			this.QuerySource = "v_PriceSchedual";
			this.MappingName = "v_PriceSchedual";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CompNameEng
			{
				get
				{
					return new SqlParameter("@CompNameEng", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter Status
			{
				get
				{
					return new SqlParameter("@Status", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CommitteType
			{
				get
				{
					return new SqlParameter("@CommitteType", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter FileType
			{
				get
				{
					return new SqlParameter("@FileType", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Dosage_form
			{
				get
				{
					return new SqlParameter("@Dosage_form", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter ManufactureName
			{
				get
				{
					return new SqlParameter("@ManufactureName", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter TradeName
			{
				get
				{
					return new SqlParameter("@TradeName", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter CompanyPrice
			{
				get
				{
					return new SqlParameter("@CompanyPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter SubmissionDate
			{
				get
				{
					return new SqlParameter("@SubmissionDate", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Pack
			{
				get
				{
					return new SqlParameter("@Pack", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FileNo
			{
				get
				{
					return new SqlParameter("@FileNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter GenericStrength
			{
				get
				{
					return new SqlParameter("@GenericStrength", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FilePath
			{
				get
				{
					return new SqlParameter("@FilePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter Generic
			{
				get
				{
					return new SqlParameter("@Generic", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter PricingStatusID
			{
				get
				{
					return new SqlParameter("@PricingStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CommitteTypeID
			{
				get
				{
					return new SqlParameter("@CommitteTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ManufactureID
			{
				get
				{
					return new SqlParameter("@ManufactureID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TradePricingID
			{
				get
				{
					return new SqlParameter("@TradePricingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FileTypeID
			{
				get
				{
					return new SqlParameter("@FileTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Mail1
			{
				get
				{
					return new SqlParameter("@Mail1", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter Mail2
			{
				get
				{
					return new SqlParameter("@Mail2", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter Mail3
			{
				get
				{
					return new SqlParameter("@Mail3", SqlDbType.NVarChar, 255);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CompNameEng = "CompNameEng";
            public const string Status = "Status";
            public const string CommitteType = "CommitteType";
            public const string FileType = "FileType";
            public const string Dosage_form = "Dosage_form";
            public const string ManufactureName = "ManufactureName";
            public const string TradeName = "TradeName";
            public const string CompanyPrice = "CompanyPrice";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string GenericStrength = "GenericStrength";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string PricingStatusID = "PricingStatusID";
            public const string CommitteTypeID = "CommitteTypeID";
            public const string CompanyID = "CompanyID";
            public const string ManufactureID = "ManufactureID";
            public const string TradePricingID = "TradePricingID";
            public const string FileTypeID = "FileTypeID";
            public const string Mail1 = "Mail1";
            public const string Mail2 = "Mail2";
            public const string Mail3 = "Mail3";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompNameEng] = _v_PriceSchedual.PropertyNames.CompNameEng;
					ht[Status] = _v_PriceSchedual.PropertyNames.Status;
					ht[CommitteType] = _v_PriceSchedual.PropertyNames.CommitteType;
					ht[FileType] = _v_PriceSchedual.PropertyNames.FileType;
					ht[Dosage_form] = _v_PriceSchedual.PropertyNames.Dosage_form;
					ht[ManufactureName] = _v_PriceSchedual.PropertyNames.ManufactureName;
					ht[TradeName] = _v_PriceSchedual.PropertyNames.TradeName;
					ht[CompanyPrice] = _v_PriceSchedual.PropertyNames.CompanyPrice;
					ht[SubmissionDate] = _v_PriceSchedual.PropertyNames.SubmissionDate;
					ht[Pack] = _v_PriceSchedual.PropertyNames.Pack;
					ht[FileNo] = _v_PriceSchedual.PropertyNames.FileNo;
					ht[GenericStrength] = _v_PriceSchedual.PropertyNames.GenericStrength;
					ht[FilePath] = _v_PriceSchedual.PropertyNames.FilePath;
					ht[Generic] = _v_PriceSchedual.PropertyNames.Generic;
					ht[PricingStatusID] = _v_PriceSchedual.PropertyNames.PricingStatusID;
					ht[CommitteTypeID] = _v_PriceSchedual.PropertyNames.CommitteTypeID;
					ht[CompanyID] = _v_PriceSchedual.PropertyNames.CompanyID;
					ht[ManufactureID] = _v_PriceSchedual.PropertyNames.ManufactureID;
					ht[TradePricingID] = _v_PriceSchedual.PropertyNames.TradePricingID;
					ht[FileTypeID] = _v_PriceSchedual.PropertyNames.FileTypeID;
					ht[Mail1] = _v_PriceSchedual.PropertyNames.Mail1;
					ht[Mail2] = _v_PriceSchedual.PropertyNames.Mail2;
					ht[Mail3] = _v_PriceSchedual.PropertyNames.Mail3;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CompNameEng = "CompNameEng";
            public const string Status = "Status";
            public const string CommitteType = "CommitteType";
            public const string FileType = "FileType";
            public const string Dosage_form = "Dosage_form";
            public const string ManufactureName = "ManufactureName";
            public const string TradeName = "TradeName";
            public const string CompanyPrice = "CompanyPrice";
            public const string SubmissionDate = "SubmissionDate";
            public const string Pack = "Pack";
            public const string FileNo = "FileNo";
            public const string GenericStrength = "GenericStrength";
            public const string FilePath = "FilePath";
            public const string Generic = "Generic";
            public const string PricingStatusID = "PricingStatusID";
            public const string CommitteTypeID = "CommitteTypeID";
            public const string CompanyID = "CompanyID";
            public const string ManufactureID = "ManufactureID";
            public const string TradePricingID = "TradePricingID";
            public const string FileTypeID = "FileTypeID";
            public const string Mail1 = "Mail1";
            public const string Mail2 = "Mail2";
            public const string Mail3 = "Mail3";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompNameEng] = _v_PriceSchedual.ColumnNames.CompNameEng;
					ht[Status] = _v_PriceSchedual.ColumnNames.Status;
					ht[CommitteType] = _v_PriceSchedual.ColumnNames.CommitteType;
					ht[FileType] = _v_PriceSchedual.ColumnNames.FileType;
					ht[Dosage_form] = _v_PriceSchedual.ColumnNames.Dosage_form;
					ht[ManufactureName] = _v_PriceSchedual.ColumnNames.ManufactureName;
					ht[TradeName] = _v_PriceSchedual.ColumnNames.TradeName;
					ht[CompanyPrice] = _v_PriceSchedual.ColumnNames.CompanyPrice;
					ht[SubmissionDate] = _v_PriceSchedual.ColumnNames.SubmissionDate;
					ht[Pack] = _v_PriceSchedual.ColumnNames.Pack;
					ht[FileNo] = _v_PriceSchedual.ColumnNames.FileNo;
					ht[GenericStrength] = _v_PriceSchedual.ColumnNames.GenericStrength;
					ht[FilePath] = _v_PriceSchedual.ColumnNames.FilePath;
					ht[Generic] = _v_PriceSchedual.ColumnNames.Generic;
					ht[PricingStatusID] = _v_PriceSchedual.ColumnNames.PricingStatusID;
					ht[CommitteTypeID] = _v_PriceSchedual.ColumnNames.CommitteTypeID;
					ht[CompanyID] = _v_PriceSchedual.ColumnNames.CompanyID;
					ht[ManufactureID] = _v_PriceSchedual.ColumnNames.ManufactureID;
					ht[TradePricingID] = _v_PriceSchedual.ColumnNames.TradePricingID;
					ht[FileTypeID] = _v_PriceSchedual.ColumnNames.FileTypeID;
					ht[Mail1] = _v_PriceSchedual.ColumnNames.Mail1;
					ht[Mail2] = _v_PriceSchedual.ColumnNames.Mail2;
					ht[Mail3] = _v_PriceSchedual.ColumnNames.Mail3;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CompNameEng = "s_CompNameEng";
            public const string Status = "s_Status";
            public const string CommitteType = "s_CommitteType";
            public const string FileType = "s_FileType";
            public const string Dosage_form = "s_Dosage_form";
            public const string ManufactureName = "s_ManufactureName";
            public const string TradeName = "s_TradeName";
            public const string CompanyPrice = "s_CompanyPrice";
            public const string SubmissionDate = "s_SubmissionDate";
            public const string Pack = "s_Pack";
            public const string FileNo = "s_FileNo";
            public const string GenericStrength = "s_GenericStrength";
            public const string FilePath = "s_FilePath";
            public const string Generic = "s_Generic";
            public const string PricingStatusID = "s_PricingStatusID";
            public const string CommitteTypeID = "s_CommitteTypeID";
            public const string CompanyID = "s_CompanyID";
            public const string ManufactureID = "s_ManufactureID";
            public const string TradePricingID = "s_TradePricingID";
            public const string FileTypeID = "s_FileTypeID";
            public const string Mail1 = "s_Mail1";
            public const string Mail2 = "s_Mail2";
            public const string Mail3 = "s_Mail3";

		}
		#endregion	
		
		#region Properties
			public virtual string CompNameEng
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompNameEng);
			}
			set
	        {
				base.Setstring(ColumnNames.CompNameEng, value);
			}
		}

		public virtual string Status
	    {
			get
	        {
				return base.Getstring(ColumnNames.Status);
			}
			set
	        {
				base.Setstring(ColumnNames.Status, value);
			}
		}

		public virtual string CommitteType
	    {
			get
	        {
				return base.Getstring(ColumnNames.CommitteType);
			}
			set
	        {
				base.Setstring(ColumnNames.CommitteType, value);
			}
		}

		public virtual string FileType
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileType);
			}
			set
	        {
				base.Setstring(ColumnNames.FileType, value);
			}
		}

		public virtual string Dosage_form
	    {
			get
	        {
				return base.Getstring(ColumnNames.Dosage_form);
			}
			set
	        {
				base.Setstring(ColumnNames.Dosage_form, value);
			}
		}

		public virtual string ManufactureName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ManufactureName);
			}
			set
	        {
				base.Setstring(ColumnNames.ManufactureName, value);
			}
		}

		public virtual string TradeName
	    {
			get
	        {
				return base.Getstring(ColumnNames.TradeName);
			}
			set
	        {
				base.Setstring(ColumnNames.TradeName, value);
			}
		}

		public virtual double CompanyPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.CompanyPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual string SubmissionDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.SubmissionDate);
			}
			set
	        {
				base.Setstring(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string Pack
	    {
			get
	        {
				return base.Getstring(ColumnNames.Pack);
			}
			set
	        {
				base.Setstring(ColumnNames.Pack, value);
			}
		}

		public virtual string FileNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FileNo, value);
			}
		}

		public virtual string GenericStrength
	    {
			get
	        {
				return base.Getstring(ColumnNames.GenericStrength);
			}
			set
	        {
				base.Setstring(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string FilePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilePath);
			}
			set
	        {
				base.Setstring(ColumnNames.FilePath, value);
			}
		}

		public virtual string Generic
	    {
			get
	        {
				return base.Getstring(ColumnNames.Generic);
			}
			set
	        {
				base.Setstring(ColumnNames.Generic, value);
			}
		}

		public virtual int PricingStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.PricingStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual int CommitteTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.CommitteTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.CommitteTypeID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual int ManufactureID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManufactureID);
			}
			set
	        {
				base.Setint(ColumnNames.ManufactureID, value);
			}
		}

		public virtual int TradePricingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TradePricingID);
			}
			set
	        {
				base.Setint(ColumnNames.TradePricingID, value);
			}
		}

		public virtual int FileTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FileTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FileTypeID, value);
			}
		}

		public virtual string Mail1
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mail1);
			}
			set
	        {
				base.Setstring(ColumnNames.Mail1, value);
			}
		}

		public virtual string Mail2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mail2);
			}
			set
	        {
				base.Setstring(ColumnNames.Mail2, value);
			}
		}

		public virtual string Mail3
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mail3);
			}
			set
	        {
				base.Setstring(ColumnNames.Mail3, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CompNameEng
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompNameEng) ? string.Empty : base.GetstringAsString(ColumnNames.CompNameEng);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompNameEng);
				else
					this.CompNameEng = base.SetstringAsString(ColumnNames.CompNameEng, value);
			}
		}

		public virtual string s_Status
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Status) ? string.Empty : base.GetstringAsString(ColumnNames.Status);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Status);
				else
					this.Status = base.SetstringAsString(ColumnNames.Status, value);
			}
		}

		public virtual string s_CommitteType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteType) ? string.Empty : base.GetstringAsString(ColumnNames.CommitteType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteType);
				else
					this.CommitteType = base.SetstringAsString(ColumnNames.CommitteType, value);
			}
		}

		public virtual string s_FileType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileType) ? string.Empty : base.GetstringAsString(ColumnNames.FileType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileType);
				else
					this.FileType = base.SetstringAsString(ColumnNames.FileType, value);
			}
		}

		public virtual string s_Dosage_form
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Dosage_form) ? string.Empty : base.GetstringAsString(ColumnNames.Dosage_form);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Dosage_form);
				else
					this.Dosage_form = base.SetstringAsString(ColumnNames.Dosage_form, value);
			}
		}

		public virtual string s_ManufactureName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufactureName) ? string.Empty : base.GetstringAsString(ColumnNames.ManufactureName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufactureName);
				else
					this.ManufactureName = base.SetstringAsString(ColumnNames.ManufactureName, value);
			}
		}

		public virtual string s_TradeName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradeName) ? string.Empty : base.GetstringAsString(ColumnNames.TradeName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradeName);
				else
					this.TradeName = base.SetstringAsString(ColumnNames.TradeName, value);
			}
		}

		public virtual string s_CompanyPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.CompanyPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyPrice);
				else
					this.CompanyPrice = base.SetdoubleAsString(ColumnNames.CompanyPrice, value);
			}
		}

		public virtual string s_SubmissionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SubmissionDate) ? string.Empty : base.GetstringAsString(ColumnNames.SubmissionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SubmissionDate);
				else
					this.SubmissionDate = base.SetstringAsString(ColumnNames.SubmissionDate, value);
			}
		}

		public virtual string s_Pack
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Pack) ? string.Empty : base.GetstringAsString(ColumnNames.Pack);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Pack);
				else
					this.Pack = base.SetstringAsString(ColumnNames.Pack, value);
			}
		}

		public virtual string s_FileNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileNo) ? string.Empty : base.GetstringAsString(ColumnNames.FileNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileNo);
				else
					this.FileNo = base.SetstringAsString(ColumnNames.FileNo, value);
			}
		}

		public virtual string s_GenericStrength
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GenericStrength) ? string.Empty : base.GetstringAsString(ColumnNames.GenericStrength);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GenericStrength);
				else
					this.GenericStrength = base.SetstringAsString(ColumnNames.GenericStrength, value);
			}
		}

		public virtual string s_FilePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilePath) ? string.Empty : base.GetstringAsString(ColumnNames.FilePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilePath);
				else
					this.FilePath = base.SetstringAsString(ColumnNames.FilePath, value);
			}
		}

		public virtual string s_Generic
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Generic) ? string.Empty : base.GetstringAsString(ColumnNames.Generic);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Generic);
				else
					this.Generic = base.SetstringAsString(ColumnNames.Generic, value);
			}
		}

		public virtual string s_PricingStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PricingStatusID) ? string.Empty : base.GetintAsString(ColumnNames.PricingStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PricingStatusID);
				else
					this.PricingStatusID = base.SetintAsString(ColumnNames.PricingStatusID, value);
			}
		}

		public virtual string s_CommitteTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CommitteTypeID) ? string.Empty : base.GetintAsString(ColumnNames.CommitteTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CommitteTypeID);
				else
					this.CommitteTypeID = base.SetintAsString(ColumnNames.CommitteTypeID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_ManufactureID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManufactureID) ? string.Empty : base.GetintAsString(ColumnNames.ManufactureID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManufactureID);
				else
					this.ManufactureID = base.SetintAsString(ColumnNames.ManufactureID, value);
			}
		}

		public virtual string s_TradePricingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TradePricingID) ? string.Empty : base.GetintAsString(ColumnNames.TradePricingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TradePricingID);
				else
					this.TradePricingID = base.SetintAsString(ColumnNames.TradePricingID, value);
			}
		}

		public virtual string s_FileTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FileTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileTypeID);
				else
					this.FileTypeID = base.SetintAsString(ColumnNames.FileTypeID, value);
			}
		}

		public virtual string s_Mail1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mail1) ? string.Empty : base.GetstringAsString(ColumnNames.Mail1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mail1);
				else
					this.Mail1 = base.SetstringAsString(ColumnNames.Mail1, value);
			}
		}

		public virtual string s_Mail2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mail2) ? string.Empty : base.GetstringAsString(ColumnNames.Mail2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mail2);
				else
					this.Mail2 = base.SetstringAsString(ColumnNames.Mail2, value);
			}
		}

		public virtual string s_Mail3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mail3) ? string.Empty : base.GetstringAsString(ColumnNames.Mail3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mail3);
				else
					this.Mail3 = base.SetstringAsString(ColumnNames.Mail3, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CompNameEng
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompNameEng, Parameters.CompNameEng);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Status
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteType, Parameters.CommitteType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileType, Parameters.FileType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Dosage_form
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Dosage_form, Parameters.Dosage_form);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufactureName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufactureName, Parameters.ManufactureName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradeName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SubmissionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Pack
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GenericStrength
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Generic
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PricingStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CommitteTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CommitteTypeID, Parameters.CommitteTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManufactureID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TradePricingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mail1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mail1, Parameters.Mail1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mail2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mail2, Parameters.Mail2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mail3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mail3, Parameters.Mail3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CompNameEng
		    {
				get
		        {
					if(_CompNameEng_W == null)
	        	    {
						_CompNameEng_W = TearOff.CompNameEng;
					}
					return _CompNameEng_W;
				}
			}

			public WhereParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public WhereParameter CommitteType
		    {
				get
		        {
					if(_CommitteType_W == null)
	        	    {
						_CommitteType_W = TearOff.CommitteType;
					}
					return _CommitteType_W;
				}
			}

			public WhereParameter FileType
		    {
				get
		        {
					if(_FileType_W == null)
	        	    {
						_FileType_W = TearOff.FileType;
					}
					return _FileType_W;
				}
			}

			public WhereParameter Dosage_form
		    {
				get
		        {
					if(_Dosage_form_W == null)
	        	    {
						_Dosage_form_W = TearOff.Dosage_form;
					}
					return _Dosage_form_W;
				}
			}

			public WhereParameter ManufactureName
		    {
				get
		        {
					if(_ManufactureName_W == null)
	        	    {
						_ManufactureName_W = TearOff.ManufactureName;
					}
					return _ManufactureName_W;
				}
			}

			public WhereParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public WhereParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public WhereParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public WhereParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public WhereParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public WhereParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public WhereParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public WhereParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public WhereParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public WhereParameter CommitteTypeID
		    {
				get
		        {
					if(_CommitteTypeID_W == null)
	        	    {
						_CommitteTypeID_W = TearOff.CommitteTypeID;
					}
					return _CommitteTypeID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public WhereParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public WhereParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public WhereParameter Mail1
		    {
				get
		        {
					if(_Mail1_W == null)
	        	    {
						_Mail1_W = TearOff.Mail1;
					}
					return _Mail1_W;
				}
			}

			public WhereParameter Mail2
		    {
				get
		        {
					if(_Mail2_W == null)
	        	    {
						_Mail2_W = TearOff.Mail2;
					}
					return _Mail2_W;
				}
			}

			public WhereParameter Mail3
		    {
				get
		        {
					if(_Mail3_W == null)
	        	    {
						_Mail3_W = TearOff.Mail3;
					}
					return _Mail3_W;
				}
			}

			private WhereParameter _CompNameEng_W = null;
			private WhereParameter _Status_W = null;
			private WhereParameter _CommitteType_W = null;
			private WhereParameter _FileType_W = null;
			private WhereParameter _Dosage_form_W = null;
			private WhereParameter _ManufactureName_W = null;
			private WhereParameter _TradeName_W = null;
			private WhereParameter _CompanyPrice_W = null;
			private WhereParameter _SubmissionDate_W = null;
			private WhereParameter _Pack_W = null;
			private WhereParameter _FileNo_W = null;
			private WhereParameter _GenericStrength_W = null;
			private WhereParameter _FilePath_W = null;
			private WhereParameter _Generic_W = null;
			private WhereParameter _PricingStatusID_W = null;
			private WhereParameter _CommitteTypeID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _ManufactureID_W = null;
			private WhereParameter _TradePricingID_W = null;
			private WhereParameter _FileTypeID_W = null;
			private WhereParameter _Mail1_W = null;
			private WhereParameter _Mail2_W = null;
			private WhereParameter _Mail3_W = null;

			public void WhereClauseReset()
			{
				_CompNameEng_W = null;
				_Status_W = null;
				_CommitteType_W = null;
				_FileType_W = null;
				_Dosage_form_W = null;
				_ManufactureName_W = null;
				_TradeName_W = null;
				_CompanyPrice_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_GenericStrength_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_PricingStatusID_W = null;
				_CommitteTypeID_W = null;
				_CompanyID_W = null;
				_ManufactureID_W = null;
				_TradePricingID_W = null;
				_FileTypeID_W = null;
				_Mail1_W = null;
				_Mail2_W = null;
				_Mail3_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CompNameEng
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompNameEng, Parameters.CompNameEng);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Status
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Status, Parameters.Status);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteType, Parameters.CommitteType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileType, Parameters.FileType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Dosage_form
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Dosage_form, Parameters.Dosage_form);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufactureName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufactureName, Parameters.ManufactureName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradeName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradeName, Parameters.TradeName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyPrice, Parameters.CompanyPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SubmissionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SubmissionDate, Parameters.SubmissionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Pack
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pack, Parameters.Pack);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileNo, Parameters.FileNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GenericStrength
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GenericStrength, Parameters.GenericStrength);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Generic
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Generic, Parameters.Generic);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PricingStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PricingStatusID, Parameters.PricingStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CommitteTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CommitteTypeID, Parameters.CommitteTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManufactureID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManufactureID, Parameters.ManufactureID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TradePricingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TradePricingID, Parameters.TradePricingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileTypeID, Parameters.FileTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mail1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mail1, Parameters.Mail1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mail2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mail2, Parameters.Mail2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mail3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mail3, Parameters.Mail3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CompNameEng
		    {
				get
		        {
					if(_CompNameEng_W == null)
	        	    {
						_CompNameEng_W = TearOff.CompNameEng;
					}
					return _CompNameEng_W;
				}
			}

			public AggregateParameter Status
		    {
				get
		        {
					if(_Status_W == null)
	        	    {
						_Status_W = TearOff.Status;
					}
					return _Status_W;
				}
			}

			public AggregateParameter CommitteType
		    {
				get
		        {
					if(_CommitteType_W == null)
	        	    {
						_CommitteType_W = TearOff.CommitteType;
					}
					return _CommitteType_W;
				}
			}

			public AggregateParameter FileType
		    {
				get
		        {
					if(_FileType_W == null)
	        	    {
						_FileType_W = TearOff.FileType;
					}
					return _FileType_W;
				}
			}

			public AggregateParameter Dosage_form
		    {
				get
		        {
					if(_Dosage_form_W == null)
	        	    {
						_Dosage_form_W = TearOff.Dosage_form;
					}
					return _Dosage_form_W;
				}
			}

			public AggregateParameter ManufactureName
		    {
				get
		        {
					if(_ManufactureName_W == null)
	        	    {
						_ManufactureName_W = TearOff.ManufactureName;
					}
					return _ManufactureName_W;
				}
			}

			public AggregateParameter TradeName
		    {
				get
		        {
					if(_TradeName_W == null)
	        	    {
						_TradeName_W = TearOff.TradeName;
					}
					return _TradeName_W;
				}
			}

			public AggregateParameter CompanyPrice
		    {
				get
		        {
					if(_CompanyPrice_W == null)
	        	    {
						_CompanyPrice_W = TearOff.CompanyPrice;
					}
					return _CompanyPrice_W;
				}
			}

			public AggregateParameter SubmissionDate
		    {
				get
		        {
					if(_SubmissionDate_W == null)
	        	    {
						_SubmissionDate_W = TearOff.SubmissionDate;
					}
					return _SubmissionDate_W;
				}
			}

			public AggregateParameter Pack
		    {
				get
		        {
					if(_Pack_W == null)
	        	    {
						_Pack_W = TearOff.Pack;
					}
					return _Pack_W;
				}
			}

			public AggregateParameter FileNo
		    {
				get
		        {
					if(_FileNo_W == null)
	        	    {
						_FileNo_W = TearOff.FileNo;
					}
					return _FileNo_W;
				}
			}

			public AggregateParameter GenericStrength
		    {
				get
		        {
					if(_GenericStrength_W == null)
	        	    {
						_GenericStrength_W = TearOff.GenericStrength;
					}
					return _GenericStrength_W;
				}
			}

			public AggregateParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public AggregateParameter Generic
		    {
				get
		        {
					if(_Generic_W == null)
	        	    {
						_Generic_W = TearOff.Generic;
					}
					return _Generic_W;
				}
			}

			public AggregateParameter PricingStatusID
		    {
				get
		        {
					if(_PricingStatusID_W == null)
	        	    {
						_PricingStatusID_W = TearOff.PricingStatusID;
					}
					return _PricingStatusID_W;
				}
			}

			public AggregateParameter CommitteTypeID
		    {
				get
		        {
					if(_CommitteTypeID_W == null)
	        	    {
						_CommitteTypeID_W = TearOff.CommitteTypeID;
					}
					return _CommitteTypeID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter ManufactureID
		    {
				get
		        {
					if(_ManufactureID_W == null)
	        	    {
						_ManufactureID_W = TearOff.ManufactureID;
					}
					return _ManufactureID_W;
				}
			}

			public AggregateParameter TradePricingID
		    {
				get
		        {
					if(_TradePricingID_W == null)
	        	    {
						_TradePricingID_W = TearOff.TradePricingID;
					}
					return _TradePricingID_W;
				}
			}

			public AggregateParameter FileTypeID
		    {
				get
		        {
					if(_FileTypeID_W == null)
	        	    {
						_FileTypeID_W = TearOff.FileTypeID;
					}
					return _FileTypeID_W;
				}
			}

			public AggregateParameter Mail1
		    {
				get
		        {
					if(_Mail1_W == null)
	        	    {
						_Mail1_W = TearOff.Mail1;
					}
					return _Mail1_W;
				}
			}

			public AggregateParameter Mail2
		    {
				get
		        {
					if(_Mail2_W == null)
	        	    {
						_Mail2_W = TearOff.Mail2;
					}
					return _Mail2_W;
				}
			}

			public AggregateParameter Mail3
		    {
				get
		        {
					if(_Mail3_W == null)
	        	    {
						_Mail3_W = TearOff.Mail3;
					}
					return _Mail3_W;
				}
			}

			private AggregateParameter _CompNameEng_W = null;
			private AggregateParameter _Status_W = null;
			private AggregateParameter _CommitteType_W = null;
			private AggregateParameter _FileType_W = null;
			private AggregateParameter _Dosage_form_W = null;
			private AggregateParameter _ManufactureName_W = null;
			private AggregateParameter _TradeName_W = null;
			private AggregateParameter _CompanyPrice_W = null;
			private AggregateParameter _SubmissionDate_W = null;
			private AggregateParameter _Pack_W = null;
			private AggregateParameter _FileNo_W = null;
			private AggregateParameter _GenericStrength_W = null;
			private AggregateParameter _FilePath_W = null;
			private AggregateParameter _Generic_W = null;
			private AggregateParameter _PricingStatusID_W = null;
			private AggregateParameter _CommitteTypeID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _ManufactureID_W = null;
			private AggregateParameter _TradePricingID_W = null;
			private AggregateParameter _FileTypeID_W = null;
			private AggregateParameter _Mail1_W = null;
			private AggregateParameter _Mail2_W = null;
			private AggregateParameter _Mail3_W = null;

			public void AggregateClauseReset()
			{
				_CompNameEng_W = null;
				_Status_W = null;
				_CommitteType_W = null;
				_FileType_W = null;
				_Dosage_form_W = null;
				_ManufactureName_W = null;
				_TradeName_W = null;
				_CompanyPrice_W = null;
				_SubmissionDate_W = null;
				_Pack_W = null;
				_FileNo_W = null;
				_GenericStrength_W = null;
				_FilePath_W = null;
				_Generic_W = null;
				_PricingStatusID_W = null;
				_CommitteTypeID_W = null;
				_CompanyID_W = null;
				_ManufactureID_W = null;
				_TradePricingID_W = null;
				_FileTypeID_W = null;
				_Mail1_W = null;
				_Mail2_W = null;
				_Mail3_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
