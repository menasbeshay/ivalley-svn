
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ProductImages : SqlClientEntity
	{
		public _ProductImages()
		{
			this.QuerySource = "ProductImages";
			this.MappingName = "ProductImages";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductImagesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ProductImageID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ProductImageID, ProductImageID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductImagesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ProductImageID
			{
				get
				{
					return new SqlParameter("@ProductImageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ProductID
			{
				get
				{
					return new SqlParameter("@ProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ImagePath
			{
				get
				{
					return new SqlParameter("@ImagePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter NameAr
			{
				get
				{
					return new SqlParameter("@NameAr", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter NameEn
			{
				get
				{
					return new SqlParameter("@NameEn", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ProductImageID = "ProductImageID";
            public const string ProductID = "ProductID";
            public const string ImagePath = "ImagePath";
            public const string NameAr = "NameAr";
            public const string NameEn = "NameEn";
            public const string IsActive = "IsActive";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductImageID] = _ProductImages.PropertyNames.ProductImageID;
					ht[ProductID] = _ProductImages.PropertyNames.ProductID;
					ht[ImagePath] = _ProductImages.PropertyNames.ImagePath;
					ht[NameAr] = _ProductImages.PropertyNames.NameAr;
					ht[NameEn] = _ProductImages.PropertyNames.NameEn;
					ht[IsActive] = _ProductImages.PropertyNames.IsActive;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ProductImageID = "ProductImageID";
            public const string ProductID = "ProductID";
            public const string ImagePath = "ImagePath";
            public const string NameAr = "NameAr";
            public const string NameEn = "NameEn";
            public const string IsActive = "IsActive";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductImageID] = _ProductImages.ColumnNames.ProductImageID;
					ht[ProductID] = _ProductImages.ColumnNames.ProductID;
					ht[ImagePath] = _ProductImages.ColumnNames.ImagePath;
					ht[NameAr] = _ProductImages.ColumnNames.NameAr;
					ht[NameEn] = _ProductImages.ColumnNames.NameEn;
					ht[IsActive] = _ProductImages.ColumnNames.IsActive;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ProductImageID = "s_ProductImageID";
            public const string ProductID = "s_ProductID";
            public const string ImagePath = "s_ImagePath";
            public const string NameAr = "s_NameAr";
            public const string NameEn = "s_NameEn";
            public const string IsActive = "s_IsActive";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ProductImageID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductImageID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductImageID, value);
			}
		}

		public virtual int ProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductID, value);
			}
		}

		public virtual string ImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.ImagePath, value);
			}
		}

		public virtual string NameAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.NameAr);
			}
			set
	        {
				base.Setstring(ColumnNames.NameAr, value);
			}
		}

		public virtual string NameEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.NameEn);
			}
			set
	        {
				base.Setstring(ColumnNames.NameEn, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ProductImageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductImageID) ? string.Empty : base.GetintAsString(ColumnNames.ProductImageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductImageID);
				else
					this.ProductImageID = base.SetintAsString(ColumnNames.ProductImageID, value);
			}
		}

		public virtual string s_ProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductID) ? string.Empty : base.GetintAsString(ColumnNames.ProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductID);
				else
					this.ProductID = base.SetintAsString(ColumnNames.ProductID, value);
			}
		}

		public virtual string s_ImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.ImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImagePath);
				else
					this.ImagePath = base.SetstringAsString(ColumnNames.ImagePath, value);
			}
		}

		public virtual string s_NameAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NameAr) ? string.Empty : base.GetstringAsString(ColumnNames.NameAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NameAr);
				else
					this.NameAr = base.SetstringAsString(ColumnNames.NameAr, value);
			}
		}

		public virtual string s_NameEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NameEn) ? string.Empty : base.GetstringAsString(ColumnNames.NameEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NameEn);
				else
					this.NameEn = base.SetstringAsString(ColumnNames.NameEn, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ProductImageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductImageID, Parameters.ProductImageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NameAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NameAr, Parameters.NameAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NameEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NameEn, Parameters.NameEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ProductImageID
		    {
				get
		        {
					if(_ProductImageID_W == null)
	        	    {
						_ProductImageID_W = TearOff.ProductImageID;
					}
					return _ProductImageID_W;
				}
			}

			public WhereParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public WhereParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public WhereParameter NameAr
		    {
				get
		        {
					if(_NameAr_W == null)
	        	    {
						_NameAr_W = TearOff.NameAr;
					}
					return _NameAr_W;
				}
			}

			public WhereParameter NameEn
		    {
				get
		        {
					if(_NameEn_W == null)
	        	    {
						_NameEn_W = TearOff.NameEn;
					}
					return _NameEn_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private WhereParameter _ProductImageID_W = null;
			private WhereParameter _ProductID_W = null;
			private WhereParameter _ImagePath_W = null;
			private WhereParameter _NameAr_W = null;
			private WhereParameter _NameEn_W = null;
			private WhereParameter _IsActive_W = null;

			public void WhereClauseReset()
			{
				_ProductImageID_W = null;
				_ProductID_W = null;
				_ImagePath_W = null;
				_NameAr_W = null;
				_NameEn_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ProductImageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductImageID, Parameters.ProductImageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NameAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NameAr, Parameters.NameAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NameEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NameEn, Parameters.NameEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ProductImageID
		    {
				get
		        {
					if(_ProductImageID_W == null)
	        	    {
						_ProductImageID_W = TearOff.ProductImageID;
					}
					return _ProductImageID_W;
				}
			}

			public AggregateParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public AggregateParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public AggregateParameter NameAr
		    {
				get
		        {
					if(_NameAr_W == null)
	        	    {
						_NameAr_W = TearOff.NameAr;
					}
					return _NameAr_W;
				}
			}

			public AggregateParameter NameEn
		    {
				get
		        {
					if(_NameEn_W == null)
	        	    {
						_NameEn_W = TearOff.NameEn;
					}
					return _NameEn_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private AggregateParameter _ProductImageID_W = null;
			private AggregateParameter _ProductID_W = null;
			private AggregateParameter _ImagePath_W = null;
			private AggregateParameter _NameAr_W = null;
			private AggregateParameter _NameEn_W = null;
			private AggregateParameter _IsActive_W = null;

			public void AggregateClauseReset()
			{
				_ProductImageID_W = null;
				_ProductID_W = null;
				_ImagePath_W = null;
				_NameAr_W = null;
				_NameEn_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductImagesInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductImagesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductImagesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ProductImageID);
			p.SourceColumn = ColumnNames.ProductImageID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ProductImageID);
			p.SourceColumn = ColumnNames.ProductImageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProductID);
			p.SourceColumn = ColumnNames.ProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImagePath);
			p.SourceColumn = ColumnNames.ImagePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NameAr);
			p.SourceColumn = ColumnNames.NameAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NameEn);
			p.SourceColumn = ColumnNames.NameEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
