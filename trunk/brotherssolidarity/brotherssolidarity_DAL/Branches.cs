
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Branches : SqlClientEntity
	{
		public _Branches()
		{
			this.QuerySource = "Branches";
			this.MappingName = "Branches";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BranchesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int BranchID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.BranchID, BranchID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_BranchesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter BranchID
			{
				get
				{
					return new SqlParameter("@BranchID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BranchName
			{
				get
				{
					return new SqlParameter("@BranchName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter BranchAddress
			{
				get
				{
					return new SqlParameter("@BranchAddress", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter Telephone
			{
				get
				{
					return new SqlParameter("@Telephone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ManagerName
			{
				get
				{
					return new SqlParameter("@ManagerName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Duration_Hours
			{
				get
				{
					return new SqlParameter("@Duration_Hours", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ImagePath
			{
				get
				{
					return new SqlParameter("@ImagePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter GoogleMapLink
			{
				get
				{
					return new SqlParameter("@GoogleMapLink", SqlDbType.NVarChar, 1000);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string BranchID = "BranchID";
            public const string BranchName = "BranchName";
            public const string BranchAddress = "BranchAddress";
            public const string Telephone = "Telephone";
            public const string ManagerName = "ManagerName";
            public const string Duration_Hours = "Duration_Hours";
            public const string ImagePath = "ImagePath";
            public const string GoogleMapLink = "GoogleMapLink";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BranchID] = _Branches.PropertyNames.BranchID;
					ht[BranchName] = _Branches.PropertyNames.BranchName;
					ht[BranchAddress] = _Branches.PropertyNames.BranchAddress;
					ht[Telephone] = _Branches.PropertyNames.Telephone;
					ht[ManagerName] = _Branches.PropertyNames.ManagerName;
					ht[Duration_Hours] = _Branches.PropertyNames.Duration_Hours;
					ht[ImagePath] = _Branches.PropertyNames.ImagePath;
					ht[GoogleMapLink] = _Branches.PropertyNames.GoogleMapLink;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string BranchID = "BranchID";
            public const string BranchName = "BranchName";
            public const string BranchAddress = "BranchAddress";
            public const string Telephone = "Telephone";
            public const string ManagerName = "ManagerName";
            public const string Duration_Hours = "Duration_Hours";
            public const string ImagePath = "ImagePath";
            public const string GoogleMapLink = "GoogleMapLink";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[BranchID] = _Branches.ColumnNames.BranchID;
					ht[BranchName] = _Branches.ColumnNames.BranchName;
					ht[BranchAddress] = _Branches.ColumnNames.BranchAddress;
					ht[Telephone] = _Branches.ColumnNames.Telephone;
					ht[ManagerName] = _Branches.ColumnNames.ManagerName;
					ht[Duration_Hours] = _Branches.ColumnNames.Duration_Hours;
					ht[ImagePath] = _Branches.ColumnNames.ImagePath;
					ht[GoogleMapLink] = _Branches.ColumnNames.GoogleMapLink;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string BranchID = "s_BranchID";
            public const string BranchName = "s_BranchName";
            public const string BranchAddress = "s_BranchAddress";
            public const string Telephone = "s_Telephone";
            public const string ManagerName = "s_ManagerName";
            public const string Duration_Hours = "s_Duration_Hours";
            public const string ImagePath = "s_ImagePath";
            public const string GoogleMapLink = "s_GoogleMapLink";

		}
		#endregion		
		
		#region Properties
	
		public virtual int BranchID
	    {
			get
	        {
				return base.Getint(ColumnNames.BranchID);
			}
			set
	        {
				base.Setint(ColumnNames.BranchID, value);
			}
		}

		public virtual string BranchName
	    {
			get
	        {
				return base.Getstring(ColumnNames.BranchName);
			}
			set
	        {
				base.Setstring(ColumnNames.BranchName, value);
			}
		}

		public virtual string BranchAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.BranchAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.BranchAddress, value);
			}
		}

		public virtual string Telephone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Telephone);
			}
			set
	        {
				base.Setstring(ColumnNames.Telephone, value);
			}
		}

		public virtual string ManagerName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ManagerName);
			}
			set
	        {
				base.Setstring(ColumnNames.ManagerName, value);
			}
		}

		public virtual string Duration_Hours
	    {
			get
	        {
				return base.Getstring(ColumnNames.Duration_Hours);
			}
			set
	        {
				base.Setstring(ColumnNames.Duration_Hours, value);
			}
		}

		public virtual string ImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.ImagePath, value);
			}
		}

		public virtual string GoogleMapLink
	    {
			get
	        {
				return base.Getstring(ColumnNames.GoogleMapLink);
			}
			set
	        {
				base.Setstring(ColumnNames.GoogleMapLink, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_BranchID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchID) ? string.Empty : base.GetintAsString(ColumnNames.BranchID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchID);
				else
					this.BranchID = base.SetintAsString(ColumnNames.BranchID, value);
			}
		}

		public virtual string s_BranchName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchName) ? string.Empty : base.GetstringAsString(ColumnNames.BranchName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchName);
				else
					this.BranchName = base.SetstringAsString(ColumnNames.BranchName, value);
			}
		}

		public virtual string s_BranchAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchAddress) ? string.Empty : base.GetstringAsString(ColumnNames.BranchAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchAddress);
				else
					this.BranchAddress = base.SetstringAsString(ColumnNames.BranchAddress, value);
			}
		}

		public virtual string s_Telephone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Telephone) ? string.Empty : base.GetstringAsString(ColumnNames.Telephone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Telephone);
				else
					this.Telephone = base.SetstringAsString(ColumnNames.Telephone, value);
			}
		}

		public virtual string s_ManagerName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManagerName) ? string.Empty : base.GetstringAsString(ColumnNames.ManagerName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManagerName);
				else
					this.ManagerName = base.SetstringAsString(ColumnNames.ManagerName, value);
			}
		}

		public virtual string s_Duration_Hours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Duration_Hours) ? string.Empty : base.GetstringAsString(ColumnNames.Duration_Hours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Duration_Hours);
				else
					this.Duration_Hours = base.SetstringAsString(ColumnNames.Duration_Hours, value);
			}
		}

		public virtual string s_ImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.ImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImagePath);
				else
					this.ImagePath = base.SetstringAsString(ColumnNames.ImagePath, value);
			}
		}

		public virtual string s_GoogleMapLink
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoogleMapLink) ? string.Empty : base.GetstringAsString(ColumnNames.GoogleMapLink);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoogleMapLink);
				else
					this.GoogleMapLink = base.SetstringAsString(ColumnNames.GoogleMapLink, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter BranchID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BranchName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchName, Parameters.BranchName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BranchAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchAddress, Parameters.BranchAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Telephone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManagerName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManagerName, Parameters.ManagerName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Duration_Hours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Duration_Hours, Parameters.Duration_Hours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoogleMapLink
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoogleMapLink, Parameters.GoogleMapLink);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public WhereParameter BranchName
		    {
				get
		        {
					if(_BranchName_W == null)
	        	    {
						_BranchName_W = TearOff.BranchName;
					}
					return _BranchName_W;
				}
			}

			public WhereParameter BranchAddress
		    {
				get
		        {
					if(_BranchAddress_W == null)
	        	    {
						_BranchAddress_W = TearOff.BranchAddress;
					}
					return _BranchAddress_W;
				}
			}

			public WhereParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public WhereParameter ManagerName
		    {
				get
		        {
					if(_ManagerName_W == null)
	        	    {
						_ManagerName_W = TearOff.ManagerName;
					}
					return _ManagerName_W;
				}
			}

			public WhereParameter Duration_Hours
		    {
				get
		        {
					if(_Duration_Hours_W == null)
	        	    {
						_Duration_Hours_W = TearOff.Duration_Hours;
					}
					return _Duration_Hours_W;
				}
			}

			public WhereParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public WhereParameter GoogleMapLink
		    {
				get
		        {
					if(_GoogleMapLink_W == null)
	        	    {
						_GoogleMapLink_W = TearOff.GoogleMapLink;
					}
					return _GoogleMapLink_W;
				}
			}

			private WhereParameter _BranchID_W = null;
			private WhereParameter _BranchName_W = null;
			private WhereParameter _BranchAddress_W = null;
			private WhereParameter _Telephone_W = null;
			private WhereParameter _ManagerName_W = null;
			private WhereParameter _Duration_Hours_W = null;
			private WhereParameter _ImagePath_W = null;
			private WhereParameter _GoogleMapLink_W = null;

			public void WhereClauseReset()
			{
				_BranchID_W = null;
				_BranchName_W = null;
				_BranchAddress_W = null;
				_Telephone_W = null;
				_ManagerName_W = null;
				_Duration_Hours_W = null;
				_ImagePath_W = null;
				_GoogleMapLink_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter BranchID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BranchName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchName, Parameters.BranchName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BranchAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchAddress, Parameters.BranchAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Telephone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManagerName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManagerName, Parameters.ManagerName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Duration_Hours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Duration_Hours, Parameters.Duration_Hours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoogleMapLink
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoogleMapLink, Parameters.GoogleMapLink);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public AggregateParameter BranchName
		    {
				get
		        {
					if(_BranchName_W == null)
	        	    {
						_BranchName_W = TearOff.BranchName;
					}
					return _BranchName_W;
				}
			}

			public AggregateParameter BranchAddress
		    {
				get
		        {
					if(_BranchAddress_W == null)
	        	    {
						_BranchAddress_W = TearOff.BranchAddress;
					}
					return _BranchAddress_W;
				}
			}

			public AggregateParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public AggregateParameter ManagerName
		    {
				get
		        {
					if(_ManagerName_W == null)
	        	    {
						_ManagerName_W = TearOff.ManagerName;
					}
					return _ManagerName_W;
				}
			}

			public AggregateParameter Duration_Hours
		    {
				get
		        {
					if(_Duration_Hours_W == null)
	        	    {
						_Duration_Hours_W = TearOff.Duration_Hours;
					}
					return _Duration_Hours_W;
				}
			}

			public AggregateParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public AggregateParameter GoogleMapLink
		    {
				get
		        {
					if(_GoogleMapLink_W == null)
	        	    {
						_GoogleMapLink_W = TearOff.GoogleMapLink;
					}
					return _GoogleMapLink_W;
				}
			}

			private AggregateParameter _BranchID_W = null;
			private AggregateParameter _BranchName_W = null;
			private AggregateParameter _BranchAddress_W = null;
			private AggregateParameter _Telephone_W = null;
			private AggregateParameter _ManagerName_W = null;
			private AggregateParameter _Duration_Hours_W = null;
			private AggregateParameter _ImagePath_W = null;
			private AggregateParameter _GoogleMapLink_W = null;

			public void AggregateClauseReset()
			{
				_BranchID_W = null;
				_BranchName_W = null;
				_BranchAddress_W = null;
				_Telephone_W = null;
				_ManagerName_W = null;
				_Duration_Hours_W = null;
				_ImagePath_W = null;
				_GoogleMapLink_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BranchesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.BranchID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BranchesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_BranchesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.BranchID);
			p.SourceColumn = ColumnNames.BranchID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.BranchID);
			p.SourceColumn = ColumnNames.BranchID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BranchName);
			p.SourceColumn = ColumnNames.BranchName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BranchAddress);
			p.SourceColumn = ColumnNames.BranchAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Telephone);
			p.SourceColumn = ColumnNames.Telephone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManagerName);
			p.SourceColumn = ColumnNames.ManagerName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Duration_Hours);
			p.SourceColumn = ColumnNames.Duration_Hours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImagePath);
			p.SourceColumn = ColumnNames.ImagePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GoogleMapLink);
			p.SourceColumn = ColumnNames.GoogleMapLink;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
