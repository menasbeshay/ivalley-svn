
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _PageFiles : SqlClientEntity
	{
		public _PageFiles()
		{
			this.QuerySource = "PageFiles";
			this.MappingName = "PageFiles";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PageFilesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PageFileID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PageFileID, PageFileID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PageFilesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PageFileID
			{
				get
				{
					return new SqlParameter("@PageFileID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PageID
			{
				get
				{
					return new SqlParameter("@PageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FilePath
			{
				get
				{
					return new SqlParameter("@FilePath", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter FileNameAr
			{
				get
				{
					return new SqlParameter("@FileNameAr", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FileNameEn
			{
				get
				{
					return new SqlParameter("@FileNameEn", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter FileDescriptionAr
			{
				get
				{
					return new SqlParameter("@FileDescriptionAr", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter FileDescriptionEn
			{
				get
				{
					return new SqlParameter("@FileDescriptionEn", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PageFileID = "PageFileID";
            public const string PageID = "PageID";
            public const string FilePath = "FilePath";
            public const string FileNameAr = "FileNameAr";
            public const string FileNameEn = "FileNameEn";
            public const string FileDescriptionAr = "FileDescriptionAr";
            public const string FileDescriptionEn = "FileDescriptionEn";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PageFileID] = _PageFiles.PropertyNames.PageFileID;
					ht[PageID] = _PageFiles.PropertyNames.PageID;
					ht[FilePath] = _PageFiles.PropertyNames.FilePath;
					ht[FileNameAr] = _PageFiles.PropertyNames.FileNameAr;
					ht[FileNameEn] = _PageFiles.PropertyNames.FileNameEn;
					ht[FileDescriptionAr] = _PageFiles.PropertyNames.FileDescriptionAr;
					ht[FileDescriptionEn] = _PageFiles.PropertyNames.FileDescriptionEn;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PageFileID = "PageFileID";
            public const string PageID = "PageID";
            public const string FilePath = "FilePath";
            public const string FileNameAr = "FileNameAr";
            public const string FileNameEn = "FileNameEn";
            public const string FileDescriptionAr = "FileDescriptionAr";
            public const string FileDescriptionEn = "FileDescriptionEn";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PageFileID] = _PageFiles.ColumnNames.PageFileID;
					ht[PageID] = _PageFiles.ColumnNames.PageID;
					ht[FilePath] = _PageFiles.ColumnNames.FilePath;
					ht[FileNameAr] = _PageFiles.ColumnNames.FileNameAr;
					ht[FileNameEn] = _PageFiles.ColumnNames.FileNameEn;
					ht[FileDescriptionAr] = _PageFiles.ColumnNames.FileDescriptionAr;
					ht[FileDescriptionEn] = _PageFiles.ColumnNames.FileDescriptionEn;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PageFileID = "s_PageFileID";
            public const string PageID = "s_PageID";
            public const string FilePath = "s_FilePath";
            public const string FileNameAr = "s_FileNameAr";
            public const string FileNameEn = "s_FileNameEn";
            public const string FileDescriptionAr = "s_FileDescriptionAr";
            public const string FileDescriptionEn = "s_FileDescriptionEn";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PageFileID
	    {
			get
	        {
				return base.Getint(ColumnNames.PageFileID);
			}
			set
	        {
				base.Setint(ColumnNames.PageFileID, value);
			}
		}

		public virtual int PageID
	    {
			get
	        {
				return base.Getint(ColumnNames.PageID);
			}
			set
	        {
				base.Setint(ColumnNames.PageID, value);
			}
		}

		public virtual string FilePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilePath);
			}
			set
	        {
				base.Setstring(ColumnNames.FilePath, value);
			}
		}

		public virtual string FileNameAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileNameAr);
			}
			set
	        {
				base.Setstring(ColumnNames.FileNameAr, value);
			}
		}

		public virtual string FileNameEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileNameEn);
			}
			set
	        {
				base.Setstring(ColumnNames.FileNameEn, value);
			}
		}

		public virtual string FileDescriptionAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileDescriptionAr);
			}
			set
	        {
				base.Setstring(ColumnNames.FileDescriptionAr, value);
			}
		}

		public virtual string FileDescriptionEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.FileDescriptionEn);
			}
			set
	        {
				base.Setstring(ColumnNames.FileDescriptionEn, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PageFileID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PageFileID) ? string.Empty : base.GetintAsString(ColumnNames.PageFileID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PageFileID);
				else
					this.PageFileID = base.SetintAsString(ColumnNames.PageFileID, value);
			}
		}

		public virtual string s_PageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PageID) ? string.Empty : base.GetintAsString(ColumnNames.PageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PageID);
				else
					this.PageID = base.SetintAsString(ColumnNames.PageID, value);
			}
		}

		public virtual string s_FilePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilePath) ? string.Empty : base.GetstringAsString(ColumnNames.FilePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilePath);
				else
					this.FilePath = base.SetstringAsString(ColumnNames.FilePath, value);
			}
		}

		public virtual string s_FileNameAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileNameAr) ? string.Empty : base.GetstringAsString(ColumnNames.FileNameAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileNameAr);
				else
					this.FileNameAr = base.SetstringAsString(ColumnNames.FileNameAr, value);
			}
		}

		public virtual string s_FileNameEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileNameEn) ? string.Empty : base.GetstringAsString(ColumnNames.FileNameEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileNameEn);
				else
					this.FileNameEn = base.SetstringAsString(ColumnNames.FileNameEn, value);
			}
		}

		public virtual string s_FileDescriptionAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileDescriptionAr) ? string.Empty : base.GetstringAsString(ColumnNames.FileDescriptionAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileDescriptionAr);
				else
					this.FileDescriptionAr = base.SetstringAsString(ColumnNames.FileDescriptionAr, value);
			}
		}

		public virtual string s_FileDescriptionEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FileDescriptionEn) ? string.Empty : base.GetstringAsString(ColumnNames.FileDescriptionEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FileDescriptionEn);
				else
					this.FileDescriptionEn = base.SetstringAsString(ColumnNames.FileDescriptionEn, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PageFileID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PageFileID, Parameters.PageFileID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PageID, Parameters.PageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileNameAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileNameAr, Parameters.FileNameAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileNameEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileNameEn, Parameters.FileNameEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileDescriptionAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileDescriptionAr, Parameters.FileDescriptionAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FileDescriptionEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FileDescriptionEn, Parameters.FileDescriptionEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PageFileID
		    {
				get
		        {
					if(_PageFileID_W == null)
	        	    {
						_PageFileID_W = TearOff.PageFileID;
					}
					return _PageFileID_W;
				}
			}

			public WhereParameter PageID
		    {
				get
		        {
					if(_PageID_W == null)
	        	    {
						_PageID_W = TearOff.PageID;
					}
					return _PageID_W;
				}
			}

			public WhereParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public WhereParameter FileNameAr
		    {
				get
		        {
					if(_FileNameAr_W == null)
	        	    {
						_FileNameAr_W = TearOff.FileNameAr;
					}
					return _FileNameAr_W;
				}
			}

			public WhereParameter FileNameEn
		    {
				get
		        {
					if(_FileNameEn_W == null)
	        	    {
						_FileNameEn_W = TearOff.FileNameEn;
					}
					return _FileNameEn_W;
				}
			}

			public WhereParameter FileDescriptionAr
		    {
				get
		        {
					if(_FileDescriptionAr_W == null)
	        	    {
						_FileDescriptionAr_W = TearOff.FileDescriptionAr;
					}
					return _FileDescriptionAr_W;
				}
			}

			public WhereParameter FileDescriptionEn
		    {
				get
		        {
					if(_FileDescriptionEn_W == null)
	        	    {
						_FileDescriptionEn_W = TearOff.FileDescriptionEn;
					}
					return _FileDescriptionEn_W;
				}
			}

			private WhereParameter _PageFileID_W = null;
			private WhereParameter _PageID_W = null;
			private WhereParameter _FilePath_W = null;
			private WhereParameter _FileNameAr_W = null;
			private WhereParameter _FileNameEn_W = null;
			private WhereParameter _FileDescriptionAr_W = null;
			private WhereParameter _FileDescriptionEn_W = null;

			public void WhereClauseReset()
			{
				_PageFileID_W = null;
				_PageID_W = null;
				_FilePath_W = null;
				_FileNameAr_W = null;
				_FileNameEn_W = null;
				_FileDescriptionAr_W = null;
				_FileDescriptionEn_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PageFileID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PageFileID, Parameters.PageFileID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PageID, Parameters.PageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilePath, Parameters.FilePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileNameAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileNameAr, Parameters.FileNameAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileNameEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileNameEn, Parameters.FileNameEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileDescriptionAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileDescriptionAr, Parameters.FileDescriptionAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FileDescriptionEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FileDescriptionEn, Parameters.FileDescriptionEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PageFileID
		    {
				get
		        {
					if(_PageFileID_W == null)
	        	    {
						_PageFileID_W = TearOff.PageFileID;
					}
					return _PageFileID_W;
				}
			}

			public AggregateParameter PageID
		    {
				get
		        {
					if(_PageID_W == null)
	        	    {
						_PageID_W = TearOff.PageID;
					}
					return _PageID_W;
				}
			}

			public AggregateParameter FilePath
		    {
				get
		        {
					if(_FilePath_W == null)
	        	    {
						_FilePath_W = TearOff.FilePath;
					}
					return _FilePath_W;
				}
			}

			public AggregateParameter FileNameAr
		    {
				get
		        {
					if(_FileNameAr_W == null)
	        	    {
						_FileNameAr_W = TearOff.FileNameAr;
					}
					return _FileNameAr_W;
				}
			}

			public AggregateParameter FileNameEn
		    {
				get
		        {
					if(_FileNameEn_W == null)
	        	    {
						_FileNameEn_W = TearOff.FileNameEn;
					}
					return _FileNameEn_W;
				}
			}

			public AggregateParameter FileDescriptionAr
		    {
				get
		        {
					if(_FileDescriptionAr_W == null)
	        	    {
						_FileDescriptionAr_W = TearOff.FileDescriptionAr;
					}
					return _FileDescriptionAr_W;
				}
			}

			public AggregateParameter FileDescriptionEn
		    {
				get
		        {
					if(_FileDescriptionEn_W == null)
	        	    {
						_FileDescriptionEn_W = TearOff.FileDescriptionEn;
					}
					return _FileDescriptionEn_W;
				}
			}

			private AggregateParameter _PageFileID_W = null;
			private AggregateParameter _PageID_W = null;
			private AggregateParameter _FilePath_W = null;
			private AggregateParameter _FileNameAr_W = null;
			private AggregateParameter _FileNameEn_W = null;
			private AggregateParameter _FileDescriptionAr_W = null;
			private AggregateParameter _FileDescriptionEn_W = null;

			public void AggregateClauseReset()
			{
				_PageFileID_W = null;
				_PageID_W = null;
				_FilePath_W = null;
				_FileNameAr_W = null;
				_FileNameEn_W = null;
				_FileDescriptionAr_W = null;
				_FileDescriptionEn_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PageFilesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PageFileID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PageFilesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PageFilesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PageFileID);
			p.SourceColumn = ColumnNames.PageFileID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PageFileID);
			p.SourceColumn = ColumnNames.PageFileID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PageID);
			p.SourceColumn = ColumnNames.PageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilePath);
			p.SourceColumn = ColumnNames.FilePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileNameAr);
			p.SourceColumn = ColumnNames.FileNameAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileNameEn);
			p.SourceColumn = ColumnNames.FileNameEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileDescriptionAr);
			p.SourceColumn = ColumnNames.FileDescriptionAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FileDescriptionEn);
			p.SourceColumn = ColumnNames.FileDescriptionEn;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
