
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Product : SqlClientEntity
	{
		public _Product()
		{
			this.QuerySource = "Product";
			this.MappingName = "Product";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ProductID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ProductID, ProductID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ProductLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ProductID
			{
				get
				{
					return new SqlParameter("@ProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CatID
			{
				get
				{
					return new SqlParameter("@CatID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NameAr
			{
				get
				{
					return new SqlParameter("@NameAr", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter NameEn
			{
				get
				{
					return new SqlParameter("@NameEn", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter DescriptionAr
			{
				get
				{
					return new SqlParameter("@DescriptionAr", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter DescriptionEn
			{
				get
				{
					return new SqlParameter("@DescriptionEn", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter BrandName
			{
				get
				{
					return new SqlParameter("@BrandName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ExpireyDate
			{
				get
				{
					return new SqlParameter("@ExpireyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Price
			{
				get
				{
					return new SqlParameter("@Price", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter OfferPrice
			{
				get
				{
					return new SqlParameter("@OfferPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter MainImagePath
			{
				get
				{
					return new SqlParameter("@MainImagePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter YouTubeLink
			{
				get
				{
					return new SqlParameter("@YouTubeLink", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter AppearInHome
			{
				get
				{
					return new SqlParameter("@AppearInHome", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AvailableInStock
			{
				get
				{
					return new SqlParameter("@AvailableInStock", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ProductID = "ProductID";
            public const string CatID = "CatID";
            public const string NameAr = "NameAr";
            public const string NameEn = "NameEn";
            public const string DescriptionAr = "DescriptionAr";
            public const string DescriptionEn = "DescriptionEn";
            public const string Notes = "Notes";
            public const string BrandName = "BrandName";
            public const string ExpireyDate = "ExpireyDate";
            public const string Price = "Price";
            public const string OfferPrice = "OfferPrice";
            public const string MainImagePath = "MainImagePath";
            public const string YouTubeLink = "YouTubeLink";
            public const string AppearInHome = "AppearInHome";
            public const string IsActive = "IsActive";
            public const string AvailableInStock = "AvailableInStock";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductID] = _Product.PropertyNames.ProductID;
					ht[CatID] = _Product.PropertyNames.CatID;
					ht[NameAr] = _Product.PropertyNames.NameAr;
					ht[NameEn] = _Product.PropertyNames.NameEn;
					ht[DescriptionAr] = _Product.PropertyNames.DescriptionAr;
					ht[DescriptionEn] = _Product.PropertyNames.DescriptionEn;
					ht[Notes] = _Product.PropertyNames.Notes;
					ht[BrandName] = _Product.PropertyNames.BrandName;
					ht[ExpireyDate] = _Product.PropertyNames.ExpireyDate;
					ht[Price] = _Product.PropertyNames.Price;
					ht[OfferPrice] = _Product.PropertyNames.OfferPrice;
					ht[MainImagePath] = _Product.PropertyNames.MainImagePath;
					ht[YouTubeLink] = _Product.PropertyNames.YouTubeLink;
					ht[AppearInHome] = _Product.PropertyNames.AppearInHome;
					ht[IsActive] = _Product.PropertyNames.IsActive;
					ht[AvailableInStock] = _Product.PropertyNames.AvailableInStock;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ProductID = "ProductID";
            public const string CatID = "CatID";
            public const string NameAr = "NameAr";
            public const string NameEn = "NameEn";
            public const string DescriptionAr = "DescriptionAr";
            public const string DescriptionEn = "DescriptionEn";
            public const string Notes = "Notes";
            public const string BrandName = "BrandName";
            public const string ExpireyDate = "ExpireyDate";
            public const string Price = "Price";
            public const string OfferPrice = "OfferPrice";
            public const string MainImagePath = "MainImagePath";
            public const string YouTubeLink = "YouTubeLink";
            public const string AppearInHome = "AppearInHome";
            public const string IsActive = "IsActive";
            public const string AvailableInStock = "AvailableInStock";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ProductID] = _Product.ColumnNames.ProductID;
					ht[CatID] = _Product.ColumnNames.CatID;
					ht[NameAr] = _Product.ColumnNames.NameAr;
					ht[NameEn] = _Product.ColumnNames.NameEn;
					ht[DescriptionAr] = _Product.ColumnNames.DescriptionAr;
					ht[DescriptionEn] = _Product.ColumnNames.DescriptionEn;
					ht[Notes] = _Product.ColumnNames.Notes;
					ht[BrandName] = _Product.ColumnNames.BrandName;
					ht[ExpireyDate] = _Product.ColumnNames.ExpireyDate;
					ht[Price] = _Product.ColumnNames.Price;
					ht[OfferPrice] = _Product.ColumnNames.OfferPrice;
					ht[MainImagePath] = _Product.ColumnNames.MainImagePath;
					ht[YouTubeLink] = _Product.ColumnNames.YouTubeLink;
					ht[AppearInHome] = _Product.ColumnNames.AppearInHome;
					ht[IsActive] = _Product.ColumnNames.IsActive;
					ht[AvailableInStock] = _Product.ColumnNames.AvailableInStock;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ProductID = "s_ProductID";
            public const string CatID = "s_CatID";
            public const string NameAr = "s_NameAr";
            public const string NameEn = "s_NameEn";
            public const string DescriptionAr = "s_DescriptionAr";
            public const string DescriptionEn = "s_DescriptionEn";
            public const string Notes = "s_Notes";
            public const string BrandName = "s_BrandName";
            public const string ExpireyDate = "s_ExpireyDate";
            public const string Price = "s_Price";
            public const string OfferPrice = "s_OfferPrice";
            public const string MainImagePath = "s_MainImagePath";
            public const string YouTubeLink = "s_YouTubeLink";
            public const string AppearInHome = "s_AppearInHome";
            public const string IsActive = "s_IsActive";
            public const string AvailableInStock = "s_AvailableInStock";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ProductID
	    {
			get
	        {
				return base.Getint(ColumnNames.ProductID);
			}
			set
	        {
				base.Setint(ColumnNames.ProductID, value);
			}
		}

		public virtual int CatID
	    {
			get
	        {
				return base.Getint(ColumnNames.CatID);
			}
			set
	        {
				base.Setint(ColumnNames.CatID, value);
			}
		}

		public virtual string NameAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.NameAr);
			}
			set
	        {
				base.Setstring(ColumnNames.NameAr, value);
			}
		}

		public virtual string NameEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.NameEn);
			}
			set
	        {
				base.Setstring(ColumnNames.NameEn, value);
			}
		}

		public virtual string DescriptionAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.DescriptionAr);
			}
			set
	        {
				base.Setstring(ColumnNames.DescriptionAr, value);
			}
		}

		public virtual string DescriptionEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.DescriptionEn);
			}
			set
	        {
				base.Setstring(ColumnNames.DescriptionEn, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual string BrandName
	    {
			get
	        {
				return base.Getstring(ColumnNames.BrandName);
			}
			set
	        {
				base.Setstring(ColumnNames.BrandName, value);
			}
		}

		public virtual DateTime ExpireyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpireyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpireyDate, value);
			}
		}

		public virtual double Price
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Price);
			}
			set
	        {
				base.Setdouble(ColumnNames.Price, value);
			}
		}

		public virtual double OfferPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.OfferPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.OfferPrice, value);
			}
		}

		public virtual string MainImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.MainImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.MainImagePath, value);
			}
		}

		public virtual string YouTubeLink
	    {
			get
	        {
				return base.Getstring(ColumnNames.YouTubeLink);
			}
			set
	        {
				base.Setstring(ColumnNames.YouTubeLink, value);
			}
		}

		public virtual bool AppearInHome
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppearInHome);
			}
			set
	        {
				base.Setbool(ColumnNames.AppearInHome, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual bool AvailableInStock
	    {
			get
	        {
				return base.Getbool(ColumnNames.AvailableInStock);
			}
			set
	        {
				base.Setbool(ColumnNames.AvailableInStock, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ProductID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProductID) ? string.Empty : base.GetintAsString(ColumnNames.ProductID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductID);
				else
					this.ProductID = base.SetintAsString(ColumnNames.ProductID, value);
			}
		}

		public virtual string s_CatID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CatID) ? string.Empty : base.GetintAsString(ColumnNames.CatID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CatID);
				else
					this.CatID = base.SetintAsString(ColumnNames.CatID, value);
			}
		}

		public virtual string s_NameAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NameAr) ? string.Empty : base.GetstringAsString(ColumnNames.NameAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NameAr);
				else
					this.NameAr = base.SetstringAsString(ColumnNames.NameAr, value);
			}
		}

		public virtual string s_NameEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NameEn) ? string.Empty : base.GetstringAsString(ColumnNames.NameEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NameEn);
				else
					this.NameEn = base.SetstringAsString(ColumnNames.NameEn, value);
			}
		}

		public virtual string s_DescriptionAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DescriptionAr) ? string.Empty : base.GetstringAsString(ColumnNames.DescriptionAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DescriptionAr);
				else
					this.DescriptionAr = base.SetstringAsString(ColumnNames.DescriptionAr, value);
			}
		}

		public virtual string s_DescriptionEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DescriptionEn) ? string.Empty : base.GetstringAsString(ColumnNames.DescriptionEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DescriptionEn);
				else
					this.DescriptionEn = base.SetstringAsString(ColumnNames.DescriptionEn, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_BrandName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BrandName) ? string.Empty : base.GetstringAsString(ColumnNames.BrandName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BrandName);
				else
					this.BrandName = base.SetstringAsString(ColumnNames.BrandName, value);
			}
		}

		public virtual string s_ExpireyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpireyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpireyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpireyDate);
				else
					this.ExpireyDate = base.SetDateTimeAsString(ColumnNames.ExpireyDate, value);
			}
		}

		public virtual string s_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price) ? string.Empty : base.GetdoubleAsString(ColumnNames.Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price);
				else
					this.Price = base.SetdoubleAsString(ColumnNames.Price, value);
			}
		}

		public virtual string s_OfferPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OfferPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.OfferPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OfferPrice);
				else
					this.OfferPrice = base.SetdoubleAsString(ColumnNames.OfferPrice, value);
			}
		}

		public virtual string s_MainImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MainImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.MainImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MainImagePath);
				else
					this.MainImagePath = base.SetstringAsString(ColumnNames.MainImagePath, value);
			}
		}

		public virtual string s_YouTubeLink
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.YouTubeLink) ? string.Empty : base.GetstringAsString(ColumnNames.YouTubeLink);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.YouTubeLink);
				else
					this.YouTubeLink = base.SetstringAsString(ColumnNames.YouTubeLink, value);
			}
		}

		public virtual string s_AppearInHome
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppearInHome) ? string.Empty : base.GetboolAsString(ColumnNames.AppearInHome);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppearInHome);
				else
					this.AppearInHome = base.SetboolAsString(ColumnNames.AppearInHome, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_AvailableInStock
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AvailableInStock) ? string.Empty : base.GetboolAsString(ColumnNames.AvailableInStock);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AvailableInStock);
				else
					this.AvailableInStock = base.SetboolAsString(ColumnNames.AvailableInStock, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ProductID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CatID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CatID, Parameters.CatID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NameAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NameAr, Parameters.NameAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NameEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NameEn, Parameters.NameEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DescriptionAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DescriptionAr, Parameters.DescriptionAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DescriptionEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DescriptionEn, Parameters.DescriptionEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BrandName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BrandName, Parameters.BrandName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpireyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpireyDate, Parameters.ExpireyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OfferPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OfferPrice, Parameters.OfferPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MainImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MainImagePath, Parameters.MainImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter YouTubeLink
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.YouTubeLink, Parameters.YouTubeLink);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppearInHome
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppearInHome, Parameters.AppearInHome);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AvailableInStock
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AvailableInStock, Parameters.AvailableInStock);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public WhereParameter CatID
		    {
				get
		        {
					if(_CatID_W == null)
	        	    {
						_CatID_W = TearOff.CatID;
					}
					return _CatID_W;
				}
			}

			public WhereParameter NameAr
		    {
				get
		        {
					if(_NameAr_W == null)
	        	    {
						_NameAr_W = TearOff.NameAr;
					}
					return _NameAr_W;
				}
			}

			public WhereParameter NameEn
		    {
				get
		        {
					if(_NameEn_W == null)
	        	    {
						_NameEn_W = TearOff.NameEn;
					}
					return _NameEn_W;
				}
			}

			public WhereParameter DescriptionAr
		    {
				get
		        {
					if(_DescriptionAr_W == null)
	        	    {
						_DescriptionAr_W = TearOff.DescriptionAr;
					}
					return _DescriptionAr_W;
				}
			}

			public WhereParameter DescriptionEn
		    {
				get
		        {
					if(_DescriptionEn_W == null)
	        	    {
						_DescriptionEn_W = TearOff.DescriptionEn;
					}
					return _DescriptionEn_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter BrandName
		    {
				get
		        {
					if(_BrandName_W == null)
	        	    {
						_BrandName_W = TearOff.BrandName;
					}
					return _BrandName_W;
				}
			}

			public WhereParameter ExpireyDate
		    {
				get
		        {
					if(_ExpireyDate_W == null)
	        	    {
						_ExpireyDate_W = TearOff.ExpireyDate;
					}
					return _ExpireyDate_W;
				}
			}

			public WhereParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public WhereParameter OfferPrice
		    {
				get
		        {
					if(_OfferPrice_W == null)
	        	    {
						_OfferPrice_W = TearOff.OfferPrice;
					}
					return _OfferPrice_W;
				}
			}

			public WhereParameter MainImagePath
		    {
				get
		        {
					if(_MainImagePath_W == null)
	        	    {
						_MainImagePath_W = TearOff.MainImagePath;
					}
					return _MainImagePath_W;
				}
			}

			public WhereParameter YouTubeLink
		    {
				get
		        {
					if(_YouTubeLink_W == null)
	        	    {
						_YouTubeLink_W = TearOff.YouTubeLink;
					}
					return _YouTubeLink_W;
				}
			}

			public WhereParameter AppearInHome
		    {
				get
		        {
					if(_AppearInHome_W == null)
	        	    {
						_AppearInHome_W = TearOff.AppearInHome;
					}
					return _AppearInHome_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter AvailableInStock
		    {
				get
		        {
					if(_AvailableInStock_W == null)
	        	    {
						_AvailableInStock_W = TearOff.AvailableInStock;
					}
					return _AvailableInStock_W;
				}
			}

			private WhereParameter _ProductID_W = null;
			private WhereParameter _CatID_W = null;
			private WhereParameter _NameAr_W = null;
			private WhereParameter _NameEn_W = null;
			private WhereParameter _DescriptionAr_W = null;
			private WhereParameter _DescriptionEn_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _BrandName_W = null;
			private WhereParameter _ExpireyDate_W = null;
			private WhereParameter _Price_W = null;
			private WhereParameter _OfferPrice_W = null;
			private WhereParameter _MainImagePath_W = null;
			private WhereParameter _YouTubeLink_W = null;
			private WhereParameter _AppearInHome_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _AvailableInStock_W = null;

			public void WhereClauseReset()
			{
				_ProductID_W = null;
				_CatID_W = null;
				_NameAr_W = null;
				_NameEn_W = null;
				_DescriptionAr_W = null;
				_DescriptionEn_W = null;
				_Notes_W = null;
				_BrandName_W = null;
				_ExpireyDate_W = null;
				_Price_W = null;
				_OfferPrice_W = null;
				_MainImagePath_W = null;
				_YouTubeLink_W = null;
				_AppearInHome_W = null;
				_IsActive_W = null;
				_AvailableInStock_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ProductID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProductID, Parameters.ProductID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CatID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CatID, Parameters.CatID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NameAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NameAr, Parameters.NameAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NameEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NameEn, Parameters.NameEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DescriptionAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DescriptionAr, Parameters.DescriptionAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DescriptionEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DescriptionEn, Parameters.DescriptionEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BrandName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BrandName, Parameters.BrandName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpireyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpireyDate, Parameters.ExpireyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OfferPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OfferPrice, Parameters.OfferPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MainImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MainImagePath, Parameters.MainImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter YouTubeLink
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.YouTubeLink, Parameters.YouTubeLink);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppearInHome
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppearInHome, Parameters.AppearInHome);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AvailableInStock
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AvailableInStock, Parameters.AvailableInStock);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ProductID
		    {
				get
		        {
					if(_ProductID_W == null)
	        	    {
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public AggregateParameter CatID
		    {
				get
		        {
					if(_CatID_W == null)
	        	    {
						_CatID_W = TearOff.CatID;
					}
					return _CatID_W;
				}
			}

			public AggregateParameter NameAr
		    {
				get
		        {
					if(_NameAr_W == null)
	        	    {
						_NameAr_W = TearOff.NameAr;
					}
					return _NameAr_W;
				}
			}

			public AggregateParameter NameEn
		    {
				get
		        {
					if(_NameEn_W == null)
	        	    {
						_NameEn_W = TearOff.NameEn;
					}
					return _NameEn_W;
				}
			}

			public AggregateParameter DescriptionAr
		    {
				get
		        {
					if(_DescriptionAr_W == null)
	        	    {
						_DescriptionAr_W = TearOff.DescriptionAr;
					}
					return _DescriptionAr_W;
				}
			}

			public AggregateParameter DescriptionEn
		    {
				get
		        {
					if(_DescriptionEn_W == null)
	        	    {
						_DescriptionEn_W = TearOff.DescriptionEn;
					}
					return _DescriptionEn_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter BrandName
		    {
				get
		        {
					if(_BrandName_W == null)
	        	    {
						_BrandName_W = TearOff.BrandName;
					}
					return _BrandName_W;
				}
			}

			public AggregateParameter ExpireyDate
		    {
				get
		        {
					if(_ExpireyDate_W == null)
	        	    {
						_ExpireyDate_W = TearOff.ExpireyDate;
					}
					return _ExpireyDate_W;
				}
			}

			public AggregateParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public AggregateParameter OfferPrice
		    {
				get
		        {
					if(_OfferPrice_W == null)
	        	    {
						_OfferPrice_W = TearOff.OfferPrice;
					}
					return _OfferPrice_W;
				}
			}

			public AggregateParameter MainImagePath
		    {
				get
		        {
					if(_MainImagePath_W == null)
	        	    {
						_MainImagePath_W = TearOff.MainImagePath;
					}
					return _MainImagePath_W;
				}
			}

			public AggregateParameter YouTubeLink
		    {
				get
		        {
					if(_YouTubeLink_W == null)
	        	    {
						_YouTubeLink_W = TearOff.YouTubeLink;
					}
					return _YouTubeLink_W;
				}
			}

			public AggregateParameter AppearInHome
		    {
				get
		        {
					if(_AppearInHome_W == null)
	        	    {
						_AppearInHome_W = TearOff.AppearInHome;
					}
					return _AppearInHome_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter AvailableInStock
		    {
				get
		        {
					if(_AvailableInStock_W == null)
	        	    {
						_AvailableInStock_W = TearOff.AvailableInStock;
					}
					return _AvailableInStock_W;
				}
			}

			private AggregateParameter _ProductID_W = null;
			private AggregateParameter _CatID_W = null;
			private AggregateParameter _NameAr_W = null;
			private AggregateParameter _NameEn_W = null;
			private AggregateParameter _DescriptionAr_W = null;
			private AggregateParameter _DescriptionEn_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _BrandName_W = null;
			private AggregateParameter _ExpireyDate_W = null;
			private AggregateParameter _Price_W = null;
			private AggregateParameter _OfferPrice_W = null;
			private AggregateParameter _MainImagePath_W = null;
			private AggregateParameter _YouTubeLink_W = null;
			private AggregateParameter _AppearInHome_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _AvailableInStock_W = null;

			public void AggregateClauseReset()
			{
				_ProductID_W = null;
				_CatID_W = null;
				_NameAr_W = null;
				_NameEn_W = null;
				_DescriptionAr_W = null;
				_DescriptionEn_W = null;
				_Notes_W = null;
				_BrandName_W = null;
				_ExpireyDate_W = null;
				_Price_W = null;
				_OfferPrice_W = null;
				_MainImagePath_W = null;
				_YouTubeLink_W = null;
				_AppearInHome_W = null;
				_IsActive_W = null;
				_AvailableInStock_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ProductID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ProductDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ProductID);
			p.SourceColumn = ColumnNames.ProductID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ProductID);
			p.SourceColumn = ColumnNames.ProductID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CatID);
			p.SourceColumn = ColumnNames.CatID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NameAr);
			p.SourceColumn = ColumnNames.NameAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NameEn);
			p.SourceColumn = ColumnNames.NameEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DescriptionAr);
			p.SourceColumn = ColumnNames.DescriptionAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DescriptionEn);
			p.SourceColumn = ColumnNames.DescriptionEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BrandName);
			p.SourceColumn = ColumnNames.BrandName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpireyDate);
			p.SourceColumn = ColumnNames.ExpireyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price);
			p.SourceColumn = ColumnNames.Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OfferPrice);
			p.SourceColumn = ColumnNames.OfferPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MainImagePath);
			p.SourceColumn = ColumnNames.MainImagePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.YouTubeLink);
			p.SourceColumn = ColumnNames.YouTubeLink;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppearInHome);
			p.SourceColumn = ColumnNames.AppearInHome;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AvailableInStock);
			p.SourceColumn = ColumnNames.AvailableInStock;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
