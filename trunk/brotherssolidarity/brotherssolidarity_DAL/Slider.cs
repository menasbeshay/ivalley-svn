
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _Slider : SqlClientEntity
	{
		public _Slider()
		{
			this.QuerySource = "Slider";
			this.MappingName = "Slider";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SliderLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SliderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SliderID, SliderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SliderLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SliderID
			{
				get
				{
					return new SqlParameter("@SliderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TitleAr
			{
				get
				{
					return new SqlParameter("@TitleAr", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter TitleEn
			{
				get
				{
					return new SqlParameter("@TitleEn", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SliderDescriptionAr
			{
				get
				{
					return new SqlParameter("@SliderDescriptionAr", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter SliderDescriptionEn
			{
				get
				{
					return new SqlParameter("@SliderDescriptionEn", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter ImagePath
			{
				get
				{
					return new SqlParameter("@ImagePath", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SliderLink
			{
				get
				{
					return new SqlParameter("@SliderLink", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SliderID = "SliderID";
            public const string TitleAr = "TitleAr";
            public const string TitleEn = "TitleEn";
            public const string SliderDescriptionAr = "SliderDescriptionAr";
            public const string SliderDescriptionEn = "SliderDescriptionEn";
            public const string ImagePath = "ImagePath";
            public const string IsActive = "IsActive";
            public const string SliderLink = "SliderLink";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SliderID] = _Slider.PropertyNames.SliderID;
					ht[TitleAr] = _Slider.PropertyNames.TitleAr;
					ht[TitleEn] = _Slider.PropertyNames.TitleEn;
					ht[SliderDescriptionAr] = _Slider.PropertyNames.SliderDescriptionAr;
					ht[SliderDescriptionEn] = _Slider.PropertyNames.SliderDescriptionEn;
					ht[ImagePath] = _Slider.PropertyNames.ImagePath;
					ht[IsActive] = _Slider.PropertyNames.IsActive;
					ht[SliderLink] = _Slider.PropertyNames.SliderLink;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SliderID = "SliderID";
            public const string TitleAr = "TitleAr";
            public const string TitleEn = "TitleEn";
            public const string SliderDescriptionAr = "SliderDescriptionAr";
            public const string SliderDescriptionEn = "SliderDescriptionEn";
            public const string ImagePath = "ImagePath";
            public const string IsActive = "IsActive";
            public const string SliderLink = "SliderLink";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SliderID] = _Slider.ColumnNames.SliderID;
					ht[TitleAr] = _Slider.ColumnNames.TitleAr;
					ht[TitleEn] = _Slider.ColumnNames.TitleEn;
					ht[SliderDescriptionAr] = _Slider.ColumnNames.SliderDescriptionAr;
					ht[SliderDescriptionEn] = _Slider.ColumnNames.SliderDescriptionEn;
					ht[ImagePath] = _Slider.ColumnNames.ImagePath;
					ht[IsActive] = _Slider.ColumnNames.IsActive;
					ht[SliderLink] = _Slider.ColumnNames.SliderLink;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SliderID = "s_SliderID";
            public const string TitleAr = "s_TitleAr";
            public const string TitleEn = "s_TitleEn";
            public const string SliderDescriptionAr = "s_SliderDescriptionAr";
            public const string SliderDescriptionEn = "s_SliderDescriptionEn";
            public const string ImagePath = "s_ImagePath";
            public const string IsActive = "s_IsActive";
            public const string SliderLink = "s_SliderLink";

		}
		#endregion		
		
		#region Properties
	
		public virtual int SliderID
	    {
			get
	        {
				return base.Getint(ColumnNames.SliderID);
			}
			set
	        {
				base.Setint(ColumnNames.SliderID, value);
			}
		}

		public virtual string TitleAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.TitleAr);
			}
			set
	        {
				base.Setstring(ColumnNames.TitleAr, value);
			}
		}

		public virtual string TitleEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.TitleEn);
			}
			set
	        {
				base.Setstring(ColumnNames.TitleEn, value);
			}
		}

		public virtual string SliderDescriptionAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.SliderDescriptionAr);
			}
			set
	        {
				base.Setstring(ColumnNames.SliderDescriptionAr, value);
			}
		}

		public virtual string SliderDescriptionEn
	    {
			get
	        {
				return base.Getstring(ColumnNames.SliderDescriptionEn);
			}
			set
	        {
				base.Setstring(ColumnNames.SliderDescriptionEn, value);
			}
		}

		public virtual string ImagePath
	    {
			get
	        {
				return base.Getstring(ColumnNames.ImagePath);
			}
			set
	        {
				base.Setstring(ColumnNames.ImagePath, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual string SliderLink
	    {
			get
	        {
				return base.Getstring(ColumnNames.SliderLink);
			}
			set
	        {
				base.Setstring(ColumnNames.SliderLink, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SliderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SliderID) ? string.Empty : base.GetintAsString(ColumnNames.SliderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SliderID);
				else
					this.SliderID = base.SetintAsString(ColumnNames.SliderID, value);
			}
		}

		public virtual string s_TitleAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TitleAr) ? string.Empty : base.GetstringAsString(ColumnNames.TitleAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TitleAr);
				else
					this.TitleAr = base.SetstringAsString(ColumnNames.TitleAr, value);
			}
		}

		public virtual string s_TitleEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TitleEn) ? string.Empty : base.GetstringAsString(ColumnNames.TitleEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TitleEn);
				else
					this.TitleEn = base.SetstringAsString(ColumnNames.TitleEn, value);
			}
		}

		public virtual string s_SliderDescriptionAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SliderDescriptionAr) ? string.Empty : base.GetstringAsString(ColumnNames.SliderDescriptionAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SliderDescriptionAr);
				else
					this.SliderDescriptionAr = base.SetstringAsString(ColumnNames.SliderDescriptionAr, value);
			}
		}

		public virtual string s_SliderDescriptionEn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SliderDescriptionEn) ? string.Empty : base.GetstringAsString(ColumnNames.SliderDescriptionEn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SliderDescriptionEn);
				else
					this.SliderDescriptionEn = base.SetstringAsString(ColumnNames.SliderDescriptionEn, value);
			}
		}

		public virtual string s_ImagePath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImagePath) ? string.Empty : base.GetstringAsString(ColumnNames.ImagePath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImagePath);
				else
					this.ImagePath = base.SetstringAsString(ColumnNames.ImagePath, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_SliderLink
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SliderLink) ? string.Empty : base.GetstringAsString(ColumnNames.SliderLink);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SliderLink);
				else
					this.SliderLink = base.SetstringAsString(ColumnNames.SliderLink, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SliderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SliderID, Parameters.SliderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TitleAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TitleAr, Parameters.TitleAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TitleEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TitleEn, Parameters.TitleEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SliderDescriptionAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SliderDescriptionAr, Parameters.SliderDescriptionAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SliderDescriptionEn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SliderDescriptionEn, Parameters.SliderDescriptionEn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImagePath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SliderLink
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SliderLink, Parameters.SliderLink);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SliderID
		    {
				get
		        {
					if(_SliderID_W == null)
	        	    {
						_SliderID_W = TearOff.SliderID;
					}
					return _SliderID_W;
				}
			}

			public WhereParameter TitleAr
		    {
				get
		        {
					if(_TitleAr_W == null)
	        	    {
						_TitleAr_W = TearOff.TitleAr;
					}
					return _TitleAr_W;
				}
			}

			public WhereParameter TitleEn
		    {
				get
		        {
					if(_TitleEn_W == null)
	        	    {
						_TitleEn_W = TearOff.TitleEn;
					}
					return _TitleEn_W;
				}
			}

			public WhereParameter SliderDescriptionAr
		    {
				get
		        {
					if(_SliderDescriptionAr_W == null)
	        	    {
						_SliderDescriptionAr_W = TearOff.SliderDescriptionAr;
					}
					return _SliderDescriptionAr_W;
				}
			}

			public WhereParameter SliderDescriptionEn
		    {
				get
		        {
					if(_SliderDescriptionEn_W == null)
	        	    {
						_SliderDescriptionEn_W = TearOff.SliderDescriptionEn;
					}
					return _SliderDescriptionEn_W;
				}
			}

			public WhereParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter SliderLink
		    {
				get
		        {
					if(_SliderLink_W == null)
	        	    {
						_SliderLink_W = TearOff.SliderLink;
					}
					return _SliderLink_W;
				}
			}

			private WhereParameter _SliderID_W = null;
			private WhereParameter _TitleAr_W = null;
			private WhereParameter _TitleEn_W = null;
			private WhereParameter _SliderDescriptionAr_W = null;
			private WhereParameter _SliderDescriptionEn_W = null;
			private WhereParameter _ImagePath_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _SliderLink_W = null;

			public void WhereClauseReset()
			{
				_SliderID_W = null;
				_TitleAr_W = null;
				_TitleEn_W = null;
				_SliderDescriptionAr_W = null;
				_SliderDescriptionEn_W = null;
				_ImagePath_W = null;
				_IsActive_W = null;
				_SliderLink_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SliderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SliderID, Parameters.SliderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TitleAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TitleAr, Parameters.TitleAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TitleEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TitleEn, Parameters.TitleEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SliderDescriptionAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SliderDescriptionAr, Parameters.SliderDescriptionAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SliderDescriptionEn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SliderDescriptionEn, Parameters.SliderDescriptionEn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImagePath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImagePath, Parameters.ImagePath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SliderLink
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SliderLink, Parameters.SliderLink);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SliderID
		    {
				get
		        {
					if(_SliderID_W == null)
	        	    {
						_SliderID_W = TearOff.SliderID;
					}
					return _SliderID_W;
				}
			}

			public AggregateParameter TitleAr
		    {
				get
		        {
					if(_TitleAr_W == null)
	        	    {
						_TitleAr_W = TearOff.TitleAr;
					}
					return _TitleAr_W;
				}
			}

			public AggregateParameter TitleEn
		    {
				get
		        {
					if(_TitleEn_W == null)
	        	    {
						_TitleEn_W = TearOff.TitleEn;
					}
					return _TitleEn_W;
				}
			}

			public AggregateParameter SliderDescriptionAr
		    {
				get
		        {
					if(_SliderDescriptionAr_W == null)
	        	    {
						_SliderDescriptionAr_W = TearOff.SliderDescriptionAr;
					}
					return _SliderDescriptionAr_W;
				}
			}

			public AggregateParameter SliderDescriptionEn
		    {
				get
		        {
					if(_SliderDescriptionEn_W == null)
	        	    {
						_SliderDescriptionEn_W = TearOff.SliderDescriptionEn;
					}
					return _SliderDescriptionEn_W;
				}
			}

			public AggregateParameter ImagePath
		    {
				get
		        {
					if(_ImagePath_W == null)
	        	    {
						_ImagePath_W = TearOff.ImagePath;
					}
					return _ImagePath_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter SliderLink
		    {
				get
		        {
					if(_SliderLink_W == null)
	        	    {
						_SliderLink_W = TearOff.SliderLink;
					}
					return _SliderLink_W;
				}
			}

			private AggregateParameter _SliderID_W = null;
			private AggregateParameter _TitleAr_W = null;
			private AggregateParameter _TitleEn_W = null;
			private AggregateParameter _SliderDescriptionAr_W = null;
			private AggregateParameter _SliderDescriptionEn_W = null;
			private AggregateParameter _ImagePath_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _SliderLink_W = null;

			public void AggregateClauseReset()
			{
				_SliderID_W = null;
				_TitleAr_W = null;
				_TitleEn_W = null;
				_SliderDescriptionAr_W = null;
				_SliderDescriptionEn_W = null;
				_ImagePath_W = null;
				_IsActive_W = null;
				_SliderLink_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SliderInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SliderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SliderUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SliderDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SliderID);
			p.SourceColumn = ColumnNames.SliderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SliderID);
			p.SourceColumn = ColumnNames.SliderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TitleAr);
			p.SourceColumn = ColumnNames.TitleAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TitleEn);
			p.SourceColumn = ColumnNames.TitleEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SliderDescriptionAr);
			p.SourceColumn = ColumnNames.SliderDescriptionAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SliderDescriptionEn);
			p.SourceColumn = ColumnNames.SliderDescriptionEn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImagePath);
			p.SourceColumn = ColumnNames.ImagePath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SliderLink);
			p.SourceColumn = ColumnNames.SliderLink;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
