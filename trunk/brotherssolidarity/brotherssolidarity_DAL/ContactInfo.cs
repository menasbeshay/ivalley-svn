
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
	public abstract class _ContactInfo : SqlClientEntity
	{
		public _ContactInfo()
		{
			this.QuerySource = "ContactInfo";
			this.MappingName = "ContactInfo";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ContactInfoLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ContactInformationID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ContactInformationID, ContactInformationID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ContactInfoLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ContactInformationID
			{
				get
				{
					return new SqlParameter("@ContactInformationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ContactAddress
			{
				get
				{
					return new SqlParameter("@ContactAddress", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactTelephone
			{
				get
				{
					return new SqlParameter("@ContactTelephone", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactMail
			{
				get
				{
					return new SqlParameter("@ContactMail", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactSkype
			{
				get
				{
					return new SqlParameter("@ContactSkype", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactTwitter
			{
				get
				{
					return new SqlParameter("@ContactTwitter", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactFacebook
			{
				get
				{
					return new SqlParameter("@ContactFacebook", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactDribble
			{
				get
				{
					return new SqlParameter("@ContactDribble", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactYoutube
			{
				get
				{
					return new SqlParameter("@ContactYoutube", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactInstegram
			{
				get
				{
					return new SqlParameter("@ContactInstegram", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter ContactGooglePlus
			{
				get
				{
					return new SqlParameter("@ContactGooglePlus", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter GoogleMapURL
			{
				get
				{
					return new SqlParameter("@GoogleMapURL", SqlDbType.NVarChar, 1500);
				}
			}
			
			public static SqlParameter GoogleMapURL2
			{
				get
				{
					return new SqlParameter("@GoogleMapURL2", SqlDbType.NVarChar, 1500);
				}
			}
			
			public static SqlParameter GoogleMapURL3
			{
				get
				{
					return new SqlParameter("@GoogleMapURL3", SqlDbType.NVarChar, 1500);
				}
			}
			
			public static SqlParameter GoogleMapURL4
			{
				get
				{
					return new SqlParameter("@GoogleMapURL4", SqlDbType.NVarChar, 1500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ContactInformationID = "ContactInformationID";
            public const string ContactAddress = "ContactAddress";
            public const string ContactTelephone = "ContactTelephone";
            public const string ContactMail = "ContactMail";
            public const string ContactSkype = "ContactSkype";
            public const string ContactTwitter = "ContactTwitter";
            public const string ContactFacebook = "ContactFacebook";
            public const string ContactDribble = "ContactDribble";
            public const string ContactYoutube = "ContactYoutube";
            public const string ContactInstegram = "ContactInstegram";
            public const string ContactGooglePlus = "ContactGooglePlus";
            public const string GoogleMapURL = "GoogleMapURL";
            public const string GoogleMapURL2 = "GoogleMapURL2";
            public const string GoogleMapURL3 = "GoogleMapURL3";
            public const string GoogleMapURL4 = "GoogleMapURL4";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ContactInformationID] = _ContactInfo.PropertyNames.ContactInformationID;
					ht[ContactAddress] = _ContactInfo.PropertyNames.ContactAddress;
					ht[ContactTelephone] = _ContactInfo.PropertyNames.ContactTelephone;
					ht[ContactMail] = _ContactInfo.PropertyNames.ContactMail;
					ht[ContactSkype] = _ContactInfo.PropertyNames.ContactSkype;
					ht[ContactTwitter] = _ContactInfo.PropertyNames.ContactTwitter;
					ht[ContactFacebook] = _ContactInfo.PropertyNames.ContactFacebook;
					ht[ContactDribble] = _ContactInfo.PropertyNames.ContactDribble;
					ht[ContactYoutube] = _ContactInfo.PropertyNames.ContactYoutube;
					ht[ContactInstegram] = _ContactInfo.PropertyNames.ContactInstegram;
					ht[ContactGooglePlus] = _ContactInfo.PropertyNames.ContactGooglePlus;
					ht[GoogleMapURL] = _ContactInfo.PropertyNames.GoogleMapURL;
					ht[GoogleMapURL2] = _ContactInfo.PropertyNames.GoogleMapURL2;
					ht[GoogleMapURL3] = _ContactInfo.PropertyNames.GoogleMapURL3;
					ht[GoogleMapURL4] = _ContactInfo.PropertyNames.GoogleMapURL4;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ContactInformationID = "ContactInformationID";
            public const string ContactAddress = "ContactAddress";
            public const string ContactTelephone = "ContactTelephone";
            public const string ContactMail = "ContactMail";
            public const string ContactSkype = "ContactSkype";
            public const string ContactTwitter = "ContactTwitter";
            public const string ContactFacebook = "ContactFacebook";
            public const string ContactDribble = "ContactDribble";
            public const string ContactYoutube = "ContactYoutube";
            public const string ContactInstegram = "ContactInstegram";
            public const string ContactGooglePlus = "ContactGooglePlus";
            public const string GoogleMapURL = "GoogleMapURL";
            public const string GoogleMapURL2 = "GoogleMapURL2";
            public const string GoogleMapURL3 = "GoogleMapURL3";
            public const string GoogleMapURL4 = "GoogleMapURL4";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ContactInformationID] = _ContactInfo.ColumnNames.ContactInformationID;
					ht[ContactAddress] = _ContactInfo.ColumnNames.ContactAddress;
					ht[ContactTelephone] = _ContactInfo.ColumnNames.ContactTelephone;
					ht[ContactMail] = _ContactInfo.ColumnNames.ContactMail;
					ht[ContactSkype] = _ContactInfo.ColumnNames.ContactSkype;
					ht[ContactTwitter] = _ContactInfo.ColumnNames.ContactTwitter;
					ht[ContactFacebook] = _ContactInfo.ColumnNames.ContactFacebook;
					ht[ContactDribble] = _ContactInfo.ColumnNames.ContactDribble;
					ht[ContactYoutube] = _ContactInfo.ColumnNames.ContactYoutube;
					ht[ContactInstegram] = _ContactInfo.ColumnNames.ContactInstegram;
					ht[ContactGooglePlus] = _ContactInfo.ColumnNames.ContactGooglePlus;
					ht[GoogleMapURL] = _ContactInfo.ColumnNames.GoogleMapURL;
					ht[GoogleMapURL2] = _ContactInfo.ColumnNames.GoogleMapURL2;
					ht[GoogleMapURL3] = _ContactInfo.ColumnNames.GoogleMapURL3;
					ht[GoogleMapURL4] = _ContactInfo.ColumnNames.GoogleMapURL4;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ContactInformationID = "s_ContactInformationID";
            public const string ContactAddress = "s_ContactAddress";
            public const string ContactTelephone = "s_ContactTelephone";
            public const string ContactMail = "s_ContactMail";
            public const string ContactSkype = "s_ContactSkype";
            public const string ContactTwitter = "s_ContactTwitter";
            public const string ContactFacebook = "s_ContactFacebook";
            public const string ContactDribble = "s_ContactDribble";
            public const string ContactYoutube = "s_ContactYoutube";
            public const string ContactInstegram = "s_ContactInstegram";
            public const string ContactGooglePlus = "s_ContactGooglePlus";
            public const string GoogleMapURL = "s_GoogleMapURL";
            public const string GoogleMapURL2 = "s_GoogleMapURL2";
            public const string GoogleMapURL3 = "s_GoogleMapURL3";
            public const string GoogleMapURL4 = "s_GoogleMapURL4";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ContactInformationID
	    {
			get
	        {
				return base.Getint(ColumnNames.ContactInformationID);
			}
			set
	        {
				base.Setint(ColumnNames.ContactInformationID, value);
			}
		}

		public virtual string ContactAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactAddress, value);
			}
		}

		public virtual string ContactTelephone
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactTelephone);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactTelephone, value);
			}
		}

		public virtual string ContactMail
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactMail);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactMail, value);
			}
		}

		public virtual string ContactSkype
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactSkype);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactSkype, value);
			}
		}

		public virtual string ContactTwitter
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactTwitter);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactTwitter, value);
			}
		}

		public virtual string ContactFacebook
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactFacebook);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactFacebook, value);
			}
		}

		public virtual string ContactDribble
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactDribble);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactDribble, value);
			}
		}

		public virtual string ContactYoutube
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactYoutube);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactYoutube, value);
			}
		}

		public virtual string ContactInstegram
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactInstegram);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactInstegram, value);
			}
		}

		public virtual string ContactGooglePlus
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactGooglePlus);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactGooglePlus, value);
			}
		}

		public virtual string GoogleMapURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.GoogleMapURL);
			}
			set
	        {
				base.Setstring(ColumnNames.GoogleMapURL, value);
			}
		}

		public virtual string GoogleMapURL2
	    {
			get
	        {
				return base.Getstring(ColumnNames.GoogleMapURL2);
			}
			set
	        {
				base.Setstring(ColumnNames.GoogleMapURL2, value);
			}
		}

		public virtual string GoogleMapURL3
	    {
			get
	        {
				return base.Getstring(ColumnNames.GoogleMapURL3);
			}
			set
	        {
				base.Setstring(ColumnNames.GoogleMapURL3, value);
			}
		}

		public virtual string GoogleMapURL4
	    {
			get
	        {
				return base.Getstring(ColumnNames.GoogleMapURL4);
			}
			set
	        {
				base.Setstring(ColumnNames.GoogleMapURL4, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ContactInformationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactInformationID) ? string.Empty : base.GetintAsString(ColumnNames.ContactInformationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactInformationID);
				else
					this.ContactInformationID = base.SetintAsString(ColumnNames.ContactInformationID, value);
			}
		}

		public virtual string s_ContactAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactAddress) ? string.Empty : base.GetstringAsString(ColumnNames.ContactAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactAddress);
				else
					this.ContactAddress = base.SetstringAsString(ColumnNames.ContactAddress, value);
			}
		}

		public virtual string s_ContactTelephone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactTelephone) ? string.Empty : base.GetstringAsString(ColumnNames.ContactTelephone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactTelephone);
				else
					this.ContactTelephone = base.SetstringAsString(ColumnNames.ContactTelephone, value);
			}
		}

		public virtual string s_ContactMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactMail) ? string.Empty : base.GetstringAsString(ColumnNames.ContactMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactMail);
				else
					this.ContactMail = base.SetstringAsString(ColumnNames.ContactMail, value);
			}
		}

		public virtual string s_ContactSkype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactSkype) ? string.Empty : base.GetstringAsString(ColumnNames.ContactSkype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactSkype);
				else
					this.ContactSkype = base.SetstringAsString(ColumnNames.ContactSkype, value);
			}
		}

		public virtual string s_ContactTwitter
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactTwitter) ? string.Empty : base.GetstringAsString(ColumnNames.ContactTwitter);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactTwitter);
				else
					this.ContactTwitter = base.SetstringAsString(ColumnNames.ContactTwitter, value);
			}
		}

		public virtual string s_ContactFacebook
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactFacebook) ? string.Empty : base.GetstringAsString(ColumnNames.ContactFacebook);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactFacebook);
				else
					this.ContactFacebook = base.SetstringAsString(ColumnNames.ContactFacebook, value);
			}
		}

		public virtual string s_ContactDribble
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactDribble) ? string.Empty : base.GetstringAsString(ColumnNames.ContactDribble);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactDribble);
				else
					this.ContactDribble = base.SetstringAsString(ColumnNames.ContactDribble, value);
			}
		}

		public virtual string s_ContactYoutube
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactYoutube) ? string.Empty : base.GetstringAsString(ColumnNames.ContactYoutube);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactYoutube);
				else
					this.ContactYoutube = base.SetstringAsString(ColumnNames.ContactYoutube, value);
			}
		}

		public virtual string s_ContactInstegram
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactInstegram) ? string.Empty : base.GetstringAsString(ColumnNames.ContactInstegram);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactInstegram);
				else
					this.ContactInstegram = base.SetstringAsString(ColumnNames.ContactInstegram, value);
			}
		}

		public virtual string s_ContactGooglePlus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactGooglePlus) ? string.Empty : base.GetstringAsString(ColumnNames.ContactGooglePlus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactGooglePlus);
				else
					this.ContactGooglePlus = base.SetstringAsString(ColumnNames.ContactGooglePlus, value);
			}
		}

		public virtual string s_GoogleMapURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoogleMapURL) ? string.Empty : base.GetstringAsString(ColumnNames.GoogleMapURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoogleMapURL);
				else
					this.GoogleMapURL = base.SetstringAsString(ColumnNames.GoogleMapURL, value);
			}
		}

		public virtual string s_GoogleMapURL2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoogleMapURL2) ? string.Empty : base.GetstringAsString(ColumnNames.GoogleMapURL2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoogleMapURL2);
				else
					this.GoogleMapURL2 = base.SetstringAsString(ColumnNames.GoogleMapURL2, value);
			}
		}

		public virtual string s_GoogleMapURL3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoogleMapURL3) ? string.Empty : base.GetstringAsString(ColumnNames.GoogleMapURL3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoogleMapURL3);
				else
					this.GoogleMapURL3 = base.SetstringAsString(ColumnNames.GoogleMapURL3, value);
			}
		}

		public virtual string s_GoogleMapURL4
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GoogleMapURL4) ? string.Empty : base.GetstringAsString(ColumnNames.GoogleMapURL4);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GoogleMapURL4);
				else
					this.GoogleMapURL4 = base.SetstringAsString(ColumnNames.GoogleMapURL4, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ContactInformationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactInformationID, Parameters.ContactInformationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactAddress, Parameters.ContactAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactTelephone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactTelephone, Parameters.ContactTelephone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactMail, Parameters.ContactMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactSkype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactSkype, Parameters.ContactSkype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactTwitter
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactTwitter, Parameters.ContactTwitter);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactFacebook
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactFacebook, Parameters.ContactFacebook);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactDribble
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactDribble, Parameters.ContactDribble);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactYoutube
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactYoutube, Parameters.ContactYoutube);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactInstegram
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactInstegram, Parameters.ContactInstegram);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactGooglePlus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactGooglePlus, Parameters.ContactGooglePlus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoogleMapURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoogleMapURL, Parameters.GoogleMapURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoogleMapURL2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoogleMapURL2, Parameters.GoogleMapURL2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoogleMapURL3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoogleMapURL3, Parameters.GoogleMapURL3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GoogleMapURL4
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GoogleMapURL4, Parameters.GoogleMapURL4);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ContactInformationID
		    {
				get
		        {
					if(_ContactInformationID_W == null)
	        	    {
						_ContactInformationID_W = TearOff.ContactInformationID;
					}
					return _ContactInformationID_W;
				}
			}

			public WhereParameter ContactAddress
		    {
				get
		        {
					if(_ContactAddress_W == null)
	        	    {
						_ContactAddress_W = TearOff.ContactAddress;
					}
					return _ContactAddress_W;
				}
			}

			public WhereParameter ContactTelephone
		    {
				get
		        {
					if(_ContactTelephone_W == null)
	        	    {
						_ContactTelephone_W = TearOff.ContactTelephone;
					}
					return _ContactTelephone_W;
				}
			}

			public WhereParameter ContactMail
		    {
				get
		        {
					if(_ContactMail_W == null)
	        	    {
						_ContactMail_W = TearOff.ContactMail;
					}
					return _ContactMail_W;
				}
			}

			public WhereParameter ContactSkype
		    {
				get
		        {
					if(_ContactSkype_W == null)
	        	    {
						_ContactSkype_W = TearOff.ContactSkype;
					}
					return _ContactSkype_W;
				}
			}

			public WhereParameter ContactTwitter
		    {
				get
		        {
					if(_ContactTwitter_W == null)
	        	    {
						_ContactTwitter_W = TearOff.ContactTwitter;
					}
					return _ContactTwitter_W;
				}
			}

			public WhereParameter ContactFacebook
		    {
				get
		        {
					if(_ContactFacebook_W == null)
	        	    {
						_ContactFacebook_W = TearOff.ContactFacebook;
					}
					return _ContactFacebook_W;
				}
			}

			public WhereParameter ContactDribble
		    {
				get
		        {
					if(_ContactDribble_W == null)
	        	    {
						_ContactDribble_W = TearOff.ContactDribble;
					}
					return _ContactDribble_W;
				}
			}

			public WhereParameter ContactYoutube
		    {
				get
		        {
					if(_ContactYoutube_W == null)
	        	    {
						_ContactYoutube_W = TearOff.ContactYoutube;
					}
					return _ContactYoutube_W;
				}
			}

			public WhereParameter ContactInstegram
		    {
				get
		        {
					if(_ContactInstegram_W == null)
	        	    {
						_ContactInstegram_W = TearOff.ContactInstegram;
					}
					return _ContactInstegram_W;
				}
			}

			public WhereParameter ContactGooglePlus
		    {
				get
		        {
					if(_ContactGooglePlus_W == null)
	        	    {
						_ContactGooglePlus_W = TearOff.ContactGooglePlus;
					}
					return _ContactGooglePlus_W;
				}
			}

			public WhereParameter GoogleMapURL
		    {
				get
		        {
					if(_GoogleMapURL_W == null)
	        	    {
						_GoogleMapURL_W = TearOff.GoogleMapURL;
					}
					return _GoogleMapURL_W;
				}
			}

			public WhereParameter GoogleMapURL2
		    {
				get
		        {
					if(_GoogleMapURL2_W == null)
	        	    {
						_GoogleMapURL2_W = TearOff.GoogleMapURL2;
					}
					return _GoogleMapURL2_W;
				}
			}

			public WhereParameter GoogleMapURL3
		    {
				get
		        {
					if(_GoogleMapURL3_W == null)
	        	    {
						_GoogleMapURL3_W = TearOff.GoogleMapURL3;
					}
					return _GoogleMapURL3_W;
				}
			}

			public WhereParameter GoogleMapURL4
		    {
				get
		        {
					if(_GoogleMapURL4_W == null)
	        	    {
						_GoogleMapURL4_W = TearOff.GoogleMapURL4;
					}
					return _GoogleMapURL4_W;
				}
			}

			private WhereParameter _ContactInformationID_W = null;
			private WhereParameter _ContactAddress_W = null;
			private WhereParameter _ContactTelephone_W = null;
			private WhereParameter _ContactMail_W = null;
			private WhereParameter _ContactSkype_W = null;
			private WhereParameter _ContactTwitter_W = null;
			private WhereParameter _ContactFacebook_W = null;
			private WhereParameter _ContactDribble_W = null;
			private WhereParameter _ContactYoutube_W = null;
			private WhereParameter _ContactInstegram_W = null;
			private WhereParameter _ContactGooglePlus_W = null;
			private WhereParameter _GoogleMapURL_W = null;
			private WhereParameter _GoogleMapURL2_W = null;
			private WhereParameter _GoogleMapURL3_W = null;
			private WhereParameter _GoogleMapURL4_W = null;

			public void WhereClauseReset()
			{
				_ContactInformationID_W = null;
				_ContactAddress_W = null;
				_ContactTelephone_W = null;
				_ContactMail_W = null;
				_ContactSkype_W = null;
				_ContactTwitter_W = null;
				_ContactFacebook_W = null;
				_ContactDribble_W = null;
				_ContactYoutube_W = null;
				_ContactInstegram_W = null;
				_ContactGooglePlus_W = null;
				_GoogleMapURL_W = null;
				_GoogleMapURL2_W = null;
				_GoogleMapURL3_W = null;
				_GoogleMapURL4_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ContactInformationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactInformationID, Parameters.ContactInformationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactAddress, Parameters.ContactAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactTelephone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactTelephone, Parameters.ContactTelephone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactMail, Parameters.ContactMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactSkype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactSkype, Parameters.ContactSkype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactTwitter
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactTwitter, Parameters.ContactTwitter);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactFacebook
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactFacebook, Parameters.ContactFacebook);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactDribble
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactDribble, Parameters.ContactDribble);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactYoutube
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactYoutube, Parameters.ContactYoutube);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactInstegram
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactInstegram, Parameters.ContactInstegram);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactGooglePlus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactGooglePlus, Parameters.ContactGooglePlus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoogleMapURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoogleMapURL, Parameters.GoogleMapURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoogleMapURL2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoogleMapURL2, Parameters.GoogleMapURL2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoogleMapURL3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoogleMapURL3, Parameters.GoogleMapURL3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GoogleMapURL4
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GoogleMapURL4, Parameters.GoogleMapURL4);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ContactInformationID
		    {
				get
		        {
					if(_ContactInformationID_W == null)
	        	    {
						_ContactInformationID_W = TearOff.ContactInformationID;
					}
					return _ContactInformationID_W;
				}
			}

			public AggregateParameter ContactAddress
		    {
				get
		        {
					if(_ContactAddress_W == null)
	        	    {
						_ContactAddress_W = TearOff.ContactAddress;
					}
					return _ContactAddress_W;
				}
			}

			public AggregateParameter ContactTelephone
		    {
				get
		        {
					if(_ContactTelephone_W == null)
	        	    {
						_ContactTelephone_W = TearOff.ContactTelephone;
					}
					return _ContactTelephone_W;
				}
			}

			public AggregateParameter ContactMail
		    {
				get
		        {
					if(_ContactMail_W == null)
	        	    {
						_ContactMail_W = TearOff.ContactMail;
					}
					return _ContactMail_W;
				}
			}

			public AggregateParameter ContactSkype
		    {
				get
		        {
					if(_ContactSkype_W == null)
	        	    {
						_ContactSkype_W = TearOff.ContactSkype;
					}
					return _ContactSkype_W;
				}
			}

			public AggregateParameter ContactTwitter
		    {
				get
		        {
					if(_ContactTwitter_W == null)
	        	    {
						_ContactTwitter_W = TearOff.ContactTwitter;
					}
					return _ContactTwitter_W;
				}
			}

			public AggregateParameter ContactFacebook
		    {
				get
		        {
					if(_ContactFacebook_W == null)
	        	    {
						_ContactFacebook_W = TearOff.ContactFacebook;
					}
					return _ContactFacebook_W;
				}
			}

			public AggregateParameter ContactDribble
		    {
				get
		        {
					if(_ContactDribble_W == null)
	        	    {
						_ContactDribble_W = TearOff.ContactDribble;
					}
					return _ContactDribble_W;
				}
			}

			public AggregateParameter ContactYoutube
		    {
				get
		        {
					if(_ContactYoutube_W == null)
	        	    {
						_ContactYoutube_W = TearOff.ContactYoutube;
					}
					return _ContactYoutube_W;
				}
			}

			public AggregateParameter ContactInstegram
		    {
				get
		        {
					if(_ContactInstegram_W == null)
	        	    {
						_ContactInstegram_W = TearOff.ContactInstegram;
					}
					return _ContactInstegram_W;
				}
			}

			public AggregateParameter ContactGooglePlus
		    {
				get
		        {
					if(_ContactGooglePlus_W == null)
	        	    {
						_ContactGooglePlus_W = TearOff.ContactGooglePlus;
					}
					return _ContactGooglePlus_W;
				}
			}

			public AggregateParameter GoogleMapURL
		    {
				get
		        {
					if(_GoogleMapURL_W == null)
	        	    {
						_GoogleMapURL_W = TearOff.GoogleMapURL;
					}
					return _GoogleMapURL_W;
				}
			}

			public AggregateParameter GoogleMapURL2
		    {
				get
		        {
					if(_GoogleMapURL2_W == null)
	        	    {
						_GoogleMapURL2_W = TearOff.GoogleMapURL2;
					}
					return _GoogleMapURL2_W;
				}
			}

			public AggregateParameter GoogleMapURL3
		    {
				get
		        {
					if(_GoogleMapURL3_W == null)
	        	    {
						_GoogleMapURL3_W = TearOff.GoogleMapURL3;
					}
					return _GoogleMapURL3_W;
				}
			}

			public AggregateParameter GoogleMapURL4
		    {
				get
		        {
					if(_GoogleMapURL4_W == null)
	        	    {
						_GoogleMapURL4_W = TearOff.GoogleMapURL4;
					}
					return _GoogleMapURL4_W;
				}
			}

			private AggregateParameter _ContactInformationID_W = null;
			private AggregateParameter _ContactAddress_W = null;
			private AggregateParameter _ContactTelephone_W = null;
			private AggregateParameter _ContactMail_W = null;
			private AggregateParameter _ContactSkype_W = null;
			private AggregateParameter _ContactTwitter_W = null;
			private AggregateParameter _ContactFacebook_W = null;
			private AggregateParameter _ContactDribble_W = null;
			private AggregateParameter _ContactYoutube_W = null;
			private AggregateParameter _ContactInstegram_W = null;
			private AggregateParameter _ContactGooglePlus_W = null;
			private AggregateParameter _GoogleMapURL_W = null;
			private AggregateParameter _GoogleMapURL2_W = null;
			private AggregateParameter _GoogleMapURL3_W = null;
			private AggregateParameter _GoogleMapURL4_W = null;

			public void AggregateClauseReset()
			{
				_ContactInformationID_W = null;
				_ContactAddress_W = null;
				_ContactTelephone_W = null;
				_ContactMail_W = null;
				_ContactSkype_W = null;
				_ContactTwitter_W = null;
				_ContactFacebook_W = null;
				_ContactDribble_W = null;
				_ContactYoutube_W = null;
				_ContactInstegram_W = null;
				_ContactGooglePlus_W = null;
				_GoogleMapURL_W = null;
				_GoogleMapURL2_W = null;
				_GoogleMapURL3_W = null;
				_GoogleMapURL4_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ContactInfoInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ContactInformationID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ContactInfoUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ContactInfoDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ContactInformationID);
			p.SourceColumn = ColumnNames.ContactInformationID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ContactInformationID);
			p.SourceColumn = ColumnNames.ContactInformationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactAddress);
			p.SourceColumn = ColumnNames.ContactAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactTelephone);
			p.SourceColumn = ColumnNames.ContactTelephone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactMail);
			p.SourceColumn = ColumnNames.ContactMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactSkype);
			p.SourceColumn = ColumnNames.ContactSkype;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactTwitter);
			p.SourceColumn = ColumnNames.ContactTwitter;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactFacebook);
			p.SourceColumn = ColumnNames.ContactFacebook;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactDribble);
			p.SourceColumn = ColumnNames.ContactDribble;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactYoutube);
			p.SourceColumn = ColumnNames.ContactYoutube;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactInstegram);
			p.SourceColumn = ColumnNames.ContactInstegram;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactGooglePlus);
			p.SourceColumn = ColumnNames.ContactGooglePlus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GoogleMapURL);
			p.SourceColumn = ColumnNames.GoogleMapURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GoogleMapURL2);
			p.SourceColumn = ColumnNames.GoogleMapURL2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GoogleMapURL3);
			p.SourceColumn = ColumnNames.GoogleMapURL3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GoogleMapURL4);
			p.SourceColumn = ColumnNames.GoogleMapURL4;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
