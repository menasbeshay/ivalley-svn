
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _UsersProfiles : SqlClientEntity
	{
		public _UsersProfiles()
		{
			this.QuerySource = "UsersProfiles";
			this.MappingName = "UsersProfiles";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UsersProfilesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserProfileID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserProfileID, UserProfileID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UsersProfilesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserProfileID
			{
				get
				{
					return new SqlParameter("@UserProfileID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter FullName
			{
				get
				{
					return new SqlParameter("@FullName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Telephone
			{
				get
				{
					return new SqlParameter("@Telephone", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Photo
			{
				get
				{
					return new SqlParameter("@Photo", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter GroupID
			{
				get
				{
					return new SqlParameter("@GroupID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserProfileID = "UserProfileID";
            public const string UserID = "UserID";
            public const string FullName = "FullName";
            public const string Email = "Email";
            public const string Telephone = "Telephone";
            public const string Photo = "Photo";
            public const string GroupID = "GroupID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserProfileID] = _UsersProfiles.PropertyNames.UserProfileID;
					ht[UserID] = _UsersProfiles.PropertyNames.UserID;
					ht[FullName] = _UsersProfiles.PropertyNames.FullName;
					ht[Email] = _UsersProfiles.PropertyNames.Email;
					ht[Telephone] = _UsersProfiles.PropertyNames.Telephone;
					ht[Photo] = _UsersProfiles.PropertyNames.Photo;
					ht[GroupID] = _UsersProfiles.PropertyNames.GroupID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserProfileID = "UserProfileID";
            public const string UserID = "UserID";
            public const string FullName = "FullName";
            public const string Email = "Email";
            public const string Telephone = "Telephone";
            public const string Photo = "Photo";
            public const string GroupID = "GroupID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserProfileID] = _UsersProfiles.ColumnNames.UserProfileID;
					ht[UserID] = _UsersProfiles.ColumnNames.UserID;
					ht[FullName] = _UsersProfiles.ColumnNames.FullName;
					ht[Email] = _UsersProfiles.ColumnNames.Email;
					ht[Telephone] = _UsersProfiles.ColumnNames.Telephone;
					ht[Photo] = _UsersProfiles.ColumnNames.Photo;
					ht[GroupID] = _UsersProfiles.ColumnNames.GroupID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserProfileID = "s_UserProfileID";
            public const string UserID = "s_UserID";
            public const string FullName = "s_FullName";
            public const string Email = "s_Email";
            public const string Telephone = "s_Telephone";
            public const string Photo = "s_Photo";
            public const string GroupID = "s_GroupID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserProfileID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserProfileID);
			}
			set
	        {
				base.Setint(ColumnNames.UserProfileID, value);
			}
		}

		public virtual Guid UserID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserID);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserID, value);
			}
		}

		public virtual string FullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FullName);
			}
			set
	        {
				base.Setstring(ColumnNames.FullName, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string Telephone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Telephone);
			}
			set
	        {
				base.Setstring(ColumnNames.Telephone, value);
			}
		}

		public virtual string Photo
	    {
			get
	        {
				return base.Getstring(ColumnNames.Photo);
			}
			set
	        {
				base.Setstring(ColumnNames.Photo, value);
			}
		}

		public virtual int GroupID
	    {
			get
	        {
				return base.Getint(ColumnNames.GroupID);
			}
			set
	        {
				base.Setint(ColumnNames.GroupID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserProfileID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserProfileID) ? string.Empty : base.GetintAsString(ColumnNames.UserProfileID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserProfileID);
				else
					this.UserProfileID = base.SetintAsString(ColumnNames.UserProfileID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetGuidAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetGuidAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FullName) ? string.Empty : base.GetstringAsString(ColumnNames.FullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FullName);
				else
					this.FullName = base.SetstringAsString(ColumnNames.FullName, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_Telephone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Telephone) ? string.Empty : base.GetstringAsString(ColumnNames.Telephone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Telephone);
				else
					this.Telephone = base.SetstringAsString(ColumnNames.Telephone, value);
			}
		}

		public virtual string s_Photo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Photo) ? string.Empty : base.GetstringAsString(ColumnNames.Photo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Photo);
				else
					this.Photo = base.SetstringAsString(ColumnNames.Photo, value);
			}
		}

		public virtual string s_GroupID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GroupID) ? string.Empty : base.GetintAsString(ColumnNames.GroupID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GroupID);
				else
					this.GroupID = base.SetintAsString(ColumnNames.GroupID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserProfileID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserProfileID, Parameters.UserProfileID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Telephone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Photo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Photo, Parameters.Photo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GroupID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GroupID, Parameters.GroupID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserProfileID
		    {
				get
		        {
					if(_UserProfileID_W == null)
	        	    {
						_UserProfileID_W = TearOff.UserProfileID;
					}
					return _UserProfileID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public WhereParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public WhereParameter GroupID
		    {
				get
		        {
					if(_GroupID_W == null)
	        	    {
						_GroupID_W = TearOff.GroupID;
					}
					return _GroupID_W;
				}
			}

			private WhereParameter _UserProfileID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _FullName_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _Telephone_W = null;
			private WhereParameter _Photo_W = null;
			private WhereParameter _GroupID_W = null;

			public void WhereClauseReset()
			{
				_UserProfileID_W = null;
				_UserID_W = null;
				_FullName_W = null;
				_Email_W = null;
				_Telephone_W = null;
				_Photo_W = null;
				_GroupID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserProfileID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserProfileID, Parameters.UserProfileID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Telephone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Telephone, Parameters.Telephone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Photo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Photo, Parameters.Photo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GroupID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GroupID, Parameters.GroupID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserProfileID
		    {
				get
		        {
					if(_UserProfileID_W == null)
	        	    {
						_UserProfileID_W = TearOff.UserProfileID;
					}
					return _UserProfileID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter Telephone
		    {
				get
		        {
					if(_Telephone_W == null)
	        	    {
						_Telephone_W = TearOff.Telephone;
					}
					return _Telephone_W;
				}
			}

			public AggregateParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public AggregateParameter GroupID
		    {
				get
		        {
					if(_GroupID_W == null)
	        	    {
						_GroupID_W = TearOff.GroupID;
					}
					return _GroupID_W;
				}
			}

			private AggregateParameter _UserProfileID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _FullName_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _Telephone_W = null;
			private AggregateParameter _Photo_W = null;
			private AggregateParameter _GroupID_W = null;

			public void AggregateClauseReset()
			{
				_UserProfileID_W = null;
				_UserID_W = null;
				_FullName_W = null;
				_Email_W = null;
				_Telephone_W = null;
				_Photo_W = null;
				_GroupID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UsersProfilesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserProfileID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UsersProfilesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UsersProfilesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserProfileID);
			p.SourceColumn = ColumnNames.UserProfileID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserProfileID);
			p.SourceColumn = ColumnNames.UserProfileID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FullName);
			p.SourceColumn = ColumnNames.FullName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Telephone);
			p.SourceColumn = ColumnNames.Telephone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Photo);
			p.SourceColumn = ColumnNames.Photo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GroupID);
			p.SourceColumn = ColumnNames.GroupID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
