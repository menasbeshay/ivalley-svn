
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _UserReviews : SqlClientEntity
	{
		public _UserReviews()
		{
			this.QuerySource = "UserReviews";
			this.MappingName = "UserReviews";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserReviewsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ReviewID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ReviewID, ReviewID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserReviewsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ReviewID
			{
				get
				{
					return new SqlParameter("@ReviewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CardID
			{
				get
				{
					return new SqlParameter("@CardID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Stars
			{
				get
				{
					return new SqlParameter("@Stars", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RevTitle
			{
				get
				{
					return new SqlParameter("@RevTitle", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter RevDescription
			{
				get
				{
					return new SqlParameter("@RevDescription", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ReviewID = "ReviewID";
            public const string UserID = "UserID";
            public const string CardID = "CardID";
            public const string Stars = "Stars";
            public const string RevTitle = "RevTitle";
            public const string RevDescription = "RevDescription";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ReviewID] = _UserReviews.PropertyNames.ReviewID;
					ht[UserID] = _UserReviews.PropertyNames.UserID;
					ht[CardID] = _UserReviews.PropertyNames.CardID;
					ht[Stars] = _UserReviews.PropertyNames.Stars;
					ht[RevTitle] = _UserReviews.PropertyNames.RevTitle;
					ht[RevDescription] = _UserReviews.PropertyNames.RevDescription;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ReviewID = "ReviewID";
            public const string UserID = "UserID";
            public const string CardID = "CardID";
            public const string Stars = "Stars";
            public const string RevTitle = "RevTitle";
            public const string RevDescription = "RevDescription";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ReviewID] = _UserReviews.ColumnNames.ReviewID;
					ht[UserID] = _UserReviews.ColumnNames.UserID;
					ht[CardID] = _UserReviews.ColumnNames.CardID;
					ht[Stars] = _UserReviews.ColumnNames.Stars;
					ht[RevTitle] = _UserReviews.ColumnNames.RevTitle;
					ht[RevDescription] = _UserReviews.ColumnNames.RevDescription;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ReviewID = "s_ReviewID";
            public const string UserID = "s_UserID";
            public const string CardID = "s_CardID";
            public const string Stars = "s_Stars";
            public const string RevTitle = "s_RevTitle";
            public const string RevDescription = "s_RevDescription";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ReviewID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReviewID);
			}
			set
	        {
				base.Setint(ColumnNames.ReviewID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int CardID
	    {
			get
	        {
				return base.Getint(ColumnNames.CardID);
			}
			set
	        {
				base.Setint(ColumnNames.CardID, value);
			}
		}

		public virtual int Stars
	    {
			get
	        {
				return base.Getint(ColumnNames.Stars);
			}
			set
	        {
				base.Setint(ColumnNames.Stars, value);
			}
		}

		public virtual string RevTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.RevTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.RevTitle, value);
			}
		}

		public virtual string RevDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.RevDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.RevDescription, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ReviewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReviewID) ? string.Empty : base.GetintAsString(ColumnNames.ReviewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReviewID);
				else
					this.ReviewID = base.SetintAsString(ColumnNames.ReviewID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_CardID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardID) ? string.Empty : base.GetintAsString(ColumnNames.CardID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardID);
				else
					this.CardID = base.SetintAsString(ColumnNames.CardID, value);
			}
		}

		public virtual string s_Stars
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Stars) ? string.Empty : base.GetintAsString(ColumnNames.Stars);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Stars);
				else
					this.Stars = base.SetintAsString(ColumnNames.Stars, value);
			}
		}

		public virtual string s_RevTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RevTitle) ? string.Empty : base.GetstringAsString(ColumnNames.RevTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RevTitle);
				else
					this.RevTitle = base.SetstringAsString(ColumnNames.RevTitle, value);
			}
		}

		public virtual string s_RevDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RevDescription) ? string.Empty : base.GetstringAsString(ColumnNames.RevDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RevDescription);
				else
					this.RevDescription = base.SetstringAsString(ColumnNames.RevDescription, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ReviewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReviewID, Parameters.ReviewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Stars
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Stars, Parameters.Stars);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RevTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RevTitle, Parameters.RevTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RevDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RevDescription, Parameters.RevDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ReviewID
		    {
				get
		        {
					if(_ReviewID_W == null)
	        	    {
						_ReviewID_W = TearOff.ReviewID;
					}
					return _ReviewID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public WhereParameter Stars
		    {
				get
		        {
					if(_Stars_W == null)
	        	    {
						_Stars_W = TearOff.Stars;
					}
					return _Stars_W;
				}
			}

			public WhereParameter RevTitle
		    {
				get
		        {
					if(_RevTitle_W == null)
	        	    {
						_RevTitle_W = TearOff.RevTitle;
					}
					return _RevTitle_W;
				}
			}

			public WhereParameter RevDescription
		    {
				get
		        {
					if(_RevDescription_W == null)
	        	    {
						_RevDescription_W = TearOff.RevDescription;
					}
					return _RevDescription_W;
				}
			}

			private WhereParameter _ReviewID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _CardID_W = null;
			private WhereParameter _Stars_W = null;
			private WhereParameter _RevTitle_W = null;
			private WhereParameter _RevDescription_W = null;

			public void WhereClauseReset()
			{
				_ReviewID_W = null;
				_UserID_W = null;
				_CardID_W = null;
				_Stars_W = null;
				_RevTitle_W = null;
				_RevDescription_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ReviewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReviewID, Parameters.ReviewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Stars
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Stars, Parameters.Stars);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RevTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RevTitle, Parameters.RevTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RevDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RevDescription, Parameters.RevDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ReviewID
		    {
				get
		        {
					if(_ReviewID_W == null)
	        	    {
						_ReviewID_W = TearOff.ReviewID;
					}
					return _ReviewID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public AggregateParameter Stars
		    {
				get
		        {
					if(_Stars_W == null)
	        	    {
						_Stars_W = TearOff.Stars;
					}
					return _Stars_W;
				}
			}

			public AggregateParameter RevTitle
		    {
				get
		        {
					if(_RevTitle_W == null)
	        	    {
						_RevTitle_W = TearOff.RevTitle;
					}
					return _RevTitle_W;
				}
			}

			public AggregateParameter RevDescription
		    {
				get
		        {
					if(_RevDescription_W == null)
	        	    {
						_RevDescription_W = TearOff.RevDescription;
					}
					return _RevDescription_W;
				}
			}

			private AggregateParameter _ReviewID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _CardID_W = null;
			private AggregateParameter _Stars_W = null;
			private AggregateParameter _RevTitle_W = null;
			private AggregateParameter _RevDescription_W = null;

			public void AggregateClauseReset()
			{
				_ReviewID_W = null;
				_UserID_W = null;
				_CardID_W = null;
				_Stars_W = null;
				_RevTitle_W = null;
				_RevDescription_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserReviewsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ReviewID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserReviewsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserReviewsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ReviewID);
			p.SourceColumn = ColumnNames.ReviewID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ReviewID);
			p.SourceColumn = ColumnNames.ReviewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardID);
			p.SourceColumn = ColumnNames.CardID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Stars);
			p.SourceColumn = ColumnNames.Stars;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RevTitle);
			p.SourceColumn = ColumnNames.RevTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RevDescription);
			p.SourceColumn = ColumnNames.RevDescription;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
