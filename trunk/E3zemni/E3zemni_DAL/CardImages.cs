
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _CardImages : SqlClientEntity
	{
		public _CardImages()
		{
			this.QuerySource = "CardImages";
			this.MappingName = "CardImages";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CardImagesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CardImageID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CardImageID, CardImageID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CardImagesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CardImageID
			{
				get
				{
					return new SqlParameter("@CardImageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CardID
			{
				get
				{
					return new SqlParameter("@CardID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PosX
			{
				get
				{
					return new SqlParameter("@PosX", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PosY
			{
				get
				{
					return new SqlParameter("@PosY", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ImgWidth
			{
				get
				{
					return new SqlParameter("@ImgWidth", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ImgHieght
			{
				get
				{
					return new SqlParameter("@ImgHieght", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsBackGround
			{
				get
				{
					return new SqlParameter("@IsBackGround", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CardImageID = "CardImageID";
            public const string CardID = "CardID";
            public const string PosX = "PosX";
            public const string PosY = "PosY";
            public const string ImgWidth = "ImgWidth";
            public const string ImgHieght = "ImgHieght";
            public const string IsBackGround = "IsBackGround";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CardImageID] = _CardImages.PropertyNames.CardImageID;
					ht[CardID] = _CardImages.PropertyNames.CardID;
					ht[PosX] = _CardImages.PropertyNames.PosX;
					ht[PosY] = _CardImages.PropertyNames.PosY;
					ht[ImgWidth] = _CardImages.PropertyNames.ImgWidth;
					ht[ImgHieght] = _CardImages.PropertyNames.ImgHieght;
					ht[IsBackGround] = _CardImages.PropertyNames.IsBackGround;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CardImageID = "CardImageID";
            public const string CardID = "CardID";
            public const string PosX = "PosX";
            public const string PosY = "PosY";
            public const string ImgWidth = "ImgWidth";
            public const string ImgHieght = "ImgHieght";
            public const string IsBackGround = "IsBackGround";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CardImageID] = _CardImages.ColumnNames.CardImageID;
					ht[CardID] = _CardImages.ColumnNames.CardID;
					ht[PosX] = _CardImages.ColumnNames.PosX;
					ht[PosY] = _CardImages.ColumnNames.PosY;
					ht[ImgWidth] = _CardImages.ColumnNames.ImgWidth;
					ht[ImgHieght] = _CardImages.ColumnNames.ImgHieght;
					ht[IsBackGround] = _CardImages.ColumnNames.IsBackGround;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CardImageID = "s_CardImageID";
            public const string CardID = "s_CardID";
            public const string PosX = "s_PosX";
            public const string PosY = "s_PosY";
            public const string ImgWidth = "s_ImgWidth";
            public const string ImgHieght = "s_ImgHieght";
            public const string IsBackGround = "s_IsBackGround";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CardImageID
	    {
			get
	        {
				return base.Getint(ColumnNames.CardImageID);
			}
			set
	        {
				base.Setint(ColumnNames.CardImageID, value);
			}
		}

		public virtual int CardID
	    {
			get
	        {
				return base.Getint(ColumnNames.CardID);
			}
			set
	        {
				base.Setint(ColumnNames.CardID, value);
			}
		}

		public virtual int PosX
	    {
			get
	        {
				return base.Getint(ColumnNames.PosX);
			}
			set
	        {
				base.Setint(ColumnNames.PosX, value);
			}
		}

		public virtual int PosY
	    {
			get
	        {
				return base.Getint(ColumnNames.PosY);
			}
			set
	        {
				base.Setint(ColumnNames.PosY, value);
			}
		}

		public virtual int ImgWidth
	    {
			get
	        {
				return base.Getint(ColumnNames.ImgWidth);
			}
			set
	        {
				base.Setint(ColumnNames.ImgWidth, value);
			}
		}

		public virtual int ImgHieght
	    {
			get
	        {
				return base.Getint(ColumnNames.ImgHieght);
			}
			set
	        {
				base.Setint(ColumnNames.ImgHieght, value);
			}
		}

		public virtual bool IsBackGround
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsBackGround);
			}
			set
	        {
				base.Setbool(ColumnNames.IsBackGround, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CardImageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardImageID) ? string.Empty : base.GetintAsString(ColumnNames.CardImageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardImageID);
				else
					this.CardImageID = base.SetintAsString(ColumnNames.CardImageID, value);
			}
		}

		public virtual string s_CardID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardID) ? string.Empty : base.GetintAsString(ColumnNames.CardID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardID);
				else
					this.CardID = base.SetintAsString(ColumnNames.CardID, value);
			}
		}

		public virtual string s_PosX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PosX) ? string.Empty : base.GetintAsString(ColumnNames.PosX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PosX);
				else
					this.PosX = base.SetintAsString(ColumnNames.PosX, value);
			}
		}

		public virtual string s_PosY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PosY) ? string.Empty : base.GetintAsString(ColumnNames.PosY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PosY);
				else
					this.PosY = base.SetintAsString(ColumnNames.PosY, value);
			}
		}

		public virtual string s_ImgWidth
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImgWidth) ? string.Empty : base.GetintAsString(ColumnNames.ImgWidth);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImgWidth);
				else
					this.ImgWidth = base.SetintAsString(ColumnNames.ImgWidth, value);
			}
		}

		public virtual string s_ImgHieght
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ImgHieght) ? string.Empty : base.GetintAsString(ColumnNames.ImgHieght);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ImgHieght);
				else
					this.ImgHieght = base.SetintAsString(ColumnNames.ImgHieght, value);
			}
		}

		public virtual string s_IsBackGround
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsBackGround) ? string.Empty : base.GetboolAsString(ColumnNames.IsBackGround);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsBackGround);
				else
					this.IsBackGround = base.SetboolAsString(ColumnNames.IsBackGround, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CardImageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardImageID, Parameters.CardImageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PosX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PosX, Parameters.PosX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PosY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PosY, Parameters.PosY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImgWidth
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImgWidth, Parameters.ImgWidth);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ImgHieght
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ImgHieght, Parameters.ImgHieght);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsBackGround
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsBackGround, Parameters.IsBackGround);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CardImageID
		    {
				get
		        {
					if(_CardImageID_W == null)
	        	    {
						_CardImageID_W = TearOff.CardImageID;
					}
					return _CardImageID_W;
				}
			}

			public WhereParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public WhereParameter PosX
		    {
				get
		        {
					if(_PosX_W == null)
	        	    {
						_PosX_W = TearOff.PosX;
					}
					return _PosX_W;
				}
			}

			public WhereParameter PosY
		    {
				get
		        {
					if(_PosY_W == null)
	        	    {
						_PosY_W = TearOff.PosY;
					}
					return _PosY_W;
				}
			}

			public WhereParameter ImgWidth
		    {
				get
		        {
					if(_ImgWidth_W == null)
	        	    {
						_ImgWidth_W = TearOff.ImgWidth;
					}
					return _ImgWidth_W;
				}
			}

			public WhereParameter ImgHieght
		    {
				get
		        {
					if(_ImgHieght_W == null)
	        	    {
						_ImgHieght_W = TearOff.ImgHieght;
					}
					return _ImgHieght_W;
				}
			}

			public WhereParameter IsBackGround
		    {
				get
		        {
					if(_IsBackGround_W == null)
	        	    {
						_IsBackGround_W = TearOff.IsBackGround;
					}
					return _IsBackGround_W;
				}
			}

			private WhereParameter _CardImageID_W = null;
			private WhereParameter _CardID_W = null;
			private WhereParameter _PosX_W = null;
			private WhereParameter _PosY_W = null;
			private WhereParameter _ImgWidth_W = null;
			private WhereParameter _ImgHieght_W = null;
			private WhereParameter _IsBackGround_W = null;

			public void WhereClauseReset()
			{
				_CardImageID_W = null;
				_CardID_W = null;
				_PosX_W = null;
				_PosY_W = null;
				_ImgWidth_W = null;
				_ImgHieght_W = null;
				_IsBackGround_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CardImageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardImageID, Parameters.CardImageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PosX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PosX, Parameters.PosX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PosY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PosY, Parameters.PosY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImgWidth
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImgWidth, Parameters.ImgWidth);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ImgHieght
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ImgHieght, Parameters.ImgHieght);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsBackGround
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsBackGround, Parameters.IsBackGround);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CardImageID
		    {
				get
		        {
					if(_CardImageID_W == null)
	        	    {
						_CardImageID_W = TearOff.CardImageID;
					}
					return _CardImageID_W;
				}
			}

			public AggregateParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public AggregateParameter PosX
		    {
				get
		        {
					if(_PosX_W == null)
	        	    {
						_PosX_W = TearOff.PosX;
					}
					return _PosX_W;
				}
			}

			public AggregateParameter PosY
		    {
				get
		        {
					if(_PosY_W == null)
	        	    {
						_PosY_W = TearOff.PosY;
					}
					return _PosY_W;
				}
			}

			public AggregateParameter ImgWidth
		    {
				get
		        {
					if(_ImgWidth_W == null)
	        	    {
						_ImgWidth_W = TearOff.ImgWidth;
					}
					return _ImgWidth_W;
				}
			}

			public AggregateParameter ImgHieght
		    {
				get
		        {
					if(_ImgHieght_W == null)
	        	    {
						_ImgHieght_W = TearOff.ImgHieght;
					}
					return _ImgHieght_W;
				}
			}

			public AggregateParameter IsBackGround
		    {
				get
		        {
					if(_IsBackGround_W == null)
	        	    {
						_IsBackGround_W = TearOff.IsBackGround;
					}
					return _IsBackGround_W;
				}
			}

			private AggregateParameter _CardImageID_W = null;
			private AggregateParameter _CardID_W = null;
			private AggregateParameter _PosX_W = null;
			private AggregateParameter _PosY_W = null;
			private AggregateParameter _ImgWidth_W = null;
			private AggregateParameter _ImgHieght_W = null;
			private AggregateParameter _IsBackGround_W = null;

			public void AggregateClauseReset()
			{
				_CardImageID_W = null;
				_CardID_W = null;
				_PosX_W = null;
				_PosY_W = null;
				_ImgWidth_W = null;
				_ImgHieght_W = null;
				_IsBackGround_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardImagesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CardImageID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardImagesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardImagesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CardImageID);
			p.SourceColumn = ColumnNames.CardImageID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CardImageID);
			p.SourceColumn = ColumnNames.CardImageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardID);
			p.SourceColumn = ColumnNames.CardID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PosX);
			p.SourceColumn = ColumnNames.PosX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PosY);
			p.SourceColumn = ColumnNames.PosY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImgWidth);
			p.SourceColumn = ColumnNames.ImgWidth;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ImgHieght);
			p.SourceColumn = ColumnNames.ImgHieght;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsBackGround);
			p.SourceColumn = ColumnNames.IsBackGround;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
