
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _Color : SqlClientEntity
	{
		public _Color()
		{
			this.QuerySource = "Color";
			this.MappingName = "Color";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ColorLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ColorID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ColorID, ColorID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ColorLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ColorID
			{
				get
				{
					return new SqlParameter("@ColorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ColorCode
			{
				get
				{
					return new SqlParameter("@ColorCode", SqlDbType.NVarChar, 6);
				}
			}
			
			public static SqlParameter ColorNameEng
			{
				get
				{
					return new SqlParameter("@ColorNameEng", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter ColorNameAr
			{
				get
				{
					return new SqlParameter("@ColorNameAr", SqlDbType.NVarChar, 30);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ColorID = "ColorID";
            public const string ColorCode = "ColorCode";
            public const string ColorNameEng = "ColorNameEng";
            public const string ColorNameAr = "ColorNameAr";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ColorID] = _Color.PropertyNames.ColorID;
					ht[ColorCode] = _Color.PropertyNames.ColorCode;
					ht[ColorNameEng] = _Color.PropertyNames.ColorNameEng;
					ht[ColorNameAr] = _Color.PropertyNames.ColorNameAr;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ColorID = "ColorID";
            public const string ColorCode = "ColorCode";
            public const string ColorNameEng = "ColorNameEng";
            public const string ColorNameAr = "ColorNameAr";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ColorID] = _Color.ColumnNames.ColorID;
					ht[ColorCode] = _Color.ColumnNames.ColorCode;
					ht[ColorNameEng] = _Color.ColumnNames.ColorNameEng;
					ht[ColorNameAr] = _Color.ColumnNames.ColorNameAr;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ColorID = "s_ColorID";
            public const string ColorCode = "s_ColorCode";
            public const string ColorNameEng = "s_ColorNameEng";
            public const string ColorNameAr = "s_ColorNameAr";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ColorID
	    {
			get
	        {
				return base.Getint(ColumnNames.ColorID);
			}
			set
	        {
				base.Setint(ColumnNames.ColorID, value);
			}
		}

		public virtual string ColorCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.ColorCode);
			}
			set
	        {
				base.Setstring(ColumnNames.ColorCode, value);
			}
		}

		public virtual string ColorNameEng
	    {
			get
	        {
				return base.Getstring(ColumnNames.ColorNameEng);
			}
			set
	        {
				base.Setstring(ColumnNames.ColorNameEng, value);
			}
		}

		public virtual string ColorNameAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.ColorNameAr);
			}
			set
	        {
				base.Setstring(ColumnNames.ColorNameAr, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ColorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ColorID) ? string.Empty : base.GetintAsString(ColumnNames.ColorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ColorID);
				else
					this.ColorID = base.SetintAsString(ColumnNames.ColorID, value);
			}
		}

		public virtual string s_ColorCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ColorCode) ? string.Empty : base.GetstringAsString(ColumnNames.ColorCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ColorCode);
				else
					this.ColorCode = base.SetstringAsString(ColumnNames.ColorCode, value);
			}
		}

		public virtual string s_ColorNameEng
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ColorNameEng) ? string.Empty : base.GetstringAsString(ColumnNames.ColorNameEng);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ColorNameEng);
				else
					this.ColorNameEng = base.SetstringAsString(ColumnNames.ColorNameEng, value);
			}
		}

		public virtual string s_ColorNameAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ColorNameAr) ? string.Empty : base.GetstringAsString(ColumnNames.ColorNameAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ColorNameAr);
				else
					this.ColorNameAr = base.SetstringAsString(ColumnNames.ColorNameAr, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ColorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ColorID, Parameters.ColorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ColorCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ColorCode, Parameters.ColorCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ColorNameEng
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ColorNameEng, Parameters.ColorNameEng);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ColorNameAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ColorNameAr, Parameters.ColorNameAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ColorID
		    {
				get
		        {
					if(_ColorID_W == null)
	        	    {
						_ColorID_W = TearOff.ColorID;
					}
					return _ColorID_W;
				}
			}

			public WhereParameter ColorCode
		    {
				get
		        {
					if(_ColorCode_W == null)
	        	    {
						_ColorCode_W = TearOff.ColorCode;
					}
					return _ColorCode_W;
				}
			}

			public WhereParameter ColorNameEng
		    {
				get
		        {
					if(_ColorNameEng_W == null)
	        	    {
						_ColorNameEng_W = TearOff.ColorNameEng;
					}
					return _ColorNameEng_W;
				}
			}

			public WhereParameter ColorNameAr
		    {
				get
		        {
					if(_ColorNameAr_W == null)
	        	    {
						_ColorNameAr_W = TearOff.ColorNameAr;
					}
					return _ColorNameAr_W;
				}
			}

			private WhereParameter _ColorID_W = null;
			private WhereParameter _ColorCode_W = null;
			private WhereParameter _ColorNameEng_W = null;
			private WhereParameter _ColorNameAr_W = null;

			public void WhereClauseReset()
			{
				_ColorID_W = null;
				_ColorCode_W = null;
				_ColorNameEng_W = null;
				_ColorNameAr_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ColorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ColorID, Parameters.ColorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ColorCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ColorCode, Parameters.ColorCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ColorNameEng
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ColorNameEng, Parameters.ColorNameEng);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ColorNameAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ColorNameAr, Parameters.ColorNameAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ColorID
		    {
				get
		        {
					if(_ColorID_W == null)
	        	    {
						_ColorID_W = TearOff.ColorID;
					}
					return _ColorID_W;
				}
			}

			public AggregateParameter ColorCode
		    {
				get
		        {
					if(_ColorCode_W == null)
	        	    {
						_ColorCode_W = TearOff.ColorCode;
					}
					return _ColorCode_W;
				}
			}

			public AggregateParameter ColorNameEng
		    {
				get
		        {
					if(_ColorNameEng_W == null)
	        	    {
						_ColorNameEng_W = TearOff.ColorNameEng;
					}
					return _ColorNameEng_W;
				}
			}

			public AggregateParameter ColorNameAr
		    {
				get
		        {
					if(_ColorNameAr_W == null)
	        	    {
						_ColorNameAr_W = TearOff.ColorNameAr;
					}
					return _ColorNameAr_W;
				}
			}

			private AggregateParameter _ColorID_W = null;
			private AggregateParameter _ColorCode_W = null;
			private AggregateParameter _ColorNameEng_W = null;
			private AggregateParameter _ColorNameAr_W = null;

			public void AggregateClauseReset()
			{
				_ColorID_W = null;
				_ColorCode_W = null;
				_ColorNameEng_W = null;
				_ColorNameAr_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ColorInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ColorID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ColorUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ColorDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ColorID);
			p.SourceColumn = ColumnNames.ColorID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ColorID);
			p.SourceColumn = ColumnNames.ColorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ColorCode);
			p.SourceColumn = ColumnNames.ColorCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ColorNameEng);
			p.SourceColumn = ColumnNames.ColorNameEng;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ColorNameAr);
			p.SourceColumn = ColumnNames.ColorNameAr;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
