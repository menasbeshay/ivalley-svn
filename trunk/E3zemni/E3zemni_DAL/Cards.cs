
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _Cards : SqlClientEntity
	{
		public _Cards()
		{
			this.QuerySource = "Cards";
			this.MappingName = "Cards";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CardsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CardID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CardID, CardID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CardsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CardID
			{
				get
				{
					return new SqlParameter("@CardID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CategoryID
			{
				get
				{
					return new SqlParameter("@CategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CardNameAr
			{
				get
				{
					return new SqlParameter("@CardNameAr", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter CardNameEng
			{
				get
				{
					return new SqlParameter("@CardNameEng", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter PriceBefore
			{
				get
				{
					return new SqlParameter("@PriceBefore", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PriceNow
			{
				get
				{
					return new SqlParameter("@PriceNow", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter DescriptionAr
			{
				get
				{
					return new SqlParameter("@DescriptionAr", SqlDbType.NVarChar, 2000);
				}
			}
			
			public static SqlParameter DescriptionEng
			{
				get
				{
					return new SqlParameter("@DescriptionEng", SqlDbType.NVarChar, 2000);
				}
			}
			
			public static SqlParameter MainPhoto
			{
				get
				{
					return new SqlParameter("@MainPhoto", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter MainPhotoHover
			{
				get
				{
					return new SqlParameter("@MainPhotoHover", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter UploadDate
			{
				get
				{
					return new SqlParameter("@UploadDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DimensionID
			{
				get
				{
					return new SqlParameter("@DimensionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsPartySupplier
			{
				get
				{
					return new SqlParameter("@IsPartySupplier", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter DefaultFont
			{
				get
				{
					return new SqlParameter("@DefaultFont", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter GeneralPreviewPhoto
			{
				get
				{
					return new SqlParameter("@GeneralPreviewPhoto", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CardID = "CardID";
            public const string CategoryID = "CategoryID";
            public const string CardNameAr = "CardNameAr";
            public const string CardNameEng = "CardNameEng";
            public const string PriceBefore = "PriceBefore";
            public const string PriceNow = "PriceNow";
            public const string DescriptionAr = "DescriptionAr";
            public const string DescriptionEng = "DescriptionEng";
            public const string MainPhoto = "MainPhoto";
            public const string MainPhotoHover = "MainPhotoHover";
            public const string UploadDate = "UploadDate";
            public const string DimensionID = "DimensionID";
            public const string IsPartySupplier = "IsPartySupplier";
            public const string DefaultFont = "DefaultFont";
            public const string GeneralPreviewPhoto = "GeneralPreviewPhoto";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CardID] = _Cards.PropertyNames.CardID;
					ht[CategoryID] = _Cards.PropertyNames.CategoryID;
					ht[CardNameAr] = _Cards.PropertyNames.CardNameAr;
					ht[CardNameEng] = _Cards.PropertyNames.CardNameEng;
					ht[PriceBefore] = _Cards.PropertyNames.PriceBefore;
					ht[PriceNow] = _Cards.PropertyNames.PriceNow;
					ht[DescriptionAr] = _Cards.PropertyNames.DescriptionAr;
					ht[DescriptionEng] = _Cards.PropertyNames.DescriptionEng;
					ht[MainPhoto] = _Cards.PropertyNames.MainPhoto;
					ht[MainPhotoHover] = _Cards.PropertyNames.MainPhotoHover;
					ht[UploadDate] = _Cards.PropertyNames.UploadDate;
					ht[DimensionID] = _Cards.PropertyNames.DimensionID;
					ht[IsPartySupplier] = _Cards.PropertyNames.IsPartySupplier;
					ht[DefaultFont] = _Cards.PropertyNames.DefaultFont;
					ht[GeneralPreviewPhoto] = _Cards.PropertyNames.GeneralPreviewPhoto;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CardID = "CardID";
            public const string CategoryID = "CategoryID";
            public const string CardNameAr = "CardNameAr";
            public const string CardNameEng = "CardNameEng";
            public const string PriceBefore = "PriceBefore";
            public const string PriceNow = "PriceNow";
            public const string DescriptionAr = "DescriptionAr";
            public const string DescriptionEng = "DescriptionEng";
            public const string MainPhoto = "MainPhoto";
            public const string MainPhotoHover = "MainPhotoHover";
            public const string UploadDate = "UploadDate";
            public const string DimensionID = "DimensionID";
            public const string IsPartySupplier = "IsPartySupplier";
            public const string DefaultFont = "DefaultFont";
            public const string GeneralPreviewPhoto = "GeneralPreviewPhoto";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CardID] = _Cards.ColumnNames.CardID;
					ht[CategoryID] = _Cards.ColumnNames.CategoryID;
					ht[CardNameAr] = _Cards.ColumnNames.CardNameAr;
					ht[CardNameEng] = _Cards.ColumnNames.CardNameEng;
					ht[PriceBefore] = _Cards.ColumnNames.PriceBefore;
					ht[PriceNow] = _Cards.ColumnNames.PriceNow;
					ht[DescriptionAr] = _Cards.ColumnNames.DescriptionAr;
					ht[DescriptionEng] = _Cards.ColumnNames.DescriptionEng;
					ht[MainPhoto] = _Cards.ColumnNames.MainPhoto;
					ht[MainPhotoHover] = _Cards.ColumnNames.MainPhotoHover;
					ht[UploadDate] = _Cards.ColumnNames.UploadDate;
					ht[DimensionID] = _Cards.ColumnNames.DimensionID;
					ht[IsPartySupplier] = _Cards.ColumnNames.IsPartySupplier;
					ht[DefaultFont] = _Cards.ColumnNames.DefaultFont;
					ht[GeneralPreviewPhoto] = _Cards.ColumnNames.GeneralPreviewPhoto;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CardID = "s_CardID";
            public const string CategoryID = "s_CategoryID";
            public const string CardNameAr = "s_CardNameAr";
            public const string CardNameEng = "s_CardNameEng";
            public const string PriceBefore = "s_PriceBefore";
            public const string PriceNow = "s_PriceNow";
            public const string DescriptionAr = "s_DescriptionAr";
            public const string DescriptionEng = "s_DescriptionEng";
            public const string MainPhoto = "s_MainPhoto";
            public const string MainPhotoHover = "s_MainPhotoHover";
            public const string UploadDate = "s_UploadDate";
            public const string DimensionID = "s_DimensionID";
            public const string IsPartySupplier = "s_IsPartySupplier";
            public const string DefaultFont = "s_DefaultFont";
            public const string GeneralPreviewPhoto = "s_GeneralPreviewPhoto";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CardID
	    {
			get
	        {
				return base.Getint(ColumnNames.CardID);
			}
			set
	        {
				base.Setint(ColumnNames.CardID, value);
			}
		}

		public virtual int CategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.CategoryID, value);
			}
		}

		public virtual string CardNameAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.CardNameAr);
			}
			set
	        {
				base.Setstring(ColumnNames.CardNameAr, value);
			}
		}

		public virtual string CardNameEng
	    {
			get
	        {
				return base.Getstring(ColumnNames.CardNameEng);
			}
			set
	        {
				base.Setstring(ColumnNames.CardNameEng, value);
			}
		}

		public virtual double PriceBefore
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PriceBefore);
			}
			set
	        {
				base.Setdouble(ColumnNames.PriceBefore, value);
			}
		}

		public virtual double PriceNow
	    {
			get
	        {
				return base.Getdouble(ColumnNames.PriceNow);
			}
			set
	        {
				base.Setdouble(ColumnNames.PriceNow, value);
			}
		}

		public virtual string DescriptionAr
	    {
			get
	        {
				return base.Getstring(ColumnNames.DescriptionAr);
			}
			set
	        {
				base.Setstring(ColumnNames.DescriptionAr, value);
			}
		}

		public virtual string DescriptionEng
	    {
			get
	        {
				return base.Getstring(ColumnNames.DescriptionEng);
			}
			set
	        {
				base.Setstring(ColumnNames.DescriptionEng, value);
			}
		}

		public virtual string MainPhoto
	    {
			get
	        {
				return base.Getstring(ColumnNames.MainPhoto);
			}
			set
	        {
				base.Setstring(ColumnNames.MainPhoto, value);
			}
		}

		public virtual string MainPhotoHover
	    {
			get
	        {
				return base.Getstring(ColumnNames.MainPhotoHover);
			}
			set
	        {
				base.Setstring(ColumnNames.MainPhotoHover, value);
			}
		}

		public virtual DateTime UploadDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.UploadDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.UploadDate, value);
			}
		}

		public virtual int DimensionID
	    {
			get
	        {
				return base.Getint(ColumnNames.DimensionID);
			}
			set
	        {
				base.Setint(ColumnNames.DimensionID, value);
			}
		}

		public virtual bool IsPartySupplier
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsPartySupplier);
			}
			set
	        {
				base.Setbool(ColumnNames.IsPartySupplier, value);
			}
		}

		public virtual string DefaultFont
	    {
			get
	        {
				return base.Getstring(ColumnNames.DefaultFont);
			}
			set
	        {
				base.Setstring(ColumnNames.DefaultFont, value);
			}
		}

		public virtual string GeneralPreviewPhoto
	    {
			get
	        {
				return base.Getstring(ColumnNames.GeneralPreviewPhoto);
			}
			set
	        {
				base.Setstring(ColumnNames.GeneralPreviewPhoto, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CardID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardID) ? string.Empty : base.GetintAsString(ColumnNames.CardID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardID);
				else
					this.CardID = base.SetintAsString(ColumnNames.CardID, value);
			}
		}

		public virtual string s_CategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CategoryID) ? string.Empty : base.GetintAsString(ColumnNames.CategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CategoryID);
				else
					this.CategoryID = base.SetintAsString(ColumnNames.CategoryID, value);
			}
		}

		public virtual string s_CardNameAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardNameAr) ? string.Empty : base.GetstringAsString(ColumnNames.CardNameAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardNameAr);
				else
					this.CardNameAr = base.SetstringAsString(ColumnNames.CardNameAr, value);
			}
		}

		public virtual string s_CardNameEng
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardNameEng) ? string.Empty : base.GetstringAsString(ColumnNames.CardNameEng);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardNameEng);
				else
					this.CardNameEng = base.SetstringAsString(ColumnNames.CardNameEng, value);
			}
		}

		public virtual string s_PriceBefore
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceBefore) ? string.Empty : base.GetdoubleAsString(ColumnNames.PriceBefore);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceBefore);
				else
					this.PriceBefore = base.SetdoubleAsString(ColumnNames.PriceBefore, value);
			}
		}

		public virtual string s_PriceNow
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PriceNow) ? string.Empty : base.GetdoubleAsString(ColumnNames.PriceNow);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PriceNow);
				else
					this.PriceNow = base.SetdoubleAsString(ColumnNames.PriceNow, value);
			}
		}

		public virtual string s_DescriptionAr
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DescriptionAr) ? string.Empty : base.GetstringAsString(ColumnNames.DescriptionAr);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DescriptionAr);
				else
					this.DescriptionAr = base.SetstringAsString(ColumnNames.DescriptionAr, value);
			}
		}

		public virtual string s_DescriptionEng
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DescriptionEng) ? string.Empty : base.GetstringAsString(ColumnNames.DescriptionEng);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DescriptionEng);
				else
					this.DescriptionEng = base.SetstringAsString(ColumnNames.DescriptionEng, value);
			}
		}

		public virtual string s_MainPhoto
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MainPhoto) ? string.Empty : base.GetstringAsString(ColumnNames.MainPhoto);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MainPhoto);
				else
					this.MainPhoto = base.SetstringAsString(ColumnNames.MainPhoto, value);
			}
		}

		public virtual string s_MainPhotoHover
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MainPhotoHover) ? string.Empty : base.GetstringAsString(ColumnNames.MainPhotoHover);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MainPhotoHover);
				else
					this.MainPhotoHover = base.SetstringAsString(ColumnNames.MainPhotoHover, value);
			}
		}

		public virtual string s_UploadDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UploadDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.UploadDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UploadDate);
				else
					this.UploadDate = base.SetDateTimeAsString(ColumnNames.UploadDate, value);
			}
		}

		public virtual string s_DimensionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DimensionID) ? string.Empty : base.GetintAsString(ColumnNames.DimensionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DimensionID);
				else
					this.DimensionID = base.SetintAsString(ColumnNames.DimensionID, value);
			}
		}

		public virtual string s_IsPartySupplier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsPartySupplier) ? string.Empty : base.GetboolAsString(ColumnNames.IsPartySupplier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsPartySupplier);
				else
					this.IsPartySupplier = base.SetboolAsString(ColumnNames.IsPartySupplier, value);
			}
		}

		public virtual string s_DefaultFont
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DefaultFont) ? string.Empty : base.GetstringAsString(ColumnNames.DefaultFont);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DefaultFont);
				else
					this.DefaultFont = base.SetstringAsString(ColumnNames.DefaultFont, value);
			}
		}

		public virtual string s_GeneralPreviewPhoto
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GeneralPreviewPhoto) ? string.Empty : base.GetstringAsString(ColumnNames.GeneralPreviewPhoto);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GeneralPreviewPhoto);
				else
					this.GeneralPreviewPhoto = base.SetstringAsString(ColumnNames.GeneralPreviewPhoto, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CardID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardNameAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardNameAr, Parameters.CardNameAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardNameEng
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardNameEng, Parameters.CardNameEng);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceBefore
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceBefore, Parameters.PriceBefore);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PriceNow
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PriceNow, Parameters.PriceNow);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DescriptionAr
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DescriptionAr, Parameters.DescriptionAr);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DescriptionEng
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DescriptionEng, Parameters.DescriptionEng);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MainPhoto
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MainPhoto, Parameters.MainPhoto);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MainPhotoHover
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MainPhotoHover, Parameters.MainPhotoHover);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UploadDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UploadDate, Parameters.UploadDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DimensionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DimensionID, Parameters.DimensionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsPartySupplier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsPartySupplier, Parameters.IsPartySupplier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DefaultFont
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DefaultFont, Parameters.DefaultFont);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GeneralPreviewPhoto
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GeneralPreviewPhoto, Parameters.GeneralPreviewPhoto);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public WhereParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public WhereParameter CardNameAr
		    {
				get
		        {
					if(_CardNameAr_W == null)
	        	    {
						_CardNameAr_W = TearOff.CardNameAr;
					}
					return _CardNameAr_W;
				}
			}

			public WhereParameter CardNameEng
		    {
				get
		        {
					if(_CardNameEng_W == null)
	        	    {
						_CardNameEng_W = TearOff.CardNameEng;
					}
					return _CardNameEng_W;
				}
			}

			public WhereParameter PriceBefore
		    {
				get
		        {
					if(_PriceBefore_W == null)
	        	    {
						_PriceBefore_W = TearOff.PriceBefore;
					}
					return _PriceBefore_W;
				}
			}

			public WhereParameter PriceNow
		    {
				get
		        {
					if(_PriceNow_W == null)
	        	    {
						_PriceNow_W = TearOff.PriceNow;
					}
					return _PriceNow_W;
				}
			}

			public WhereParameter DescriptionAr
		    {
				get
		        {
					if(_DescriptionAr_W == null)
	        	    {
						_DescriptionAr_W = TearOff.DescriptionAr;
					}
					return _DescriptionAr_W;
				}
			}

			public WhereParameter DescriptionEng
		    {
				get
		        {
					if(_DescriptionEng_W == null)
	        	    {
						_DescriptionEng_W = TearOff.DescriptionEng;
					}
					return _DescriptionEng_W;
				}
			}

			public WhereParameter MainPhoto
		    {
				get
		        {
					if(_MainPhoto_W == null)
	        	    {
						_MainPhoto_W = TearOff.MainPhoto;
					}
					return _MainPhoto_W;
				}
			}

			public WhereParameter MainPhotoHover
		    {
				get
		        {
					if(_MainPhotoHover_W == null)
	        	    {
						_MainPhotoHover_W = TearOff.MainPhotoHover;
					}
					return _MainPhotoHover_W;
				}
			}

			public WhereParameter UploadDate
		    {
				get
		        {
					if(_UploadDate_W == null)
	        	    {
						_UploadDate_W = TearOff.UploadDate;
					}
					return _UploadDate_W;
				}
			}

			public WhereParameter DimensionID
		    {
				get
		        {
					if(_DimensionID_W == null)
	        	    {
						_DimensionID_W = TearOff.DimensionID;
					}
					return _DimensionID_W;
				}
			}

			public WhereParameter IsPartySupplier
		    {
				get
		        {
					if(_IsPartySupplier_W == null)
	        	    {
						_IsPartySupplier_W = TearOff.IsPartySupplier;
					}
					return _IsPartySupplier_W;
				}
			}

			public WhereParameter DefaultFont
		    {
				get
		        {
					if(_DefaultFont_W == null)
	        	    {
						_DefaultFont_W = TearOff.DefaultFont;
					}
					return _DefaultFont_W;
				}
			}

			public WhereParameter GeneralPreviewPhoto
		    {
				get
		        {
					if(_GeneralPreviewPhoto_W == null)
	        	    {
						_GeneralPreviewPhoto_W = TearOff.GeneralPreviewPhoto;
					}
					return _GeneralPreviewPhoto_W;
				}
			}

			private WhereParameter _CardID_W = null;
			private WhereParameter _CategoryID_W = null;
			private WhereParameter _CardNameAr_W = null;
			private WhereParameter _CardNameEng_W = null;
			private WhereParameter _PriceBefore_W = null;
			private WhereParameter _PriceNow_W = null;
			private WhereParameter _DescriptionAr_W = null;
			private WhereParameter _DescriptionEng_W = null;
			private WhereParameter _MainPhoto_W = null;
			private WhereParameter _MainPhotoHover_W = null;
			private WhereParameter _UploadDate_W = null;
			private WhereParameter _DimensionID_W = null;
			private WhereParameter _IsPartySupplier_W = null;
			private WhereParameter _DefaultFont_W = null;
			private WhereParameter _GeneralPreviewPhoto_W = null;

			public void WhereClauseReset()
			{
				_CardID_W = null;
				_CategoryID_W = null;
				_CardNameAr_W = null;
				_CardNameEng_W = null;
				_PriceBefore_W = null;
				_PriceNow_W = null;
				_DescriptionAr_W = null;
				_DescriptionEng_W = null;
				_MainPhoto_W = null;
				_MainPhotoHover_W = null;
				_UploadDate_W = null;
				_DimensionID_W = null;
				_IsPartySupplier_W = null;
				_DefaultFont_W = null;
				_GeneralPreviewPhoto_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CardID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CategoryID, Parameters.CategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardNameAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardNameAr, Parameters.CardNameAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardNameEng
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardNameEng, Parameters.CardNameEng);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceBefore
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceBefore, Parameters.PriceBefore);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PriceNow
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceNow, Parameters.PriceNow);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DescriptionAr
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DescriptionAr, Parameters.DescriptionAr);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DescriptionEng
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DescriptionEng, Parameters.DescriptionEng);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MainPhoto
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MainPhoto, Parameters.MainPhoto);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MainPhotoHover
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MainPhotoHover, Parameters.MainPhotoHover);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UploadDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UploadDate, Parameters.UploadDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DimensionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DimensionID, Parameters.DimensionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsPartySupplier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPartySupplier, Parameters.IsPartySupplier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DefaultFont
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DefaultFont, Parameters.DefaultFont);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GeneralPreviewPhoto
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GeneralPreviewPhoto, Parameters.GeneralPreviewPhoto);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public AggregateParameter CategoryID
		    {
				get
		        {
					if(_CategoryID_W == null)
	        	    {
						_CategoryID_W = TearOff.CategoryID;
					}
					return _CategoryID_W;
				}
			}

			public AggregateParameter CardNameAr
		    {
				get
		        {
					if(_CardNameAr_W == null)
	        	    {
						_CardNameAr_W = TearOff.CardNameAr;
					}
					return _CardNameAr_W;
				}
			}

			public AggregateParameter CardNameEng
		    {
				get
		        {
					if(_CardNameEng_W == null)
	        	    {
						_CardNameEng_W = TearOff.CardNameEng;
					}
					return _CardNameEng_W;
				}
			}

			public AggregateParameter PriceBefore
		    {
				get
		        {
					if(_PriceBefore_W == null)
	        	    {
						_PriceBefore_W = TearOff.PriceBefore;
					}
					return _PriceBefore_W;
				}
			}

			public AggregateParameter PriceNow
		    {
				get
		        {
					if(_PriceNow_W == null)
	        	    {
						_PriceNow_W = TearOff.PriceNow;
					}
					return _PriceNow_W;
				}
			}

			public AggregateParameter DescriptionAr
		    {
				get
		        {
					if(_DescriptionAr_W == null)
	        	    {
						_DescriptionAr_W = TearOff.DescriptionAr;
					}
					return _DescriptionAr_W;
				}
			}

			public AggregateParameter DescriptionEng
		    {
				get
		        {
					if(_DescriptionEng_W == null)
	        	    {
						_DescriptionEng_W = TearOff.DescriptionEng;
					}
					return _DescriptionEng_W;
				}
			}

			public AggregateParameter MainPhoto
		    {
				get
		        {
					if(_MainPhoto_W == null)
	        	    {
						_MainPhoto_W = TearOff.MainPhoto;
					}
					return _MainPhoto_W;
				}
			}

			public AggregateParameter MainPhotoHover
		    {
				get
		        {
					if(_MainPhotoHover_W == null)
	        	    {
						_MainPhotoHover_W = TearOff.MainPhotoHover;
					}
					return _MainPhotoHover_W;
				}
			}

			public AggregateParameter UploadDate
		    {
				get
		        {
					if(_UploadDate_W == null)
	        	    {
						_UploadDate_W = TearOff.UploadDate;
					}
					return _UploadDate_W;
				}
			}

			public AggregateParameter DimensionID
		    {
				get
		        {
					if(_DimensionID_W == null)
	        	    {
						_DimensionID_W = TearOff.DimensionID;
					}
					return _DimensionID_W;
				}
			}

			public AggregateParameter IsPartySupplier
		    {
				get
		        {
					if(_IsPartySupplier_W == null)
	        	    {
						_IsPartySupplier_W = TearOff.IsPartySupplier;
					}
					return _IsPartySupplier_W;
				}
			}

			public AggregateParameter DefaultFont
		    {
				get
		        {
					if(_DefaultFont_W == null)
	        	    {
						_DefaultFont_W = TearOff.DefaultFont;
					}
					return _DefaultFont_W;
				}
			}

			public AggregateParameter GeneralPreviewPhoto
		    {
				get
		        {
					if(_GeneralPreviewPhoto_W == null)
	        	    {
						_GeneralPreviewPhoto_W = TearOff.GeneralPreviewPhoto;
					}
					return _GeneralPreviewPhoto_W;
				}
			}

			private AggregateParameter _CardID_W = null;
			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _CardNameAr_W = null;
			private AggregateParameter _CardNameEng_W = null;
			private AggregateParameter _PriceBefore_W = null;
			private AggregateParameter _PriceNow_W = null;
			private AggregateParameter _DescriptionAr_W = null;
			private AggregateParameter _DescriptionEng_W = null;
			private AggregateParameter _MainPhoto_W = null;
			private AggregateParameter _MainPhotoHover_W = null;
			private AggregateParameter _UploadDate_W = null;
			private AggregateParameter _DimensionID_W = null;
			private AggregateParameter _IsPartySupplier_W = null;
			private AggregateParameter _DefaultFont_W = null;
			private AggregateParameter _GeneralPreviewPhoto_W = null;

			public void AggregateClauseReset()
			{
				_CardID_W = null;
				_CategoryID_W = null;
				_CardNameAr_W = null;
				_CardNameEng_W = null;
				_PriceBefore_W = null;
				_PriceNow_W = null;
				_DescriptionAr_W = null;
				_DescriptionEng_W = null;
				_MainPhoto_W = null;
				_MainPhotoHover_W = null;
				_UploadDate_W = null;
				_DimensionID_W = null;
				_IsPartySupplier_W = null;
				_DefaultFont_W = null;
				_GeneralPreviewPhoto_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CardID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CardsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CardID);
			p.SourceColumn = ColumnNames.CardID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CardID);
			p.SourceColumn = ColumnNames.CardID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CategoryID);
			p.SourceColumn = ColumnNames.CategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardNameAr);
			p.SourceColumn = ColumnNames.CardNameAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardNameEng);
			p.SourceColumn = ColumnNames.CardNameEng;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceBefore);
			p.SourceColumn = ColumnNames.PriceBefore;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PriceNow);
			p.SourceColumn = ColumnNames.PriceNow;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DescriptionAr);
			p.SourceColumn = ColumnNames.DescriptionAr;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DescriptionEng);
			p.SourceColumn = ColumnNames.DescriptionEng;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MainPhoto);
			p.SourceColumn = ColumnNames.MainPhoto;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MainPhotoHover);
			p.SourceColumn = ColumnNames.MainPhotoHover;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UploadDate);
			p.SourceColumn = ColumnNames.UploadDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DimensionID);
			p.SourceColumn = ColumnNames.DimensionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsPartySupplier);
			p.SourceColumn = ColumnNames.IsPartySupplier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DefaultFont);
			p.SourceColumn = ColumnNames.DefaultFont;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GeneralPreviewPhoto);
			p.SourceColumn = ColumnNames.GeneralPreviewPhoto;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
