
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _UserPayement : SqlClientEntity
	{
		public _UserPayement()
		{
			this.QuerySource = "UserPayement";
			this.MappingName = "UserPayement";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserPayementLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PayementID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PayementID, PayementID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserPayementLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PayementID
			{
				get
				{
					return new SqlParameter("@PayementID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CardID
			{
				get
				{
					return new SqlParameter("@CardID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CardDesign
			{
				get
				{
					return new SqlParameter("@CardDesign", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter CardCount
			{
				get
				{
					return new SqlParameter("@CardCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EnvelopID
			{
				get
				{
					return new SqlParameter("@EnvelopID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EnvelopCount
			{
				get
				{
					return new SqlParameter("@EnvelopCount", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalPrice
			{
				get
				{
					return new SqlParameter("@TotalPrice", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter PayementDate
			{
				get
				{
					return new SqlParameter("@PayementDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PayementID = "PayementID";
            public const string UserID = "UserID";
            public const string CardID = "CardID";
            public const string CardDesign = "CardDesign";
            public const string CardCount = "CardCount";
            public const string EnvelopID = "EnvelopID";
            public const string EnvelopCount = "EnvelopCount";
            public const string TotalPrice = "TotalPrice";
            public const string PayementDate = "PayementDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PayementID] = _UserPayement.PropertyNames.PayementID;
					ht[UserID] = _UserPayement.PropertyNames.UserID;
					ht[CardID] = _UserPayement.PropertyNames.CardID;
					ht[CardDesign] = _UserPayement.PropertyNames.CardDesign;
					ht[CardCount] = _UserPayement.PropertyNames.CardCount;
					ht[EnvelopID] = _UserPayement.PropertyNames.EnvelopID;
					ht[EnvelopCount] = _UserPayement.PropertyNames.EnvelopCount;
					ht[TotalPrice] = _UserPayement.PropertyNames.TotalPrice;
					ht[PayementDate] = _UserPayement.PropertyNames.PayementDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PayementID = "PayementID";
            public const string UserID = "UserID";
            public const string CardID = "CardID";
            public const string CardDesign = "CardDesign";
            public const string CardCount = "CardCount";
            public const string EnvelopID = "EnvelopID";
            public const string EnvelopCount = "EnvelopCount";
            public const string TotalPrice = "TotalPrice";
            public const string PayementDate = "PayementDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PayementID] = _UserPayement.ColumnNames.PayementID;
					ht[UserID] = _UserPayement.ColumnNames.UserID;
					ht[CardID] = _UserPayement.ColumnNames.CardID;
					ht[CardDesign] = _UserPayement.ColumnNames.CardDesign;
					ht[CardCount] = _UserPayement.ColumnNames.CardCount;
					ht[EnvelopID] = _UserPayement.ColumnNames.EnvelopID;
					ht[EnvelopCount] = _UserPayement.ColumnNames.EnvelopCount;
					ht[TotalPrice] = _UserPayement.ColumnNames.TotalPrice;
					ht[PayementDate] = _UserPayement.ColumnNames.PayementDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PayementID = "s_PayementID";
            public const string UserID = "s_UserID";
            public const string CardID = "s_CardID";
            public const string CardDesign = "s_CardDesign";
            public const string CardCount = "s_CardCount";
            public const string EnvelopID = "s_EnvelopID";
            public const string EnvelopCount = "s_EnvelopCount";
            public const string TotalPrice = "s_TotalPrice";
            public const string PayementDate = "s_PayementDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PayementID
	    {
			get
	        {
				return base.Getint(ColumnNames.PayementID);
			}
			set
	        {
				base.Setint(ColumnNames.PayementID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int CardID
	    {
			get
	        {
				return base.Getint(ColumnNames.CardID);
			}
			set
	        {
				base.Setint(ColumnNames.CardID, value);
			}
		}

		public virtual string CardDesign
	    {
			get
	        {
				return base.Getstring(ColumnNames.CardDesign);
			}
			set
	        {
				base.Setstring(ColumnNames.CardDesign, value);
			}
		}

		public virtual int CardCount
	    {
			get
	        {
				return base.Getint(ColumnNames.CardCount);
			}
			set
	        {
				base.Setint(ColumnNames.CardCount, value);
			}
		}

		public virtual int EnvelopID
	    {
			get
	        {
				return base.Getint(ColumnNames.EnvelopID);
			}
			set
	        {
				base.Setint(ColumnNames.EnvelopID, value);
			}
		}

		public virtual int EnvelopCount
	    {
			get
	        {
				return base.Getint(ColumnNames.EnvelopCount);
			}
			set
	        {
				base.Setint(ColumnNames.EnvelopCount, value);
			}
		}

		public virtual double TotalPrice
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalPrice);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalPrice, value);
			}
		}

		public virtual DateTime PayementDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.PayementDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.PayementDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PayementID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PayementID) ? string.Empty : base.GetintAsString(ColumnNames.PayementID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PayementID);
				else
					this.PayementID = base.SetintAsString(ColumnNames.PayementID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_CardID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardID) ? string.Empty : base.GetintAsString(ColumnNames.CardID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardID);
				else
					this.CardID = base.SetintAsString(ColumnNames.CardID, value);
			}
		}

		public virtual string s_CardDesign
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardDesign) ? string.Empty : base.GetstringAsString(ColumnNames.CardDesign);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardDesign);
				else
					this.CardDesign = base.SetstringAsString(ColumnNames.CardDesign, value);
			}
		}

		public virtual string s_CardCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CardCount) ? string.Empty : base.GetintAsString(ColumnNames.CardCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CardCount);
				else
					this.CardCount = base.SetintAsString(ColumnNames.CardCount, value);
			}
		}

		public virtual string s_EnvelopID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnvelopID) ? string.Empty : base.GetintAsString(ColumnNames.EnvelopID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnvelopID);
				else
					this.EnvelopID = base.SetintAsString(ColumnNames.EnvelopID, value);
			}
		}

		public virtual string s_EnvelopCount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EnvelopCount) ? string.Empty : base.GetintAsString(ColumnNames.EnvelopCount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EnvelopCount);
				else
					this.EnvelopCount = base.SetintAsString(ColumnNames.EnvelopCount, value);
			}
		}

		public virtual string s_TotalPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalPrice) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalPrice);
				else
					this.TotalPrice = base.SetdoubleAsString(ColumnNames.TotalPrice, value);
			}
		}

		public virtual string s_PayementDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PayementDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.PayementDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PayementDate);
				else
					this.PayementDate = base.SetDateTimeAsString(ColumnNames.PayementDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PayementID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PayementID, Parameters.PayementID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardDesign
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardDesign, Parameters.CardDesign);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CardCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CardCount, Parameters.CardCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnvelopID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnvelopID, Parameters.EnvelopID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EnvelopCount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EnvelopCount, Parameters.EnvelopCount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PayementDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PayementDate, Parameters.PayementDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PayementID
		    {
				get
		        {
					if(_PayementID_W == null)
	        	    {
						_PayementID_W = TearOff.PayementID;
					}
					return _PayementID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public WhereParameter CardDesign
		    {
				get
		        {
					if(_CardDesign_W == null)
	        	    {
						_CardDesign_W = TearOff.CardDesign;
					}
					return _CardDesign_W;
				}
			}

			public WhereParameter CardCount
		    {
				get
		        {
					if(_CardCount_W == null)
	        	    {
						_CardCount_W = TearOff.CardCount;
					}
					return _CardCount_W;
				}
			}

			public WhereParameter EnvelopID
		    {
				get
		        {
					if(_EnvelopID_W == null)
	        	    {
						_EnvelopID_W = TearOff.EnvelopID;
					}
					return _EnvelopID_W;
				}
			}

			public WhereParameter EnvelopCount
		    {
				get
		        {
					if(_EnvelopCount_W == null)
	        	    {
						_EnvelopCount_W = TearOff.EnvelopCount;
					}
					return _EnvelopCount_W;
				}
			}

			public WhereParameter TotalPrice
		    {
				get
		        {
					if(_TotalPrice_W == null)
	        	    {
						_TotalPrice_W = TearOff.TotalPrice;
					}
					return _TotalPrice_W;
				}
			}

			public WhereParameter PayementDate
		    {
				get
		        {
					if(_PayementDate_W == null)
	        	    {
						_PayementDate_W = TearOff.PayementDate;
					}
					return _PayementDate_W;
				}
			}

			private WhereParameter _PayementID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _CardID_W = null;
			private WhereParameter _CardDesign_W = null;
			private WhereParameter _CardCount_W = null;
			private WhereParameter _EnvelopID_W = null;
			private WhereParameter _EnvelopCount_W = null;
			private WhereParameter _TotalPrice_W = null;
			private WhereParameter _PayementDate_W = null;

			public void WhereClauseReset()
			{
				_PayementID_W = null;
				_UserID_W = null;
				_CardID_W = null;
				_CardDesign_W = null;
				_CardCount_W = null;
				_EnvelopID_W = null;
				_EnvelopCount_W = null;
				_TotalPrice_W = null;
				_PayementDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PayementID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PayementID, Parameters.PayementID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardID, Parameters.CardID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardDesign
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardDesign, Parameters.CardDesign);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CardCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CardCount, Parameters.CardCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnvelopID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnvelopID, Parameters.EnvelopID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EnvelopCount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EnvelopCount, Parameters.EnvelopCount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PayementDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PayementDate, Parameters.PayementDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PayementID
		    {
				get
		        {
					if(_PayementID_W == null)
	        	    {
						_PayementID_W = TearOff.PayementID;
					}
					return _PayementID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter CardID
		    {
				get
		        {
					if(_CardID_W == null)
	        	    {
						_CardID_W = TearOff.CardID;
					}
					return _CardID_W;
				}
			}

			public AggregateParameter CardDesign
		    {
				get
		        {
					if(_CardDesign_W == null)
	        	    {
						_CardDesign_W = TearOff.CardDesign;
					}
					return _CardDesign_W;
				}
			}

			public AggregateParameter CardCount
		    {
				get
		        {
					if(_CardCount_W == null)
	        	    {
						_CardCount_W = TearOff.CardCount;
					}
					return _CardCount_W;
				}
			}

			public AggregateParameter EnvelopID
		    {
				get
		        {
					if(_EnvelopID_W == null)
	        	    {
						_EnvelopID_W = TearOff.EnvelopID;
					}
					return _EnvelopID_W;
				}
			}

			public AggregateParameter EnvelopCount
		    {
				get
		        {
					if(_EnvelopCount_W == null)
	        	    {
						_EnvelopCount_W = TearOff.EnvelopCount;
					}
					return _EnvelopCount_W;
				}
			}

			public AggregateParameter TotalPrice
		    {
				get
		        {
					if(_TotalPrice_W == null)
	        	    {
						_TotalPrice_W = TearOff.TotalPrice;
					}
					return _TotalPrice_W;
				}
			}

			public AggregateParameter PayementDate
		    {
				get
		        {
					if(_PayementDate_W == null)
	        	    {
						_PayementDate_W = TearOff.PayementDate;
					}
					return _PayementDate_W;
				}
			}

			private AggregateParameter _PayementID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _CardID_W = null;
			private AggregateParameter _CardDesign_W = null;
			private AggregateParameter _CardCount_W = null;
			private AggregateParameter _EnvelopID_W = null;
			private AggregateParameter _EnvelopCount_W = null;
			private AggregateParameter _TotalPrice_W = null;
			private AggregateParameter _PayementDate_W = null;

			public void AggregateClauseReset()
			{
				_PayementID_W = null;
				_UserID_W = null;
				_CardID_W = null;
				_CardDesign_W = null;
				_CardCount_W = null;
				_EnvelopID_W = null;
				_EnvelopCount_W = null;
				_TotalPrice_W = null;
				_PayementDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserPayementInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PayementID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserPayementUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserPayementDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PayementID);
			p.SourceColumn = ColumnNames.PayementID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PayementID);
			p.SourceColumn = ColumnNames.PayementID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardID);
			p.SourceColumn = ColumnNames.CardID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardDesign);
			p.SourceColumn = ColumnNames.CardDesign;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CardCount);
			p.SourceColumn = ColumnNames.CardCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnvelopID);
			p.SourceColumn = ColumnNames.EnvelopID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EnvelopCount);
			p.SourceColumn = ColumnNames.EnvelopCount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalPrice);
			p.SourceColumn = ColumnNames.TotalPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PayementDate);
			p.SourceColumn = ColumnNames.PayementDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
