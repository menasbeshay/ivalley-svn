
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace E3zmni.DAL
{
	public abstract class _UserInfo : SqlClientEntity
	{
		public _UserInfo()
		{
			this.QuerySource = "UserInfo";
			this.MappingName = "UserInfo";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserInfoLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserID, UserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserInfoLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter UserPassword
			{
				get
				{
					return new SqlParameter("@UserPassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FullName
			{
				get
				{
					return new SqlParameter("@FullName", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter UserAddress
			{
				get
				{
					return new SqlParameter("@UserAddress", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter ShippingAddress
			{
				get
				{
					return new SqlParameter("@ShippingAddress", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter MobilePhone
			{
				get
				{
					return new SqlParameter("@MobilePhone", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter LandLine
			{
				get
				{
					return new SqlParameter("@LandLine", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserID = "UserID";
            public const string UserName = "UserName";
            public const string UserPassword = "UserPassword";
            public const string FullName = "FullName";
            public const string UserAddress = "UserAddress";
            public const string ShippingAddress = "ShippingAddress";
            public const string MobilePhone = "MobilePhone";
            public const string LandLine = "LandLine";
            public const string Email = "Email";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _UserInfo.PropertyNames.UserID;
					ht[UserName] = _UserInfo.PropertyNames.UserName;
					ht[UserPassword] = _UserInfo.PropertyNames.UserPassword;
					ht[FullName] = _UserInfo.PropertyNames.FullName;
					ht[UserAddress] = _UserInfo.PropertyNames.UserAddress;
					ht[ShippingAddress] = _UserInfo.PropertyNames.ShippingAddress;
					ht[MobilePhone] = _UserInfo.PropertyNames.MobilePhone;
					ht[LandLine] = _UserInfo.PropertyNames.LandLine;
					ht[Email] = _UserInfo.PropertyNames.Email;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserID = "UserID";
            public const string UserName = "UserName";
            public const string UserPassword = "UserPassword";
            public const string FullName = "FullName";
            public const string UserAddress = "UserAddress";
            public const string ShippingAddress = "ShippingAddress";
            public const string MobilePhone = "MobilePhone";
            public const string LandLine = "LandLine";
            public const string Email = "Email";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _UserInfo.ColumnNames.UserID;
					ht[UserName] = _UserInfo.ColumnNames.UserName;
					ht[UserPassword] = _UserInfo.ColumnNames.UserPassword;
					ht[FullName] = _UserInfo.ColumnNames.FullName;
					ht[UserAddress] = _UserInfo.ColumnNames.UserAddress;
					ht[ShippingAddress] = _UserInfo.ColumnNames.ShippingAddress;
					ht[MobilePhone] = _UserInfo.ColumnNames.MobilePhone;
					ht[LandLine] = _UserInfo.ColumnNames.LandLine;
					ht[Email] = _UserInfo.ColumnNames.Email;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserID = "s_UserID";
            public const string UserName = "s_UserName";
            public const string UserPassword = "s_UserPassword";
            public const string FullName = "s_FullName";
            public const string UserAddress = "s_UserAddress";
            public const string ShippingAddress = "s_ShippingAddress";
            public const string MobilePhone = "s_MobilePhone";
            public const string LandLine = "s_LandLine";
            public const string Email = "s_Email";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string UserPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.UserPassword, value);
			}
		}

		public virtual string FullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FullName);
			}
			set
	        {
				base.Setstring(ColumnNames.FullName, value);
			}
		}

		public virtual string UserAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.UserAddress, value);
			}
		}

		public virtual string ShippingAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShippingAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.ShippingAddress, value);
			}
		}

		public virtual string MobilePhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.MobilePhone);
			}
			set
	        {
				base.Setstring(ColumnNames.MobilePhone, value);
			}
		}

		public virtual string LandLine
	    {
			get
	        {
				return base.Getstring(ColumnNames.LandLine);
			}
			set
	        {
				base.Setstring(ColumnNames.LandLine, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_UserPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserPassword) ? string.Empty : base.GetstringAsString(ColumnNames.UserPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserPassword);
				else
					this.UserPassword = base.SetstringAsString(ColumnNames.UserPassword, value);
			}
		}

		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FullName) ? string.Empty : base.GetstringAsString(ColumnNames.FullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FullName);
				else
					this.FullName = base.SetstringAsString(ColumnNames.FullName, value);
			}
		}

		public virtual string s_UserAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserAddress) ? string.Empty : base.GetstringAsString(ColumnNames.UserAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserAddress);
				else
					this.UserAddress = base.SetstringAsString(ColumnNames.UserAddress, value);
			}
		}

		public virtual string s_ShippingAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShippingAddress) ? string.Empty : base.GetstringAsString(ColumnNames.ShippingAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShippingAddress);
				else
					this.ShippingAddress = base.SetstringAsString(ColumnNames.ShippingAddress, value);
			}
		}

		public virtual string s_MobilePhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MobilePhone) ? string.Empty : base.GetstringAsString(ColumnNames.MobilePhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MobilePhone);
				else
					this.MobilePhone = base.SetstringAsString(ColumnNames.MobilePhone, value);
			}
		}

		public virtual string s_LandLine
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LandLine) ? string.Empty : base.GetstringAsString(ColumnNames.LandLine);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LandLine);
				else
					this.LandLine = base.SetstringAsString(ColumnNames.LandLine, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserPassword, Parameters.UserPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserAddress, Parameters.UserAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShippingAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShippingAddress, Parameters.ShippingAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MobilePhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MobilePhone, Parameters.MobilePhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LandLine
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LandLine, Parameters.LandLine);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter UserPassword
		    {
				get
		        {
					if(_UserPassword_W == null)
	        	    {
						_UserPassword_W = TearOff.UserPassword;
					}
					return _UserPassword_W;
				}
			}

			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter UserAddress
		    {
				get
		        {
					if(_UserAddress_W == null)
	        	    {
						_UserAddress_W = TearOff.UserAddress;
					}
					return _UserAddress_W;
				}
			}

			public WhereParameter ShippingAddress
		    {
				get
		        {
					if(_ShippingAddress_W == null)
	        	    {
						_ShippingAddress_W = TearOff.ShippingAddress;
					}
					return _ShippingAddress_W;
				}
			}

			public WhereParameter MobilePhone
		    {
				get
		        {
					if(_MobilePhone_W == null)
	        	    {
						_MobilePhone_W = TearOff.MobilePhone;
					}
					return _MobilePhone_W;
				}
			}

			public WhereParameter LandLine
		    {
				get
		        {
					if(_LandLine_W == null)
	        	    {
						_LandLine_W = TearOff.LandLine;
					}
					return _LandLine_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			private WhereParameter _UserID_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _UserPassword_W = null;
			private WhereParameter _FullName_W = null;
			private WhereParameter _UserAddress_W = null;
			private WhereParameter _ShippingAddress_W = null;
			private WhereParameter _MobilePhone_W = null;
			private WhereParameter _LandLine_W = null;
			private WhereParameter _Email_W = null;

			public void WhereClauseReset()
			{
				_UserID_W = null;
				_UserName_W = null;
				_UserPassword_W = null;
				_FullName_W = null;
				_UserAddress_W = null;
				_ShippingAddress_W = null;
				_MobilePhone_W = null;
				_LandLine_W = null;
				_Email_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserPassword, Parameters.UserPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserAddress, Parameters.UserAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShippingAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShippingAddress, Parameters.ShippingAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MobilePhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MobilePhone, Parameters.MobilePhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LandLine
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LandLine, Parameters.LandLine);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter UserPassword
		    {
				get
		        {
					if(_UserPassword_W == null)
	        	    {
						_UserPassword_W = TearOff.UserPassword;
					}
					return _UserPassword_W;
				}
			}

			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter UserAddress
		    {
				get
		        {
					if(_UserAddress_W == null)
	        	    {
						_UserAddress_W = TearOff.UserAddress;
					}
					return _UserAddress_W;
				}
			}

			public AggregateParameter ShippingAddress
		    {
				get
		        {
					if(_ShippingAddress_W == null)
	        	    {
						_ShippingAddress_W = TearOff.ShippingAddress;
					}
					return _ShippingAddress_W;
				}
			}

			public AggregateParameter MobilePhone
		    {
				get
		        {
					if(_MobilePhone_W == null)
	        	    {
						_MobilePhone_W = TearOff.MobilePhone;
					}
					return _MobilePhone_W;
				}
			}

			public AggregateParameter LandLine
		    {
				get
		        {
					if(_LandLine_W == null)
	        	    {
						_LandLine_W = TearOff.LandLine;
					}
					return _LandLine_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			private AggregateParameter _UserID_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _UserPassword_W = null;
			private AggregateParameter _FullName_W = null;
			private AggregateParameter _UserAddress_W = null;
			private AggregateParameter _ShippingAddress_W = null;
			private AggregateParameter _MobilePhone_W = null;
			private AggregateParameter _LandLine_W = null;
			private AggregateParameter _Email_W = null;

			public void AggregateClauseReset()
			{
				_UserID_W = null;
				_UserName_W = null;
				_UserPassword_W = null;
				_FullName_W = null;
				_UserAddress_W = null;
				_ShippingAddress_W = null;
				_MobilePhone_W = null;
				_LandLine_W = null;
				_Email_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInfoInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInfoUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInfoDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserPassword);
			p.SourceColumn = ColumnNames.UserPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FullName);
			p.SourceColumn = ColumnNames.FullName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserAddress);
			p.SourceColumn = ColumnNames.UserAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShippingAddress);
			p.SourceColumn = ColumnNames.ShippingAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MobilePhone);
			p.SourceColumn = ColumnNames.MobilePhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LandLine);
			p.SourceColumn = ColumnNames.LandLine;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
