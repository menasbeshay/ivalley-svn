
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace ITravel.DAL
{
	public abstract class _TicketHistory : SqlClientEntity
	{
		public _TicketHistory()
		{
			this.QuerySource = "TicketHistory";
			this.MappingName = "TicketHistory";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TicketHistoryLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TicketHistoryID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TicketHistoryID, TicketHistoryID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TicketHistoryLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TicketHistoryID
			{
				get
				{
					return new SqlParameter("@TicketHistoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TicketID
			{
				get
				{
					return new SqlParameter("@TicketID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter From_AirportID
			{
				get
				{
					return new SqlParameter("@From_AirportID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter To_AirportID
			{
				get
				{
					return new SqlParameter("@To_AirportID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AirLineID
			{
				get
				{
					return new SqlParameter("@AirLineID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FromDate
			{
				get
				{
					return new SqlParameter("@FromDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ToDate
			{
				get
				{
					return new SqlParameter("@ToDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ActualPrice
			{
				get
				{
					return new SqlParameter("@ActualPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter FinalPrice
			{
				get
				{
					return new SqlParameter("@FinalPrice", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AddedValue
			{
				get
				{
					return new SqlParameter("@AddedValue", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AddedPercentage
			{
				get
				{
					return new SqlParameter("@AddedPercentage", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter IsCanceled
			{
				get
				{
					return new SqlParameter("@IsCanceled", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsRefunded
			{
				get
				{
					return new SqlParameter("@IsRefunded", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsConfirmed
			{
				get
				{
					return new SqlParameter("@IsConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter UpdatedDate
			{
				get
				{
					return new SqlParameter("@UpdatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter TicketNo
			{
				get
				{
					return new SqlParameter("@TicketNo", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FlightNo
			{
				get
				{
					return new SqlParameter("@FlightNo", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter SeatNo
			{
				get
				{
					return new SqlParameter("@SeatNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Cabin_type
			{
				get
				{
					return new SqlParameter("@Cabin_type", SqlDbType.NVarChar, 30);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TicketHistoryID = "TicketHistoryID";
            public const string TicketID = "TicketID";
            public const string From_AirportID = "From_AirportID";
            public const string To_AirportID = "To_AirportID";
            public const string AirLineID = "AirLineID";
            public const string FromDate = "FromDate";
            public const string ToDate = "ToDate";
            public const string ActualPrice = "ActualPrice";
            public const string FinalPrice = "FinalPrice";
            public const string AddedValue = "AddedValue";
            public const string AddedPercentage = "AddedPercentage";
            public const string IsCanceled = "IsCanceled";
            public const string IsRefunded = "IsRefunded";
            public const string IsConfirmed = "IsConfirmed";
            public const string UpdatedDate = "UpdatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string TicketNo = "TicketNo";
            public const string FlightNo = "FlightNo";
            public const string SeatNo = "SeatNo";
            public const string Cabin_type = "cabin_type";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TicketHistoryID] = _TicketHistory.PropertyNames.TicketHistoryID;
					ht[TicketID] = _TicketHistory.PropertyNames.TicketID;
					ht[From_AirportID] = _TicketHistory.PropertyNames.From_AirportID;
					ht[To_AirportID] = _TicketHistory.PropertyNames.To_AirportID;
					ht[AirLineID] = _TicketHistory.PropertyNames.AirLineID;
					ht[FromDate] = _TicketHistory.PropertyNames.FromDate;
					ht[ToDate] = _TicketHistory.PropertyNames.ToDate;
					ht[ActualPrice] = _TicketHistory.PropertyNames.ActualPrice;
					ht[FinalPrice] = _TicketHistory.PropertyNames.FinalPrice;
					ht[AddedValue] = _TicketHistory.PropertyNames.AddedValue;
					ht[AddedPercentage] = _TicketHistory.PropertyNames.AddedPercentage;
					ht[IsCanceled] = _TicketHistory.PropertyNames.IsCanceled;
					ht[IsRefunded] = _TicketHistory.PropertyNames.IsRefunded;
					ht[IsConfirmed] = _TicketHistory.PropertyNames.IsConfirmed;
					ht[UpdatedDate] = _TicketHistory.PropertyNames.UpdatedDate;
					ht[UpdatedBy] = _TicketHistory.PropertyNames.UpdatedBy;
					ht[TicketNo] = _TicketHistory.PropertyNames.TicketNo;
					ht[FlightNo] = _TicketHistory.PropertyNames.FlightNo;
					ht[SeatNo] = _TicketHistory.PropertyNames.SeatNo;
					ht[Cabin_type] = _TicketHistory.PropertyNames.Cabin_type;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TicketHistoryID = "TicketHistoryID";
            public const string TicketID = "TicketID";
            public const string From_AirportID = "From_AirportID";
            public const string To_AirportID = "To_AirportID";
            public const string AirLineID = "AirLineID";
            public const string FromDate = "FromDate";
            public const string ToDate = "ToDate";
            public const string ActualPrice = "ActualPrice";
            public const string FinalPrice = "FinalPrice";
            public const string AddedValue = "AddedValue";
            public const string AddedPercentage = "AddedPercentage";
            public const string IsCanceled = "IsCanceled";
            public const string IsRefunded = "IsRefunded";
            public const string IsConfirmed = "IsConfirmed";
            public const string UpdatedDate = "UpdatedDate";
            public const string UpdatedBy = "UpdatedBy";
            public const string TicketNo = "TicketNo";
            public const string FlightNo = "FlightNo";
            public const string SeatNo = "SeatNo";
            public const string Cabin_type = "Cabin_type";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TicketHistoryID] = _TicketHistory.ColumnNames.TicketHistoryID;
					ht[TicketID] = _TicketHistory.ColumnNames.TicketID;
					ht[From_AirportID] = _TicketHistory.ColumnNames.From_AirportID;
					ht[To_AirportID] = _TicketHistory.ColumnNames.To_AirportID;
					ht[AirLineID] = _TicketHistory.ColumnNames.AirLineID;
					ht[FromDate] = _TicketHistory.ColumnNames.FromDate;
					ht[ToDate] = _TicketHistory.ColumnNames.ToDate;
					ht[ActualPrice] = _TicketHistory.ColumnNames.ActualPrice;
					ht[FinalPrice] = _TicketHistory.ColumnNames.FinalPrice;
					ht[AddedValue] = _TicketHistory.ColumnNames.AddedValue;
					ht[AddedPercentage] = _TicketHistory.ColumnNames.AddedPercentage;
					ht[IsCanceled] = _TicketHistory.ColumnNames.IsCanceled;
					ht[IsRefunded] = _TicketHistory.ColumnNames.IsRefunded;
					ht[IsConfirmed] = _TicketHistory.ColumnNames.IsConfirmed;
					ht[UpdatedDate] = _TicketHistory.ColumnNames.UpdatedDate;
					ht[UpdatedBy] = _TicketHistory.ColumnNames.UpdatedBy;
					ht[TicketNo] = _TicketHistory.ColumnNames.TicketNo;
					ht[FlightNo] = _TicketHistory.ColumnNames.FlightNo;
					ht[SeatNo] = _TicketHistory.ColumnNames.SeatNo;
					ht[Cabin_type] = _TicketHistory.ColumnNames.Cabin_type;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TicketHistoryID = "s_TicketHistoryID";
            public const string TicketID = "s_TicketID";
            public const string From_AirportID = "s_From_AirportID";
            public const string To_AirportID = "s_To_AirportID";
            public const string AirLineID = "s_AirLineID";
            public const string FromDate = "s_FromDate";
            public const string ToDate = "s_ToDate";
            public const string ActualPrice = "s_ActualPrice";
            public const string FinalPrice = "s_FinalPrice";
            public const string AddedValue = "s_AddedValue";
            public const string AddedPercentage = "s_AddedPercentage";
            public const string IsCanceled = "s_IsCanceled";
            public const string IsRefunded = "s_IsRefunded";
            public const string IsConfirmed = "s_IsConfirmed";
            public const string UpdatedDate = "s_UpdatedDate";
            public const string UpdatedBy = "s_UpdatedBy";
            public const string TicketNo = "s_TicketNo";
            public const string FlightNo = "s_FlightNo";
            public const string SeatNo = "s_SeatNo";
            public const string Cabin_type = "s_Cabin_type";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TicketHistoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.TicketHistoryID);
			}
			set
	        {
				base.Setint(ColumnNames.TicketHistoryID, value);
			}
		}

		public virtual int TicketID
	    {
			get
	        {
				return base.Getint(ColumnNames.TicketID);
			}
			set
	        {
				base.Setint(ColumnNames.TicketID, value);
			}
		}

		public virtual int From_AirportID
	    {
			get
	        {
				return base.Getint(ColumnNames.From_AirportID);
			}
			set
	        {
				base.Setint(ColumnNames.From_AirportID, value);
			}
		}

		public virtual int To_AirportID
	    {
			get
	        {
				return base.Getint(ColumnNames.To_AirportID);
			}
			set
	        {
				base.Setint(ColumnNames.To_AirportID, value);
			}
		}

		public virtual int AirLineID
	    {
			get
	        {
				return base.Getint(ColumnNames.AirLineID);
			}
			set
	        {
				base.Setint(ColumnNames.AirLineID, value);
			}
		}

		public virtual DateTime FromDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FromDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FromDate, value);
			}
		}

		public virtual DateTime ToDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ToDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ToDate, value);
			}
		}

		public virtual decimal ActualPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.ActualPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.ActualPrice, value);
			}
		}

		public virtual decimal FinalPrice
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.FinalPrice);
			}
			set
	        {
				base.Setdecimal(ColumnNames.FinalPrice, value);
			}
		}

		public virtual decimal AddedValue
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AddedValue);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AddedValue, value);
			}
		}

		public virtual decimal AddedPercentage
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AddedPercentage);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AddedPercentage, value);
			}
		}

		public virtual bool IsCanceled
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCanceled);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCanceled, value);
			}
		}

		public virtual bool IsRefunded
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsRefunded);
			}
			set
	        {
				base.Setbool(ColumnNames.IsRefunded, value);
			}
		}

		public virtual bool IsConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual DateTime UpdatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.UpdatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.UpdatedDate, value);
			}
		}

		public virtual Guid UpdatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string TicketNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.TicketNo);
			}
			set
	        {
				base.Setstring(ColumnNames.TicketNo, value);
			}
		}

		public virtual string FlightNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FlightNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FlightNo, value);
			}
		}

		public virtual int SeatNo
	    {
			get
	        {
				return base.Getint(ColumnNames.SeatNo);
			}
			set
	        {
				base.Setint(ColumnNames.SeatNo, value);
			}
		}

		public virtual string Cabin_type
	    {
			get
	        {
				return base.Getstring(ColumnNames.Cabin_type);
			}
			set
	        {
				base.Setstring(ColumnNames.Cabin_type, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TicketHistoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TicketHistoryID) ? string.Empty : base.GetintAsString(ColumnNames.TicketHistoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TicketHistoryID);
				else
					this.TicketHistoryID = base.SetintAsString(ColumnNames.TicketHistoryID, value);
			}
		}

		public virtual string s_TicketID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TicketID) ? string.Empty : base.GetintAsString(ColumnNames.TicketID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TicketID);
				else
					this.TicketID = base.SetintAsString(ColumnNames.TicketID, value);
			}
		}

		public virtual string s_From_AirportID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.From_AirportID) ? string.Empty : base.GetintAsString(ColumnNames.From_AirportID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.From_AirportID);
				else
					this.From_AirportID = base.SetintAsString(ColumnNames.From_AirportID, value);
			}
		}

		public virtual string s_To_AirportID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.To_AirportID) ? string.Empty : base.GetintAsString(ColumnNames.To_AirportID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.To_AirportID);
				else
					this.To_AirportID = base.SetintAsString(ColumnNames.To_AirportID, value);
			}
		}

		public virtual string s_AirLineID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirLineID) ? string.Empty : base.GetintAsString(ColumnNames.AirLineID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirLineID);
				else
					this.AirLineID = base.SetintAsString(ColumnNames.AirLineID, value);
			}
		}

		public virtual string s_FromDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FromDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromDate);
				else
					this.FromDate = base.SetDateTimeAsString(ColumnNames.FromDate, value);
			}
		}

		public virtual string s_ToDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ToDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ToDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ToDate);
				else
					this.ToDate = base.SetDateTimeAsString(ColumnNames.ToDate, value);
			}
		}

		public virtual string s_ActualPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActualPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.ActualPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActualPrice);
				else
					this.ActualPrice = base.SetdecimalAsString(ColumnNames.ActualPrice, value);
			}
		}

		public virtual string s_FinalPrice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FinalPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.FinalPrice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FinalPrice);
				else
					this.FinalPrice = base.SetdecimalAsString(ColumnNames.FinalPrice, value);
			}
		}

		public virtual string s_AddedValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddedValue) ? string.Empty : base.GetdecimalAsString(ColumnNames.AddedValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddedValue);
				else
					this.AddedValue = base.SetdecimalAsString(ColumnNames.AddedValue, value);
			}
		}

		public virtual string s_AddedPercentage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddedPercentage) ? string.Empty : base.GetdecimalAsString(ColumnNames.AddedPercentage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddedPercentage);
				else
					this.AddedPercentage = base.SetdecimalAsString(ColumnNames.AddedPercentage, value);
			}
		}

		public virtual string s_IsCanceled
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCanceled) ? string.Empty : base.GetboolAsString(ColumnNames.IsCanceled);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCanceled);
				else
					this.IsCanceled = base.SetboolAsString(ColumnNames.IsCanceled, value);
			}
		}

		public virtual string s_IsRefunded
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsRefunded) ? string.Empty : base.GetboolAsString(ColumnNames.IsRefunded);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsRefunded);
				else
					this.IsRefunded = base.SetboolAsString(ColumnNames.IsRefunded, value);
			}
		}

		public virtual string s_IsConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsConfirmed);
				else
					this.IsConfirmed = base.SetboolAsString(ColumnNames.IsConfirmed, value);
			}
		}

		public virtual string s_UpdatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.UpdatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedDate);
				else
					this.UpdatedDate = base.SetDateTimeAsString(ColumnNames.UpdatedDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetGuidAsString(ColumnNames.UpdatedBy, value);
			}
		}

		public virtual string s_TicketNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TicketNo) ? string.Empty : base.GetstringAsString(ColumnNames.TicketNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TicketNo);
				else
					this.TicketNo = base.SetstringAsString(ColumnNames.TicketNo, value);
			}
		}

		public virtual string s_FlightNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightNo) ? string.Empty : base.GetstringAsString(ColumnNames.FlightNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightNo);
				else
					this.FlightNo = base.SetstringAsString(ColumnNames.FlightNo, value);
			}
		}

		public virtual string s_SeatNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SeatNo) ? string.Empty : base.GetintAsString(ColumnNames.SeatNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SeatNo);
				else
					this.SeatNo = base.SetintAsString(ColumnNames.SeatNo, value);
			}
		}

		public virtual string s_Cabin_type
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cabin_type) ? string.Empty : base.GetstringAsString(ColumnNames.Cabin_type);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cabin_type);
				else
					this.Cabin_type = base.SetstringAsString(ColumnNames.Cabin_type, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TicketHistoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TicketHistoryID, Parameters.TicketHistoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TicketID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TicketID, Parameters.TicketID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter From_AirportID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.From_AirportID, Parameters.From_AirportID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter To_AirportID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.To_AirportID, Parameters.To_AirportID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirLineID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirLineID, Parameters.AirLineID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ToDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ToDate, Parameters.ToDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActualPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActualPrice, Parameters.ActualPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FinalPrice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FinalPrice, Parameters.FinalPrice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddedValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddedValue, Parameters.AddedValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddedPercentage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddedPercentage, Parameters.AddedPercentage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCanceled
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCanceled, Parameters.IsCanceled);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsRefunded
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsRefunded, Parameters.IsRefunded);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedDate, Parameters.UpdatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TicketNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TicketNo, Parameters.TicketNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SeatNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SeatNo, Parameters.SeatNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Cabin_type
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cabin_type, Parameters.Cabin_type);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TicketHistoryID
		    {
				get
		        {
					if(_TicketHistoryID_W == null)
	        	    {
						_TicketHistoryID_W = TearOff.TicketHistoryID;
					}
					return _TicketHistoryID_W;
				}
			}

			public WhereParameter TicketID
		    {
				get
		        {
					if(_TicketID_W == null)
	        	    {
						_TicketID_W = TearOff.TicketID;
					}
					return _TicketID_W;
				}
			}

			public WhereParameter From_AirportID
		    {
				get
		        {
					if(_From_AirportID_W == null)
	        	    {
						_From_AirportID_W = TearOff.From_AirportID;
					}
					return _From_AirportID_W;
				}
			}

			public WhereParameter To_AirportID
		    {
				get
		        {
					if(_To_AirportID_W == null)
	        	    {
						_To_AirportID_W = TearOff.To_AirportID;
					}
					return _To_AirportID_W;
				}
			}

			public WhereParameter AirLineID
		    {
				get
		        {
					if(_AirLineID_W == null)
	        	    {
						_AirLineID_W = TearOff.AirLineID;
					}
					return _AirLineID_W;
				}
			}

			public WhereParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public WhereParameter ToDate
		    {
				get
		        {
					if(_ToDate_W == null)
	        	    {
						_ToDate_W = TearOff.ToDate;
					}
					return _ToDate_W;
				}
			}

			public WhereParameter ActualPrice
		    {
				get
		        {
					if(_ActualPrice_W == null)
	        	    {
						_ActualPrice_W = TearOff.ActualPrice;
					}
					return _ActualPrice_W;
				}
			}

			public WhereParameter FinalPrice
		    {
				get
		        {
					if(_FinalPrice_W == null)
	        	    {
						_FinalPrice_W = TearOff.FinalPrice;
					}
					return _FinalPrice_W;
				}
			}

			public WhereParameter AddedValue
		    {
				get
		        {
					if(_AddedValue_W == null)
	        	    {
						_AddedValue_W = TearOff.AddedValue;
					}
					return _AddedValue_W;
				}
			}

			public WhereParameter AddedPercentage
		    {
				get
		        {
					if(_AddedPercentage_W == null)
	        	    {
						_AddedPercentage_W = TearOff.AddedPercentage;
					}
					return _AddedPercentage_W;
				}
			}

			public WhereParameter IsCanceled
		    {
				get
		        {
					if(_IsCanceled_W == null)
	        	    {
						_IsCanceled_W = TearOff.IsCanceled;
					}
					return _IsCanceled_W;
				}
			}

			public WhereParameter IsRefunded
		    {
				get
		        {
					if(_IsRefunded_W == null)
	        	    {
						_IsRefunded_W = TearOff.IsRefunded;
					}
					return _IsRefunded_W;
				}
			}

			public WhereParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public WhereParameter UpdatedDate
		    {
				get
		        {
					if(_UpdatedDate_W == null)
	        	    {
						_UpdatedDate_W = TearOff.UpdatedDate;
					}
					return _UpdatedDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public WhereParameter TicketNo
		    {
				get
		        {
					if(_TicketNo_W == null)
	        	    {
						_TicketNo_W = TearOff.TicketNo;
					}
					return _TicketNo_W;
				}
			}

			public WhereParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public WhereParameter SeatNo
		    {
				get
		        {
					if(_SeatNo_W == null)
	        	    {
						_SeatNo_W = TearOff.SeatNo;
					}
					return _SeatNo_W;
				}
			}

			public WhereParameter Cabin_type
		    {
				get
		        {
					if(_Cabin_type_W == null)
	        	    {
						_Cabin_type_W = TearOff.Cabin_type;
					}
					return _Cabin_type_W;
				}
			}

			private WhereParameter _TicketHistoryID_W = null;
			private WhereParameter _TicketID_W = null;
			private WhereParameter _From_AirportID_W = null;
			private WhereParameter _To_AirportID_W = null;
			private WhereParameter _AirLineID_W = null;
			private WhereParameter _FromDate_W = null;
			private WhereParameter _ToDate_W = null;
			private WhereParameter _ActualPrice_W = null;
			private WhereParameter _FinalPrice_W = null;
			private WhereParameter _AddedValue_W = null;
			private WhereParameter _AddedPercentage_W = null;
			private WhereParameter _IsCanceled_W = null;
			private WhereParameter _IsRefunded_W = null;
			private WhereParameter _IsConfirmed_W = null;
			private WhereParameter _UpdatedDate_W = null;
			private WhereParameter _UpdatedBy_W = null;
			private WhereParameter _TicketNo_W = null;
			private WhereParameter _FlightNo_W = null;
			private WhereParameter _SeatNo_W = null;
			private WhereParameter _Cabin_type_W = null;

			public void WhereClauseReset()
			{
				_TicketHistoryID_W = null;
				_TicketID_W = null;
				_From_AirportID_W = null;
				_To_AirportID_W = null;
				_AirLineID_W = null;
				_FromDate_W = null;
				_ToDate_W = null;
				_ActualPrice_W = null;
				_FinalPrice_W = null;
				_AddedValue_W = null;
				_AddedPercentage_W = null;
				_IsCanceled_W = null;
				_IsRefunded_W = null;
				_IsConfirmed_W = null;
				_UpdatedDate_W = null;
				_UpdatedBy_W = null;
				_TicketNo_W = null;
				_FlightNo_W = null;
				_SeatNo_W = null;
				_Cabin_type_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TicketHistoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TicketHistoryID, Parameters.TicketHistoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TicketID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TicketID, Parameters.TicketID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter From_AirportID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.From_AirportID, Parameters.From_AirportID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter To_AirportID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.To_AirportID, Parameters.To_AirportID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirLineID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirLineID, Parameters.AirLineID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ToDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ToDate, Parameters.ToDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActualPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActualPrice, Parameters.ActualPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FinalPrice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FinalPrice, Parameters.FinalPrice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddedValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedValue, Parameters.AddedValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddedPercentage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddedPercentage, Parameters.AddedPercentage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCanceled
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCanceled, Parameters.IsCanceled);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsRefunded
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsRefunded, Parameters.IsRefunded);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedDate, Parameters.UpdatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TicketNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TicketNo, Parameters.TicketNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SeatNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SeatNo, Parameters.SeatNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Cabin_type
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cabin_type, Parameters.Cabin_type);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TicketHistoryID
		    {
				get
		        {
					if(_TicketHistoryID_W == null)
	        	    {
						_TicketHistoryID_W = TearOff.TicketHistoryID;
					}
					return _TicketHistoryID_W;
				}
			}

			public AggregateParameter TicketID
		    {
				get
		        {
					if(_TicketID_W == null)
	        	    {
						_TicketID_W = TearOff.TicketID;
					}
					return _TicketID_W;
				}
			}

			public AggregateParameter From_AirportID
		    {
				get
		        {
					if(_From_AirportID_W == null)
	        	    {
						_From_AirportID_W = TearOff.From_AirportID;
					}
					return _From_AirportID_W;
				}
			}

			public AggregateParameter To_AirportID
		    {
				get
		        {
					if(_To_AirportID_W == null)
	        	    {
						_To_AirportID_W = TearOff.To_AirportID;
					}
					return _To_AirportID_W;
				}
			}

			public AggregateParameter AirLineID
		    {
				get
		        {
					if(_AirLineID_W == null)
	        	    {
						_AirLineID_W = TearOff.AirLineID;
					}
					return _AirLineID_W;
				}
			}

			public AggregateParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public AggregateParameter ToDate
		    {
				get
		        {
					if(_ToDate_W == null)
	        	    {
						_ToDate_W = TearOff.ToDate;
					}
					return _ToDate_W;
				}
			}

			public AggregateParameter ActualPrice
		    {
				get
		        {
					if(_ActualPrice_W == null)
	        	    {
						_ActualPrice_W = TearOff.ActualPrice;
					}
					return _ActualPrice_W;
				}
			}

			public AggregateParameter FinalPrice
		    {
				get
		        {
					if(_FinalPrice_W == null)
	        	    {
						_FinalPrice_W = TearOff.FinalPrice;
					}
					return _FinalPrice_W;
				}
			}

			public AggregateParameter AddedValue
		    {
				get
		        {
					if(_AddedValue_W == null)
	        	    {
						_AddedValue_W = TearOff.AddedValue;
					}
					return _AddedValue_W;
				}
			}

			public AggregateParameter AddedPercentage
		    {
				get
		        {
					if(_AddedPercentage_W == null)
	        	    {
						_AddedPercentage_W = TearOff.AddedPercentage;
					}
					return _AddedPercentage_W;
				}
			}

			public AggregateParameter IsCanceled
		    {
				get
		        {
					if(_IsCanceled_W == null)
	        	    {
						_IsCanceled_W = TearOff.IsCanceled;
					}
					return _IsCanceled_W;
				}
			}

			public AggregateParameter IsRefunded
		    {
				get
		        {
					if(_IsRefunded_W == null)
	        	    {
						_IsRefunded_W = TearOff.IsRefunded;
					}
					return _IsRefunded_W;
				}
			}

			public AggregateParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			public AggregateParameter UpdatedDate
		    {
				get
		        {
					if(_UpdatedDate_W == null)
	        	    {
						_UpdatedDate_W = TearOff.UpdatedDate;
					}
					return _UpdatedDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			public AggregateParameter TicketNo
		    {
				get
		        {
					if(_TicketNo_W == null)
	        	    {
						_TicketNo_W = TearOff.TicketNo;
					}
					return _TicketNo_W;
				}
			}

			public AggregateParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public AggregateParameter SeatNo
		    {
				get
		        {
					if(_SeatNo_W == null)
	        	    {
						_SeatNo_W = TearOff.SeatNo;
					}
					return _SeatNo_W;
				}
			}

			public AggregateParameter Cabin_type
		    {
				get
		        {
					if(_Cabin_type_W == null)
	        	    {
						_Cabin_type_W = TearOff.Cabin_type;
					}
					return _Cabin_type_W;
				}
			}

			private AggregateParameter _TicketHistoryID_W = null;
			private AggregateParameter _TicketID_W = null;
			private AggregateParameter _From_AirportID_W = null;
			private AggregateParameter _To_AirportID_W = null;
			private AggregateParameter _AirLineID_W = null;
			private AggregateParameter _FromDate_W = null;
			private AggregateParameter _ToDate_W = null;
			private AggregateParameter _ActualPrice_W = null;
			private AggregateParameter _FinalPrice_W = null;
			private AggregateParameter _AddedValue_W = null;
			private AggregateParameter _AddedPercentage_W = null;
			private AggregateParameter _IsCanceled_W = null;
			private AggregateParameter _IsRefunded_W = null;
			private AggregateParameter _IsConfirmed_W = null;
			private AggregateParameter _UpdatedDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;
			private AggregateParameter _TicketNo_W = null;
			private AggregateParameter _FlightNo_W = null;
			private AggregateParameter _SeatNo_W = null;
			private AggregateParameter _Cabin_type_W = null;

			public void AggregateClauseReset()
			{
				_TicketHistoryID_W = null;
				_TicketID_W = null;
				_From_AirportID_W = null;
				_To_AirportID_W = null;
				_AirLineID_W = null;
				_FromDate_W = null;
				_ToDate_W = null;
				_ActualPrice_W = null;
				_FinalPrice_W = null;
				_AddedValue_W = null;
				_AddedPercentage_W = null;
				_IsCanceled_W = null;
				_IsRefunded_W = null;
				_IsConfirmed_W = null;
				_UpdatedDate_W = null;
				_UpdatedBy_W = null;
				_TicketNo_W = null;
				_FlightNo_W = null;
				_SeatNo_W = null;
				_Cabin_type_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketHistoryInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TicketHistoryID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketHistoryUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TicketHistoryDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TicketHistoryID);
			p.SourceColumn = ColumnNames.TicketHistoryID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TicketHistoryID);
			p.SourceColumn = ColumnNames.TicketHistoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TicketID);
			p.SourceColumn = ColumnNames.TicketID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.From_AirportID);
			p.SourceColumn = ColumnNames.From_AirportID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.To_AirportID);
			p.SourceColumn = ColumnNames.To_AirportID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirLineID);
			p.SourceColumn = ColumnNames.AirLineID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromDate);
			p.SourceColumn = ColumnNames.FromDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ToDate);
			p.SourceColumn = ColumnNames.ToDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActualPrice);
			p.SourceColumn = ColumnNames.ActualPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FinalPrice);
			p.SourceColumn = ColumnNames.FinalPrice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddedValue);
			p.SourceColumn = ColumnNames.AddedValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddedPercentage);
			p.SourceColumn = ColumnNames.AddedPercentage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCanceled);
			p.SourceColumn = ColumnNames.IsCanceled;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsRefunded);
			p.SourceColumn = ColumnNames.IsRefunded;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsConfirmed);
			p.SourceColumn = ColumnNames.IsConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedDate);
			p.SourceColumn = ColumnNames.UpdatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TicketNo);
			p.SourceColumn = ColumnNames.TicketNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightNo);
			p.SourceColumn = ColumnNames.FlightNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SeatNo);
			p.SourceColumn = ColumnNames.SeatNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Cabin_type);
			p.SourceColumn = ColumnNames.Cabin_type;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
