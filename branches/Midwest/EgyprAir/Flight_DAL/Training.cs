
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Training : SqlClientEntity
	{
		public _Training()
		{
			this.QuerySource = "Training";
			this.MappingName = "Training";
            this.SchemaTableView = "Training.";
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TrainingLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TrainingID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TrainingID, TrainingID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TrainingLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TrainingID
			{
				get
				{
					return new SqlParameter("@TrainingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainingCode
			{
				get
				{
					return new SqlParameter("@TrainingCode", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter AirPlaneModel
			{
				get
				{
					return new SqlParameter("@AirPlaneModel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainingPlace
			{
				get
				{
					return new SqlParameter("@TrainingPlace", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter AssignedByID
			{
				get
				{
					return new SqlParameter("@AssignedByID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsSpecial
			{
				get
				{
					return new SqlParameter("@IsSpecial", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsApproved
			{
				get
				{
					return new SqlParameter("@IsApproved", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TravelDate
			{
				get
				{
					return new SqlParameter("@TravelDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter BackDate
			{
				get
				{
					return new SqlParameter("@BackDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TrainerID
			{
				get
				{
					return new SqlParameter("@TrainerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainerTitleID
			{
				get
				{
					return new SqlParameter("@TrainerTitleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CourseID
			{
				get
				{
					return new SqlParameter("@CourseID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TrainingID = "TrainingID";
            public const string TrainingCode = "TrainingCode";
            public const string AirPlaneModel = "AirPlaneModel";
            public const string TrainingPlace = "TrainingPlace";
            public const string AssignedByID = "AssignedByID";
            public const string IsSpecial = "IsSpecial";
            public const string IsApproved = "IsApproved";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string TravelDate = "TravelDate";
            public const string BackDate = "BackDate";
            public const string TrainerID = "TrainerID";
            public const string TrainerTitleID = "TrainerTitleID";
            public const string CourseID = "CourseID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TrainingID] = _Training.PropertyNames.TrainingID;
					ht[TrainingCode] = _Training.PropertyNames.TrainingCode;
					ht[AirPlaneModel] = _Training.PropertyNames.AirPlaneModel;
					ht[TrainingPlace] = _Training.PropertyNames.TrainingPlace;
					ht[AssignedByID] = _Training.PropertyNames.AssignedByID;
					ht[IsSpecial] = _Training.PropertyNames.IsSpecial;
					ht[IsApproved] = _Training.PropertyNames.IsApproved;
					ht[StartDate] = _Training.PropertyNames.StartDate;
					ht[EndDate] = _Training.PropertyNames.EndDate;
					ht[TravelDate] = _Training.PropertyNames.TravelDate;
					ht[BackDate] = _Training.PropertyNames.BackDate;
					ht[TrainerID] = _Training.PropertyNames.TrainerID;
					ht[TrainerTitleID] = _Training.PropertyNames.TrainerTitleID;
					ht[CourseID] = _Training.PropertyNames.CourseID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TrainingID = "TrainingID";
            public const string TrainingCode = "TrainingCode";
            public const string AirPlaneModel = "AirPlaneModel";
            public const string TrainingPlace = "TrainingPlace";
            public const string AssignedByID = "AssignedByID";
            public const string IsSpecial = "IsSpecial";
            public const string IsApproved = "IsApproved";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string TravelDate = "TravelDate";
            public const string BackDate = "BackDate";
            public const string TrainerID = "TrainerID";
            public const string TrainerTitleID = "TrainerTitleID";
            public const string CourseID = "CourseID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TrainingID] = _Training.ColumnNames.TrainingID;
					ht[TrainingCode] = _Training.ColumnNames.TrainingCode;
					ht[AirPlaneModel] = _Training.ColumnNames.AirPlaneModel;
					ht[TrainingPlace] = _Training.ColumnNames.TrainingPlace;
					ht[AssignedByID] = _Training.ColumnNames.AssignedByID;
					ht[IsSpecial] = _Training.ColumnNames.IsSpecial;
					ht[IsApproved] = _Training.ColumnNames.IsApproved;
					ht[StartDate] = _Training.ColumnNames.StartDate;
					ht[EndDate] = _Training.ColumnNames.EndDate;
					ht[TravelDate] = _Training.ColumnNames.TravelDate;
					ht[BackDate] = _Training.ColumnNames.BackDate;
					ht[TrainerID] = _Training.ColumnNames.TrainerID;
					ht[TrainerTitleID] = _Training.ColumnNames.TrainerTitleID;
					ht[CourseID] = _Training.ColumnNames.CourseID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TrainingID = "s_TrainingID";
            public const string TrainingCode = "s_TrainingCode";
            public const string AirPlaneModel = "s_AirPlaneModel";
            public const string TrainingPlace = "s_TrainingPlace";
            public const string AssignedByID = "s_AssignedByID";
            public const string IsSpecial = "s_IsSpecial";
            public const string IsApproved = "s_IsApproved";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";
            public const string TravelDate = "s_TravelDate";
            public const string BackDate = "s_BackDate";
            public const string TrainerID = "s_TrainerID";
            public const string TrainerTitleID = "s_TrainerTitleID";
            public const string CourseID = "s_CourseID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TrainingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainingID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainingID, value);
			}
		}

		public virtual string TrainingCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.TrainingCode);
			}
			set
	        {
				base.Setstring(ColumnNames.TrainingCode, value);
			}
		}

		public virtual int AirPlaneModel
	    {
			get
	        {
				return base.Getint(ColumnNames.AirPlaneModel);
			}
			set
	        {
				base.Setint(ColumnNames.AirPlaneModel, value);
			}
		}

		public virtual string TrainingPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.TrainingPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.TrainingPlace, value);
			}
		}

		public virtual int AssignedByID
	    {
			get
	        {
				return base.Getint(ColumnNames.AssignedByID);
			}
			set
	        {
				base.Setint(ColumnNames.AssignedByID, value);
			}
		}

		public virtual bool IsSpecial
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsSpecial);
			}
			set
	        {
				base.Setbool(ColumnNames.IsSpecial, value);
			}
		}

		public virtual bool IsApproved
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsApproved);
			}
			set
	        {
				base.Setbool(ColumnNames.IsApproved, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual DateTime TravelDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TravelDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TravelDate, value);
			}
		}

		public virtual DateTime BackDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BackDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BackDate, value);
			}
		}

		public virtual int TrainerID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainerID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainerID, value);
			}
		}

		public virtual int TrainerTitleID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainerTitleID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainerTitleID, value);
			}
		}

		public virtual int CourseID
	    {
			get
	        {
				return base.Getint(ColumnNames.CourseID);
			}
			set
	        {
				base.Setint(ColumnNames.CourseID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TrainingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainingID) ? string.Empty : base.GetintAsString(ColumnNames.TrainingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainingID);
				else
					this.TrainingID = base.SetintAsString(ColumnNames.TrainingID, value);
			}
		}

		public virtual string s_TrainingCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainingCode) ? string.Empty : base.GetstringAsString(ColumnNames.TrainingCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainingCode);
				else
					this.TrainingCode = base.SetstringAsString(ColumnNames.TrainingCode, value);
			}
		}

		public virtual string s_AirPlaneModel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirPlaneModel) ? string.Empty : base.GetintAsString(ColumnNames.AirPlaneModel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirPlaneModel);
				else
					this.AirPlaneModel = base.SetintAsString(ColumnNames.AirPlaneModel, value);
			}
		}

		public virtual string s_TrainingPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainingPlace) ? string.Empty : base.GetstringAsString(ColumnNames.TrainingPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainingPlace);
				else
					this.TrainingPlace = base.SetstringAsString(ColumnNames.TrainingPlace, value);
			}
		}

		public virtual string s_AssignedByID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AssignedByID) ? string.Empty : base.GetintAsString(ColumnNames.AssignedByID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AssignedByID);
				else
					this.AssignedByID = base.SetintAsString(ColumnNames.AssignedByID, value);
			}
		}

		public virtual string s_IsSpecial
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsSpecial) ? string.Empty : base.GetboolAsString(ColumnNames.IsSpecial);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsSpecial);
				else
					this.IsSpecial = base.SetboolAsString(ColumnNames.IsSpecial, value);
			}
		}

		public virtual string s_IsApproved
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsApproved) ? string.Empty : base.GetboolAsString(ColumnNames.IsApproved);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsApproved);
				else
					this.IsApproved = base.SetboolAsString(ColumnNames.IsApproved, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_TravelDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TravelDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TravelDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TravelDate);
				else
					this.TravelDate = base.SetDateTimeAsString(ColumnNames.TravelDate, value);
			}
		}

		public virtual string s_BackDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BackDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BackDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BackDate);
				else
					this.BackDate = base.SetDateTimeAsString(ColumnNames.BackDate, value);
			}
		}

		public virtual string s_TrainerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainerID) ? string.Empty : base.GetintAsString(ColumnNames.TrainerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainerID);
				else
					this.TrainerID = base.SetintAsString(ColumnNames.TrainerID, value);
			}
		}

		public virtual string s_TrainerTitleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainerTitleID) ? string.Empty : base.GetintAsString(ColumnNames.TrainerTitleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainerTitleID);
				else
					this.TrainerTitleID = base.SetintAsString(ColumnNames.TrainerTitleID, value);
			}
		}

		public virtual string s_CourseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CourseID) ? string.Empty : base.GetintAsString(ColumnNames.CourseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CourseID);
				else
					this.CourseID = base.SetintAsString(ColumnNames.CourseID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TrainingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainingID, Parameters.TrainingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainingCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainingCode, Parameters.TrainingCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirPlaneModel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirPlaneModel, Parameters.AirPlaneModel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainingPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainingPlace, Parameters.TrainingPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AssignedByID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AssignedByID, Parameters.AssignedByID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsSpecial
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsSpecial, Parameters.IsSpecial);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsApproved
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TravelDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TravelDate, Parameters.TravelDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BackDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BackDate, Parameters.BackDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainerID, Parameters.TrainerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainerTitleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainerTitleID, Parameters.TrainerTitleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CourseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CourseID, Parameters.CourseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TrainingID
		    {
				get
		        {
					if(_TrainingID_W == null)
	        	    {
						_TrainingID_W = TearOff.TrainingID;
					}
					return _TrainingID_W;
				}
			}

			public WhereParameter TrainingCode
		    {
				get
		        {
					if(_TrainingCode_W == null)
	        	    {
						_TrainingCode_W = TearOff.TrainingCode;
					}
					return _TrainingCode_W;
				}
			}

			public WhereParameter AirPlaneModel
		    {
				get
		        {
					if(_AirPlaneModel_W == null)
	        	    {
						_AirPlaneModel_W = TearOff.AirPlaneModel;
					}
					return _AirPlaneModel_W;
				}
			}

			public WhereParameter TrainingPlace
		    {
				get
		        {
					if(_TrainingPlace_W == null)
	        	    {
						_TrainingPlace_W = TearOff.TrainingPlace;
					}
					return _TrainingPlace_W;
				}
			}

			public WhereParameter AssignedByID
		    {
				get
		        {
					if(_AssignedByID_W == null)
	        	    {
						_AssignedByID_W = TearOff.AssignedByID;
					}
					return _AssignedByID_W;
				}
			}

			public WhereParameter IsSpecial
		    {
				get
		        {
					if(_IsSpecial_W == null)
	        	    {
						_IsSpecial_W = TearOff.IsSpecial;
					}
					return _IsSpecial_W;
				}
			}

			public WhereParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter TravelDate
		    {
				get
		        {
					if(_TravelDate_W == null)
	        	    {
						_TravelDate_W = TearOff.TravelDate;
					}
					return _TravelDate_W;
				}
			}

			public WhereParameter BackDate
		    {
				get
		        {
					if(_BackDate_W == null)
	        	    {
						_BackDate_W = TearOff.BackDate;
					}
					return _BackDate_W;
				}
			}

			public WhereParameter TrainerID
		    {
				get
		        {
					if(_TrainerID_W == null)
	        	    {
						_TrainerID_W = TearOff.TrainerID;
					}
					return _TrainerID_W;
				}
			}

			public WhereParameter TrainerTitleID
		    {
				get
		        {
					if(_TrainerTitleID_W == null)
	        	    {
						_TrainerTitleID_W = TearOff.TrainerTitleID;
					}
					return _TrainerTitleID_W;
				}
			}

			public WhereParameter CourseID
		    {
				get
		        {
					if(_CourseID_W == null)
	        	    {
						_CourseID_W = TearOff.CourseID;
					}
					return _CourseID_W;
				}
			}

			private WhereParameter _TrainingID_W = null;
			private WhereParameter _TrainingCode_W = null;
			private WhereParameter _AirPlaneModel_W = null;
			private WhereParameter _TrainingPlace_W = null;
			private WhereParameter _AssignedByID_W = null;
			private WhereParameter _IsSpecial_W = null;
			private WhereParameter _IsApproved_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _TravelDate_W = null;
			private WhereParameter _BackDate_W = null;
			private WhereParameter _TrainerID_W = null;
			private WhereParameter _TrainerTitleID_W = null;
			private WhereParameter _CourseID_W = null;

			public void WhereClauseReset()
			{
				_TrainingID_W = null;
				_TrainingCode_W = null;
				_AirPlaneModel_W = null;
				_TrainingPlace_W = null;
				_AssignedByID_W = null;
				_IsSpecial_W = null;
				_IsApproved_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_TravelDate_W = null;
				_BackDate_W = null;
				_TrainerID_W = null;
				_TrainerTitleID_W = null;
				_CourseID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TrainingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainingID, Parameters.TrainingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainingCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainingCode, Parameters.TrainingCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirPlaneModel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirPlaneModel, Parameters.AirPlaneModel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainingPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainingPlace, Parameters.TrainingPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AssignedByID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AssignedByID, Parameters.AssignedByID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsSpecial
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsSpecial, Parameters.IsSpecial);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsApproved
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsApproved, Parameters.IsApproved);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TravelDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TravelDate, Parameters.TravelDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BackDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BackDate, Parameters.BackDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainerID, Parameters.TrainerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainerTitleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainerTitleID, Parameters.TrainerTitleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CourseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CourseID, Parameters.CourseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TrainingID
		    {
				get
		        {
					if(_TrainingID_W == null)
	        	    {
						_TrainingID_W = TearOff.TrainingID;
					}
					return _TrainingID_W;
				}
			}

			public AggregateParameter TrainingCode
		    {
				get
		        {
					if(_TrainingCode_W == null)
	        	    {
						_TrainingCode_W = TearOff.TrainingCode;
					}
					return _TrainingCode_W;
				}
			}

			public AggregateParameter AirPlaneModel
		    {
				get
		        {
					if(_AirPlaneModel_W == null)
	        	    {
						_AirPlaneModel_W = TearOff.AirPlaneModel;
					}
					return _AirPlaneModel_W;
				}
			}

			public AggregateParameter TrainingPlace
		    {
				get
		        {
					if(_TrainingPlace_W == null)
	        	    {
						_TrainingPlace_W = TearOff.TrainingPlace;
					}
					return _TrainingPlace_W;
				}
			}

			public AggregateParameter AssignedByID
		    {
				get
		        {
					if(_AssignedByID_W == null)
	        	    {
						_AssignedByID_W = TearOff.AssignedByID;
					}
					return _AssignedByID_W;
				}
			}

			public AggregateParameter IsSpecial
		    {
				get
		        {
					if(_IsSpecial_W == null)
	        	    {
						_IsSpecial_W = TearOff.IsSpecial;
					}
					return _IsSpecial_W;
				}
			}

			public AggregateParameter IsApproved
		    {
				get
		        {
					if(_IsApproved_W == null)
	        	    {
						_IsApproved_W = TearOff.IsApproved;
					}
					return _IsApproved_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter TravelDate
		    {
				get
		        {
					if(_TravelDate_W == null)
	        	    {
						_TravelDate_W = TearOff.TravelDate;
					}
					return _TravelDate_W;
				}
			}

			public AggregateParameter BackDate
		    {
				get
		        {
					if(_BackDate_W == null)
	        	    {
						_BackDate_W = TearOff.BackDate;
					}
					return _BackDate_W;
				}
			}

			public AggregateParameter TrainerID
		    {
				get
		        {
					if(_TrainerID_W == null)
	        	    {
						_TrainerID_W = TearOff.TrainerID;
					}
					return _TrainerID_W;
				}
			}

			public AggregateParameter TrainerTitleID
		    {
				get
		        {
					if(_TrainerTitleID_W == null)
	        	    {
						_TrainerTitleID_W = TearOff.TrainerTitleID;
					}
					return _TrainerTitleID_W;
				}
			}

			public AggregateParameter CourseID
		    {
				get
		        {
					if(_CourseID_W == null)
	        	    {
						_CourseID_W = TearOff.CourseID;
					}
					return _CourseID_W;
				}
			}

			private AggregateParameter _TrainingID_W = null;
			private AggregateParameter _TrainingCode_W = null;
			private AggregateParameter _AirPlaneModel_W = null;
			private AggregateParameter _TrainingPlace_W = null;
			private AggregateParameter _AssignedByID_W = null;
			private AggregateParameter _IsSpecial_W = null;
			private AggregateParameter _IsApproved_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _TravelDate_W = null;
			private AggregateParameter _BackDate_W = null;
			private AggregateParameter _TrainerID_W = null;
			private AggregateParameter _TrainerTitleID_W = null;
			private AggregateParameter _CourseID_W = null;

			public void AggregateClauseReset()
			{
				_TrainingID_W = null;
				_TrainingCode_W = null;
				_AirPlaneModel_W = null;
				_TrainingPlace_W = null;
				_AssignedByID_W = null;
				_IsSpecial_W = null;
				_IsApproved_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_TravelDate_W = null;
				_BackDate_W = null;
				_TrainerID_W = null;
				_TrainerTitleID_W = null;
				_CourseID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TrainingInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TrainingID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TrainingUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TrainingDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TrainingID);
			p.SourceColumn = ColumnNames.TrainingID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TrainingID);
			p.SourceColumn = ColumnNames.TrainingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainingCode);
			p.SourceColumn = ColumnNames.TrainingCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirPlaneModel);
			p.SourceColumn = ColumnNames.AirPlaneModel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainingPlace);
			p.SourceColumn = ColumnNames.TrainingPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AssignedByID);
			p.SourceColumn = ColumnNames.AssignedByID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsSpecial);
			p.SourceColumn = ColumnNames.IsSpecial;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsApproved);
			p.SourceColumn = ColumnNames.IsApproved;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TravelDate);
			p.SourceColumn = ColumnNames.TravelDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BackDate);
			p.SourceColumn = ColumnNames.BackDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainerID);
			p.SourceColumn = ColumnNames.TrainerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainerTitleID);
			p.SourceColumn = ColumnNames.TrainerTitleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CourseID);
			p.SourceColumn = ColumnNames.CourseID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
