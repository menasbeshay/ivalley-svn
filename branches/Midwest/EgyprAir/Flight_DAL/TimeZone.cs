
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _TimeZone : SqlClientEntity
	{
		public _TimeZone()
		{
			this.QuerySource = "TimeZone";
			this.MappingName = "TimeZone";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TimeZoneLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TimeZoneID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TimeZoneID, TimeZoneID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TimeZoneLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TimeZoneID
			{
				get
				{
					return new SqlParameter("@TimeZoneID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DisplayName
			{
				get
				{
					return new SqlParameter("@DisplayName", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter Hours
			{
				get
				{
					return new SqlParameter("@Hours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Mins
			{
				get
				{
					return new SqlParameter("@Mins", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TimeZoneID = "TimeZoneID";
            public const string DisplayName = "DisplayName";
            public const string Hours = "Hours";
            public const string Mins = "Mins";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TimeZoneID] = _TimeZone.PropertyNames.TimeZoneID;
					ht[DisplayName] = _TimeZone.PropertyNames.DisplayName;
					ht[Hours] = _TimeZone.PropertyNames.Hours;
					ht[Mins] = _TimeZone.PropertyNames.Mins;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TimeZoneID = "TimeZoneID";
            public const string DisplayName = "DisplayName";
            public const string Hours = "Hours";
            public const string Mins = "Mins";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TimeZoneID] = _TimeZone.ColumnNames.TimeZoneID;
					ht[DisplayName] = _TimeZone.ColumnNames.DisplayName;
					ht[Hours] = _TimeZone.ColumnNames.Hours;
					ht[Mins] = _TimeZone.ColumnNames.Mins;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TimeZoneID = "s_TimeZoneID";
            public const string DisplayName = "s_DisplayName";
            public const string Hours = "s_Hours";
            public const string Mins = "s_Mins";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TimeZoneID
	    {
			get
	        {
				return base.Getint(ColumnNames.TimeZoneID);
			}
			set
	        {
				base.Setint(ColumnNames.TimeZoneID, value);
			}
		}

		public virtual string DisplayName
	    {
			get
	        {
				return base.Getstring(ColumnNames.DisplayName);
			}
			set
	        {
				base.Setstring(ColumnNames.DisplayName, value);
			}
		}

		public virtual int Hours
	    {
			get
	        {
				return base.Getint(ColumnNames.Hours);
			}
			set
	        {
				base.Setint(ColumnNames.Hours, value);
			}
		}

		public virtual int Mins
	    {
			get
	        {
				return base.Getint(ColumnNames.Mins);
			}
			set
	        {
				base.Setint(ColumnNames.Mins, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TimeZoneID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TimeZoneID) ? string.Empty : base.GetintAsString(ColumnNames.TimeZoneID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TimeZoneID);
				else
					this.TimeZoneID = base.SetintAsString(ColumnNames.TimeZoneID, value);
			}
		}

		public virtual string s_DisplayName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DisplayName) ? string.Empty : base.GetstringAsString(ColumnNames.DisplayName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DisplayName);
				else
					this.DisplayName = base.SetstringAsString(ColumnNames.DisplayName, value);
			}
		}

		public virtual string s_Hours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Hours) ? string.Empty : base.GetintAsString(ColumnNames.Hours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Hours);
				else
					this.Hours = base.SetintAsString(ColumnNames.Hours, value);
			}
		}

		public virtual string s_Mins
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mins) ? string.Empty : base.GetintAsString(ColumnNames.Mins);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mins);
				else
					this.Mins = base.SetintAsString(ColumnNames.Mins, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TimeZoneID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TimeZoneID, Parameters.TimeZoneID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DisplayName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Hours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Hours, Parameters.Hours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mins
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mins, Parameters.Mins);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TimeZoneID
		    {
				get
		        {
					if(_TimeZoneID_W == null)
	        	    {
						_TimeZoneID_W = TearOff.TimeZoneID;
					}
					return _TimeZoneID_W;
				}
			}

			public WhereParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public WhereParameter Hours
		    {
				get
		        {
					if(_Hours_W == null)
	        	    {
						_Hours_W = TearOff.Hours;
					}
					return _Hours_W;
				}
			}

			public WhereParameter Mins
		    {
				get
		        {
					if(_Mins_W == null)
	        	    {
						_Mins_W = TearOff.Mins;
					}
					return _Mins_W;
				}
			}

			private WhereParameter _TimeZoneID_W = null;
			private WhereParameter _DisplayName_W = null;
			private WhereParameter _Hours_W = null;
			private WhereParameter _Mins_W = null;

			public void WhereClauseReset()
			{
				_TimeZoneID_W = null;
				_DisplayName_W = null;
				_Hours_W = null;
				_Mins_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TimeZoneID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TimeZoneID, Parameters.TimeZoneID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DisplayName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DisplayName, Parameters.DisplayName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Hours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Hours, Parameters.Hours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mins
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mins, Parameters.Mins);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TimeZoneID
		    {
				get
		        {
					if(_TimeZoneID_W == null)
	        	    {
						_TimeZoneID_W = TearOff.TimeZoneID;
					}
					return _TimeZoneID_W;
				}
			}

			public AggregateParameter DisplayName
		    {
				get
		        {
					if(_DisplayName_W == null)
	        	    {
						_DisplayName_W = TearOff.DisplayName;
					}
					return _DisplayName_W;
				}
			}

			public AggregateParameter Hours
		    {
				get
		        {
					if(_Hours_W == null)
	        	    {
						_Hours_W = TearOff.Hours;
					}
					return _Hours_W;
				}
			}

			public AggregateParameter Mins
		    {
				get
		        {
					if(_Mins_W == null)
	        	    {
						_Mins_W = TearOff.Mins;
					}
					return _Mins_W;
				}
			}

			private AggregateParameter _TimeZoneID_W = null;
			private AggregateParameter _DisplayName_W = null;
			private AggregateParameter _Hours_W = null;
			private AggregateParameter _Mins_W = null;

			public void AggregateClauseReset()
			{
				_TimeZoneID_W = null;
				_DisplayName_W = null;
				_Hours_W = null;
				_Mins_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeZoneInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TimeZoneID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeZoneUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeZoneDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TimeZoneID);
			p.SourceColumn = ColumnNames.TimeZoneID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TimeZoneID);
			p.SourceColumn = ColumnNames.TimeZoneID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DisplayName);
			p.SourceColumn = ColumnNames.DisplayName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Hours);
			p.SourceColumn = ColumnNames.Hours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mins);
			p.SourceColumn = ColumnNames.Mins;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
