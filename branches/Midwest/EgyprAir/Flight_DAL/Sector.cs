
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Sector : SqlClientEntity
	{
		public _Sector()
		{
			this.QuerySource = "Sector";
			this.MappingName = "Sector";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SectorLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SectorID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SectorID, SectorID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SectorLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SectorID
			{
				get
				{
					return new SqlParameter("@SectorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FlightID
			{
				get
				{
					return new SqlParameter("@FlightID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter From_AirportID
			{
				get
				{
					return new SqlParameter("@From_AirportID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter To_AirportID
			{
				get
				{
					return new SqlParameter("@To_AirportID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FuleUplifted
			{
				get
				{
					return new SqlParameter("@FuleUplifted", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter STD
			{
				get
				{
					return new SqlParameter("@STD", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ATD
			{
				get
				{
					return new SqlParameter("@ATD", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ChoxOff
			{
				get
				{
					return new SqlParameter("@ChoxOff", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter STA
			{
				get
				{
					return new SqlParameter("@STA", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ATA
			{
				get
				{
					return new SqlParameter("@ATA", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ChoxOn
			{
				get
				{
					return new SqlParameter("@ChoxOn", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter StandardBurnOff
			{
				get
				{
					return new SqlParameter("@StandardBurnOff", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ActualBurnOff
			{
				get
				{
					return new SqlParameter("@ActualBurnOff", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DepDelayID1
			{
				get
				{
					return new SqlParameter("@DepDelayID1", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DepDelayTime1
			{
				get
				{
					return new SqlParameter("@DepDelayTime1", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DepDelayID2
			{
				get
				{
					return new SqlParameter("@DepDelayID2", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DepDelayTime2
			{
				get
				{
					return new SqlParameter("@DepDelayTime2", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DepDelayID3
			{
				get
				{
					return new SqlParameter("@DepDelayID3", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DepDelayTime3
			{
				get
				{
					return new SqlParameter("@DepDelayTime3", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ArrDelayID1
			{
				get
				{
					return new SqlParameter("@ArrDelayID1", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ArrDelayTime1
			{
				get
				{
					return new SqlParameter("@ArrDelayTime1", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ArrDelayID2
			{
				get
				{
					return new SqlParameter("@ArrDelayID2", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ArrDelayTime2
			{
				get
				{
					return new SqlParameter("@ArrDelayTime2", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ArrDelayID3
			{
				get
				{
					return new SqlParameter("@ArrDelayID3", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ArrDelayTime3
			{
				get
				{
					return new SqlParameter("@ArrDelayTime3", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PilotFlying_CrewID
			{
				get
				{
					return new SqlParameter("@PilotFlying_CrewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotMonitoring_CrewID
			{
				get
				{
					return new SqlParameter("@PilotMonitoring_CrewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FlyAtDay
			{
				get
				{
					return new SqlParameter("@FlyAtDay", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter FlyAtNight
			{
				get
				{
					return new SqlParameter("@FlyAtNight", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DepFule
			{
				get
				{
					return new SqlParameter("@DepFule", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ArrFule
			{
				get
				{
					return new SqlParameter("@ArrFule", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NoOfPax_A
			{
				get
				{
					return new SqlParameter("@NoOfPax_A", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NoOfPax_C
			{
				get
				{
					return new SqlParameter("@NoOfPax_C", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NoOfPax_I
			{
				get
				{
					return new SqlParameter("@NoOfPax_I", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ZFW
			{
				get
				{
					return new SqlParameter("@ZFW", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter TOW
			{
				get
				{
					return new SqlParameter("@TOW", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastModifiedDate
			{
				get
				{
					return new SqlParameter("@LastModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter FlightNo
			{
				get
				{
					return new SqlParameter("@FlightNo", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter IsPAX
			{
				get
				{
					return new SqlParameter("@IsPAX", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsHeavy
			{
				get
				{
					return new SqlParameter("@IsHeavy", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsHeavyCrew
			{
				get
				{
					return new SqlParameter("@IsHeavyCrew", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Comments
			{
				get
				{
					return new SqlParameter("@Comments", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter AirCraft_AirPlaneID
			{
				get
				{
					return new SqlParameter("@AirCraft_AirPlaneID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SectorDate
			{
				get
				{
					return new SqlParameter("@SectorDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsReturnSector
			{
				get
				{
					return new SqlParameter("@IsReturnSector", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ReturnSectorID
			{
				get
				{
					return new SqlParameter("@ReturnSectorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ClientID
			{
				get
				{
					return new SqlParameter("@ClientID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotCityID
			{
				get
				{
					return new SqlParameter("@PilotCityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OnBoardFuel
			{
				get
				{
					return new SqlParameter("@OnBoardFuel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ReceiptNo
			{
				get
				{
					return new SqlParameter("@ReceiptNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FO_AS_PilotFlying
			{
				get
				{
					return new SqlParameter("@FO_AS_PilotFlying", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SectorID = "SectorID";
            public const string FlightID = "FlightID";
            public const string From_AirportID = "From_AirportID";
            public const string To_AirportID = "To_AirportID";
            public const string FuleUplifted = "FuleUplifted";
            public const string STD = "STD";
            public const string ATD = "ATD";
            public const string ChoxOff = "ChoxOff";
            public const string STA = "STA";
            public const string ATA = "ATA";
            public const string ChoxOn = "ChoxOn";
            public const string StandardBurnOff = "StandardBurnOff";
            public const string ActualBurnOff = "ActualBurnOff";
            public const string DepDelayID1 = "DepDelayID1";
            public const string DepDelayTime1 = "DepDelayTime1";
            public const string DepDelayID2 = "DepDelayID2";
            public const string DepDelayTime2 = "DepDelayTime2";
            public const string DepDelayID3 = "DepDelayID3";
            public const string DepDelayTime3 = "DepDelayTime3";
            public const string ArrDelayID1 = "ArrDelayID1";
            public const string ArrDelayTime1 = "ArrDelayTime1";
            public const string ArrDelayID2 = "ArrDelayID2";
            public const string ArrDelayTime2 = "ArrDelayTime2";
            public const string ArrDelayID3 = "ArrDelayID3";
            public const string ArrDelayTime3 = "ArrDelayTime3";
            public const string PilotFlying_CrewID = "PilotFlying_CrewID";
            public const string PilotMonitoring_CrewID = "PilotMonitoring_CrewID";
            public const string FlyAtDay = "FlyAtDay";
            public const string FlyAtNight = "FlyAtNight";
            public const string DepFule = "DepFule";
            public const string ArrFule = "ArrFule";
            public const string NoOfPax_A = "NoOfPax_A";
            public const string NoOfPax_C = "NoOfPax_C";
            public const string NoOfPax_I = "NoOfPax_I";
            public const string ZFW = "ZFW";
            public const string TOW = "TOW";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string FlightNo = "FlightNo";
            public const string IsPAX = "IsPAX";
            public const string IsHeavy = "IsHeavy";
            public const string IsHeavyCrew = "IsHeavyCrew";
            public const string Comments = "Comments";
            public const string AirCraft_AirPlaneID = "AirCraft_AirPlaneID";
            public const string SectorDate = "SectorDate";
            public const string IsReturnSector = "IsReturnSector";
            public const string ReturnSectorID = "ReturnSectorID";
            public const string ClientID = "ClientID";
            public const string PilotCityID = "PilotCityID";
            public const string OnBoardFuel = "OnBoardFuel";
            public const string ReceiptNo = "ReceiptNo";
            public const string FO_AS_PilotFlying = "FO_AS_PilotFlying";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SectorID] = _Sector.PropertyNames.SectorID;
					ht[FlightID] = _Sector.PropertyNames.FlightID;
					ht[From_AirportID] = _Sector.PropertyNames.From_AirportID;
					ht[To_AirportID] = _Sector.PropertyNames.To_AirportID;
					ht[FuleUplifted] = _Sector.PropertyNames.FuleUplifted;
					ht[STD] = _Sector.PropertyNames.STD;
					ht[ATD] = _Sector.PropertyNames.ATD;
					ht[ChoxOff] = _Sector.PropertyNames.ChoxOff;
					ht[STA] = _Sector.PropertyNames.STA;
					ht[ATA] = _Sector.PropertyNames.ATA;
					ht[ChoxOn] = _Sector.PropertyNames.ChoxOn;
					ht[StandardBurnOff] = _Sector.PropertyNames.StandardBurnOff;
					ht[ActualBurnOff] = _Sector.PropertyNames.ActualBurnOff;
					ht[DepDelayID1] = _Sector.PropertyNames.DepDelayID1;
					ht[DepDelayTime1] = _Sector.PropertyNames.DepDelayTime1;
					ht[DepDelayID2] = _Sector.PropertyNames.DepDelayID2;
					ht[DepDelayTime2] = _Sector.PropertyNames.DepDelayTime2;
					ht[DepDelayID3] = _Sector.PropertyNames.DepDelayID3;
					ht[DepDelayTime3] = _Sector.PropertyNames.DepDelayTime3;
					ht[ArrDelayID1] = _Sector.PropertyNames.ArrDelayID1;
					ht[ArrDelayTime1] = _Sector.PropertyNames.ArrDelayTime1;
					ht[ArrDelayID2] = _Sector.PropertyNames.ArrDelayID2;
					ht[ArrDelayTime2] = _Sector.PropertyNames.ArrDelayTime2;
					ht[ArrDelayID3] = _Sector.PropertyNames.ArrDelayID3;
					ht[ArrDelayTime3] = _Sector.PropertyNames.ArrDelayTime3;
					ht[PilotFlying_CrewID] = _Sector.PropertyNames.PilotFlying_CrewID;
					ht[PilotMonitoring_CrewID] = _Sector.PropertyNames.PilotMonitoring_CrewID;
					ht[FlyAtDay] = _Sector.PropertyNames.FlyAtDay;
					ht[FlyAtNight] = _Sector.PropertyNames.FlyAtNight;
					ht[DepFule] = _Sector.PropertyNames.DepFule;
					ht[ArrFule] = _Sector.PropertyNames.ArrFule;
					ht[NoOfPax_A] = _Sector.PropertyNames.NoOfPax_A;
					ht[NoOfPax_C] = _Sector.PropertyNames.NoOfPax_C;
					ht[NoOfPax_I] = _Sector.PropertyNames.NoOfPax_I;
					ht[ZFW] = _Sector.PropertyNames.ZFW;
					ht[TOW] = _Sector.PropertyNames.TOW;
					ht[CreatedBy] = _Sector.PropertyNames.CreatedBy;
					ht[ModifiedBy] = _Sector.PropertyNames.ModifiedBy;
					ht[CreatedDate] = _Sector.PropertyNames.CreatedDate;
					ht[LastModifiedDate] = _Sector.PropertyNames.LastModifiedDate;
					ht[FlightNo] = _Sector.PropertyNames.FlightNo;
					ht[IsPAX] = _Sector.PropertyNames.IsPAX;
					ht[IsHeavy] = _Sector.PropertyNames.IsHeavy;
					ht[IsHeavyCrew] = _Sector.PropertyNames.IsHeavyCrew;
					ht[Comments] = _Sector.PropertyNames.Comments;
					ht[AirCraft_AirPlaneID] = _Sector.PropertyNames.AirCraft_AirPlaneID;
					ht[SectorDate] = _Sector.PropertyNames.SectorDate;
					ht[IsReturnSector] = _Sector.PropertyNames.IsReturnSector;
					ht[ReturnSectorID] = _Sector.PropertyNames.ReturnSectorID;
					ht[ClientID] = _Sector.PropertyNames.ClientID;
					ht[PilotCityID] = _Sector.PropertyNames.PilotCityID;
					ht[OnBoardFuel] = _Sector.PropertyNames.OnBoardFuel;
					ht[ReceiptNo] = _Sector.PropertyNames.ReceiptNo;
					ht[FO_AS_PilotFlying] = _Sector.PropertyNames.FO_AS_PilotFlying;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SectorID = "SectorID";
            public const string FlightID = "FlightID";
            public const string From_AirportID = "From_AirportID";
            public const string To_AirportID = "To_AirportID";
            public const string FuleUplifted = "FuleUplifted";
            public const string STD = "STD";
            public const string ATD = "ATD";
            public const string ChoxOff = "ChoxOff";
            public const string STA = "STA";
            public const string ATA = "ATA";
            public const string ChoxOn = "ChoxOn";
            public const string StandardBurnOff = "StandardBurnOff";
            public const string ActualBurnOff = "ActualBurnOff";
            public const string DepDelayID1 = "DepDelayID1";
            public const string DepDelayTime1 = "DepDelayTime1";
            public const string DepDelayID2 = "DepDelayID2";
            public const string DepDelayTime2 = "DepDelayTime2";
            public const string DepDelayID3 = "DepDelayID3";
            public const string DepDelayTime3 = "DepDelayTime3";
            public const string ArrDelayID1 = "ArrDelayID1";
            public const string ArrDelayTime1 = "ArrDelayTime1";
            public const string ArrDelayID2 = "ArrDelayID2";
            public const string ArrDelayTime2 = "ArrDelayTime2";
            public const string ArrDelayID3 = "ArrDelayID3";
            public const string ArrDelayTime3 = "ArrDelayTime3";
            public const string PilotFlying_CrewID = "PilotFlying_CrewID";
            public const string PilotMonitoring_CrewID = "PilotMonitoring_CrewID";
            public const string FlyAtDay = "FlyAtDay";
            public const string FlyAtNight = "FlyAtNight";
            public const string DepFule = "DepFule";
            public const string ArrFule = "ArrFule";
            public const string NoOfPax_A = "NoOfPax_A";
            public const string NoOfPax_C = "NoOfPax_C";
            public const string NoOfPax_I = "NoOfPax_I";
            public const string ZFW = "ZFW";
            public const string TOW = "TOW";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string FlightNo = "FlightNo";
            public const string IsPAX = "IsPAX";
            public const string IsHeavy = "IsHeavy";
            public const string IsHeavyCrew = "IsHeavyCrew";
            public const string Comments = "Comments";
            public const string AirCraft_AirPlaneID = "AirCraft_AirPlaneID";
            public const string SectorDate = "SectorDate";
            public const string IsReturnSector = "IsReturnSector";
            public const string ReturnSectorID = "ReturnSectorID";
            public const string ClientID = "ClientID";
            public const string PilotCityID = "PilotCityID";
            public const string OnBoardFuel = "OnBoardFuel";
            public const string ReceiptNo = "ReceiptNo";
            public const string FO_AS_PilotFlying = "FO_AS_PilotFlying";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SectorID] = _Sector.ColumnNames.SectorID;
					ht[FlightID] = _Sector.ColumnNames.FlightID;
					ht[From_AirportID] = _Sector.ColumnNames.From_AirportID;
					ht[To_AirportID] = _Sector.ColumnNames.To_AirportID;
					ht[FuleUplifted] = _Sector.ColumnNames.FuleUplifted;
					ht[STD] = _Sector.ColumnNames.STD;
					ht[ATD] = _Sector.ColumnNames.ATD;
					ht[ChoxOff] = _Sector.ColumnNames.ChoxOff;
					ht[STA] = _Sector.ColumnNames.STA;
					ht[ATA] = _Sector.ColumnNames.ATA;
					ht[ChoxOn] = _Sector.ColumnNames.ChoxOn;
					ht[StandardBurnOff] = _Sector.ColumnNames.StandardBurnOff;
					ht[ActualBurnOff] = _Sector.ColumnNames.ActualBurnOff;
					ht[DepDelayID1] = _Sector.ColumnNames.DepDelayID1;
					ht[DepDelayTime1] = _Sector.ColumnNames.DepDelayTime1;
					ht[DepDelayID2] = _Sector.ColumnNames.DepDelayID2;
					ht[DepDelayTime2] = _Sector.ColumnNames.DepDelayTime2;
					ht[DepDelayID3] = _Sector.ColumnNames.DepDelayID3;
					ht[DepDelayTime3] = _Sector.ColumnNames.DepDelayTime3;
					ht[ArrDelayID1] = _Sector.ColumnNames.ArrDelayID1;
					ht[ArrDelayTime1] = _Sector.ColumnNames.ArrDelayTime1;
					ht[ArrDelayID2] = _Sector.ColumnNames.ArrDelayID2;
					ht[ArrDelayTime2] = _Sector.ColumnNames.ArrDelayTime2;
					ht[ArrDelayID3] = _Sector.ColumnNames.ArrDelayID3;
					ht[ArrDelayTime3] = _Sector.ColumnNames.ArrDelayTime3;
					ht[PilotFlying_CrewID] = _Sector.ColumnNames.PilotFlying_CrewID;
					ht[PilotMonitoring_CrewID] = _Sector.ColumnNames.PilotMonitoring_CrewID;
					ht[FlyAtDay] = _Sector.ColumnNames.FlyAtDay;
					ht[FlyAtNight] = _Sector.ColumnNames.FlyAtNight;
					ht[DepFule] = _Sector.ColumnNames.DepFule;
					ht[ArrFule] = _Sector.ColumnNames.ArrFule;
					ht[NoOfPax_A] = _Sector.ColumnNames.NoOfPax_A;
					ht[NoOfPax_C] = _Sector.ColumnNames.NoOfPax_C;
					ht[NoOfPax_I] = _Sector.ColumnNames.NoOfPax_I;
					ht[ZFW] = _Sector.ColumnNames.ZFW;
					ht[TOW] = _Sector.ColumnNames.TOW;
					ht[CreatedBy] = _Sector.ColumnNames.CreatedBy;
					ht[ModifiedBy] = _Sector.ColumnNames.ModifiedBy;
					ht[CreatedDate] = _Sector.ColumnNames.CreatedDate;
					ht[LastModifiedDate] = _Sector.ColumnNames.LastModifiedDate;
					ht[FlightNo] = _Sector.ColumnNames.FlightNo;
					ht[IsPAX] = _Sector.ColumnNames.IsPAX;
					ht[IsHeavy] = _Sector.ColumnNames.IsHeavy;
					ht[IsHeavyCrew] = _Sector.ColumnNames.IsHeavyCrew;
					ht[Comments] = _Sector.ColumnNames.Comments;
					ht[AirCraft_AirPlaneID] = _Sector.ColumnNames.AirCraft_AirPlaneID;
					ht[SectorDate] = _Sector.ColumnNames.SectorDate;
					ht[IsReturnSector] = _Sector.ColumnNames.IsReturnSector;
					ht[ReturnSectorID] = _Sector.ColumnNames.ReturnSectorID;
					ht[ClientID] = _Sector.ColumnNames.ClientID;
					ht[PilotCityID] = _Sector.ColumnNames.PilotCityID;
					ht[OnBoardFuel] = _Sector.ColumnNames.OnBoardFuel;
					ht[ReceiptNo] = _Sector.ColumnNames.ReceiptNo;
					ht[FO_AS_PilotFlying] = _Sector.ColumnNames.FO_AS_PilotFlying;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SectorID = "s_SectorID";
            public const string FlightID = "s_FlightID";
            public const string From_AirportID = "s_From_AirportID";
            public const string To_AirportID = "s_To_AirportID";
            public const string FuleUplifted = "s_FuleUplifted";
            public const string STD = "s_STD";
            public const string ATD = "s_ATD";
            public const string ChoxOff = "s_ChoxOff";
            public const string STA = "s_STA";
            public const string ATA = "s_ATA";
            public const string ChoxOn = "s_ChoxOn";
            public const string StandardBurnOff = "s_StandardBurnOff";
            public const string ActualBurnOff = "s_ActualBurnOff";
            public const string DepDelayID1 = "s_DepDelayID1";
            public const string DepDelayTime1 = "s_DepDelayTime1";
            public const string DepDelayID2 = "s_DepDelayID2";
            public const string DepDelayTime2 = "s_DepDelayTime2";
            public const string DepDelayID3 = "s_DepDelayID3";
            public const string DepDelayTime3 = "s_DepDelayTime3";
            public const string ArrDelayID1 = "s_ArrDelayID1";
            public const string ArrDelayTime1 = "s_ArrDelayTime1";
            public const string ArrDelayID2 = "s_ArrDelayID2";
            public const string ArrDelayTime2 = "s_ArrDelayTime2";
            public const string ArrDelayID3 = "s_ArrDelayID3";
            public const string ArrDelayTime3 = "s_ArrDelayTime3";
            public const string PilotFlying_CrewID = "s_PilotFlying_CrewID";
            public const string PilotMonitoring_CrewID = "s_PilotMonitoring_CrewID";
            public const string FlyAtDay = "s_FlyAtDay";
            public const string FlyAtNight = "s_FlyAtNight";
            public const string DepFule = "s_DepFule";
            public const string ArrFule = "s_ArrFule";
            public const string NoOfPax_A = "s_NoOfPax_A";
            public const string NoOfPax_C = "s_NoOfPax_C";
            public const string NoOfPax_I = "s_NoOfPax_I";
            public const string ZFW = "s_ZFW";
            public const string TOW = "s_TOW";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string LastModifiedDate = "s_LastModifiedDate";
            public const string FlightNo = "s_FlightNo";
            public const string IsPAX = "s_IsPAX";
            public const string IsHeavy = "s_IsHeavy";
            public const string IsHeavyCrew = "s_IsHeavyCrew";
            public const string Comments = "s_Comments";
            public const string AirCraft_AirPlaneID = "s_AirCraft_AirPlaneID";
            public const string SectorDate = "s_SectorDate";
            public const string IsReturnSector = "s_IsReturnSector";
            public const string ReturnSectorID = "s_ReturnSectorID";
            public const string ClientID = "s_ClientID";
            public const string PilotCityID = "s_PilotCityID";
            public const string OnBoardFuel = "s_OnBoardFuel";
            public const string ReceiptNo = "s_ReceiptNo";
            public const string FO_AS_PilotFlying = "s_FO_AS_PilotFlying";

		}
		#endregion		
		
		#region Properties
	
		public virtual int SectorID
	    {
			get
	        {
				return base.Getint(ColumnNames.SectorID);
			}
			set
	        {
				base.Setint(ColumnNames.SectorID, value);
			}
		}

		public virtual int FlightID
	    {
			get
	        {
				return base.Getint(ColumnNames.FlightID);
			}
			set
	        {
				base.Setint(ColumnNames.FlightID, value);
			}
		}

		public virtual int From_AirportID
	    {
			get
	        {
				return base.Getint(ColumnNames.From_AirportID);
			}
			set
	        {
				base.Setint(ColumnNames.From_AirportID, value);
			}
		}

		public virtual int To_AirportID
	    {
			get
	        {
				return base.Getint(ColumnNames.To_AirportID);
			}
			set
	        {
				base.Setint(ColumnNames.To_AirportID, value);
			}
		}

		public virtual int FuleUplifted
	    {
			get
	        {
				return base.Getint(ColumnNames.FuleUplifted);
			}
			set
	        {
				base.Setint(ColumnNames.FuleUplifted, value);
			}
		}

		public virtual DateTime STD
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.STD);
			}
			set
	        {
				base.SetDateTime(ColumnNames.STD, value);
			}
		}

		public virtual DateTime ATD
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ATD);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ATD, value);
			}
		}

		public virtual DateTime ChoxOff
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ChoxOff);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ChoxOff, value);
			}
		}

		public virtual DateTime STA
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.STA);
			}
			set
	        {
				base.SetDateTime(ColumnNames.STA, value);
			}
		}

		public virtual DateTime ATA
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ATA);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ATA, value);
			}
		}

		public virtual DateTime ChoxOn
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ChoxOn);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ChoxOn, value);
			}
		}

		public virtual int StandardBurnOff
	    {
			get
	        {
				return base.Getint(ColumnNames.StandardBurnOff);
			}
			set
	        {
				base.Setint(ColumnNames.StandardBurnOff, value);
			}
		}

		public virtual int ActualBurnOff
	    {
			get
	        {
				return base.Getint(ColumnNames.ActualBurnOff);
			}
			set
	        {
				base.Setint(ColumnNames.ActualBurnOff, value);
			}
		}

		public virtual int DepDelayID1
	    {
			get
	        {
				return base.Getint(ColumnNames.DepDelayID1);
			}
			set
	        {
				base.Setint(ColumnNames.DepDelayID1, value);
			}
		}

		public virtual DateTime DepDelayTime1
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DepDelayTime1);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DepDelayTime1, value);
			}
		}

		public virtual int DepDelayID2
	    {
			get
	        {
				return base.Getint(ColumnNames.DepDelayID2);
			}
			set
	        {
				base.Setint(ColumnNames.DepDelayID2, value);
			}
		}

		public virtual DateTime DepDelayTime2
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DepDelayTime2);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DepDelayTime2, value);
			}
		}

		public virtual int DepDelayID3
	    {
			get
	        {
				return base.Getint(ColumnNames.DepDelayID3);
			}
			set
	        {
				base.Setint(ColumnNames.DepDelayID3, value);
			}
		}

		public virtual DateTime DepDelayTime3
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DepDelayTime3);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DepDelayTime3, value);
			}
		}

		public virtual int ArrDelayID1
	    {
			get
	        {
				return base.Getint(ColumnNames.ArrDelayID1);
			}
			set
	        {
				base.Setint(ColumnNames.ArrDelayID1, value);
			}
		}

		public virtual DateTime ArrDelayTime1
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ArrDelayTime1);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ArrDelayTime1, value);
			}
		}

		public virtual int ArrDelayID2
	    {
			get
	        {
				return base.Getint(ColumnNames.ArrDelayID2);
			}
			set
	        {
				base.Setint(ColumnNames.ArrDelayID2, value);
			}
		}

		public virtual DateTime ArrDelayTime2
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ArrDelayTime2);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ArrDelayTime2, value);
			}
		}

		public virtual int ArrDelayID3
	    {
			get
	        {
				return base.Getint(ColumnNames.ArrDelayID3);
			}
			set
	        {
				base.Setint(ColumnNames.ArrDelayID3, value);
			}
		}

		public virtual DateTime ArrDelayTime3
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ArrDelayTime3);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ArrDelayTime3, value);
			}
		}

		public virtual int PilotFlying_CrewID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotFlying_CrewID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotFlying_CrewID, value);
			}
		}

		public virtual int PilotMonitoring_CrewID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotMonitoring_CrewID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotMonitoring_CrewID, value);
			}
		}

		public virtual DateTime FlyAtDay
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FlyAtDay);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FlyAtDay, value);
			}
		}

		public virtual DateTime FlyAtNight
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FlyAtNight);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FlyAtNight, value);
			}
		}

		public virtual int DepFule
	    {
			get
	        {
				return base.Getint(ColumnNames.DepFule);
			}
			set
	        {
				base.Setint(ColumnNames.DepFule, value);
			}
		}

		public virtual int ArrFule
	    {
			get
	        {
				return base.Getint(ColumnNames.ArrFule);
			}
			set
	        {
				base.Setint(ColumnNames.ArrFule, value);
			}
		}

		public virtual int NoOfPax_A
	    {
			get
	        {
				return base.Getint(ColumnNames.NoOfPax_A);
			}
			set
	        {
				base.Setint(ColumnNames.NoOfPax_A, value);
			}
		}

		public virtual int NoOfPax_C
	    {
			get
	        {
				return base.Getint(ColumnNames.NoOfPax_C);
			}
			set
	        {
				base.Setint(ColumnNames.NoOfPax_C, value);
			}
		}

		public virtual int NoOfPax_I
	    {
			get
	        {
				return base.Getint(ColumnNames.NoOfPax_I);
			}
			set
	        {
				base.Setint(ColumnNames.NoOfPax_I, value);
			}
		}

		public virtual long ZFW
	    {
			get
	        {
				return base.Getlong(ColumnNames.ZFW);
			}
			set
	        {
				base.Setlong(ColumnNames.ZFW, value);
			}
		}

		public virtual long TOW
	    {
			get
	        {
				return base.Getlong(ColumnNames.TOW);
			}
			set
	        {
				base.Setlong(ColumnNames.TOW, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual Guid ModifiedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime LastModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string FlightNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FlightNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FlightNo, value);
			}
		}

		public virtual bool IsPAX
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsPAX);
			}
			set
	        {
				base.Setbool(ColumnNames.IsPAX, value);
			}
		}

		public virtual bool IsHeavy
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsHeavy);
			}
			set
	        {
				base.Setbool(ColumnNames.IsHeavy, value);
			}
		}

		public virtual bool IsHeavyCrew
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsHeavyCrew);
			}
			set
	        {
				base.Setbool(ColumnNames.IsHeavyCrew, value);
			}
		}

		public virtual string Comments
	    {
			get
	        {
				return base.Getstring(ColumnNames.Comments);
			}
			set
	        {
				base.Setstring(ColumnNames.Comments, value);
			}
		}

		public virtual int AirCraft_AirPlaneID
	    {
			get
	        {
				return base.Getint(ColumnNames.AirCraft_AirPlaneID);
			}
			set
	        {
				base.Setint(ColumnNames.AirCraft_AirPlaneID, value);
			}
		}

		public virtual DateTime SectorDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SectorDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SectorDate, value);
			}
		}

		public virtual bool IsReturnSector
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsReturnSector);
			}
			set
	        {
				base.Setbool(ColumnNames.IsReturnSector, value);
			}
		}

		public virtual int ReturnSectorID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReturnSectorID);
			}
			set
	        {
				base.Setint(ColumnNames.ReturnSectorID, value);
			}
		}

		public virtual int ClientID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientID, value);
			}
		}

		public virtual int PilotCityID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotCityID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotCityID, value);
			}
		}

		public virtual int OnBoardFuel
	    {
			get
	        {
				return base.Getint(ColumnNames.OnBoardFuel);
			}
			set
	        {
				base.Setint(ColumnNames.OnBoardFuel, value);
			}
		}

		public virtual int ReceiptNo
	    {
			get
	        {
				return base.Getint(ColumnNames.ReceiptNo);
			}
			set
	        {
				base.Setint(ColumnNames.ReceiptNo, value);
			}
		}

		public virtual bool FO_AS_PilotFlying
	    {
			get
	        {
				return base.Getbool(ColumnNames.FO_AS_PilotFlying);
			}
			set
	        {
				base.Setbool(ColumnNames.FO_AS_PilotFlying, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SectorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SectorID) ? string.Empty : base.GetintAsString(ColumnNames.SectorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SectorID);
				else
					this.SectorID = base.SetintAsString(ColumnNames.SectorID, value);
			}
		}

		public virtual string s_FlightID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightID) ? string.Empty : base.GetintAsString(ColumnNames.FlightID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightID);
				else
					this.FlightID = base.SetintAsString(ColumnNames.FlightID, value);
			}
		}

		public virtual string s_From_AirportID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.From_AirportID) ? string.Empty : base.GetintAsString(ColumnNames.From_AirportID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.From_AirportID);
				else
					this.From_AirportID = base.SetintAsString(ColumnNames.From_AirportID, value);
			}
		}

		public virtual string s_To_AirportID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.To_AirportID) ? string.Empty : base.GetintAsString(ColumnNames.To_AirportID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.To_AirportID);
				else
					this.To_AirportID = base.SetintAsString(ColumnNames.To_AirportID, value);
			}
		}

		public virtual string s_FuleUplifted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FuleUplifted) ? string.Empty : base.GetintAsString(ColumnNames.FuleUplifted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FuleUplifted);
				else
					this.FuleUplifted = base.SetintAsString(ColumnNames.FuleUplifted, value);
			}
		}

		public virtual string s_STD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.STD) ? string.Empty : base.GetDateTimeAsString(ColumnNames.STD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.STD);
				else
					this.STD = base.SetDateTimeAsString(ColumnNames.STD, value);
			}
		}

		public virtual string s_ATD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ATD) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ATD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ATD);
				else
					this.ATD = base.SetDateTimeAsString(ColumnNames.ATD, value);
			}
		}

		public virtual string s_ChoxOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChoxOff) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ChoxOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChoxOff);
				else
					this.ChoxOff = base.SetDateTimeAsString(ColumnNames.ChoxOff, value);
			}
		}

		public virtual string s_STA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.STA) ? string.Empty : base.GetDateTimeAsString(ColumnNames.STA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.STA);
				else
					this.STA = base.SetDateTimeAsString(ColumnNames.STA, value);
			}
		}

		public virtual string s_ATA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ATA) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ATA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ATA);
				else
					this.ATA = base.SetDateTimeAsString(ColumnNames.ATA, value);
			}
		}

		public virtual string s_ChoxOn
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChoxOn) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ChoxOn);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChoxOn);
				else
					this.ChoxOn = base.SetDateTimeAsString(ColumnNames.ChoxOn, value);
			}
		}

		public virtual string s_StandardBurnOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StandardBurnOff) ? string.Empty : base.GetintAsString(ColumnNames.StandardBurnOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StandardBurnOff);
				else
					this.StandardBurnOff = base.SetintAsString(ColumnNames.StandardBurnOff, value);
			}
		}

		public virtual string s_ActualBurnOff
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActualBurnOff) ? string.Empty : base.GetintAsString(ColumnNames.ActualBurnOff);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActualBurnOff);
				else
					this.ActualBurnOff = base.SetintAsString(ColumnNames.ActualBurnOff, value);
			}
		}

		public virtual string s_DepDelayID1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayID1) ? string.Empty : base.GetintAsString(ColumnNames.DepDelayID1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayID1);
				else
					this.DepDelayID1 = base.SetintAsString(ColumnNames.DepDelayID1, value);
			}
		}

		public virtual string s_DepDelayTime1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayTime1) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DepDelayTime1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayTime1);
				else
					this.DepDelayTime1 = base.SetDateTimeAsString(ColumnNames.DepDelayTime1, value);
			}
		}

		public virtual string s_DepDelayID2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayID2) ? string.Empty : base.GetintAsString(ColumnNames.DepDelayID2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayID2);
				else
					this.DepDelayID2 = base.SetintAsString(ColumnNames.DepDelayID2, value);
			}
		}

		public virtual string s_DepDelayTime2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayTime2) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DepDelayTime2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayTime2);
				else
					this.DepDelayTime2 = base.SetDateTimeAsString(ColumnNames.DepDelayTime2, value);
			}
		}

		public virtual string s_DepDelayID3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayID3) ? string.Empty : base.GetintAsString(ColumnNames.DepDelayID3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayID3);
				else
					this.DepDelayID3 = base.SetintAsString(ColumnNames.DepDelayID3, value);
			}
		}

		public virtual string s_DepDelayTime3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepDelayTime3) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DepDelayTime3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepDelayTime3);
				else
					this.DepDelayTime3 = base.SetDateTimeAsString(ColumnNames.DepDelayTime3, value);
			}
		}

		public virtual string s_ArrDelayID1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayID1) ? string.Empty : base.GetintAsString(ColumnNames.ArrDelayID1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayID1);
				else
					this.ArrDelayID1 = base.SetintAsString(ColumnNames.ArrDelayID1, value);
			}
		}

		public virtual string s_ArrDelayTime1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayTime1) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ArrDelayTime1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayTime1);
				else
					this.ArrDelayTime1 = base.SetDateTimeAsString(ColumnNames.ArrDelayTime1, value);
			}
		}

		public virtual string s_ArrDelayID2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayID2) ? string.Empty : base.GetintAsString(ColumnNames.ArrDelayID2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayID2);
				else
					this.ArrDelayID2 = base.SetintAsString(ColumnNames.ArrDelayID2, value);
			}
		}

		public virtual string s_ArrDelayTime2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayTime2) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ArrDelayTime2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayTime2);
				else
					this.ArrDelayTime2 = base.SetDateTimeAsString(ColumnNames.ArrDelayTime2, value);
			}
		}

		public virtual string s_ArrDelayID3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayID3) ? string.Empty : base.GetintAsString(ColumnNames.ArrDelayID3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayID3);
				else
					this.ArrDelayID3 = base.SetintAsString(ColumnNames.ArrDelayID3, value);
			}
		}

		public virtual string s_ArrDelayTime3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrDelayTime3) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ArrDelayTime3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrDelayTime3);
				else
					this.ArrDelayTime3 = base.SetDateTimeAsString(ColumnNames.ArrDelayTime3, value);
			}
		}

		public virtual string s_PilotFlying_CrewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotFlying_CrewID) ? string.Empty : base.GetintAsString(ColumnNames.PilotFlying_CrewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotFlying_CrewID);
				else
					this.PilotFlying_CrewID = base.SetintAsString(ColumnNames.PilotFlying_CrewID, value);
			}
		}

		public virtual string s_PilotMonitoring_CrewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotMonitoring_CrewID) ? string.Empty : base.GetintAsString(ColumnNames.PilotMonitoring_CrewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotMonitoring_CrewID);
				else
					this.PilotMonitoring_CrewID = base.SetintAsString(ColumnNames.PilotMonitoring_CrewID, value);
			}
		}

		public virtual string s_FlyAtDay
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlyAtDay) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FlyAtDay);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlyAtDay);
				else
					this.FlyAtDay = base.SetDateTimeAsString(ColumnNames.FlyAtDay, value);
			}
		}

		public virtual string s_FlyAtNight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlyAtNight) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FlyAtNight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlyAtNight);
				else
					this.FlyAtNight = base.SetDateTimeAsString(ColumnNames.FlyAtNight, value);
			}
		}

		public virtual string s_DepFule
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepFule) ? string.Empty : base.GetintAsString(ColumnNames.DepFule);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepFule);
				else
					this.DepFule = base.SetintAsString(ColumnNames.DepFule, value);
			}
		}

		public virtual string s_ArrFule
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArrFule) ? string.Empty : base.GetintAsString(ColumnNames.ArrFule);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArrFule);
				else
					this.ArrFule = base.SetintAsString(ColumnNames.ArrFule, value);
			}
		}

		public virtual string s_NoOfPax_A
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoOfPax_A) ? string.Empty : base.GetintAsString(ColumnNames.NoOfPax_A);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoOfPax_A);
				else
					this.NoOfPax_A = base.SetintAsString(ColumnNames.NoOfPax_A, value);
			}
		}

		public virtual string s_NoOfPax_C
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoOfPax_C) ? string.Empty : base.GetintAsString(ColumnNames.NoOfPax_C);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoOfPax_C);
				else
					this.NoOfPax_C = base.SetintAsString(ColumnNames.NoOfPax_C, value);
			}
		}

		public virtual string s_NoOfPax_I
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoOfPax_I) ? string.Empty : base.GetintAsString(ColumnNames.NoOfPax_I);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoOfPax_I);
				else
					this.NoOfPax_I = base.SetintAsString(ColumnNames.NoOfPax_I, value);
			}
		}

		public virtual string s_ZFW
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ZFW) ? string.Empty : base.GetlongAsString(ColumnNames.ZFW);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ZFW);
				else
					this.ZFW = base.SetlongAsString(ColumnNames.ZFW, value);
			}
		}

		public virtual string s_TOW
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TOW) ? string.Empty : base.GetlongAsString(ColumnNames.TOW);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TOW);
				else
					this.TOW = base.SetlongAsString(ColumnNames.TOW, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetGuidAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_LastModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastModifiedDate);
				else
					this.LastModifiedDate = base.SetDateTimeAsString(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string s_FlightNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightNo) ? string.Empty : base.GetstringAsString(ColumnNames.FlightNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightNo);
				else
					this.FlightNo = base.SetstringAsString(ColumnNames.FlightNo, value);
			}
		}

		public virtual string s_IsPAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsPAX) ? string.Empty : base.GetboolAsString(ColumnNames.IsPAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsPAX);
				else
					this.IsPAX = base.SetboolAsString(ColumnNames.IsPAX, value);
			}
		}

		public virtual string s_IsHeavy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsHeavy) ? string.Empty : base.GetboolAsString(ColumnNames.IsHeavy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsHeavy);
				else
					this.IsHeavy = base.SetboolAsString(ColumnNames.IsHeavy, value);
			}
		}

		public virtual string s_IsHeavyCrew
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsHeavyCrew) ? string.Empty : base.GetboolAsString(ColumnNames.IsHeavyCrew);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsHeavyCrew);
				else
					this.IsHeavyCrew = base.SetboolAsString(ColumnNames.IsHeavyCrew, value);
			}
		}

		public virtual string s_Comments
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Comments) ? string.Empty : base.GetstringAsString(ColumnNames.Comments);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Comments);
				else
					this.Comments = base.SetstringAsString(ColumnNames.Comments, value);
			}
		}

		public virtual string s_AirCraft_AirPlaneID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirCraft_AirPlaneID) ? string.Empty : base.GetintAsString(ColumnNames.AirCraft_AirPlaneID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirCraft_AirPlaneID);
				else
					this.AirCraft_AirPlaneID = base.SetintAsString(ColumnNames.AirCraft_AirPlaneID, value);
			}
		}

		public virtual string s_SectorDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SectorDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SectorDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SectorDate);
				else
					this.SectorDate = base.SetDateTimeAsString(ColumnNames.SectorDate, value);
			}
		}

		public virtual string s_IsReturnSector
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsReturnSector) ? string.Empty : base.GetboolAsString(ColumnNames.IsReturnSector);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsReturnSector);
				else
					this.IsReturnSector = base.SetboolAsString(ColumnNames.IsReturnSector, value);
			}
		}

		public virtual string s_ReturnSectorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReturnSectorID) ? string.Empty : base.GetintAsString(ColumnNames.ReturnSectorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReturnSectorID);
				else
					this.ReturnSectorID = base.SetintAsString(ColumnNames.ReturnSectorID, value);
			}
		}

		public virtual string s_ClientID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientID) ? string.Empty : base.GetintAsString(ColumnNames.ClientID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientID);
				else
					this.ClientID = base.SetintAsString(ColumnNames.ClientID, value);
			}
		}

		public virtual string s_PilotCityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotCityID) ? string.Empty : base.GetintAsString(ColumnNames.PilotCityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotCityID);
				else
					this.PilotCityID = base.SetintAsString(ColumnNames.PilotCityID, value);
			}
		}

		public virtual string s_OnBoardFuel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OnBoardFuel) ? string.Empty : base.GetintAsString(ColumnNames.OnBoardFuel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OnBoardFuel);
				else
					this.OnBoardFuel = base.SetintAsString(ColumnNames.OnBoardFuel, value);
			}
		}

		public virtual string s_ReceiptNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReceiptNo) ? string.Empty : base.GetintAsString(ColumnNames.ReceiptNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReceiptNo);
				else
					this.ReceiptNo = base.SetintAsString(ColumnNames.ReceiptNo, value);
			}
		}

		public virtual string s_FO_AS_PilotFlying
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FO_AS_PilotFlying) ? string.Empty : base.GetboolAsString(ColumnNames.FO_AS_PilotFlying);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FO_AS_PilotFlying);
				else
					this.FO_AS_PilotFlying = base.SetboolAsString(ColumnNames.FO_AS_PilotFlying, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SectorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SectorID, Parameters.SectorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightID, Parameters.FlightID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter From_AirportID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.From_AirportID, Parameters.From_AirportID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter To_AirportID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.To_AirportID, Parameters.To_AirportID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FuleUplifted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FuleUplifted, Parameters.FuleUplifted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter STD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.STD, Parameters.STD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ATD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ATD, Parameters.ATD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChoxOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChoxOff, Parameters.ChoxOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter STA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.STA, Parameters.STA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ATA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ATA, Parameters.ATA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChoxOn
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChoxOn, Parameters.ChoxOn);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StandardBurnOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StandardBurnOff, Parameters.StandardBurnOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActualBurnOff
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActualBurnOff, Parameters.ActualBurnOff);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayID1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayID1, Parameters.DepDelayID1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayTime1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayTime1, Parameters.DepDelayTime1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayID2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayID2, Parameters.DepDelayID2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayTime2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayTime2, Parameters.DepDelayTime2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayID3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayID3, Parameters.DepDelayID3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepDelayTime3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepDelayTime3, Parameters.DepDelayTime3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayID1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayID1, Parameters.ArrDelayID1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayTime1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayTime1, Parameters.ArrDelayTime1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayID2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayID2, Parameters.ArrDelayID2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayTime2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayTime2, Parameters.ArrDelayTime2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayID3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayID3, Parameters.ArrDelayID3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrDelayTime3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrDelayTime3, Parameters.ArrDelayTime3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotFlying_CrewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotFlying_CrewID, Parameters.PilotFlying_CrewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotMonitoring_CrewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotMonitoring_CrewID, Parameters.PilotMonitoring_CrewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlyAtDay
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlyAtDay, Parameters.FlyAtDay);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlyAtNight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlyAtNight, Parameters.FlyAtNight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepFule
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepFule, Parameters.DepFule);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArrFule
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArrFule, Parameters.ArrFule);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoOfPax_A
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoOfPax_A, Parameters.NoOfPax_A);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoOfPax_C
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoOfPax_C, Parameters.NoOfPax_C);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoOfPax_I
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoOfPax_I, Parameters.NoOfPax_I);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ZFW
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ZFW, Parameters.ZFW);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TOW
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TOW, Parameters.TOW);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsPAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsPAX, Parameters.IsPAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsHeavy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsHeavy, Parameters.IsHeavy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsHeavyCrew
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsHeavyCrew, Parameters.IsHeavyCrew);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Comments
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Comments, Parameters.Comments);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirCraft_AirPlaneID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirCraft_AirPlaneID, Parameters.AirCraft_AirPlaneID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SectorDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SectorDate, Parameters.SectorDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsReturnSector
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsReturnSector, Parameters.IsReturnSector);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReturnSectorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReturnSectorID, Parameters.ReturnSectorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ClientID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotCityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotCityID, Parameters.PilotCityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OnBoardFuel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OnBoardFuel, Parameters.OnBoardFuel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReceiptNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReceiptNo, Parameters.ReceiptNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FO_AS_PilotFlying
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FO_AS_PilotFlying, Parameters.FO_AS_PilotFlying);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SectorID
		    {
				get
		        {
					if(_SectorID_W == null)
	        	    {
						_SectorID_W = TearOff.SectorID;
					}
					return _SectorID_W;
				}
			}

			public WhereParameter FlightID
		    {
				get
		        {
					if(_FlightID_W == null)
	        	    {
						_FlightID_W = TearOff.FlightID;
					}
					return _FlightID_W;
				}
			}

			public WhereParameter From_AirportID
		    {
				get
		        {
					if(_From_AirportID_W == null)
	        	    {
						_From_AirportID_W = TearOff.From_AirportID;
					}
					return _From_AirportID_W;
				}
			}

			public WhereParameter To_AirportID
		    {
				get
		        {
					if(_To_AirportID_W == null)
	        	    {
						_To_AirportID_W = TearOff.To_AirportID;
					}
					return _To_AirportID_W;
				}
			}

			public WhereParameter FuleUplifted
		    {
				get
		        {
					if(_FuleUplifted_W == null)
	        	    {
						_FuleUplifted_W = TearOff.FuleUplifted;
					}
					return _FuleUplifted_W;
				}
			}

			public WhereParameter STD
		    {
				get
		        {
					if(_STD_W == null)
	        	    {
						_STD_W = TearOff.STD;
					}
					return _STD_W;
				}
			}

			public WhereParameter ATD
		    {
				get
		        {
					if(_ATD_W == null)
	        	    {
						_ATD_W = TearOff.ATD;
					}
					return _ATD_W;
				}
			}

			public WhereParameter ChoxOff
		    {
				get
		        {
					if(_ChoxOff_W == null)
	        	    {
						_ChoxOff_W = TearOff.ChoxOff;
					}
					return _ChoxOff_W;
				}
			}

			public WhereParameter STA
		    {
				get
		        {
					if(_STA_W == null)
	        	    {
						_STA_W = TearOff.STA;
					}
					return _STA_W;
				}
			}

			public WhereParameter ATA
		    {
				get
		        {
					if(_ATA_W == null)
	        	    {
						_ATA_W = TearOff.ATA;
					}
					return _ATA_W;
				}
			}

			public WhereParameter ChoxOn
		    {
				get
		        {
					if(_ChoxOn_W == null)
	        	    {
						_ChoxOn_W = TearOff.ChoxOn;
					}
					return _ChoxOn_W;
				}
			}

			public WhereParameter StandardBurnOff
		    {
				get
		        {
					if(_StandardBurnOff_W == null)
	        	    {
						_StandardBurnOff_W = TearOff.StandardBurnOff;
					}
					return _StandardBurnOff_W;
				}
			}

			public WhereParameter ActualBurnOff
		    {
				get
		        {
					if(_ActualBurnOff_W == null)
	        	    {
						_ActualBurnOff_W = TearOff.ActualBurnOff;
					}
					return _ActualBurnOff_W;
				}
			}

			public WhereParameter DepDelayID1
		    {
				get
		        {
					if(_DepDelayID1_W == null)
	        	    {
						_DepDelayID1_W = TearOff.DepDelayID1;
					}
					return _DepDelayID1_W;
				}
			}

			public WhereParameter DepDelayTime1
		    {
				get
		        {
					if(_DepDelayTime1_W == null)
	        	    {
						_DepDelayTime1_W = TearOff.DepDelayTime1;
					}
					return _DepDelayTime1_W;
				}
			}

			public WhereParameter DepDelayID2
		    {
				get
		        {
					if(_DepDelayID2_W == null)
	        	    {
						_DepDelayID2_W = TearOff.DepDelayID2;
					}
					return _DepDelayID2_W;
				}
			}

			public WhereParameter DepDelayTime2
		    {
				get
		        {
					if(_DepDelayTime2_W == null)
	        	    {
						_DepDelayTime2_W = TearOff.DepDelayTime2;
					}
					return _DepDelayTime2_W;
				}
			}

			public WhereParameter DepDelayID3
		    {
				get
		        {
					if(_DepDelayID3_W == null)
	        	    {
						_DepDelayID3_W = TearOff.DepDelayID3;
					}
					return _DepDelayID3_W;
				}
			}

			public WhereParameter DepDelayTime3
		    {
				get
		        {
					if(_DepDelayTime3_W == null)
	        	    {
						_DepDelayTime3_W = TearOff.DepDelayTime3;
					}
					return _DepDelayTime3_W;
				}
			}

			public WhereParameter ArrDelayID1
		    {
				get
		        {
					if(_ArrDelayID1_W == null)
	        	    {
						_ArrDelayID1_W = TearOff.ArrDelayID1;
					}
					return _ArrDelayID1_W;
				}
			}

			public WhereParameter ArrDelayTime1
		    {
				get
		        {
					if(_ArrDelayTime1_W == null)
	        	    {
						_ArrDelayTime1_W = TearOff.ArrDelayTime1;
					}
					return _ArrDelayTime1_W;
				}
			}

			public WhereParameter ArrDelayID2
		    {
				get
		        {
					if(_ArrDelayID2_W == null)
	        	    {
						_ArrDelayID2_W = TearOff.ArrDelayID2;
					}
					return _ArrDelayID2_W;
				}
			}

			public WhereParameter ArrDelayTime2
		    {
				get
		        {
					if(_ArrDelayTime2_W == null)
	        	    {
						_ArrDelayTime2_W = TearOff.ArrDelayTime2;
					}
					return _ArrDelayTime2_W;
				}
			}

			public WhereParameter ArrDelayID3
		    {
				get
		        {
					if(_ArrDelayID3_W == null)
	        	    {
						_ArrDelayID3_W = TearOff.ArrDelayID3;
					}
					return _ArrDelayID3_W;
				}
			}

			public WhereParameter ArrDelayTime3
		    {
				get
		        {
					if(_ArrDelayTime3_W == null)
	        	    {
						_ArrDelayTime3_W = TearOff.ArrDelayTime3;
					}
					return _ArrDelayTime3_W;
				}
			}

			public WhereParameter PilotFlying_CrewID
		    {
				get
		        {
					if(_PilotFlying_CrewID_W == null)
	        	    {
						_PilotFlying_CrewID_W = TearOff.PilotFlying_CrewID;
					}
					return _PilotFlying_CrewID_W;
				}
			}

			public WhereParameter PilotMonitoring_CrewID
		    {
				get
		        {
					if(_PilotMonitoring_CrewID_W == null)
	        	    {
						_PilotMonitoring_CrewID_W = TearOff.PilotMonitoring_CrewID;
					}
					return _PilotMonitoring_CrewID_W;
				}
			}

			public WhereParameter FlyAtDay
		    {
				get
		        {
					if(_FlyAtDay_W == null)
	        	    {
						_FlyAtDay_W = TearOff.FlyAtDay;
					}
					return _FlyAtDay_W;
				}
			}

			public WhereParameter FlyAtNight
		    {
				get
		        {
					if(_FlyAtNight_W == null)
	        	    {
						_FlyAtNight_W = TearOff.FlyAtNight;
					}
					return _FlyAtNight_W;
				}
			}

			public WhereParameter DepFule
		    {
				get
		        {
					if(_DepFule_W == null)
	        	    {
						_DepFule_W = TearOff.DepFule;
					}
					return _DepFule_W;
				}
			}

			public WhereParameter ArrFule
		    {
				get
		        {
					if(_ArrFule_W == null)
	        	    {
						_ArrFule_W = TearOff.ArrFule;
					}
					return _ArrFule_W;
				}
			}

			public WhereParameter NoOfPax_A
		    {
				get
		        {
					if(_NoOfPax_A_W == null)
	        	    {
						_NoOfPax_A_W = TearOff.NoOfPax_A;
					}
					return _NoOfPax_A_W;
				}
			}

			public WhereParameter NoOfPax_C
		    {
				get
		        {
					if(_NoOfPax_C_W == null)
	        	    {
						_NoOfPax_C_W = TearOff.NoOfPax_C;
					}
					return _NoOfPax_C_W;
				}
			}

			public WhereParameter NoOfPax_I
		    {
				get
		        {
					if(_NoOfPax_I_W == null)
	        	    {
						_NoOfPax_I_W = TearOff.NoOfPax_I;
					}
					return _NoOfPax_I_W;
				}
			}

			public WhereParameter ZFW
		    {
				get
		        {
					if(_ZFW_W == null)
	        	    {
						_ZFW_W = TearOff.ZFW;
					}
					return _ZFW_W;
				}
			}

			public WhereParameter TOW
		    {
				get
		        {
					if(_TOW_W == null)
	        	    {
						_TOW_W = TearOff.TOW;
					}
					return _TOW_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public WhereParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public WhereParameter IsPAX
		    {
				get
		        {
					if(_IsPAX_W == null)
	        	    {
						_IsPAX_W = TearOff.IsPAX;
					}
					return _IsPAX_W;
				}
			}

			public WhereParameter IsHeavy
		    {
				get
		        {
					if(_IsHeavy_W == null)
	        	    {
						_IsHeavy_W = TearOff.IsHeavy;
					}
					return _IsHeavy_W;
				}
			}

			public WhereParameter IsHeavyCrew
		    {
				get
		        {
					if(_IsHeavyCrew_W == null)
	        	    {
						_IsHeavyCrew_W = TearOff.IsHeavyCrew;
					}
					return _IsHeavyCrew_W;
				}
			}

			public WhereParameter Comments
		    {
				get
		        {
					if(_Comments_W == null)
	        	    {
						_Comments_W = TearOff.Comments;
					}
					return _Comments_W;
				}
			}

			public WhereParameter AirCraft_AirPlaneID
		    {
				get
		        {
					if(_AirCraft_AirPlaneID_W == null)
	        	    {
						_AirCraft_AirPlaneID_W = TearOff.AirCraft_AirPlaneID;
					}
					return _AirCraft_AirPlaneID_W;
				}
			}

			public WhereParameter SectorDate
		    {
				get
		        {
					if(_SectorDate_W == null)
	        	    {
						_SectorDate_W = TearOff.SectorDate;
					}
					return _SectorDate_W;
				}
			}

			public WhereParameter IsReturnSector
		    {
				get
		        {
					if(_IsReturnSector_W == null)
	        	    {
						_IsReturnSector_W = TearOff.IsReturnSector;
					}
					return _IsReturnSector_W;
				}
			}

			public WhereParameter ReturnSectorID
		    {
				get
		        {
					if(_ReturnSectorID_W == null)
	        	    {
						_ReturnSectorID_W = TearOff.ReturnSectorID;
					}
					return _ReturnSectorID_W;
				}
			}

			public WhereParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public WhereParameter PilotCityID
		    {
				get
		        {
					if(_PilotCityID_W == null)
	        	    {
						_PilotCityID_W = TearOff.PilotCityID;
					}
					return _PilotCityID_W;
				}
			}

			public WhereParameter OnBoardFuel
		    {
				get
		        {
					if(_OnBoardFuel_W == null)
	        	    {
						_OnBoardFuel_W = TearOff.OnBoardFuel;
					}
					return _OnBoardFuel_W;
				}
			}

			public WhereParameter ReceiptNo
		    {
				get
		        {
					if(_ReceiptNo_W == null)
	        	    {
						_ReceiptNo_W = TearOff.ReceiptNo;
					}
					return _ReceiptNo_W;
				}
			}

			public WhereParameter FO_AS_PilotFlying
		    {
				get
		        {
					if(_FO_AS_PilotFlying_W == null)
	        	    {
						_FO_AS_PilotFlying_W = TearOff.FO_AS_PilotFlying;
					}
					return _FO_AS_PilotFlying_W;
				}
			}

			private WhereParameter _SectorID_W = null;
			private WhereParameter _FlightID_W = null;
			private WhereParameter _From_AirportID_W = null;
			private WhereParameter _To_AirportID_W = null;
			private WhereParameter _FuleUplifted_W = null;
			private WhereParameter _STD_W = null;
			private WhereParameter _ATD_W = null;
			private WhereParameter _ChoxOff_W = null;
			private WhereParameter _STA_W = null;
			private WhereParameter _ATA_W = null;
			private WhereParameter _ChoxOn_W = null;
			private WhereParameter _StandardBurnOff_W = null;
			private WhereParameter _ActualBurnOff_W = null;
			private WhereParameter _DepDelayID1_W = null;
			private WhereParameter _DepDelayTime1_W = null;
			private WhereParameter _DepDelayID2_W = null;
			private WhereParameter _DepDelayTime2_W = null;
			private WhereParameter _DepDelayID3_W = null;
			private WhereParameter _DepDelayTime3_W = null;
			private WhereParameter _ArrDelayID1_W = null;
			private WhereParameter _ArrDelayTime1_W = null;
			private WhereParameter _ArrDelayID2_W = null;
			private WhereParameter _ArrDelayTime2_W = null;
			private WhereParameter _ArrDelayID3_W = null;
			private WhereParameter _ArrDelayTime3_W = null;
			private WhereParameter _PilotFlying_CrewID_W = null;
			private WhereParameter _PilotMonitoring_CrewID_W = null;
			private WhereParameter _FlyAtDay_W = null;
			private WhereParameter _FlyAtNight_W = null;
			private WhereParameter _DepFule_W = null;
			private WhereParameter _ArrFule_W = null;
			private WhereParameter _NoOfPax_A_W = null;
			private WhereParameter _NoOfPax_C_W = null;
			private WhereParameter _NoOfPax_I_W = null;
			private WhereParameter _ZFW_W = null;
			private WhereParameter _TOW_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _LastModifiedDate_W = null;
			private WhereParameter _FlightNo_W = null;
			private WhereParameter _IsPAX_W = null;
			private WhereParameter _IsHeavy_W = null;
			private WhereParameter _IsHeavyCrew_W = null;
			private WhereParameter _Comments_W = null;
			private WhereParameter _AirCraft_AirPlaneID_W = null;
			private WhereParameter _SectorDate_W = null;
			private WhereParameter _IsReturnSector_W = null;
			private WhereParameter _ReturnSectorID_W = null;
			private WhereParameter _ClientID_W = null;
			private WhereParameter _PilotCityID_W = null;
			private WhereParameter _OnBoardFuel_W = null;
			private WhereParameter _ReceiptNo_W = null;
			private WhereParameter _FO_AS_PilotFlying_W = null;

			public void WhereClauseReset()
			{
				_SectorID_W = null;
				_FlightID_W = null;
				_From_AirportID_W = null;
				_To_AirportID_W = null;
				_FuleUplifted_W = null;
				_STD_W = null;
				_ATD_W = null;
				_ChoxOff_W = null;
				_STA_W = null;
				_ATA_W = null;
				_ChoxOn_W = null;
				_StandardBurnOff_W = null;
				_ActualBurnOff_W = null;
				_DepDelayID1_W = null;
				_DepDelayTime1_W = null;
				_DepDelayID2_W = null;
				_DepDelayTime2_W = null;
				_DepDelayID3_W = null;
				_DepDelayTime3_W = null;
				_ArrDelayID1_W = null;
				_ArrDelayTime1_W = null;
				_ArrDelayID2_W = null;
				_ArrDelayTime2_W = null;
				_ArrDelayID3_W = null;
				_ArrDelayTime3_W = null;
				_PilotFlying_CrewID_W = null;
				_PilotMonitoring_CrewID_W = null;
				_FlyAtDay_W = null;
				_FlyAtNight_W = null;
				_DepFule_W = null;
				_ArrFule_W = null;
				_NoOfPax_A_W = null;
				_NoOfPax_C_W = null;
				_NoOfPax_I_W = null;
				_ZFW_W = null;
				_TOW_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_FlightNo_W = null;
				_IsPAX_W = null;
				_IsHeavy_W = null;
				_IsHeavyCrew_W = null;
				_Comments_W = null;
				_AirCraft_AirPlaneID_W = null;
				_SectorDate_W = null;
				_IsReturnSector_W = null;
				_ReturnSectorID_W = null;
				_ClientID_W = null;
				_PilotCityID_W = null;
				_OnBoardFuel_W = null;
				_ReceiptNo_W = null;
				_FO_AS_PilotFlying_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SectorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SectorID, Parameters.SectorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightID, Parameters.FlightID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter From_AirportID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.From_AirportID, Parameters.From_AirportID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter To_AirportID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.To_AirportID, Parameters.To_AirportID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FuleUplifted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FuleUplifted, Parameters.FuleUplifted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter STD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.STD, Parameters.STD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ATD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ATD, Parameters.ATD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChoxOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChoxOff, Parameters.ChoxOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter STA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.STA, Parameters.STA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ATA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ATA, Parameters.ATA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChoxOn
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChoxOn, Parameters.ChoxOn);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StandardBurnOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StandardBurnOff, Parameters.StandardBurnOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActualBurnOff
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActualBurnOff, Parameters.ActualBurnOff);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayID1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayID1, Parameters.DepDelayID1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayTime1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayTime1, Parameters.DepDelayTime1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayID2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayID2, Parameters.DepDelayID2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayTime2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayTime2, Parameters.DepDelayTime2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayID3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayID3, Parameters.DepDelayID3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepDelayTime3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepDelayTime3, Parameters.DepDelayTime3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayID1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayID1, Parameters.ArrDelayID1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayTime1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayTime1, Parameters.ArrDelayTime1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayID2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayID2, Parameters.ArrDelayID2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayTime2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayTime2, Parameters.ArrDelayTime2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayID3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayID3, Parameters.ArrDelayID3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrDelayTime3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrDelayTime3, Parameters.ArrDelayTime3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotFlying_CrewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotFlying_CrewID, Parameters.PilotFlying_CrewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotMonitoring_CrewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotMonitoring_CrewID, Parameters.PilotMonitoring_CrewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlyAtDay
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlyAtDay, Parameters.FlyAtDay);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlyAtNight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlyAtNight, Parameters.FlyAtNight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepFule
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepFule, Parameters.DepFule);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArrFule
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArrFule, Parameters.ArrFule);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoOfPax_A
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfPax_A, Parameters.NoOfPax_A);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoOfPax_C
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfPax_C, Parameters.NoOfPax_C);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoOfPax_I
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfPax_I, Parameters.NoOfPax_I);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ZFW
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ZFW, Parameters.ZFW);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TOW
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TOW, Parameters.TOW);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsPAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPAX, Parameters.IsPAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsHeavy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsHeavy, Parameters.IsHeavy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsHeavyCrew
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsHeavyCrew, Parameters.IsHeavyCrew);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Comments
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Comments, Parameters.Comments);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirCraft_AirPlaneID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirCraft_AirPlaneID, Parameters.AirCraft_AirPlaneID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SectorDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SectorDate, Parameters.SectorDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsReturnSector
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsReturnSector, Parameters.IsReturnSector);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReturnSectorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReturnSectorID, Parameters.ReturnSectorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ClientID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotCityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotCityID, Parameters.PilotCityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OnBoardFuel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OnBoardFuel, Parameters.OnBoardFuel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReceiptNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReceiptNo, Parameters.ReceiptNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FO_AS_PilotFlying
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FO_AS_PilotFlying, Parameters.FO_AS_PilotFlying);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SectorID
		    {
				get
		        {
					if(_SectorID_W == null)
	        	    {
						_SectorID_W = TearOff.SectorID;
					}
					return _SectorID_W;
				}
			}

			public AggregateParameter FlightID
		    {
				get
		        {
					if(_FlightID_W == null)
	        	    {
						_FlightID_W = TearOff.FlightID;
					}
					return _FlightID_W;
				}
			}

			public AggregateParameter From_AirportID
		    {
				get
		        {
					if(_From_AirportID_W == null)
	        	    {
						_From_AirportID_W = TearOff.From_AirportID;
					}
					return _From_AirportID_W;
				}
			}

			public AggregateParameter To_AirportID
		    {
				get
		        {
					if(_To_AirportID_W == null)
	        	    {
						_To_AirportID_W = TearOff.To_AirportID;
					}
					return _To_AirportID_W;
				}
			}

			public AggregateParameter FuleUplifted
		    {
				get
		        {
					if(_FuleUplifted_W == null)
	        	    {
						_FuleUplifted_W = TearOff.FuleUplifted;
					}
					return _FuleUplifted_W;
				}
			}

			public AggregateParameter STD
		    {
				get
		        {
					if(_STD_W == null)
	        	    {
						_STD_W = TearOff.STD;
					}
					return _STD_W;
				}
			}

			public AggregateParameter ATD
		    {
				get
		        {
					if(_ATD_W == null)
	        	    {
						_ATD_W = TearOff.ATD;
					}
					return _ATD_W;
				}
			}

			public AggregateParameter ChoxOff
		    {
				get
		        {
					if(_ChoxOff_W == null)
	        	    {
						_ChoxOff_W = TearOff.ChoxOff;
					}
					return _ChoxOff_W;
				}
			}

			public AggregateParameter STA
		    {
				get
		        {
					if(_STA_W == null)
	        	    {
						_STA_W = TearOff.STA;
					}
					return _STA_W;
				}
			}

			public AggregateParameter ATA
		    {
				get
		        {
					if(_ATA_W == null)
	        	    {
						_ATA_W = TearOff.ATA;
					}
					return _ATA_W;
				}
			}

			public AggregateParameter ChoxOn
		    {
				get
		        {
					if(_ChoxOn_W == null)
	        	    {
						_ChoxOn_W = TearOff.ChoxOn;
					}
					return _ChoxOn_W;
				}
			}

			public AggregateParameter StandardBurnOff
		    {
				get
		        {
					if(_StandardBurnOff_W == null)
	        	    {
						_StandardBurnOff_W = TearOff.StandardBurnOff;
					}
					return _StandardBurnOff_W;
				}
			}

			public AggregateParameter ActualBurnOff
		    {
				get
		        {
					if(_ActualBurnOff_W == null)
	        	    {
						_ActualBurnOff_W = TearOff.ActualBurnOff;
					}
					return _ActualBurnOff_W;
				}
			}

			public AggregateParameter DepDelayID1
		    {
				get
		        {
					if(_DepDelayID1_W == null)
	        	    {
						_DepDelayID1_W = TearOff.DepDelayID1;
					}
					return _DepDelayID1_W;
				}
			}

			public AggregateParameter DepDelayTime1
		    {
				get
		        {
					if(_DepDelayTime1_W == null)
	        	    {
						_DepDelayTime1_W = TearOff.DepDelayTime1;
					}
					return _DepDelayTime1_W;
				}
			}

			public AggregateParameter DepDelayID2
		    {
				get
		        {
					if(_DepDelayID2_W == null)
	        	    {
						_DepDelayID2_W = TearOff.DepDelayID2;
					}
					return _DepDelayID2_W;
				}
			}

			public AggregateParameter DepDelayTime2
		    {
				get
		        {
					if(_DepDelayTime2_W == null)
	        	    {
						_DepDelayTime2_W = TearOff.DepDelayTime2;
					}
					return _DepDelayTime2_W;
				}
			}

			public AggregateParameter DepDelayID3
		    {
				get
		        {
					if(_DepDelayID3_W == null)
	        	    {
						_DepDelayID3_W = TearOff.DepDelayID3;
					}
					return _DepDelayID3_W;
				}
			}

			public AggregateParameter DepDelayTime3
		    {
				get
		        {
					if(_DepDelayTime3_W == null)
	        	    {
						_DepDelayTime3_W = TearOff.DepDelayTime3;
					}
					return _DepDelayTime3_W;
				}
			}

			public AggregateParameter ArrDelayID1
		    {
				get
		        {
					if(_ArrDelayID1_W == null)
	        	    {
						_ArrDelayID1_W = TearOff.ArrDelayID1;
					}
					return _ArrDelayID1_W;
				}
			}

			public AggregateParameter ArrDelayTime1
		    {
				get
		        {
					if(_ArrDelayTime1_W == null)
	        	    {
						_ArrDelayTime1_W = TearOff.ArrDelayTime1;
					}
					return _ArrDelayTime1_W;
				}
			}

			public AggregateParameter ArrDelayID2
		    {
				get
		        {
					if(_ArrDelayID2_W == null)
	        	    {
						_ArrDelayID2_W = TearOff.ArrDelayID2;
					}
					return _ArrDelayID2_W;
				}
			}

			public AggregateParameter ArrDelayTime2
		    {
				get
		        {
					if(_ArrDelayTime2_W == null)
	        	    {
						_ArrDelayTime2_W = TearOff.ArrDelayTime2;
					}
					return _ArrDelayTime2_W;
				}
			}

			public AggregateParameter ArrDelayID3
		    {
				get
		        {
					if(_ArrDelayID3_W == null)
	        	    {
						_ArrDelayID3_W = TearOff.ArrDelayID3;
					}
					return _ArrDelayID3_W;
				}
			}

			public AggregateParameter ArrDelayTime3
		    {
				get
		        {
					if(_ArrDelayTime3_W == null)
	        	    {
						_ArrDelayTime3_W = TearOff.ArrDelayTime3;
					}
					return _ArrDelayTime3_W;
				}
			}

			public AggregateParameter PilotFlying_CrewID
		    {
				get
		        {
					if(_PilotFlying_CrewID_W == null)
	        	    {
						_PilotFlying_CrewID_W = TearOff.PilotFlying_CrewID;
					}
					return _PilotFlying_CrewID_W;
				}
			}

			public AggregateParameter PilotMonitoring_CrewID
		    {
				get
		        {
					if(_PilotMonitoring_CrewID_W == null)
	        	    {
						_PilotMonitoring_CrewID_W = TearOff.PilotMonitoring_CrewID;
					}
					return _PilotMonitoring_CrewID_W;
				}
			}

			public AggregateParameter FlyAtDay
		    {
				get
		        {
					if(_FlyAtDay_W == null)
	        	    {
						_FlyAtDay_W = TearOff.FlyAtDay;
					}
					return _FlyAtDay_W;
				}
			}

			public AggregateParameter FlyAtNight
		    {
				get
		        {
					if(_FlyAtNight_W == null)
	        	    {
						_FlyAtNight_W = TearOff.FlyAtNight;
					}
					return _FlyAtNight_W;
				}
			}

			public AggregateParameter DepFule
		    {
				get
		        {
					if(_DepFule_W == null)
	        	    {
						_DepFule_W = TearOff.DepFule;
					}
					return _DepFule_W;
				}
			}

			public AggregateParameter ArrFule
		    {
				get
		        {
					if(_ArrFule_W == null)
	        	    {
						_ArrFule_W = TearOff.ArrFule;
					}
					return _ArrFule_W;
				}
			}

			public AggregateParameter NoOfPax_A
		    {
				get
		        {
					if(_NoOfPax_A_W == null)
	        	    {
						_NoOfPax_A_W = TearOff.NoOfPax_A;
					}
					return _NoOfPax_A_W;
				}
			}

			public AggregateParameter NoOfPax_C
		    {
				get
		        {
					if(_NoOfPax_C_W == null)
	        	    {
						_NoOfPax_C_W = TearOff.NoOfPax_C;
					}
					return _NoOfPax_C_W;
				}
			}

			public AggregateParameter NoOfPax_I
		    {
				get
		        {
					if(_NoOfPax_I_W == null)
	        	    {
						_NoOfPax_I_W = TearOff.NoOfPax_I;
					}
					return _NoOfPax_I_W;
				}
			}

			public AggregateParameter ZFW
		    {
				get
		        {
					if(_ZFW_W == null)
	        	    {
						_ZFW_W = TearOff.ZFW;
					}
					return _ZFW_W;
				}
			}

			public AggregateParameter TOW
		    {
				get
		        {
					if(_TOW_W == null)
	        	    {
						_TOW_W = TearOff.TOW;
					}
					return _TOW_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public AggregateParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public AggregateParameter IsPAX
		    {
				get
		        {
					if(_IsPAX_W == null)
	        	    {
						_IsPAX_W = TearOff.IsPAX;
					}
					return _IsPAX_W;
				}
			}

			public AggregateParameter IsHeavy
		    {
				get
		        {
					if(_IsHeavy_W == null)
	        	    {
						_IsHeavy_W = TearOff.IsHeavy;
					}
					return _IsHeavy_W;
				}
			}

			public AggregateParameter IsHeavyCrew
		    {
				get
		        {
					if(_IsHeavyCrew_W == null)
	        	    {
						_IsHeavyCrew_W = TearOff.IsHeavyCrew;
					}
					return _IsHeavyCrew_W;
				}
			}

			public AggregateParameter Comments
		    {
				get
		        {
					if(_Comments_W == null)
	        	    {
						_Comments_W = TearOff.Comments;
					}
					return _Comments_W;
				}
			}

			public AggregateParameter AirCraft_AirPlaneID
		    {
				get
		        {
					if(_AirCraft_AirPlaneID_W == null)
	        	    {
						_AirCraft_AirPlaneID_W = TearOff.AirCraft_AirPlaneID;
					}
					return _AirCraft_AirPlaneID_W;
				}
			}

			public AggregateParameter SectorDate
		    {
				get
		        {
					if(_SectorDate_W == null)
	        	    {
						_SectorDate_W = TearOff.SectorDate;
					}
					return _SectorDate_W;
				}
			}

			public AggregateParameter IsReturnSector
		    {
				get
		        {
					if(_IsReturnSector_W == null)
	        	    {
						_IsReturnSector_W = TearOff.IsReturnSector;
					}
					return _IsReturnSector_W;
				}
			}

			public AggregateParameter ReturnSectorID
		    {
				get
		        {
					if(_ReturnSectorID_W == null)
	        	    {
						_ReturnSectorID_W = TearOff.ReturnSectorID;
					}
					return _ReturnSectorID_W;
				}
			}

			public AggregateParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public AggregateParameter PilotCityID
		    {
				get
		        {
					if(_PilotCityID_W == null)
	        	    {
						_PilotCityID_W = TearOff.PilotCityID;
					}
					return _PilotCityID_W;
				}
			}

			public AggregateParameter OnBoardFuel
		    {
				get
		        {
					if(_OnBoardFuel_W == null)
	        	    {
						_OnBoardFuel_W = TearOff.OnBoardFuel;
					}
					return _OnBoardFuel_W;
				}
			}

			public AggregateParameter ReceiptNo
		    {
				get
		        {
					if(_ReceiptNo_W == null)
	        	    {
						_ReceiptNo_W = TearOff.ReceiptNo;
					}
					return _ReceiptNo_W;
				}
			}

			public AggregateParameter FO_AS_PilotFlying
		    {
				get
		        {
					if(_FO_AS_PilotFlying_W == null)
	        	    {
						_FO_AS_PilotFlying_W = TearOff.FO_AS_PilotFlying;
					}
					return _FO_AS_PilotFlying_W;
				}
			}

			private AggregateParameter _SectorID_W = null;
			private AggregateParameter _FlightID_W = null;
			private AggregateParameter _From_AirportID_W = null;
			private AggregateParameter _To_AirportID_W = null;
			private AggregateParameter _FuleUplifted_W = null;
			private AggregateParameter _STD_W = null;
			private AggregateParameter _ATD_W = null;
			private AggregateParameter _ChoxOff_W = null;
			private AggregateParameter _STA_W = null;
			private AggregateParameter _ATA_W = null;
			private AggregateParameter _ChoxOn_W = null;
			private AggregateParameter _StandardBurnOff_W = null;
			private AggregateParameter _ActualBurnOff_W = null;
			private AggregateParameter _DepDelayID1_W = null;
			private AggregateParameter _DepDelayTime1_W = null;
			private AggregateParameter _DepDelayID2_W = null;
			private AggregateParameter _DepDelayTime2_W = null;
			private AggregateParameter _DepDelayID3_W = null;
			private AggregateParameter _DepDelayTime3_W = null;
			private AggregateParameter _ArrDelayID1_W = null;
			private AggregateParameter _ArrDelayTime1_W = null;
			private AggregateParameter _ArrDelayID2_W = null;
			private AggregateParameter _ArrDelayTime2_W = null;
			private AggregateParameter _ArrDelayID3_W = null;
			private AggregateParameter _ArrDelayTime3_W = null;
			private AggregateParameter _PilotFlying_CrewID_W = null;
			private AggregateParameter _PilotMonitoring_CrewID_W = null;
			private AggregateParameter _FlyAtDay_W = null;
			private AggregateParameter _FlyAtNight_W = null;
			private AggregateParameter _DepFule_W = null;
			private AggregateParameter _ArrFule_W = null;
			private AggregateParameter _NoOfPax_A_W = null;
			private AggregateParameter _NoOfPax_C_W = null;
			private AggregateParameter _NoOfPax_I_W = null;
			private AggregateParameter _ZFW_W = null;
			private AggregateParameter _TOW_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _LastModifiedDate_W = null;
			private AggregateParameter _FlightNo_W = null;
			private AggregateParameter _IsPAX_W = null;
			private AggregateParameter _IsHeavy_W = null;
			private AggregateParameter _IsHeavyCrew_W = null;
			private AggregateParameter _Comments_W = null;
			private AggregateParameter _AirCraft_AirPlaneID_W = null;
			private AggregateParameter _SectorDate_W = null;
			private AggregateParameter _IsReturnSector_W = null;
			private AggregateParameter _ReturnSectorID_W = null;
			private AggregateParameter _ClientID_W = null;
			private AggregateParameter _PilotCityID_W = null;
			private AggregateParameter _OnBoardFuel_W = null;
			private AggregateParameter _ReceiptNo_W = null;
			private AggregateParameter _FO_AS_PilotFlying_W = null;

			public void AggregateClauseReset()
			{
				_SectorID_W = null;
				_FlightID_W = null;
				_From_AirportID_W = null;
				_To_AirportID_W = null;
				_FuleUplifted_W = null;
				_STD_W = null;
				_ATD_W = null;
				_ChoxOff_W = null;
				_STA_W = null;
				_ATA_W = null;
				_ChoxOn_W = null;
				_StandardBurnOff_W = null;
				_ActualBurnOff_W = null;
				_DepDelayID1_W = null;
				_DepDelayTime1_W = null;
				_DepDelayID2_W = null;
				_DepDelayTime2_W = null;
				_DepDelayID3_W = null;
				_DepDelayTime3_W = null;
				_ArrDelayID1_W = null;
				_ArrDelayTime1_W = null;
				_ArrDelayID2_W = null;
				_ArrDelayTime2_W = null;
				_ArrDelayID3_W = null;
				_ArrDelayTime3_W = null;
				_PilotFlying_CrewID_W = null;
				_PilotMonitoring_CrewID_W = null;
				_FlyAtDay_W = null;
				_FlyAtNight_W = null;
				_DepFule_W = null;
				_ArrFule_W = null;
				_NoOfPax_A_W = null;
				_NoOfPax_C_W = null;
				_NoOfPax_I_W = null;
				_ZFW_W = null;
				_TOW_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_FlightNo_W = null;
				_IsPAX_W = null;
				_IsHeavy_W = null;
				_IsHeavyCrew_W = null;
				_Comments_W = null;
				_AirCraft_AirPlaneID_W = null;
				_SectorDate_W = null;
				_IsReturnSector_W = null;
				_ReturnSectorID_W = null;
				_ClientID_W = null;
				_PilotCityID_W = null;
				_OnBoardFuel_W = null;
				_ReceiptNo_W = null;
				_FO_AS_PilotFlying_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SectorID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SectorID);
			p.SourceColumn = ColumnNames.SectorID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SectorID);
			p.SourceColumn = ColumnNames.SectorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightID);
			p.SourceColumn = ColumnNames.FlightID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.From_AirportID);
			p.SourceColumn = ColumnNames.From_AirportID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.To_AirportID);
			p.SourceColumn = ColumnNames.To_AirportID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FuleUplifted);
			p.SourceColumn = ColumnNames.FuleUplifted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.STD);
			p.SourceColumn = ColumnNames.STD;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ATD);
			p.SourceColumn = ColumnNames.ATD;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChoxOff);
			p.SourceColumn = ColumnNames.ChoxOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.STA);
			p.SourceColumn = ColumnNames.STA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ATA);
			p.SourceColumn = ColumnNames.ATA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChoxOn);
			p.SourceColumn = ColumnNames.ChoxOn;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StandardBurnOff);
			p.SourceColumn = ColumnNames.StandardBurnOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActualBurnOff);
			p.SourceColumn = ColumnNames.ActualBurnOff;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayID1);
			p.SourceColumn = ColumnNames.DepDelayID1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayTime1);
			p.SourceColumn = ColumnNames.DepDelayTime1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayID2);
			p.SourceColumn = ColumnNames.DepDelayID2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayTime2);
			p.SourceColumn = ColumnNames.DepDelayTime2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayID3);
			p.SourceColumn = ColumnNames.DepDelayID3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepDelayTime3);
			p.SourceColumn = ColumnNames.DepDelayTime3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayID1);
			p.SourceColumn = ColumnNames.ArrDelayID1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayTime1);
			p.SourceColumn = ColumnNames.ArrDelayTime1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayID2);
			p.SourceColumn = ColumnNames.ArrDelayID2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayTime2);
			p.SourceColumn = ColumnNames.ArrDelayTime2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayID3);
			p.SourceColumn = ColumnNames.ArrDelayID3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrDelayTime3);
			p.SourceColumn = ColumnNames.ArrDelayTime3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotFlying_CrewID);
			p.SourceColumn = ColumnNames.PilotFlying_CrewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotMonitoring_CrewID);
			p.SourceColumn = ColumnNames.PilotMonitoring_CrewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlyAtDay);
			p.SourceColumn = ColumnNames.FlyAtDay;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlyAtNight);
			p.SourceColumn = ColumnNames.FlyAtNight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepFule);
			p.SourceColumn = ColumnNames.DepFule;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArrFule);
			p.SourceColumn = ColumnNames.ArrFule;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoOfPax_A);
			p.SourceColumn = ColumnNames.NoOfPax_A;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoOfPax_C);
			p.SourceColumn = ColumnNames.NoOfPax_C;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoOfPax_I);
			p.SourceColumn = ColumnNames.NoOfPax_I;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ZFW);
			p.SourceColumn = ColumnNames.ZFW;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TOW);
			p.SourceColumn = ColumnNames.TOW;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastModifiedDate);
			p.SourceColumn = ColumnNames.LastModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightNo);
			p.SourceColumn = ColumnNames.FlightNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsPAX);
			p.SourceColumn = ColumnNames.IsPAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsHeavy);
			p.SourceColumn = ColumnNames.IsHeavy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsHeavyCrew);
			p.SourceColumn = ColumnNames.IsHeavyCrew;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Comments);
			p.SourceColumn = ColumnNames.Comments;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirCraft_AirPlaneID);
			p.SourceColumn = ColumnNames.AirCraft_AirPlaneID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SectorDate);
			p.SourceColumn = ColumnNames.SectorDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsReturnSector);
			p.SourceColumn = ColumnNames.IsReturnSector;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReturnSectorID);
			p.SourceColumn = ColumnNames.ReturnSectorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotCityID);
			p.SourceColumn = ColumnNames.PilotCityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OnBoardFuel);
			p.SourceColumn = ColumnNames.OnBoardFuel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReceiptNo);
			p.SourceColumn = ColumnNames.ReceiptNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FO_AS_PilotFlying);
			p.SourceColumn = ColumnNames.FO_AS_PilotFlying;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
