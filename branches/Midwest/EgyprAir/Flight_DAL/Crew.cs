
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Crew : SqlClientEntity
	{
		public _Crew()
		{
			this.QuerySource = "Crew";
			this.MappingName = "Crew";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CrewLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CrewID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CrewID, CrewID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CrewLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CrewID
			{
				get
				{
					return new SqlParameter("@CrewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter StaffNo
			{
				get
				{
					return new SqlParameter("@StaffNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastModifiedDate
			{
				get
				{
					return new SqlParameter("@LastModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Username
			{
				get
				{
					return new SqlParameter("@Username", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter RANK
			{
				get
				{
					return new SqlParameter("@RANK", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter IDNO
			{
				get
				{
					return new SqlParameter("@IDNO", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter LicenseNo
			{
				get
				{
					return new SqlParameter("@LicenseNo", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter Competenecycheck
			{
				get
				{
					return new SqlParameter("@Competenecycheck", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MEDICALLICENSEEXPIRYFrom
			{
				get
				{
					return new SqlParameter("@MEDICALLICENSEEXPIRYFrom", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter MEDICALLICENSEEXPIRYTo
			{
				get
				{
					return new SqlParameter("@MEDICALLICENSEEXPIRYTo", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InstructorRenewal
			{
				get
				{
					return new SqlParameter("@InstructorRenewal", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TRANSITIONCOURSE
			{
				get
				{
					return new SqlParameter("@TRANSITIONCOURSE", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RECURRENT12
			{
				get
				{
					return new SqlParameter("@RECURRENT12", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RECURRENT24
			{
				get
				{
					return new SqlParameter("@RECURRENT24", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SMS
			{
				get
				{
					return new SqlParameter("@SMS", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Security
			{
				get
				{
					return new SqlParameter("@Security", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Mobile
			{
				get
				{
					return new SqlParameter("@Mobile", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CrewID = "CrewID";
            public const string Name = "Name";
            public const string StaffNo = "StaffNo";
            public const string Notes = "Notes";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string Username = "Username";
            public const string RANK = "RANK";
            public const string IDNO = "IDNO";
            public const string LicenseNo = "LicenseNo";
            public const string Competenecycheck = "Competenecycheck";
            public const string MEDICALLICENSEEXPIRYFrom = "MEDICALLICENSEEXPIRYFrom";
            public const string MEDICALLICENSEEXPIRYTo = "MEDICALLICENSEEXPIRYTo";
            public const string InstructorRenewal = "InstructorRenewal";
            public const string TRANSITIONCOURSE = "TRANSITIONCOURSE";
            public const string RECURRENT12 = "RECURRENT12";
            public const string RECURRENT24 = "RECURRENT24";
            public const string SMS = "SMS";
            public const string Security = "security";
            public const string Email = "Email";
            public const string Mobile = "Mobile";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CrewID] = _Crew.PropertyNames.CrewID;
					ht[Name] = _Crew.PropertyNames.Name;
					ht[StaffNo] = _Crew.PropertyNames.StaffNo;
					ht[Notes] = _Crew.PropertyNames.Notes;
					ht[CreatedBy] = _Crew.PropertyNames.CreatedBy;
					ht[ModifiedBy] = _Crew.PropertyNames.ModifiedBy;
					ht[CreatedDate] = _Crew.PropertyNames.CreatedDate;
					ht[LastModifiedDate] = _Crew.PropertyNames.LastModifiedDate;
					ht[Username] = _Crew.PropertyNames.Username;
					ht[RANK] = _Crew.PropertyNames.RANK;
					ht[IDNO] = _Crew.PropertyNames.IDNO;
					ht[LicenseNo] = _Crew.PropertyNames.LicenseNo;
					ht[Competenecycheck] = _Crew.PropertyNames.Competenecycheck;
					ht[MEDICALLICENSEEXPIRYFrom] = _Crew.PropertyNames.MEDICALLICENSEEXPIRYFrom;
					ht[MEDICALLICENSEEXPIRYTo] = _Crew.PropertyNames.MEDICALLICENSEEXPIRYTo;
					ht[InstructorRenewal] = _Crew.PropertyNames.InstructorRenewal;
					ht[TRANSITIONCOURSE] = _Crew.PropertyNames.TRANSITIONCOURSE;
					ht[RECURRENT12] = _Crew.PropertyNames.RECURRENT12;
					ht[RECURRENT24] = _Crew.PropertyNames.RECURRENT24;
					ht[SMS] = _Crew.PropertyNames.SMS;
					ht[Security] = _Crew.PropertyNames.Security;
					ht[Email] = _Crew.PropertyNames.Email;
					ht[Mobile] = _Crew.PropertyNames.Mobile;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CrewID = "CrewID";
            public const string Name = "Name";
            public const string StaffNo = "StaffNo";
            public const string Notes = "Notes";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string Username = "Username";
            public const string RANK = "RANK";
            public const string IDNO = "IDNO";
            public const string LicenseNo = "LicenseNo";
            public const string Competenecycheck = "Competenecycheck";
            public const string MEDICALLICENSEEXPIRYFrom = "MEDICALLICENSEEXPIRYFrom";
            public const string MEDICALLICENSEEXPIRYTo = "MEDICALLICENSEEXPIRYTo";
            public const string InstructorRenewal = "InstructorRenewal";
            public const string TRANSITIONCOURSE = "TRANSITIONCOURSE";
            public const string RECURRENT12 = "RECURRENT12";
            public const string RECURRENT24 = "RECURRENT24";
            public const string SMS = "SMS";
            public const string Security = "Security";
            public const string Email = "Email";
            public const string Mobile = "Mobile";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CrewID] = _Crew.ColumnNames.CrewID;
					ht[Name] = _Crew.ColumnNames.Name;
					ht[StaffNo] = _Crew.ColumnNames.StaffNo;
					ht[Notes] = _Crew.ColumnNames.Notes;
					ht[CreatedBy] = _Crew.ColumnNames.CreatedBy;
					ht[ModifiedBy] = _Crew.ColumnNames.ModifiedBy;
					ht[CreatedDate] = _Crew.ColumnNames.CreatedDate;
					ht[LastModifiedDate] = _Crew.ColumnNames.LastModifiedDate;
					ht[Username] = _Crew.ColumnNames.Username;
					ht[RANK] = _Crew.ColumnNames.RANK;
					ht[IDNO] = _Crew.ColumnNames.IDNO;
					ht[LicenseNo] = _Crew.ColumnNames.LicenseNo;
					ht[Competenecycheck] = _Crew.ColumnNames.Competenecycheck;
					ht[MEDICALLICENSEEXPIRYFrom] = _Crew.ColumnNames.MEDICALLICENSEEXPIRYFrom;
					ht[MEDICALLICENSEEXPIRYTo] = _Crew.ColumnNames.MEDICALLICENSEEXPIRYTo;
					ht[InstructorRenewal] = _Crew.ColumnNames.InstructorRenewal;
					ht[TRANSITIONCOURSE] = _Crew.ColumnNames.TRANSITIONCOURSE;
					ht[RECURRENT12] = _Crew.ColumnNames.RECURRENT12;
					ht[RECURRENT24] = _Crew.ColumnNames.RECURRENT24;
					ht[SMS] = _Crew.ColumnNames.SMS;
					ht[Security] = _Crew.ColumnNames.Security;
					ht[Email] = _Crew.ColumnNames.Email;
					ht[Mobile] = _Crew.ColumnNames.Mobile;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CrewID = "s_CrewID";
            public const string Name = "s_Name";
            public const string StaffNo = "s_StaffNo";
            public const string Notes = "s_Notes";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string LastModifiedDate = "s_LastModifiedDate";
            public const string Username = "s_Username";
            public const string RANK = "s_RANK";
            public const string IDNO = "s_IDNO";
            public const string LicenseNo = "s_LicenseNo";
            public const string Competenecycheck = "s_Competenecycheck";
            public const string MEDICALLICENSEEXPIRYFrom = "s_MEDICALLICENSEEXPIRYFrom";
            public const string MEDICALLICENSEEXPIRYTo = "s_MEDICALLICENSEEXPIRYTo";
            public const string InstructorRenewal = "s_InstructorRenewal";
            public const string TRANSITIONCOURSE = "s_TRANSITIONCOURSE";
            public const string RECURRENT12 = "s_RECURRENT12";
            public const string RECURRENT24 = "s_RECURRENT24";
            public const string SMS = "s_SMS";
            public const string Security = "s_Security";
            public const string Email = "s_Email";
            public const string Mobile = "s_Mobile";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CrewID
	    {
			get
	        {
				return base.Getint(ColumnNames.CrewID);
			}
			set
	        {
				base.Setint(ColumnNames.CrewID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual int StaffNo
	    {
			get
	        {
				return base.Getint(ColumnNames.StaffNo);
			}
			set
	        {
				base.Setint(ColumnNames.StaffNo, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual Guid ModifiedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime LastModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string Username
	    {
			get
	        {
				return base.Getstring(ColumnNames.Username);
			}
			set
	        {
				base.Setstring(ColumnNames.Username, value);
			}
		}

		public virtual string RANK
	    {
			get
	        {
				return base.Getstring(ColumnNames.RANK);
			}
			set
	        {
				base.Setstring(ColumnNames.RANK, value);
			}
		}

		public virtual string IDNO
	    {
			get
	        {
				return base.Getstring(ColumnNames.IDNO);
			}
			set
	        {
				base.Setstring(ColumnNames.IDNO, value);
			}
		}

		public virtual string LicenseNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.LicenseNo);
			}
			set
	        {
				base.Setstring(ColumnNames.LicenseNo, value);
			}
		}

		public virtual DateTime Competenecycheck
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Competenecycheck);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Competenecycheck, value);
			}
		}

		public virtual DateTime MEDICALLICENSEEXPIRYFrom
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MEDICALLICENSEEXPIRYFrom);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MEDICALLICENSEEXPIRYFrom, value);
			}
		}

		public virtual DateTime MEDICALLICENSEEXPIRYTo
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MEDICALLICENSEEXPIRYTo);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MEDICALLICENSEEXPIRYTo, value);
			}
		}

		public virtual DateTime InstructorRenewal
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InstructorRenewal);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InstructorRenewal, value);
			}
		}

		public virtual DateTime TRANSITIONCOURSE
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TRANSITIONCOURSE);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TRANSITIONCOURSE, value);
			}
		}

		public virtual DateTime RECURRENT12
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RECURRENT12);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RECURRENT12, value);
			}
		}

		public virtual DateTime RECURRENT24
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RECURRENT24);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RECURRENT24, value);
			}
		}

		public virtual DateTime SMS
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.SMS);
			}
			set
	        {
				base.SetDateTime(ColumnNames.SMS, value);
			}
		}

		public virtual DateTime Security
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Security);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Security, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string Mobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Mobile, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CrewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CrewID) ? string.Empty : base.GetintAsString(ColumnNames.CrewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CrewID);
				else
					this.CrewID = base.SetintAsString(ColumnNames.CrewID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_StaffNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StaffNo) ? string.Empty : base.GetintAsString(ColumnNames.StaffNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StaffNo);
				else
					this.StaffNo = base.SetintAsString(ColumnNames.StaffNo, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetGuidAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_LastModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastModifiedDate);
				else
					this.LastModifiedDate = base.SetDateTimeAsString(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string s_Username
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Username) ? string.Empty : base.GetstringAsString(ColumnNames.Username);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Username);
				else
					this.Username = base.SetstringAsString(ColumnNames.Username, value);
			}
		}

		public virtual string s_RANK
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RANK) ? string.Empty : base.GetstringAsString(ColumnNames.RANK);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RANK);
				else
					this.RANK = base.SetstringAsString(ColumnNames.RANK, value);
			}
		}

		public virtual string s_IDNO
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IDNO) ? string.Empty : base.GetstringAsString(ColumnNames.IDNO);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IDNO);
				else
					this.IDNO = base.SetstringAsString(ColumnNames.IDNO, value);
			}
		}

		public virtual string s_LicenseNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicenseNo) ? string.Empty : base.GetstringAsString(ColumnNames.LicenseNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicenseNo);
				else
					this.LicenseNo = base.SetstringAsString(ColumnNames.LicenseNo, value);
			}
		}

		public virtual string s_Competenecycheck
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Competenecycheck) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Competenecycheck);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Competenecycheck);
				else
					this.Competenecycheck = base.SetDateTimeAsString(ColumnNames.Competenecycheck, value);
			}
		}

		public virtual string s_MEDICALLICENSEEXPIRYFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MEDICALLICENSEEXPIRYFrom) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MEDICALLICENSEEXPIRYFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MEDICALLICENSEEXPIRYFrom);
				else
					this.MEDICALLICENSEEXPIRYFrom = base.SetDateTimeAsString(ColumnNames.MEDICALLICENSEEXPIRYFrom, value);
			}
		}

		public virtual string s_MEDICALLICENSEEXPIRYTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MEDICALLICENSEEXPIRYTo) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MEDICALLICENSEEXPIRYTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MEDICALLICENSEEXPIRYTo);
				else
					this.MEDICALLICENSEEXPIRYTo = base.SetDateTimeAsString(ColumnNames.MEDICALLICENSEEXPIRYTo, value);
			}
		}

		public virtual string s_InstructorRenewal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InstructorRenewal) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InstructorRenewal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InstructorRenewal);
				else
					this.InstructorRenewal = base.SetDateTimeAsString(ColumnNames.InstructorRenewal, value);
			}
		}

		public virtual string s_TRANSITIONCOURSE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TRANSITIONCOURSE) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TRANSITIONCOURSE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TRANSITIONCOURSE);
				else
					this.TRANSITIONCOURSE = base.SetDateTimeAsString(ColumnNames.TRANSITIONCOURSE, value);
			}
		}

		public virtual string s_RECURRENT12
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RECURRENT12) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RECURRENT12);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RECURRENT12);
				else
					this.RECURRENT12 = base.SetDateTimeAsString(ColumnNames.RECURRENT12, value);
			}
		}

		public virtual string s_RECURRENT24
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RECURRENT24) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RECURRENT24);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RECURRENT24);
				else
					this.RECURRENT24 = base.SetDateTimeAsString(ColumnNames.RECURRENT24, value);
			}
		}

		public virtual string s_SMS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SMS) ? string.Empty : base.GetDateTimeAsString(ColumnNames.SMS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SMS);
				else
					this.SMS = base.SetDateTimeAsString(ColumnNames.SMS, value);
			}
		}

		public virtual string s_Security
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Security) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Security);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Security);
				else
					this.Security = base.SetDateTimeAsString(ColumnNames.Security, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_Mobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mobile) ? string.Empty : base.GetstringAsString(ColumnNames.Mobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mobile);
				else
					this.Mobile = base.SetstringAsString(ColumnNames.Mobile, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CrewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StaffNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StaffNo, Parameters.StaffNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Username
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Username, Parameters.Username);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RANK
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RANK, Parameters.RANK);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IDNO
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IDNO, Parameters.IDNO);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicenseNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Competenecycheck
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Competenecycheck, Parameters.Competenecycheck);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MEDICALLICENSEEXPIRYFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MEDICALLICENSEEXPIRYFrom, Parameters.MEDICALLICENSEEXPIRYFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MEDICALLICENSEEXPIRYTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MEDICALLICENSEEXPIRYTo, Parameters.MEDICALLICENSEEXPIRYTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InstructorRenewal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InstructorRenewal, Parameters.InstructorRenewal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TRANSITIONCOURSE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TRANSITIONCOURSE, Parameters.TRANSITIONCOURSE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RECURRENT12
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RECURRENT12, Parameters.RECURRENT12);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RECURRENT24
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RECURRENT24, Parameters.RECURRENT24);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SMS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SMS, Parameters.SMS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Security
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Security, Parameters.Security);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter StaffNo
		    {
				get
		        {
					if(_StaffNo_W == null)
	        	    {
						_StaffNo_W = TearOff.StaffNo;
					}
					return _StaffNo_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public WhereParameter Username
		    {
				get
		        {
					if(_Username_W == null)
	        	    {
						_Username_W = TearOff.Username;
					}
					return _Username_W;
				}
			}

			public WhereParameter RANK
		    {
				get
		        {
					if(_RANK_W == null)
	        	    {
						_RANK_W = TearOff.RANK;
					}
					return _RANK_W;
				}
			}

			public WhereParameter IDNO
		    {
				get
		        {
					if(_IDNO_W == null)
	        	    {
						_IDNO_W = TearOff.IDNO;
					}
					return _IDNO_W;
				}
			}

			public WhereParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public WhereParameter Competenecycheck
		    {
				get
		        {
					if(_Competenecycheck_W == null)
	        	    {
						_Competenecycheck_W = TearOff.Competenecycheck;
					}
					return _Competenecycheck_W;
				}
			}

			public WhereParameter MEDICALLICENSEEXPIRYFrom
		    {
				get
		        {
					if(_MEDICALLICENSEEXPIRYFrom_W == null)
	        	    {
						_MEDICALLICENSEEXPIRYFrom_W = TearOff.MEDICALLICENSEEXPIRYFrom;
					}
					return _MEDICALLICENSEEXPIRYFrom_W;
				}
			}

			public WhereParameter MEDICALLICENSEEXPIRYTo
		    {
				get
		        {
					if(_MEDICALLICENSEEXPIRYTo_W == null)
	        	    {
						_MEDICALLICENSEEXPIRYTo_W = TearOff.MEDICALLICENSEEXPIRYTo;
					}
					return _MEDICALLICENSEEXPIRYTo_W;
				}
			}

			public WhereParameter InstructorRenewal
		    {
				get
		        {
					if(_InstructorRenewal_W == null)
	        	    {
						_InstructorRenewal_W = TearOff.InstructorRenewal;
					}
					return _InstructorRenewal_W;
				}
			}

			public WhereParameter TRANSITIONCOURSE
		    {
				get
		        {
					if(_TRANSITIONCOURSE_W == null)
	        	    {
						_TRANSITIONCOURSE_W = TearOff.TRANSITIONCOURSE;
					}
					return _TRANSITIONCOURSE_W;
				}
			}

			public WhereParameter RECURRENT12
		    {
				get
		        {
					if(_RECURRENT12_W == null)
	        	    {
						_RECURRENT12_W = TearOff.RECURRENT12;
					}
					return _RECURRENT12_W;
				}
			}

			public WhereParameter RECURRENT24
		    {
				get
		        {
					if(_RECURRENT24_W == null)
	        	    {
						_RECURRENT24_W = TearOff.RECURRENT24;
					}
					return _RECURRENT24_W;
				}
			}

			public WhereParameter SMS
		    {
				get
		        {
					if(_SMS_W == null)
	        	    {
						_SMS_W = TearOff.SMS;
					}
					return _SMS_W;
				}
			}

			public WhereParameter Security
		    {
				get
		        {
					if(_Security_W == null)
	        	    {
						_Security_W = TearOff.Security;
					}
					return _Security_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			private WhereParameter _CrewID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _StaffNo_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _LastModifiedDate_W = null;
			private WhereParameter _Username_W = null;
			private WhereParameter _RANK_W = null;
			private WhereParameter _IDNO_W = null;
			private WhereParameter _LicenseNo_W = null;
			private WhereParameter _Competenecycheck_W = null;
			private WhereParameter _MEDICALLICENSEEXPIRYFrom_W = null;
			private WhereParameter _MEDICALLICENSEEXPIRYTo_W = null;
			private WhereParameter _InstructorRenewal_W = null;
			private WhereParameter _TRANSITIONCOURSE_W = null;
			private WhereParameter _RECURRENT12_W = null;
			private WhereParameter _RECURRENT24_W = null;
			private WhereParameter _SMS_W = null;
			private WhereParameter _Security_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _Mobile_W = null;

			public void WhereClauseReset()
			{
				_CrewID_W = null;
				_Name_W = null;
				_StaffNo_W = null;
				_Notes_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_Username_W = null;
				_RANK_W = null;
				_IDNO_W = null;
				_LicenseNo_W = null;
				_Competenecycheck_W = null;
				_MEDICALLICENSEEXPIRYFrom_W = null;
				_MEDICALLICENSEEXPIRYTo_W = null;
				_InstructorRenewal_W = null;
				_TRANSITIONCOURSE_W = null;
				_RECURRENT12_W = null;
				_RECURRENT24_W = null;
				_SMS_W = null;
				_Security_W = null;
				_Email_W = null;
				_Mobile_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CrewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StaffNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StaffNo, Parameters.StaffNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Username
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Username, Parameters.Username);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RANK
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RANK, Parameters.RANK);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IDNO
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IDNO, Parameters.IDNO);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicenseNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Competenecycheck
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Competenecycheck, Parameters.Competenecycheck);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MEDICALLICENSEEXPIRYFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MEDICALLICENSEEXPIRYFrom, Parameters.MEDICALLICENSEEXPIRYFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MEDICALLICENSEEXPIRYTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MEDICALLICENSEEXPIRYTo, Parameters.MEDICALLICENSEEXPIRYTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InstructorRenewal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InstructorRenewal, Parameters.InstructorRenewal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TRANSITIONCOURSE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TRANSITIONCOURSE, Parameters.TRANSITIONCOURSE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RECURRENT12
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RECURRENT12, Parameters.RECURRENT12);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RECURRENT24
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RECURRENT24, Parameters.RECURRENT24);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SMS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SMS, Parameters.SMS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Security
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Security, Parameters.Security);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter StaffNo
		    {
				get
		        {
					if(_StaffNo_W == null)
	        	    {
						_StaffNo_W = TearOff.StaffNo;
					}
					return _StaffNo_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public AggregateParameter Username
		    {
				get
		        {
					if(_Username_W == null)
	        	    {
						_Username_W = TearOff.Username;
					}
					return _Username_W;
				}
			}

			public AggregateParameter RANK
		    {
				get
		        {
					if(_RANK_W == null)
	        	    {
						_RANK_W = TearOff.RANK;
					}
					return _RANK_W;
				}
			}

			public AggregateParameter IDNO
		    {
				get
		        {
					if(_IDNO_W == null)
	        	    {
						_IDNO_W = TearOff.IDNO;
					}
					return _IDNO_W;
				}
			}

			public AggregateParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public AggregateParameter Competenecycheck
		    {
				get
		        {
					if(_Competenecycheck_W == null)
	        	    {
						_Competenecycheck_W = TearOff.Competenecycheck;
					}
					return _Competenecycheck_W;
				}
			}

			public AggregateParameter MEDICALLICENSEEXPIRYFrom
		    {
				get
		        {
					if(_MEDICALLICENSEEXPIRYFrom_W == null)
	        	    {
						_MEDICALLICENSEEXPIRYFrom_W = TearOff.MEDICALLICENSEEXPIRYFrom;
					}
					return _MEDICALLICENSEEXPIRYFrom_W;
				}
			}

			public AggregateParameter MEDICALLICENSEEXPIRYTo
		    {
				get
		        {
					if(_MEDICALLICENSEEXPIRYTo_W == null)
	        	    {
						_MEDICALLICENSEEXPIRYTo_W = TearOff.MEDICALLICENSEEXPIRYTo;
					}
					return _MEDICALLICENSEEXPIRYTo_W;
				}
			}

			public AggregateParameter InstructorRenewal
		    {
				get
		        {
					if(_InstructorRenewal_W == null)
	        	    {
						_InstructorRenewal_W = TearOff.InstructorRenewal;
					}
					return _InstructorRenewal_W;
				}
			}

			public AggregateParameter TRANSITIONCOURSE
		    {
				get
		        {
					if(_TRANSITIONCOURSE_W == null)
	        	    {
						_TRANSITIONCOURSE_W = TearOff.TRANSITIONCOURSE;
					}
					return _TRANSITIONCOURSE_W;
				}
			}

			public AggregateParameter RECURRENT12
		    {
				get
		        {
					if(_RECURRENT12_W == null)
	        	    {
						_RECURRENT12_W = TearOff.RECURRENT12;
					}
					return _RECURRENT12_W;
				}
			}

			public AggregateParameter RECURRENT24
		    {
				get
		        {
					if(_RECURRENT24_W == null)
	        	    {
						_RECURRENT24_W = TearOff.RECURRENT24;
					}
					return _RECURRENT24_W;
				}
			}

			public AggregateParameter SMS
		    {
				get
		        {
					if(_SMS_W == null)
	        	    {
						_SMS_W = TearOff.SMS;
					}
					return _SMS_W;
				}
			}

			public AggregateParameter Security
		    {
				get
		        {
					if(_Security_W == null)
	        	    {
						_Security_W = TearOff.Security;
					}
					return _Security_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			private AggregateParameter _CrewID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _StaffNo_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _LastModifiedDate_W = null;
			private AggregateParameter _Username_W = null;
			private AggregateParameter _RANK_W = null;
			private AggregateParameter _IDNO_W = null;
			private AggregateParameter _LicenseNo_W = null;
			private AggregateParameter _Competenecycheck_W = null;
			private AggregateParameter _MEDICALLICENSEEXPIRYFrom_W = null;
			private AggregateParameter _MEDICALLICENSEEXPIRYTo_W = null;
			private AggregateParameter _InstructorRenewal_W = null;
			private AggregateParameter _TRANSITIONCOURSE_W = null;
			private AggregateParameter _RECURRENT12_W = null;
			private AggregateParameter _RECURRENT24_W = null;
			private AggregateParameter _SMS_W = null;
			private AggregateParameter _Security_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _Mobile_W = null;

			public void AggregateClauseReset()
			{
				_CrewID_W = null;
				_Name_W = null;
				_StaffNo_W = null;
				_Notes_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_Username_W = null;
				_RANK_W = null;
				_IDNO_W = null;
				_LicenseNo_W = null;
				_Competenecycheck_W = null;
				_MEDICALLICENSEEXPIRYFrom_W = null;
				_MEDICALLICENSEEXPIRYTo_W = null;
				_InstructorRenewal_W = null;
				_TRANSITIONCOURSE_W = null;
				_RECURRENT12_W = null;
				_RECURRENT24_W = null;
				_SMS_W = null;
				_Security_W = null;
				_Email_W = null;
				_Mobile_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CrewInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CrewID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CrewUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CrewDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CrewID);
			p.SourceColumn = ColumnNames.CrewID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CrewID);
			p.SourceColumn = ColumnNames.CrewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StaffNo);
			p.SourceColumn = ColumnNames.StaffNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastModifiedDate);
			p.SourceColumn = ColumnNames.LastModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Username);
			p.SourceColumn = ColumnNames.Username;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RANK);
			p.SourceColumn = ColumnNames.RANK;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IDNO);
			p.SourceColumn = ColumnNames.IDNO;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LicenseNo);
			p.SourceColumn = ColumnNames.LicenseNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Competenecycheck);
			p.SourceColumn = ColumnNames.Competenecycheck;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MEDICALLICENSEEXPIRYFrom);
			p.SourceColumn = ColumnNames.MEDICALLICENSEEXPIRYFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MEDICALLICENSEEXPIRYTo);
			p.SourceColumn = ColumnNames.MEDICALLICENSEEXPIRYTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InstructorRenewal);
			p.SourceColumn = ColumnNames.InstructorRenewal;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TRANSITIONCOURSE);
			p.SourceColumn = ColumnNames.TRANSITIONCOURSE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RECURRENT12);
			p.SourceColumn = ColumnNames.RECURRENT12;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RECURRENT24);
			p.SourceColumn = ColumnNames.RECURRENT24;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SMS);
			p.SourceColumn = ColumnNames.SMS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Security);
			p.SourceColumn = ColumnNames.Security;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mobile);
			p.SourceColumn = ColumnNames.Mobile;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
