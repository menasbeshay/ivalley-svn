
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _PilotTransaction : SqlClientEntity
	{
		public _PilotTransaction()
		{
			this.QuerySource = "PilotTransaction";
			this.MappingName = "PilotTransaction";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotTransactionLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PilotTransactionID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PilotTransactionID, PilotTransactionID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotTransactionLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PilotTransactionID
			{
				get
				{
					return new SqlParameter("@PilotTransactionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TransactionsID
			{
				get
				{
					return new SqlParameter("@TransactionsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotID
			{
				get
				{
					return new SqlParameter("@PilotID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DateFrom
			{
				get
				{
					return new SqlParameter("@DateFrom", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter DateTo
			{
				get
				{
					return new SqlParameter("@DateTo", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PilotCityID
			{
				get
				{
					return new SqlParameter("@PilotCityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Location
			{
				get
				{
					return new SqlParameter("@Location", SqlDbType.NVarChar, 500);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PilotTransactionID = "PilotTransactionID";
            public const string TransactionsID = "TransactionsID";
            public const string PilotID = "PilotID";
            public const string DateFrom = "DateFrom";
            public const string DateTo = "DateTo";
            public const string PilotCityID = "PilotCityID";
            public const string Location = "Location";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotTransactionID] = _PilotTransaction.PropertyNames.PilotTransactionID;
					ht[TransactionsID] = _PilotTransaction.PropertyNames.TransactionsID;
					ht[PilotID] = _PilotTransaction.PropertyNames.PilotID;
					ht[DateFrom] = _PilotTransaction.PropertyNames.DateFrom;
					ht[DateTo] = _PilotTransaction.PropertyNames.DateTo;
					ht[PilotCityID] = _PilotTransaction.PropertyNames.PilotCityID;
					ht[Location] = _PilotTransaction.PropertyNames.Location;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PilotTransactionID = "PilotTransactionID";
            public const string TransactionsID = "TransactionsID";
            public const string PilotID = "PilotID";
            public const string DateFrom = "DateFrom";
            public const string DateTo = "DateTo";
            public const string PilotCityID = "PilotCityID";
            public const string Location = "Location";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotTransactionID] = _PilotTransaction.ColumnNames.PilotTransactionID;
					ht[TransactionsID] = _PilotTransaction.ColumnNames.TransactionsID;
					ht[PilotID] = _PilotTransaction.ColumnNames.PilotID;
					ht[DateFrom] = _PilotTransaction.ColumnNames.DateFrom;
					ht[DateTo] = _PilotTransaction.ColumnNames.DateTo;
					ht[PilotCityID] = _PilotTransaction.ColumnNames.PilotCityID;
					ht[Location] = _PilotTransaction.ColumnNames.Location;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PilotTransactionID = "s_PilotTransactionID";
            public const string TransactionsID = "s_TransactionsID";
            public const string PilotID = "s_PilotID";
            public const string DateFrom = "s_DateFrom";
            public const string DateTo = "s_DateTo";
            public const string PilotCityID = "s_PilotCityID";
            public const string Location = "s_Location";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PilotTransactionID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotTransactionID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotTransactionID, value);
			}
		}

		public virtual int TransactionsID
	    {
			get
	        {
				return base.Getint(ColumnNames.TransactionsID);
			}
			set
	        {
				base.Setint(ColumnNames.TransactionsID, value);
			}
		}

		public virtual int PilotID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotID, value);
			}
		}

		public virtual DateTime DateFrom
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateFrom);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateFrom, value);
			}
		}

		public virtual DateTime DateTo
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.DateTo);
			}
			set
	        {
				base.SetDateTime(ColumnNames.DateTo, value);
			}
		}

		public virtual int PilotCityID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotCityID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotCityID, value);
			}
		}

		public virtual string Location
	    {
			get
	        {
				return base.Getstring(ColumnNames.Location);
			}
			set
	        {
				base.Setstring(ColumnNames.Location, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PilotTransactionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotTransactionID) ? string.Empty : base.GetintAsString(ColumnNames.PilotTransactionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotTransactionID);
				else
					this.PilotTransactionID = base.SetintAsString(ColumnNames.PilotTransactionID, value);
			}
		}

		public virtual string s_TransactionsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TransactionsID) ? string.Empty : base.GetintAsString(ColumnNames.TransactionsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TransactionsID);
				else
					this.TransactionsID = base.SetintAsString(ColumnNames.TransactionsID, value);
			}
		}

		public virtual string s_PilotID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotID) ? string.Empty : base.GetintAsString(ColumnNames.PilotID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotID);
				else
					this.PilotID = base.SetintAsString(ColumnNames.PilotID, value);
			}
		}

		public virtual string s_DateFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateFrom) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateFrom);
				else
					this.DateFrom = base.SetDateTimeAsString(ColumnNames.DateFrom, value);
			}
		}

		public virtual string s_DateTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DateTo) ? string.Empty : base.GetDateTimeAsString(ColumnNames.DateTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DateTo);
				else
					this.DateTo = base.SetDateTimeAsString(ColumnNames.DateTo, value);
			}
		}

		public virtual string s_PilotCityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotCityID) ? string.Empty : base.GetintAsString(ColumnNames.PilotCityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotCityID);
				else
					this.PilotCityID = base.SetintAsString(ColumnNames.PilotCityID, value);
			}
		}

		public virtual string s_Location
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Location) ? string.Empty : base.GetstringAsString(ColumnNames.Location);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Location);
				else
					this.Location = base.SetstringAsString(ColumnNames.Location, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PilotTransactionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotTransactionID, Parameters.PilotTransactionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TransactionsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TransactionsID, Parameters.TransactionsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateFrom, Parameters.DateFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DateTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DateTo, Parameters.DateTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotCityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotCityID, Parameters.PilotCityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Location
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Location, Parameters.Location);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PilotTransactionID
		    {
				get
		        {
					if(_PilotTransactionID_W == null)
	        	    {
						_PilotTransactionID_W = TearOff.PilotTransactionID;
					}
					return _PilotTransactionID_W;
				}
			}

			public WhereParameter TransactionsID
		    {
				get
		        {
					if(_TransactionsID_W == null)
	        	    {
						_TransactionsID_W = TearOff.TransactionsID;
					}
					return _TransactionsID_W;
				}
			}

			public WhereParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public WhereParameter DateFrom
		    {
				get
		        {
					if(_DateFrom_W == null)
	        	    {
						_DateFrom_W = TearOff.DateFrom;
					}
					return _DateFrom_W;
				}
			}

			public WhereParameter DateTo
		    {
				get
		        {
					if(_DateTo_W == null)
	        	    {
						_DateTo_W = TearOff.DateTo;
					}
					return _DateTo_W;
				}
			}

			public WhereParameter PilotCityID
		    {
				get
		        {
					if(_PilotCityID_W == null)
	        	    {
						_PilotCityID_W = TearOff.PilotCityID;
					}
					return _PilotCityID_W;
				}
			}

			public WhereParameter Location
		    {
				get
		        {
					if(_Location_W == null)
	        	    {
						_Location_W = TearOff.Location;
					}
					return _Location_W;
				}
			}

			private WhereParameter _PilotTransactionID_W = null;
			private WhereParameter _TransactionsID_W = null;
			private WhereParameter _PilotID_W = null;
			private WhereParameter _DateFrom_W = null;
			private WhereParameter _DateTo_W = null;
			private WhereParameter _PilotCityID_W = null;
			private WhereParameter _Location_W = null;

			public void WhereClauseReset()
			{
				_PilotTransactionID_W = null;
				_TransactionsID_W = null;
				_PilotID_W = null;
				_DateFrom_W = null;
				_DateTo_W = null;
				_PilotCityID_W = null;
				_Location_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PilotTransactionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotTransactionID, Parameters.PilotTransactionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TransactionsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TransactionsID, Parameters.TransactionsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateFrom, Parameters.DateFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DateTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DateTo, Parameters.DateTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotCityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotCityID, Parameters.PilotCityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Location
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Location, Parameters.Location);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PilotTransactionID
		    {
				get
		        {
					if(_PilotTransactionID_W == null)
	        	    {
						_PilotTransactionID_W = TearOff.PilotTransactionID;
					}
					return _PilotTransactionID_W;
				}
			}

			public AggregateParameter TransactionsID
		    {
				get
		        {
					if(_TransactionsID_W == null)
	        	    {
						_TransactionsID_W = TearOff.TransactionsID;
					}
					return _TransactionsID_W;
				}
			}

			public AggregateParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public AggregateParameter DateFrom
		    {
				get
		        {
					if(_DateFrom_W == null)
	        	    {
						_DateFrom_W = TearOff.DateFrom;
					}
					return _DateFrom_W;
				}
			}

			public AggregateParameter DateTo
		    {
				get
		        {
					if(_DateTo_W == null)
	        	    {
						_DateTo_W = TearOff.DateTo;
					}
					return _DateTo_W;
				}
			}

			public AggregateParameter PilotCityID
		    {
				get
		        {
					if(_PilotCityID_W == null)
	        	    {
						_PilotCityID_W = TearOff.PilotCityID;
					}
					return _PilotCityID_W;
				}
			}

			public AggregateParameter Location
		    {
				get
		        {
					if(_Location_W == null)
	        	    {
						_Location_W = TearOff.Location;
					}
					return _Location_W;
				}
			}

			private AggregateParameter _PilotTransactionID_W = null;
			private AggregateParameter _TransactionsID_W = null;
			private AggregateParameter _PilotID_W = null;
			private AggregateParameter _DateFrom_W = null;
			private AggregateParameter _DateTo_W = null;
			private AggregateParameter _PilotCityID_W = null;
			private AggregateParameter _Location_W = null;

			public void AggregateClauseReset()
			{
				_PilotTransactionID_W = null;
				_TransactionsID_W = null;
				_PilotID_W = null;
				_DateFrom_W = null;
				_DateTo_W = null;
				_PilotCityID_W = null;
				_Location_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotTransactionInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PilotTransactionID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotTransactionUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotTransactionDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PilotTransactionID);
			p.SourceColumn = ColumnNames.PilotTransactionID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PilotTransactionID);
			p.SourceColumn = ColumnNames.PilotTransactionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TransactionsID);
			p.SourceColumn = ColumnNames.TransactionsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateFrom);
			p.SourceColumn = ColumnNames.DateFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DateTo);
			p.SourceColumn = ColumnNames.DateTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotCityID);
			p.SourceColumn = ColumnNames.PilotCityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Location);
			p.SourceColumn = ColumnNames.Location;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
