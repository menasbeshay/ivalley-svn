
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _VisaInfo : SqlClientEntity
	{
		public _VisaInfo()
		{
			this.QuerySource = "VisaInfo";
			this.MappingName = "VisaInfo";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VisaInfoLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int VisaInfoID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.VisaInfoID, VisaInfoID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_VisaInfoLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter VisaInfoID
			{
				get
				{
					return new SqlParameter("@VisaInfoID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Country
			{
				get
				{
					return new SqlParameter("@Country", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter VisaNo
			{
				get
				{
					return new SqlParameter("@VisaNo", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter ExpiryDate
			{
				get
				{
					return new SqlParameter("@ExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PilotID
			{
				get
				{
					return new SqlParameter("@PilotID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CrewID
			{
				get
				{
					return new SqlParameter("@CrewID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string VisaInfoID = "VisaInfoID";
            public const string Country = "Country";
            public const string VisaNo = "VisaNo";
            public const string ExpiryDate = "ExpiryDate";
            public const string PilotID = "PilotID";
            public const string CrewID = "CrewID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VisaInfoID] = _VisaInfo.PropertyNames.VisaInfoID;
					ht[Country] = _VisaInfo.PropertyNames.Country;
					ht[VisaNo] = _VisaInfo.PropertyNames.VisaNo;
					ht[ExpiryDate] = _VisaInfo.PropertyNames.ExpiryDate;
					ht[PilotID] = _VisaInfo.PropertyNames.PilotID;
					ht[CrewID] = _VisaInfo.PropertyNames.CrewID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string VisaInfoID = "VisaInfoID";
            public const string Country = "Country";
            public const string VisaNo = "VisaNo";
            public const string ExpiryDate = "ExpiryDate";
            public const string PilotID = "PilotID";
            public const string CrewID = "CrewID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[VisaInfoID] = _VisaInfo.ColumnNames.VisaInfoID;
					ht[Country] = _VisaInfo.ColumnNames.Country;
					ht[VisaNo] = _VisaInfo.ColumnNames.VisaNo;
					ht[ExpiryDate] = _VisaInfo.ColumnNames.ExpiryDate;
					ht[PilotID] = _VisaInfo.ColumnNames.PilotID;
					ht[CrewID] = _VisaInfo.ColumnNames.CrewID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string VisaInfoID = "s_VisaInfoID";
            public const string Country = "s_Country";
            public const string VisaNo = "s_VisaNo";
            public const string ExpiryDate = "s_ExpiryDate";
            public const string PilotID = "s_PilotID";
            public const string CrewID = "s_CrewID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int VisaInfoID
	    {
			get
	        {
				return base.Getint(ColumnNames.VisaInfoID);
			}
			set
	        {
				base.Setint(ColumnNames.VisaInfoID, value);
			}
		}

		public virtual string Country
	    {
			get
	        {
				return base.Getstring(ColumnNames.Country);
			}
			set
	        {
				base.Setstring(ColumnNames.Country, value);
			}
		}

		public virtual string VisaNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.VisaNo);
			}
			set
	        {
				base.Setstring(ColumnNames.VisaNo, value);
			}
		}

		public virtual DateTime ExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual int PilotID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotID, value);
			}
		}

		public virtual int CrewID
	    {
			get
	        {
				return base.Getint(ColumnNames.CrewID);
			}
			set
	        {
				base.Setint(ColumnNames.CrewID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_VisaInfoID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VisaInfoID) ? string.Empty : base.GetintAsString(ColumnNames.VisaInfoID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VisaInfoID);
				else
					this.VisaInfoID = base.SetintAsString(ColumnNames.VisaInfoID, value);
			}
		}

		public virtual string s_Country
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Country) ? string.Empty : base.GetstringAsString(ColumnNames.Country);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Country);
				else
					this.Country = base.SetstringAsString(ColumnNames.Country, value);
			}
		}

		public virtual string s_VisaNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VisaNo) ? string.Empty : base.GetstringAsString(ColumnNames.VisaNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VisaNo);
				else
					this.VisaNo = base.SetstringAsString(ColumnNames.VisaNo, value);
			}
		}

		public virtual string s_ExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpiryDate);
				else
					this.ExpiryDate = base.SetDateTimeAsString(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual string s_PilotID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotID) ? string.Empty : base.GetintAsString(ColumnNames.PilotID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotID);
				else
					this.PilotID = base.SetintAsString(ColumnNames.PilotID, value);
			}
		}

		public virtual string s_CrewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CrewID) ? string.Empty : base.GetintAsString(ColumnNames.CrewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CrewID);
				else
					this.CrewID = base.SetintAsString(ColumnNames.CrewID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter VisaInfoID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VisaInfoID, Parameters.VisaInfoID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Country
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VisaNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VisaNo, Parameters.VisaNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CrewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter VisaInfoID
		    {
				get
		        {
					if(_VisaInfoID_W == null)
	        	    {
						_VisaInfoID_W = TearOff.VisaInfoID;
					}
					return _VisaInfoID_W;
				}
			}

			public WhereParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter VisaNo
		    {
				get
		        {
					if(_VisaNo_W == null)
	        	    {
						_VisaNo_W = TearOff.VisaNo;
					}
					return _VisaNo_W;
				}
			}

			public WhereParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public WhereParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public WhereParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			private WhereParameter _VisaInfoID_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _VisaNo_W = null;
			private WhereParameter _ExpiryDate_W = null;
			private WhereParameter _PilotID_W = null;
			private WhereParameter _CrewID_W = null;

			public void WhereClauseReset()
			{
				_VisaInfoID_W = null;
				_Country_W = null;
				_VisaNo_W = null;
				_ExpiryDate_W = null;
				_PilotID_W = null;
				_CrewID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter VisaInfoID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VisaInfoID, Parameters.VisaInfoID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Country
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VisaNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VisaNo, Parameters.VisaNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CrewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CrewID, Parameters.CrewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter VisaInfoID
		    {
				get
		        {
					if(_VisaInfoID_W == null)
	        	    {
						_VisaInfoID_W = TearOff.VisaInfoID;
					}
					return _VisaInfoID_W;
				}
			}

			public AggregateParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public AggregateParameter VisaNo
		    {
				get
		        {
					if(_VisaNo_W == null)
	        	    {
						_VisaNo_W = TearOff.VisaNo;
					}
					return _VisaNo_W;
				}
			}

			public AggregateParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public AggregateParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public AggregateParameter CrewID
		    {
				get
		        {
					if(_CrewID_W == null)
	        	    {
						_CrewID_W = TearOff.CrewID;
					}
					return _CrewID_W;
				}
			}

			private AggregateParameter _VisaInfoID_W = null;
			private AggregateParameter _Country_W = null;
			private AggregateParameter _VisaNo_W = null;
			private AggregateParameter _ExpiryDate_W = null;
			private AggregateParameter _PilotID_W = null;
			private AggregateParameter _CrewID_W = null;

			public void AggregateClauseReset()
			{
				_VisaInfoID_W = null;
				_Country_W = null;
				_VisaNo_W = null;
				_ExpiryDate_W = null;
				_PilotID_W = null;
				_CrewID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VisaInfoInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.VisaInfoID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VisaInfoUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_VisaInfoDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.VisaInfoID);
			p.SourceColumn = ColumnNames.VisaInfoID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.VisaInfoID);
			p.SourceColumn = ColumnNames.VisaInfoID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Country);
			p.SourceColumn = ColumnNames.Country;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VisaNo);
			p.SourceColumn = ColumnNames.VisaNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpiryDate);
			p.SourceColumn = ColumnNames.ExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CrewID);
			p.SourceColumn = ColumnNames.CrewID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
