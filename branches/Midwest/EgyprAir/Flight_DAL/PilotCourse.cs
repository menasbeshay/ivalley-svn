
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _PilotCourse : SqlClientEntity
	{
		public _PilotCourse()
		{
			this.QuerySource = "PilotCourse";
			this.MappingName = "PilotCourse";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotCourseLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PilotCourseID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PilotCourseID, PilotCourseID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotCourseLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PilotCourseID
			{
				get
				{
					return new SqlParameter("@PilotCourseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CourseID
			{
				get
				{
					return new SqlParameter("@CourseID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotID
			{
				get
				{
					return new SqlParameter("@PilotID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PilotTitleID
			{
				get
				{
					return new SqlParameter("@PilotTitleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainerID
			{
				get
				{
					return new SqlParameter("@TrainerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainerTitleID
			{
				get
				{
					return new SqlParameter("@TrainerTitleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ExaminerID
			{
				get
				{
					return new SqlParameter("@ExaminerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TrainingID
			{
				get
				{
					return new SqlParameter("@TrainingID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ExpiryDate
			{
				get
				{
					return new SqlParameter("@ExpiryDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Result
			{
				get
				{
					return new SqlParameter("@Result", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 1000);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PilotCourseID = "PilotCourseID";
            public const string CourseID = "CourseID";
            public const string PilotID = "PilotID";
            public const string PilotTitleID = "PilotTitleID";
            public const string TrainerID = "TrainerID";
            public const string TrainerTitleID = "TrainerTitleID";
            public const string ExaminerID = "ExaminerID";
            public const string TrainingID = "TrainingID";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ExpiryDate = "ExpiryDate";
            public const string Result = "Result";
            public const string Notes = "Notes";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotCourseID] = _PilotCourse.PropertyNames.PilotCourseID;
					ht[CourseID] = _PilotCourse.PropertyNames.CourseID;
					ht[PilotID] = _PilotCourse.PropertyNames.PilotID;
					ht[PilotTitleID] = _PilotCourse.PropertyNames.PilotTitleID;
					ht[TrainerID] = _PilotCourse.PropertyNames.TrainerID;
					ht[TrainerTitleID] = _PilotCourse.PropertyNames.TrainerTitleID;
					ht[ExaminerID] = _PilotCourse.PropertyNames.ExaminerID;
					ht[TrainingID] = _PilotCourse.PropertyNames.TrainingID;
					ht[StartDate] = _PilotCourse.PropertyNames.StartDate;
					ht[EndDate] = _PilotCourse.PropertyNames.EndDate;
					ht[ExpiryDate] = _PilotCourse.PropertyNames.ExpiryDate;
					ht[Result] = _PilotCourse.PropertyNames.Result;
					ht[Notes] = _PilotCourse.PropertyNames.Notes;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PilotCourseID = "PilotCourseID";
            public const string CourseID = "CourseID";
            public const string PilotID = "PilotID";
            public const string PilotTitleID = "PilotTitleID";
            public const string TrainerID = "TrainerID";
            public const string TrainerTitleID = "TrainerTitleID";
            public const string ExaminerID = "ExaminerID";
            public const string TrainingID = "TrainingID";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ExpiryDate = "ExpiryDate";
            public const string Result = "Result";
            public const string Notes = "Notes";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotCourseID] = _PilotCourse.ColumnNames.PilotCourseID;
					ht[CourseID] = _PilotCourse.ColumnNames.CourseID;
					ht[PilotID] = _PilotCourse.ColumnNames.PilotID;
					ht[PilotTitleID] = _PilotCourse.ColumnNames.PilotTitleID;
					ht[TrainerID] = _PilotCourse.ColumnNames.TrainerID;
					ht[TrainerTitleID] = _PilotCourse.ColumnNames.TrainerTitleID;
					ht[ExaminerID] = _PilotCourse.ColumnNames.ExaminerID;
					ht[TrainingID] = _PilotCourse.ColumnNames.TrainingID;
					ht[StartDate] = _PilotCourse.ColumnNames.StartDate;
					ht[EndDate] = _PilotCourse.ColumnNames.EndDate;
					ht[ExpiryDate] = _PilotCourse.ColumnNames.ExpiryDate;
					ht[Result] = _PilotCourse.ColumnNames.Result;
					ht[Notes] = _PilotCourse.ColumnNames.Notes;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PilotCourseID = "s_PilotCourseID";
            public const string CourseID = "s_CourseID";
            public const string PilotID = "s_PilotID";
            public const string PilotTitleID = "s_PilotTitleID";
            public const string TrainerID = "s_TrainerID";
            public const string TrainerTitleID = "s_TrainerTitleID";
            public const string ExaminerID = "s_ExaminerID";
            public const string TrainingID = "s_TrainingID";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";
            public const string ExpiryDate = "s_ExpiryDate";
            public const string Result = "s_Result";
            public const string Notes = "s_Notes";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PilotCourseID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotCourseID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotCourseID, value);
			}
		}

		public virtual int CourseID
	    {
			get
	        {
				return base.Getint(ColumnNames.CourseID);
			}
			set
	        {
				base.Setint(ColumnNames.CourseID, value);
			}
		}

		public virtual int PilotID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotID, value);
			}
		}

		public virtual int PilotTitleID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotTitleID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotTitleID, value);
			}
		}

		public virtual int TrainerID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainerID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainerID, value);
			}
		}

		public virtual int TrainerTitleID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainerTitleID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainerTitleID, value);
			}
		}

		public virtual int ExaminerID
	    {
			get
	        {
				return base.Getint(ColumnNames.ExaminerID);
			}
			set
	        {
				base.Setint(ColumnNames.ExaminerID, value);
			}
		}

		public virtual int TrainingID
	    {
			get
	        {
				return base.Getint(ColumnNames.TrainingID);
			}
			set
	        {
				base.Setint(ColumnNames.TrainingID, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual DateTime ExpiryDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ExpiryDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual bool Result
	    {
			get
	        {
				return base.Getbool(ColumnNames.Result);
			}
			set
	        {
				base.Setbool(ColumnNames.Result, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PilotCourseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotCourseID) ? string.Empty : base.GetintAsString(ColumnNames.PilotCourseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotCourseID);
				else
					this.PilotCourseID = base.SetintAsString(ColumnNames.PilotCourseID, value);
			}
		}

		public virtual string s_CourseID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CourseID) ? string.Empty : base.GetintAsString(ColumnNames.CourseID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CourseID);
				else
					this.CourseID = base.SetintAsString(ColumnNames.CourseID, value);
			}
		}

		public virtual string s_PilotID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotID) ? string.Empty : base.GetintAsString(ColumnNames.PilotID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotID);
				else
					this.PilotID = base.SetintAsString(ColumnNames.PilotID, value);
			}
		}

		public virtual string s_PilotTitleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotTitleID) ? string.Empty : base.GetintAsString(ColumnNames.PilotTitleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotTitleID);
				else
					this.PilotTitleID = base.SetintAsString(ColumnNames.PilotTitleID, value);
			}
		}

		public virtual string s_TrainerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainerID) ? string.Empty : base.GetintAsString(ColumnNames.TrainerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainerID);
				else
					this.TrainerID = base.SetintAsString(ColumnNames.TrainerID, value);
			}
		}

		public virtual string s_TrainerTitleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainerTitleID) ? string.Empty : base.GetintAsString(ColumnNames.TrainerTitleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainerTitleID);
				else
					this.TrainerTitleID = base.SetintAsString(ColumnNames.TrainerTitleID, value);
			}
		}

		public virtual string s_ExaminerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExaminerID) ? string.Empty : base.GetintAsString(ColumnNames.ExaminerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExaminerID);
				else
					this.ExaminerID = base.SetintAsString(ColumnNames.ExaminerID, value);
			}
		}

		public virtual string s_TrainingID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TrainingID) ? string.Empty : base.GetintAsString(ColumnNames.TrainingID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TrainingID);
				else
					this.TrainingID = base.SetintAsString(ColumnNames.TrainingID, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_ExpiryDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExpiryDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ExpiryDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExpiryDate);
				else
					this.ExpiryDate = base.SetDateTimeAsString(ColumnNames.ExpiryDate, value);
			}
		}

		public virtual string s_Result
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Result) ? string.Empty : base.GetboolAsString(ColumnNames.Result);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Result);
				else
					this.Result = base.SetboolAsString(ColumnNames.Result, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PilotCourseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotCourseID, Parameters.PilotCourseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CourseID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CourseID, Parameters.CourseID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PilotTitleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotTitleID, Parameters.PilotTitleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainerID, Parameters.TrainerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainerTitleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainerTitleID, Parameters.TrainerTitleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExaminerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExaminerID, Parameters.ExaminerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TrainingID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TrainingID, Parameters.TrainingID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExpiryDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Result
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Result, Parameters.Result);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PilotCourseID
		    {
				get
		        {
					if(_PilotCourseID_W == null)
	        	    {
						_PilotCourseID_W = TearOff.PilotCourseID;
					}
					return _PilotCourseID_W;
				}
			}

			public WhereParameter CourseID
		    {
				get
		        {
					if(_CourseID_W == null)
	        	    {
						_CourseID_W = TearOff.CourseID;
					}
					return _CourseID_W;
				}
			}

			public WhereParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public WhereParameter PilotTitleID
		    {
				get
		        {
					if(_PilotTitleID_W == null)
	        	    {
						_PilotTitleID_W = TearOff.PilotTitleID;
					}
					return _PilotTitleID_W;
				}
			}

			public WhereParameter TrainerID
		    {
				get
		        {
					if(_TrainerID_W == null)
	        	    {
						_TrainerID_W = TearOff.TrainerID;
					}
					return _TrainerID_W;
				}
			}

			public WhereParameter TrainerTitleID
		    {
				get
		        {
					if(_TrainerTitleID_W == null)
	        	    {
						_TrainerTitleID_W = TearOff.TrainerTitleID;
					}
					return _TrainerTitleID_W;
				}
			}

			public WhereParameter ExaminerID
		    {
				get
		        {
					if(_ExaminerID_W == null)
	        	    {
						_ExaminerID_W = TearOff.ExaminerID;
					}
					return _ExaminerID_W;
				}
			}

			public WhereParameter TrainingID
		    {
				get
		        {
					if(_TrainingID_W == null)
	        	    {
						_TrainingID_W = TearOff.TrainingID;
					}
					return _TrainingID_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public WhereParameter Result
		    {
				get
		        {
					if(_Result_W == null)
	        	    {
						_Result_W = TearOff.Result;
					}
					return _Result_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			private WhereParameter _PilotCourseID_W = null;
			private WhereParameter _CourseID_W = null;
			private WhereParameter _PilotID_W = null;
			private WhereParameter _PilotTitleID_W = null;
			private WhereParameter _TrainerID_W = null;
			private WhereParameter _TrainerTitleID_W = null;
			private WhereParameter _ExaminerID_W = null;
			private WhereParameter _TrainingID_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _ExpiryDate_W = null;
			private WhereParameter _Result_W = null;
			private WhereParameter _Notes_W = null;

			public void WhereClauseReset()
			{
				_PilotCourseID_W = null;
				_CourseID_W = null;
				_PilotID_W = null;
				_PilotTitleID_W = null;
				_TrainerID_W = null;
				_TrainerTitleID_W = null;
				_ExaminerID_W = null;
				_TrainingID_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ExpiryDate_W = null;
				_Result_W = null;
				_Notes_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PilotCourseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotCourseID, Parameters.PilotCourseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CourseID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CourseID, Parameters.CourseID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PilotTitleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotTitleID, Parameters.PilotTitleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainerID, Parameters.TrainerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainerTitleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainerTitleID, Parameters.TrainerTitleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExaminerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExaminerID, Parameters.ExaminerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TrainingID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TrainingID, Parameters.TrainingID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExpiryDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExpiryDate, Parameters.ExpiryDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Result
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Result, Parameters.Result);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PilotCourseID
		    {
				get
		        {
					if(_PilotCourseID_W == null)
	        	    {
						_PilotCourseID_W = TearOff.PilotCourseID;
					}
					return _PilotCourseID_W;
				}
			}

			public AggregateParameter CourseID
		    {
				get
		        {
					if(_CourseID_W == null)
	        	    {
						_CourseID_W = TearOff.CourseID;
					}
					return _CourseID_W;
				}
			}

			public AggregateParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public AggregateParameter PilotTitleID
		    {
				get
		        {
					if(_PilotTitleID_W == null)
	        	    {
						_PilotTitleID_W = TearOff.PilotTitleID;
					}
					return _PilotTitleID_W;
				}
			}

			public AggregateParameter TrainerID
		    {
				get
		        {
					if(_TrainerID_W == null)
	        	    {
						_TrainerID_W = TearOff.TrainerID;
					}
					return _TrainerID_W;
				}
			}

			public AggregateParameter TrainerTitleID
		    {
				get
		        {
					if(_TrainerTitleID_W == null)
	        	    {
						_TrainerTitleID_W = TearOff.TrainerTitleID;
					}
					return _TrainerTitleID_W;
				}
			}

			public AggregateParameter ExaminerID
		    {
				get
		        {
					if(_ExaminerID_W == null)
	        	    {
						_ExaminerID_W = TearOff.ExaminerID;
					}
					return _ExaminerID_W;
				}
			}

			public AggregateParameter TrainingID
		    {
				get
		        {
					if(_TrainingID_W == null)
	        	    {
						_TrainingID_W = TearOff.TrainingID;
					}
					return _TrainingID_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter ExpiryDate
		    {
				get
		        {
					if(_ExpiryDate_W == null)
	        	    {
						_ExpiryDate_W = TearOff.ExpiryDate;
					}
					return _ExpiryDate_W;
				}
			}

			public AggregateParameter Result
		    {
				get
		        {
					if(_Result_W == null)
	        	    {
						_Result_W = TearOff.Result;
					}
					return _Result_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			private AggregateParameter _PilotCourseID_W = null;
			private AggregateParameter _CourseID_W = null;
			private AggregateParameter _PilotID_W = null;
			private AggregateParameter _PilotTitleID_W = null;
			private AggregateParameter _TrainerID_W = null;
			private AggregateParameter _TrainerTitleID_W = null;
			private AggregateParameter _ExaminerID_W = null;
			private AggregateParameter _TrainingID_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _ExpiryDate_W = null;
			private AggregateParameter _Result_W = null;
			private AggregateParameter _Notes_W = null;

			public void AggregateClauseReset()
			{
				_PilotCourseID_W = null;
				_CourseID_W = null;
				_PilotID_W = null;
				_PilotTitleID_W = null;
				_TrainerID_W = null;
				_TrainerTitleID_W = null;
				_ExaminerID_W = null;
				_TrainingID_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ExpiryDate_W = null;
				_Result_W = null;
				_Notes_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotCourseInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PilotCourseID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotCourseUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotCourseDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PilotCourseID);
			p.SourceColumn = ColumnNames.PilotCourseID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PilotCourseID);
			p.SourceColumn = ColumnNames.PilotCourseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CourseID);
			p.SourceColumn = ColumnNames.CourseID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PilotTitleID);
			p.SourceColumn = ColumnNames.PilotTitleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainerID);
			p.SourceColumn = ColumnNames.TrainerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainerTitleID);
			p.SourceColumn = ColumnNames.TrainerTitleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExaminerID);
			p.SourceColumn = ColumnNames.ExaminerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TrainingID);
			p.SourceColumn = ColumnNames.TrainingID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExpiryDate);
			p.SourceColumn = ColumnNames.ExpiryDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Result);
			p.SourceColumn = ColumnNames.Result;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
