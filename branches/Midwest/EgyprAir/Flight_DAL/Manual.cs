
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Manual : SqlClientEntity
	{
		public _Manual()
		{
			this.QuerySource = "Manual";
			this.MappingName = "Manual";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ManualLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ManualID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ManualID, ManualID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ManualLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ManualID
			{
				get
				{
					return new SqlParameter("@ManualID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Title
			{
				get
				{
					return new SqlParameter("@Title", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter Path
			{
				get
				{
					return new SqlParameter("@Path", SqlDbType.NVarChar, 1000);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ManualCategoryID
			{
				get
				{
					return new SqlParameter("@ManualCategoryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IssueNumber
			{
				get
				{
					return new SqlParameter("@IssueNumber", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter IssueDate
			{
				get
				{
					return new SqlParameter("@IssueDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RevisionNumber
			{
				get
				{
					return new SqlParameter("@RevisionNumber", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter RevisionDate
			{
				get
				{
					return new SqlParameter("@RevisionDate", SqlDbType.DateTime, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ManualID = "ManualID";
            public const string Title = "Title";
            public const string Path = "Path";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "createdDate";
            public const string ManualCategoryID = "ManualCategoryID";
            public const string IssueNumber = "IssueNumber";
            public const string IssueDate = "IssueDate";
            public const string RevisionNumber = "RevisionNumber";
            public const string RevisionDate = "RevisionDate";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ManualID] = _Manual.PropertyNames.ManualID;
					ht[Title] = _Manual.PropertyNames.Title;
					ht[Path] = _Manual.PropertyNames.Path;
					ht[CreatedBy] = _Manual.PropertyNames.CreatedBy;
					ht[CreatedDate] = _Manual.PropertyNames.CreatedDate;
					ht[ManualCategoryID] = _Manual.PropertyNames.ManualCategoryID;
					ht[IssueNumber] = _Manual.PropertyNames.IssueNumber;
					ht[IssueDate] = _Manual.PropertyNames.IssueDate;
					ht[RevisionNumber] = _Manual.PropertyNames.RevisionNumber;
					ht[RevisionDate] = _Manual.PropertyNames.RevisionDate;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ManualID = "ManualID";
            public const string Title = "Title";
            public const string Path = "Path";
            public const string CreatedBy = "CreatedBy";
            public const string CreatedDate = "CreatedDate";
            public const string ManualCategoryID = "ManualCategoryID";
            public const string IssueNumber = "IssueNumber";
            public const string IssueDate = "IssueDate";
            public const string RevisionNumber = "RevisionNumber";
            public const string RevisionDate = "RevisionDate";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ManualID] = _Manual.ColumnNames.ManualID;
					ht[Title] = _Manual.ColumnNames.Title;
					ht[Path] = _Manual.ColumnNames.Path;
					ht[CreatedBy] = _Manual.ColumnNames.CreatedBy;
					ht[CreatedDate] = _Manual.ColumnNames.CreatedDate;
					ht[ManualCategoryID] = _Manual.ColumnNames.ManualCategoryID;
					ht[IssueNumber] = _Manual.ColumnNames.IssueNumber;
					ht[IssueDate] = _Manual.ColumnNames.IssueDate;
					ht[RevisionNumber] = _Manual.ColumnNames.RevisionNumber;
					ht[RevisionDate] = _Manual.ColumnNames.RevisionDate;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ManualID = "s_ManualID";
            public const string Title = "s_Title";
            public const string Path = "s_Path";
            public const string CreatedBy = "s_CreatedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string ManualCategoryID = "s_ManualCategoryID";
            public const string IssueNumber = "s_IssueNumber";
            public const string IssueDate = "s_IssueDate";
            public const string RevisionNumber = "s_RevisionNumber";
            public const string RevisionDate = "s_RevisionDate";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ManualID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManualID);
			}
			set
	        {
				base.Setint(ColumnNames.ManualID, value);
			}
		}

		public virtual string Title
	    {
			get
	        {
				return base.Getstring(ColumnNames.Title);
			}
			set
	        {
				base.Setstring(ColumnNames.Title, value);
			}
		}

		public virtual string Path
	    {
			get
	        {
				return base.Getstring(ColumnNames.Path);
			}
			set
	        {
				base.Setstring(ColumnNames.Path, value);
			}
		}

		public virtual string CreatedBy
	    {
			get
	        {
				return base.Getstring(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setstring(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual int ManualCategoryID
	    {
			get
	        {
				return base.Getint(ColumnNames.ManualCategoryID);
			}
			set
	        {
				base.Setint(ColumnNames.ManualCategoryID, value);
			}
		}

		public virtual string IssueNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.IssueNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.IssueNumber, value);
			}
		}

		public virtual DateTime IssueDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.IssueDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.IssueDate, value);
			}
		}

		public virtual string RevisionNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.RevisionNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.RevisionNumber, value);
			}
		}

		public virtual DateTime RevisionDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RevisionDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RevisionDate, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ManualID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManualID) ? string.Empty : base.GetintAsString(ColumnNames.ManualID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManualID);
				else
					this.ManualID = base.SetintAsString(ColumnNames.ManualID, value);
			}
		}

		public virtual string s_Title
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Title) ? string.Empty : base.GetstringAsString(ColumnNames.Title);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Title);
				else
					this.Title = base.SetstringAsString(ColumnNames.Title, value);
			}
		}

		public virtual string s_Path
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Path) ? string.Empty : base.GetstringAsString(ColumnNames.Path);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Path);
				else
					this.Path = base.SetstringAsString(ColumnNames.Path, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetstringAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetstringAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_ManualCategoryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ManualCategoryID) ? string.Empty : base.GetintAsString(ColumnNames.ManualCategoryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ManualCategoryID);
				else
					this.ManualCategoryID = base.SetintAsString(ColumnNames.ManualCategoryID, value);
			}
		}

		public virtual string s_IssueNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssueNumber) ? string.Empty : base.GetstringAsString(ColumnNames.IssueNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssueNumber);
				else
					this.IssueNumber = base.SetstringAsString(ColumnNames.IssueNumber, value);
			}
		}

		public virtual string s_IssueDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IssueDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.IssueDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IssueDate);
				else
					this.IssueDate = base.SetDateTimeAsString(ColumnNames.IssueDate, value);
			}
		}

		public virtual string s_RevisionNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RevisionNumber) ? string.Empty : base.GetstringAsString(ColumnNames.RevisionNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RevisionNumber);
				else
					this.RevisionNumber = base.SetstringAsString(ColumnNames.RevisionNumber, value);
			}
		}

		public virtual string s_RevisionDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RevisionDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RevisionDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RevisionDate);
				else
					this.RevisionDate = base.SetDateTimeAsString(ColumnNames.RevisionDate, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ManualID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManualID, Parameters.ManualID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Title
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Path
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Path, Parameters.Path);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ManualCategoryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ManualCategoryID, Parameters.ManualCategoryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssueNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssueNumber, Parameters.IssueNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IssueDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IssueDate, Parameters.IssueDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RevisionNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RevisionNumber, Parameters.RevisionNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RevisionDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RevisionDate, Parameters.RevisionDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ManualID
		    {
				get
		        {
					if(_ManualID_W == null)
	        	    {
						_ManualID_W = TearOff.ManualID;
					}
					return _ManualID_W;
				}
			}

			public WhereParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public WhereParameter Path
		    {
				get
		        {
					if(_Path_W == null)
	        	    {
						_Path_W = TearOff.Path;
					}
					return _Path_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter ManualCategoryID
		    {
				get
		        {
					if(_ManualCategoryID_W == null)
	        	    {
						_ManualCategoryID_W = TearOff.ManualCategoryID;
					}
					return _ManualCategoryID_W;
				}
			}

			public WhereParameter IssueNumber
		    {
				get
		        {
					if(_IssueNumber_W == null)
	        	    {
						_IssueNumber_W = TearOff.IssueNumber;
					}
					return _IssueNumber_W;
				}
			}

			public WhereParameter IssueDate
		    {
				get
		        {
					if(_IssueDate_W == null)
	        	    {
						_IssueDate_W = TearOff.IssueDate;
					}
					return _IssueDate_W;
				}
			}

			public WhereParameter RevisionNumber
		    {
				get
		        {
					if(_RevisionNumber_W == null)
	        	    {
						_RevisionNumber_W = TearOff.RevisionNumber;
					}
					return _RevisionNumber_W;
				}
			}

			public WhereParameter RevisionDate
		    {
				get
		        {
					if(_RevisionDate_W == null)
	        	    {
						_RevisionDate_W = TearOff.RevisionDate;
					}
					return _RevisionDate_W;
				}
			}

			private WhereParameter _ManualID_W = null;
			private WhereParameter _Title_W = null;
			private WhereParameter _Path_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _ManualCategoryID_W = null;
			private WhereParameter _IssueNumber_W = null;
			private WhereParameter _IssueDate_W = null;
			private WhereParameter _RevisionNumber_W = null;
			private WhereParameter _RevisionDate_W = null;

			public void WhereClauseReset()
			{
				_ManualID_W = null;
				_Title_W = null;
				_Path_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_ManualCategoryID_W = null;
				_IssueNumber_W = null;
				_IssueDate_W = null;
				_RevisionNumber_W = null;
				_RevisionDate_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ManualID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManualID, Parameters.ManualID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Title
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Title, Parameters.Title);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Path
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Path, Parameters.Path);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ManualCategoryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ManualCategoryID, Parameters.ManualCategoryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssueNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssueNumber, Parameters.IssueNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IssueDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssueDate, Parameters.IssueDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RevisionNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RevisionNumber, Parameters.RevisionNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RevisionDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RevisionDate, Parameters.RevisionDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ManualID
		    {
				get
		        {
					if(_ManualID_W == null)
	        	    {
						_ManualID_W = TearOff.ManualID;
					}
					return _ManualID_W;
				}
			}

			public AggregateParameter Title
		    {
				get
		        {
					if(_Title_W == null)
	        	    {
						_Title_W = TearOff.Title;
					}
					return _Title_W;
				}
			}

			public AggregateParameter Path
		    {
				get
		        {
					if(_Path_W == null)
	        	    {
						_Path_W = TearOff.Path;
					}
					return _Path_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter ManualCategoryID
		    {
				get
		        {
					if(_ManualCategoryID_W == null)
	        	    {
						_ManualCategoryID_W = TearOff.ManualCategoryID;
					}
					return _ManualCategoryID_W;
				}
			}

			public AggregateParameter IssueNumber
		    {
				get
		        {
					if(_IssueNumber_W == null)
	        	    {
						_IssueNumber_W = TearOff.IssueNumber;
					}
					return _IssueNumber_W;
				}
			}

			public AggregateParameter IssueDate
		    {
				get
		        {
					if(_IssueDate_W == null)
	        	    {
						_IssueDate_W = TearOff.IssueDate;
					}
					return _IssueDate_W;
				}
			}

			public AggregateParameter RevisionNumber
		    {
				get
		        {
					if(_RevisionNumber_W == null)
	        	    {
						_RevisionNumber_W = TearOff.RevisionNumber;
					}
					return _RevisionNumber_W;
				}
			}

			public AggregateParameter RevisionDate
		    {
				get
		        {
					if(_RevisionDate_W == null)
	        	    {
						_RevisionDate_W = TearOff.RevisionDate;
					}
					return _RevisionDate_W;
				}
			}

			private AggregateParameter _ManualID_W = null;
			private AggregateParameter _Title_W = null;
			private AggregateParameter _Path_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _ManualCategoryID_W = null;
			private AggregateParameter _IssueNumber_W = null;
			private AggregateParameter _IssueDate_W = null;
			private AggregateParameter _RevisionNumber_W = null;
			private AggregateParameter _RevisionDate_W = null;

			public void AggregateClauseReset()
			{
				_ManualID_W = null;
				_Title_W = null;
				_Path_W = null;
				_CreatedBy_W = null;
				_CreatedDate_W = null;
				_ManualCategoryID_W = null;
				_IssueNumber_W = null;
				_IssueDate_W = null;
				_RevisionNumber_W = null;
				_RevisionDate_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ManualInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ManualID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ManualUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ManualDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ManualID);
			p.SourceColumn = ColumnNames.ManualID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ManualID);
			p.SourceColumn = ColumnNames.ManualID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Title);
			p.SourceColumn = ColumnNames.Title;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Path);
			p.SourceColumn = ColumnNames.Path;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ManualCategoryID);
			p.SourceColumn = ColumnNames.ManualCategoryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssueNumber);
			p.SourceColumn = ColumnNames.IssueNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IssueDate);
			p.SourceColumn = ColumnNames.IssueDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RevisionNumber);
			p.SourceColumn = ColumnNames.RevisionNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RevisionDate);
			p.SourceColumn = ColumnNames.RevisionDate;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
