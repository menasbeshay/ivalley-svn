
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Pilot : SqlClientEntity
	{
		public _Pilot()
		{
			this.QuerySource = "Pilot";
			this.MappingName = "Pilot";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int PilotID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.PilotID, PilotID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_PilotLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter PilotID
			{
				get
				{
					return new SqlParameter("@PilotID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SecondName
			{
				get
				{
					return new SqlParameter("@SecondName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter SureName
			{
				get
				{
					return new SqlParameter("@SureName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter TBF_Day_Hours
			{
				get
				{
					return new SqlParameter("@TBF_Day_Hours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TBF_Day_Mins
			{
				get
				{
					return new SqlParameter("@TBF_Day_Mins", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TBF_Night_Hours
			{
				get
				{
					return new SqlParameter("@TBF_Night_Hours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TBF_Night_Mins
			{
				get
				{
					return new SqlParameter("@TBF_Night_Mins", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TBF_Total_Hours
			{
				get
				{
					return new SqlParameter("@TBF_Total_Hours", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TBF_Total_Mins
			{
				get
				{
					return new SqlParameter("@TBF_Total_Mins", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LicenseNo
			{
				get
				{
					return new SqlParameter("@LicenseNo", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter LicenseStatus
			{
				get
				{
					return new SqlParameter("@LicenseStatus", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter LicenseRenewDate
			{
				get
				{
					return new SqlParameter("@LicenseRenewDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter StaffNo
			{
				get
				{
					return new SqlParameter("@StaffNo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ShortName
			{
				get
				{
					return new SqlParameter("@ShortName", SqlDbType.NVarChar, 5);
				}
			}
			
			public static SqlParameter IsPilot
			{
				get
				{
					return new SqlParameter("@IsPilot", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastModifiedDate
			{
				get
				{
					return new SqlParameter("@LastModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AirportClass
			{
				get
				{
					return new SqlParameter("@AirportClass", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Mobile
			{
				get
				{
					return new SqlParameter("@Mobile", SqlDbType.NVarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string PilotID = "PilotID";
            public const string FirstName = "FirstName";
            public const string SecondName = "SecondName";
            public const string SureName = "SureName";
            public const string TBF_Day_Hours = "TBF_Day_Hours";
            public const string TBF_Day_Mins = "TBF_Day_Mins";
            public const string TBF_Night_Hours = "TBF_Night_Hours";
            public const string TBF_Night_Mins = "TBF_Night_Mins";
            public const string TBF_Total_Hours = "TBF_Total_Hours";
            public const string TBF_Total_Mins = "TBF_Total_Mins";
            public const string LicenseNo = "LicenseNo";
            public const string LicenseStatus = "LicenseStatus";
            public const string LicenseRenewDate = "LicenseRenewDate";
            public const string StaffNo = "StaffNo";
            public const string ShortName = "ShortName";
            public const string IsPilot = "IsPilot";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string UserName = "UserName";
            public const string AirportClass = "AirportClass";
            public const string Email = "Email";
            public const string Mobile = "Mobile";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotID] = _Pilot.PropertyNames.PilotID;
					ht[FirstName] = _Pilot.PropertyNames.FirstName;
					ht[SecondName] = _Pilot.PropertyNames.SecondName;
					ht[SureName] = _Pilot.PropertyNames.SureName;
					ht[TBF_Day_Hours] = _Pilot.PropertyNames.TBF_Day_Hours;
					ht[TBF_Day_Mins] = _Pilot.PropertyNames.TBF_Day_Mins;
					ht[TBF_Night_Hours] = _Pilot.PropertyNames.TBF_Night_Hours;
					ht[TBF_Night_Mins] = _Pilot.PropertyNames.TBF_Night_Mins;
					ht[TBF_Total_Hours] = _Pilot.PropertyNames.TBF_Total_Hours;
					ht[TBF_Total_Mins] = _Pilot.PropertyNames.TBF_Total_Mins;
					ht[LicenseNo] = _Pilot.PropertyNames.LicenseNo;
					ht[LicenseStatus] = _Pilot.PropertyNames.LicenseStatus;
					ht[LicenseRenewDate] = _Pilot.PropertyNames.LicenseRenewDate;
					ht[StaffNo] = _Pilot.PropertyNames.StaffNo;
					ht[ShortName] = _Pilot.PropertyNames.ShortName;
					ht[IsPilot] = _Pilot.PropertyNames.IsPilot;
					ht[CreatedBy] = _Pilot.PropertyNames.CreatedBy;
					ht[ModifiedBy] = _Pilot.PropertyNames.ModifiedBy;
					ht[CreatedDate] = _Pilot.PropertyNames.CreatedDate;
					ht[LastModifiedDate] = _Pilot.PropertyNames.LastModifiedDate;
					ht[UserName] = _Pilot.PropertyNames.UserName;
					ht[AirportClass] = _Pilot.PropertyNames.AirportClass;
					ht[Email] = _Pilot.PropertyNames.Email;
					ht[Mobile] = _Pilot.PropertyNames.Mobile;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string PilotID = "PilotID";
            public const string FirstName = "FirstName";
            public const string SecondName = "SecondName";
            public const string SureName = "SureName";
            public const string TBF_Day_Hours = "TBF_Day_Hours";
            public const string TBF_Day_Mins = "TBF_Day_Mins";
            public const string TBF_Night_Hours = "TBF_Night_Hours";
            public const string TBF_Night_Mins = "TBF_Night_Mins";
            public const string TBF_Total_Hours = "TBF_Total_Hours";
            public const string TBF_Total_Mins = "TBF_Total_Mins";
            public const string LicenseNo = "LicenseNo";
            public const string LicenseStatus = "LicenseStatus";
            public const string LicenseRenewDate = "LicenseRenewDate";
            public const string StaffNo = "StaffNo";
            public const string ShortName = "ShortName";
            public const string IsPilot = "IsPilot";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string UserName = "UserName";
            public const string AirportClass = "AirportClass";
            public const string Email = "Email";
            public const string Mobile = "Mobile";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[PilotID] = _Pilot.ColumnNames.PilotID;
					ht[FirstName] = _Pilot.ColumnNames.FirstName;
					ht[SecondName] = _Pilot.ColumnNames.SecondName;
					ht[SureName] = _Pilot.ColumnNames.SureName;
					ht[TBF_Day_Hours] = _Pilot.ColumnNames.TBF_Day_Hours;
					ht[TBF_Day_Mins] = _Pilot.ColumnNames.TBF_Day_Mins;
					ht[TBF_Night_Hours] = _Pilot.ColumnNames.TBF_Night_Hours;
					ht[TBF_Night_Mins] = _Pilot.ColumnNames.TBF_Night_Mins;
					ht[TBF_Total_Hours] = _Pilot.ColumnNames.TBF_Total_Hours;
					ht[TBF_Total_Mins] = _Pilot.ColumnNames.TBF_Total_Mins;
					ht[LicenseNo] = _Pilot.ColumnNames.LicenseNo;
					ht[LicenseStatus] = _Pilot.ColumnNames.LicenseStatus;
					ht[LicenseRenewDate] = _Pilot.ColumnNames.LicenseRenewDate;
					ht[StaffNo] = _Pilot.ColumnNames.StaffNo;
					ht[ShortName] = _Pilot.ColumnNames.ShortName;
					ht[IsPilot] = _Pilot.ColumnNames.IsPilot;
					ht[CreatedBy] = _Pilot.ColumnNames.CreatedBy;
					ht[ModifiedBy] = _Pilot.ColumnNames.ModifiedBy;
					ht[CreatedDate] = _Pilot.ColumnNames.CreatedDate;
					ht[LastModifiedDate] = _Pilot.ColumnNames.LastModifiedDate;
					ht[UserName] = _Pilot.ColumnNames.UserName;
					ht[AirportClass] = _Pilot.ColumnNames.AirportClass;
					ht[Email] = _Pilot.ColumnNames.Email;
					ht[Mobile] = _Pilot.ColumnNames.Mobile;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string PilotID = "s_PilotID";
            public const string FirstName = "s_FirstName";
            public const string SecondName = "s_SecondName";
            public const string SureName = "s_SureName";
            public const string TBF_Day_Hours = "s_TBF_Day_Hours";
            public const string TBF_Day_Mins = "s_TBF_Day_Mins";
            public const string TBF_Night_Hours = "s_TBF_Night_Hours";
            public const string TBF_Night_Mins = "s_TBF_Night_Mins";
            public const string TBF_Total_Hours = "s_TBF_Total_Hours";
            public const string TBF_Total_Mins = "s_TBF_Total_Mins";
            public const string LicenseNo = "s_LicenseNo";
            public const string LicenseStatus = "s_LicenseStatus";
            public const string LicenseRenewDate = "s_LicenseRenewDate";
            public const string StaffNo = "s_StaffNo";
            public const string ShortName = "s_ShortName";
            public const string IsPilot = "s_IsPilot";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string LastModifiedDate = "s_LastModifiedDate";
            public const string UserName = "s_UserName";
            public const string AirportClass = "s_AirportClass";
            public const string Email = "s_Email";
            public const string Mobile = "s_Mobile";

		}
		#endregion		
		
		#region Properties
	
		public virtual int PilotID
	    {
			get
	        {
				return base.Getint(ColumnNames.PilotID);
			}
			set
	        {
				base.Setint(ColumnNames.PilotID, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string SecondName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecondName);
			}
			set
	        {
				base.Setstring(ColumnNames.SecondName, value);
			}
		}

		public virtual string SureName
	    {
			get
	        {
				return base.Getstring(ColumnNames.SureName);
			}
			set
	        {
				base.Setstring(ColumnNames.SureName, value);
			}
		}

		public virtual int TBF_Day_Hours
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Day_Hours);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Day_Hours, value);
			}
		}

		public virtual int TBF_Day_Mins
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Day_Mins);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Day_Mins, value);
			}
		}

		public virtual int TBF_Night_Hours
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Night_Hours);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Night_Hours, value);
			}
		}

		public virtual int TBF_Night_Mins
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Night_Mins);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Night_Mins, value);
			}
		}

		public virtual int TBF_Total_Hours
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Total_Hours);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Total_Hours, value);
			}
		}

		public virtual int TBF_Total_Mins
	    {
			get
	        {
				return base.Getint(ColumnNames.TBF_Total_Mins);
			}
			set
	        {
				base.Setint(ColumnNames.TBF_Total_Mins, value);
			}
		}

		public virtual string LicenseNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.LicenseNo);
			}
			set
	        {
				base.Setstring(ColumnNames.LicenseNo, value);
			}
		}

		public virtual string LicenseStatus
	    {
			get
	        {
				return base.Getstring(ColumnNames.LicenseStatus);
			}
			set
	        {
				base.Setstring(ColumnNames.LicenseStatus, value);
			}
		}

		public virtual DateTime LicenseRenewDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LicenseRenewDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LicenseRenewDate, value);
			}
		}

		public virtual int StaffNo
	    {
			get
	        {
				return base.Getint(ColumnNames.StaffNo);
			}
			set
	        {
				base.Setint(ColumnNames.StaffNo, value);
			}
		}

		public virtual string ShortName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ShortName);
			}
			set
	        {
				base.Setstring(ColumnNames.ShortName, value);
			}
		}

		public virtual bool IsPilot
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsPilot);
			}
			set
	        {
				base.Setbool(ColumnNames.IsPilot, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual Guid ModifiedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime LastModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual int AirportClass
	    {
			get
	        {
				return base.Getint(ColumnNames.AirportClass);
			}
			set
	        {
				base.Setint(ColumnNames.AirportClass, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string Mobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Mobile, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_PilotID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PilotID) ? string.Empty : base.GetintAsString(ColumnNames.PilotID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PilotID);
				else
					this.PilotID = base.SetintAsString(ColumnNames.PilotID, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_SecondName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecondName) ? string.Empty : base.GetstringAsString(ColumnNames.SecondName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecondName);
				else
					this.SecondName = base.SetstringAsString(ColumnNames.SecondName, value);
			}
		}

		public virtual string s_SureName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SureName) ? string.Empty : base.GetstringAsString(ColumnNames.SureName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SureName);
				else
					this.SureName = base.SetstringAsString(ColumnNames.SureName, value);
			}
		}

		public virtual string s_TBF_Day_Hours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Day_Hours) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Day_Hours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Day_Hours);
				else
					this.TBF_Day_Hours = base.SetintAsString(ColumnNames.TBF_Day_Hours, value);
			}
		}

		public virtual string s_TBF_Day_Mins
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Day_Mins) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Day_Mins);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Day_Mins);
				else
					this.TBF_Day_Mins = base.SetintAsString(ColumnNames.TBF_Day_Mins, value);
			}
		}

		public virtual string s_TBF_Night_Hours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Night_Hours) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Night_Hours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Night_Hours);
				else
					this.TBF_Night_Hours = base.SetintAsString(ColumnNames.TBF_Night_Hours, value);
			}
		}

		public virtual string s_TBF_Night_Mins
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Night_Mins) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Night_Mins);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Night_Mins);
				else
					this.TBF_Night_Mins = base.SetintAsString(ColumnNames.TBF_Night_Mins, value);
			}
		}

		public virtual string s_TBF_Total_Hours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Total_Hours) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Total_Hours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Total_Hours);
				else
					this.TBF_Total_Hours = base.SetintAsString(ColumnNames.TBF_Total_Hours, value);
			}
		}

		public virtual string s_TBF_Total_Mins
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TBF_Total_Mins) ? string.Empty : base.GetintAsString(ColumnNames.TBF_Total_Mins);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TBF_Total_Mins);
				else
					this.TBF_Total_Mins = base.SetintAsString(ColumnNames.TBF_Total_Mins, value);
			}
		}

		public virtual string s_LicenseNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicenseNo) ? string.Empty : base.GetstringAsString(ColumnNames.LicenseNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicenseNo);
				else
					this.LicenseNo = base.SetstringAsString(ColumnNames.LicenseNo, value);
			}
		}

		public virtual string s_LicenseStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicenseStatus) ? string.Empty : base.GetstringAsString(ColumnNames.LicenseStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicenseStatus);
				else
					this.LicenseStatus = base.SetstringAsString(ColumnNames.LicenseStatus, value);
			}
		}

		public virtual string s_LicenseRenewDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LicenseRenewDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LicenseRenewDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LicenseRenewDate);
				else
					this.LicenseRenewDate = base.SetDateTimeAsString(ColumnNames.LicenseRenewDate, value);
			}
		}

		public virtual string s_StaffNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StaffNo) ? string.Empty : base.GetintAsString(ColumnNames.StaffNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StaffNo);
				else
					this.StaffNo = base.SetintAsString(ColumnNames.StaffNo, value);
			}
		}

		public virtual string s_ShortName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ShortName) ? string.Empty : base.GetstringAsString(ColumnNames.ShortName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShortName);
				else
					this.ShortName = base.SetstringAsString(ColumnNames.ShortName, value);
			}
		}

		public virtual string s_IsPilot
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsPilot) ? string.Empty : base.GetboolAsString(ColumnNames.IsPilot);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsPilot);
				else
					this.IsPilot = base.SetboolAsString(ColumnNames.IsPilot, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetGuidAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_LastModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastModifiedDate);
				else
					this.LastModifiedDate = base.SetDateTimeAsString(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_AirportClass
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirportClass) ? string.Empty : base.GetintAsString(ColumnNames.AirportClass);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirportClass);
				else
					this.AirportClass = base.SetintAsString(ColumnNames.AirportClass, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_Mobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mobile) ? string.Empty : base.GetstringAsString(ColumnNames.Mobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mobile);
				else
					this.Mobile = base.SetstringAsString(ColumnNames.Mobile, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter PilotID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecondName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecondName, Parameters.SecondName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SureName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SureName, Parameters.SureName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Day_Hours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Day_Hours, Parameters.TBF_Day_Hours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Day_Mins
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Day_Mins, Parameters.TBF_Day_Mins);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Night_Hours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Night_Hours, Parameters.TBF_Night_Hours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Night_Mins
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Night_Mins, Parameters.TBF_Night_Mins);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Total_Hours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Total_Hours, Parameters.TBF_Total_Hours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TBF_Total_Mins
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TBF_Total_Mins, Parameters.TBF_Total_Mins);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicenseNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicenseStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicenseStatus, Parameters.LicenseStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LicenseRenewDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LicenseRenewDate, Parameters.LicenseRenewDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StaffNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StaffNo, Parameters.StaffNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ShortName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ShortName, Parameters.ShortName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsPilot
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsPilot, Parameters.IsPilot);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirportClass
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirportClass, Parameters.AirportClass);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter SecondName
		    {
				get
		        {
					if(_SecondName_W == null)
	        	    {
						_SecondName_W = TearOff.SecondName;
					}
					return _SecondName_W;
				}
			}

			public WhereParameter SureName
		    {
				get
		        {
					if(_SureName_W == null)
	        	    {
						_SureName_W = TearOff.SureName;
					}
					return _SureName_W;
				}
			}

			public WhereParameter TBF_Day_Hours
		    {
				get
		        {
					if(_TBF_Day_Hours_W == null)
	        	    {
						_TBF_Day_Hours_W = TearOff.TBF_Day_Hours;
					}
					return _TBF_Day_Hours_W;
				}
			}

			public WhereParameter TBF_Day_Mins
		    {
				get
		        {
					if(_TBF_Day_Mins_W == null)
	        	    {
						_TBF_Day_Mins_W = TearOff.TBF_Day_Mins;
					}
					return _TBF_Day_Mins_W;
				}
			}

			public WhereParameter TBF_Night_Hours
		    {
				get
		        {
					if(_TBF_Night_Hours_W == null)
	        	    {
						_TBF_Night_Hours_W = TearOff.TBF_Night_Hours;
					}
					return _TBF_Night_Hours_W;
				}
			}

			public WhereParameter TBF_Night_Mins
		    {
				get
		        {
					if(_TBF_Night_Mins_W == null)
	        	    {
						_TBF_Night_Mins_W = TearOff.TBF_Night_Mins;
					}
					return _TBF_Night_Mins_W;
				}
			}

			public WhereParameter TBF_Total_Hours
		    {
				get
		        {
					if(_TBF_Total_Hours_W == null)
	        	    {
						_TBF_Total_Hours_W = TearOff.TBF_Total_Hours;
					}
					return _TBF_Total_Hours_W;
				}
			}

			public WhereParameter TBF_Total_Mins
		    {
				get
		        {
					if(_TBF_Total_Mins_W == null)
	        	    {
						_TBF_Total_Mins_W = TearOff.TBF_Total_Mins;
					}
					return _TBF_Total_Mins_W;
				}
			}

			public WhereParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public WhereParameter LicenseStatus
		    {
				get
		        {
					if(_LicenseStatus_W == null)
	        	    {
						_LicenseStatus_W = TearOff.LicenseStatus;
					}
					return _LicenseStatus_W;
				}
			}

			public WhereParameter LicenseRenewDate
		    {
				get
		        {
					if(_LicenseRenewDate_W == null)
	        	    {
						_LicenseRenewDate_W = TearOff.LicenseRenewDate;
					}
					return _LicenseRenewDate_W;
				}
			}

			public WhereParameter StaffNo
		    {
				get
		        {
					if(_StaffNo_W == null)
	        	    {
						_StaffNo_W = TearOff.StaffNo;
					}
					return _StaffNo_W;
				}
			}

			public WhereParameter ShortName
		    {
				get
		        {
					if(_ShortName_W == null)
	        	    {
						_ShortName_W = TearOff.ShortName;
					}
					return _ShortName_W;
				}
			}

			public WhereParameter IsPilot
		    {
				get
		        {
					if(_IsPilot_W == null)
	        	    {
						_IsPilot_W = TearOff.IsPilot;
					}
					return _IsPilot_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter AirportClass
		    {
				get
		        {
					if(_AirportClass_W == null)
	        	    {
						_AirportClass_W = TearOff.AirportClass;
					}
					return _AirportClass_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			private WhereParameter _PilotID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _SecondName_W = null;
			private WhereParameter _SureName_W = null;
			private WhereParameter _TBF_Day_Hours_W = null;
			private WhereParameter _TBF_Day_Mins_W = null;
			private WhereParameter _TBF_Night_Hours_W = null;
			private WhereParameter _TBF_Night_Mins_W = null;
			private WhereParameter _TBF_Total_Hours_W = null;
			private WhereParameter _TBF_Total_Mins_W = null;
			private WhereParameter _LicenseNo_W = null;
			private WhereParameter _LicenseStatus_W = null;
			private WhereParameter _LicenseRenewDate_W = null;
			private WhereParameter _StaffNo_W = null;
			private WhereParameter _ShortName_W = null;
			private WhereParameter _IsPilot_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _LastModifiedDate_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _AirportClass_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _Mobile_W = null;

			public void WhereClauseReset()
			{
				_PilotID_W = null;
				_FirstName_W = null;
				_SecondName_W = null;
				_SureName_W = null;
				_TBF_Day_Hours_W = null;
				_TBF_Day_Mins_W = null;
				_TBF_Night_Hours_W = null;
				_TBF_Night_Mins_W = null;
				_TBF_Total_Hours_W = null;
				_TBF_Total_Mins_W = null;
				_LicenseNo_W = null;
				_LicenseStatus_W = null;
				_LicenseRenewDate_W = null;
				_StaffNo_W = null;
				_ShortName_W = null;
				_IsPilot_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_UserName_W = null;
				_AirportClass_W = null;
				_Email_W = null;
				_Mobile_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter PilotID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PilotID, Parameters.PilotID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecondName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecondName, Parameters.SecondName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SureName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SureName, Parameters.SureName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Day_Hours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Day_Hours, Parameters.TBF_Day_Hours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Day_Mins
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Day_Mins, Parameters.TBF_Day_Mins);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Night_Hours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Night_Hours, Parameters.TBF_Night_Hours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Night_Mins
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Night_Mins, Parameters.TBF_Night_Mins);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Total_Hours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Total_Hours, Parameters.TBF_Total_Hours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TBF_Total_Mins
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TBF_Total_Mins, Parameters.TBF_Total_Mins);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicenseNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseNo, Parameters.LicenseNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicenseStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseStatus, Parameters.LicenseStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LicenseRenewDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LicenseRenewDate, Parameters.LicenseRenewDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StaffNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StaffNo, Parameters.StaffNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ShortName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ShortName, Parameters.ShortName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsPilot
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPilot, Parameters.IsPilot);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirportClass
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirportClass, Parameters.AirportClass);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter PilotID
		    {
				get
		        {
					if(_PilotID_W == null)
	        	    {
						_PilotID_W = TearOff.PilotID;
					}
					return _PilotID_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter SecondName
		    {
				get
		        {
					if(_SecondName_W == null)
	        	    {
						_SecondName_W = TearOff.SecondName;
					}
					return _SecondName_W;
				}
			}

			public AggregateParameter SureName
		    {
				get
		        {
					if(_SureName_W == null)
	        	    {
						_SureName_W = TearOff.SureName;
					}
					return _SureName_W;
				}
			}

			public AggregateParameter TBF_Day_Hours
		    {
				get
		        {
					if(_TBF_Day_Hours_W == null)
	        	    {
						_TBF_Day_Hours_W = TearOff.TBF_Day_Hours;
					}
					return _TBF_Day_Hours_W;
				}
			}

			public AggregateParameter TBF_Day_Mins
		    {
				get
		        {
					if(_TBF_Day_Mins_W == null)
	        	    {
						_TBF_Day_Mins_W = TearOff.TBF_Day_Mins;
					}
					return _TBF_Day_Mins_W;
				}
			}

			public AggregateParameter TBF_Night_Hours
		    {
				get
		        {
					if(_TBF_Night_Hours_W == null)
	        	    {
						_TBF_Night_Hours_W = TearOff.TBF_Night_Hours;
					}
					return _TBF_Night_Hours_W;
				}
			}

			public AggregateParameter TBF_Night_Mins
		    {
				get
		        {
					if(_TBF_Night_Mins_W == null)
	        	    {
						_TBF_Night_Mins_W = TearOff.TBF_Night_Mins;
					}
					return _TBF_Night_Mins_W;
				}
			}

			public AggregateParameter TBF_Total_Hours
		    {
				get
		        {
					if(_TBF_Total_Hours_W == null)
	        	    {
						_TBF_Total_Hours_W = TearOff.TBF_Total_Hours;
					}
					return _TBF_Total_Hours_W;
				}
			}

			public AggregateParameter TBF_Total_Mins
		    {
				get
		        {
					if(_TBF_Total_Mins_W == null)
	        	    {
						_TBF_Total_Mins_W = TearOff.TBF_Total_Mins;
					}
					return _TBF_Total_Mins_W;
				}
			}

			public AggregateParameter LicenseNo
		    {
				get
		        {
					if(_LicenseNo_W == null)
	        	    {
						_LicenseNo_W = TearOff.LicenseNo;
					}
					return _LicenseNo_W;
				}
			}

			public AggregateParameter LicenseStatus
		    {
				get
		        {
					if(_LicenseStatus_W == null)
	        	    {
						_LicenseStatus_W = TearOff.LicenseStatus;
					}
					return _LicenseStatus_W;
				}
			}

			public AggregateParameter LicenseRenewDate
		    {
				get
		        {
					if(_LicenseRenewDate_W == null)
	        	    {
						_LicenseRenewDate_W = TearOff.LicenseRenewDate;
					}
					return _LicenseRenewDate_W;
				}
			}

			public AggregateParameter StaffNo
		    {
				get
		        {
					if(_StaffNo_W == null)
	        	    {
						_StaffNo_W = TearOff.StaffNo;
					}
					return _StaffNo_W;
				}
			}

			public AggregateParameter ShortName
		    {
				get
		        {
					if(_ShortName_W == null)
	        	    {
						_ShortName_W = TearOff.ShortName;
					}
					return _ShortName_W;
				}
			}

			public AggregateParameter IsPilot
		    {
				get
		        {
					if(_IsPilot_W == null)
	        	    {
						_IsPilot_W = TearOff.IsPilot;
					}
					return _IsPilot_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter AirportClass
		    {
				get
		        {
					if(_AirportClass_W == null)
	        	    {
						_AirportClass_W = TearOff.AirportClass;
					}
					return _AirportClass_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			private AggregateParameter _PilotID_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _SecondName_W = null;
			private AggregateParameter _SureName_W = null;
			private AggregateParameter _TBF_Day_Hours_W = null;
			private AggregateParameter _TBF_Day_Mins_W = null;
			private AggregateParameter _TBF_Night_Hours_W = null;
			private AggregateParameter _TBF_Night_Mins_W = null;
			private AggregateParameter _TBF_Total_Hours_W = null;
			private AggregateParameter _TBF_Total_Mins_W = null;
			private AggregateParameter _LicenseNo_W = null;
			private AggregateParameter _LicenseStatus_W = null;
			private AggregateParameter _LicenseRenewDate_W = null;
			private AggregateParameter _StaffNo_W = null;
			private AggregateParameter _ShortName_W = null;
			private AggregateParameter _IsPilot_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _LastModifiedDate_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _AirportClass_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _Mobile_W = null;

			public void AggregateClauseReset()
			{
				_PilotID_W = null;
				_FirstName_W = null;
				_SecondName_W = null;
				_SureName_W = null;
				_TBF_Day_Hours_W = null;
				_TBF_Day_Mins_W = null;
				_TBF_Night_Hours_W = null;
				_TBF_Night_Mins_W = null;
				_TBF_Total_Hours_W = null;
				_TBF_Total_Mins_W = null;
				_LicenseNo_W = null;
				_LicenseStatus_W = null;
				_LicenseRenewDate_W = null;
				_StaffNo_W = null;
				_ShortName_W = null;
				_IsPilot_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_UserName_W = null;
				_AirportClass_W = null;
				_Email_W = null;
				_Mobile_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.PilotID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_PilotDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.PilotID);
			p.SourceColumn = ColumnNames.PilotID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecondName);
			p.SourceColumn = ColumnNames.SecondName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SureName);
			p.SourceColumn = ColumnNames.SureName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Day_Hours);
			p.SourceColumn = ColumnNames.TBF_Day_Hours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Day_Mins);
			p.SourceColumn = ColumnNames.TBF_Day_Mins;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Night_Hours);
			p.SourceColumn = ColumnNames.TBF_Night_Hours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Night_Mins);
			p.SourceColumn = ColumnNames.TBF_Night_Mins;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Total_Hours);
			p.SourceColumn = ColumnNames.TBF_Total_Hours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TBF_Total_Mins);
			p.SourceColumn = ColumnNames.TBF_Total_Mins;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LicenseNo);
			p.SourceColumn = ColumnNames.LicenseNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LicenseStatus);
			p.SourceColumn = ColumnNames.LicenseStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LicenseRenewDate);
			p.SourceColumn = ColumnNames.LicenseRenewDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StaffNo);
			p.SourceColumn = ColumnNames.StaffNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ShortName);
			p.SourceColumn = ColumnNames.ShortName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsPilot);
			p.SourceColumn = ColumnNames.IsPilot;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastModifiedDate);
			p.SourceColumn = ColumnNames.LastModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirportClass);
			p.SourceColumn = ColumnNames.AirportClass;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mobile);
			p.SourceColumn = ColumnNames.Mobile;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
