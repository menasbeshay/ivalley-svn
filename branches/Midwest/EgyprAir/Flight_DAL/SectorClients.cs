
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _SectorClients : SqlClientEntity
	{
		public _SectorClients()
		{
			this.QuerySource = "SectorClients";
			this.MappingName = "SectorClients";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SectorClientsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int ClientID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ClientID, ClientID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SectorClientsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ClientID
			{
				get
				{
					return new SqlParameter("@ClientID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Name
			{
				get
				{
					return new SqlParameter("@Name", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Tele
			{
				get
				{
					return new SqlParameter("@Tele", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Fax
			{
				get
				{
					return new SqlParameter("@Fax", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Mail
			{
				get
				{
					return new SqlParameter("@Mail", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter Website
			{
				get
				{
					return new SqlParameter("@Website", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter ContactName
			{
				get
				{
					return new SqlParameter("@ContactName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter ContactTele
			{
				get
				{
					return new SqlParameter("@ContactTele", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter ContactMail
			{
				get
				{
					return new SqlParameter("@ContactMail", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter ContactMobile
			{
				get
				{
					return new SqlParameter("@ContactMobile", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter LogoPath
			{
				get
				{
					return new SqlParameter("@LogoPath", SqlDbType.NVarChar, 200);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ClientID = "ClientID";
            public const string Name = "Name";
            public const string Tele = "Tele";
            public const string Fax = "Fax";
            public const string Mail = "Mail";
            public const string Address = "Address";
            public const string Website = "Website";
            public const string ContactName = "ContactName";
            public const string ContactTele = "ContactTele";
            public const string ContactMail = "ContactMail";
            public const string ContactMobile = "ContactMobile";
            public const string LogoPath = "LogoPath";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ClientID] = _SectorClients.PropertyNames.ClientID;
					ht[Name] = _SectorClients.PropertyNames.Name;
					ht[Tele] = _SectorClients.PropertyNames.Tele;
					ht[Fax] = _SectorClients.PropertyNames.Fax;
					ht[Mail] = _SectorClients.PropertyNames.Mail;
					ht[Address] = _SectorClients.PropertyNames.Address;
					ht[Website] = _SectorClients.PropertyNames.Website;
					ht[ContactName] = _SectorClients.PropertyNames.ContactName;
					ht[ContactTele] = _SectorClients.PropertyNames.ContactTele;
					ht[ContactMail] = _SectorClients.PropertyNames.ContactMail;
					ht[ContactMobile] = _SectorClients.PropertyNames.ContactMobile;
					ht[LogoPath] = _SectorClients.PropertyNames.LogoPath;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ClientID = "ClientID";
            public const string Name = "Name";
            public const string Tele = "Tele";
            public const string Fax = "Fax";
            public const string Mail = "Mail";
            public const string Address = "Address";
            public const string Website = "Website";
            public const string ContactName = "ContactName";
            public const string ContactTele = "ContactTele";
            public const string ContactMail = "ContactMail";
            public const string ContactMobile = "ContactMobile";
            public const string LogoPath = "LogoPath";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ClientID] = _SectorClients.ColumnNames.ClientID;
					ht[Name] = _SectorClients.ColumnNames.Name;
					ht[Tele] = _SectorClients.ColumnNames.Tele;
					ht[Fax] = _SectorClients.ColumnNames.Fax;
					ht[Mail] = _SectorClients.ColumnNames.Mail;
					ht[Address] = _SectorClients.ColumnNames.Address;
					ht[Website] = _SectorClients.ColumnNames.Website;
					ht[ContactName] = _SectorClients.ColumnNames.ContactName;
					ht[ContactTele] = _SectorClients.ColumnNames.ContactTele;
					ht[ContactMail] = _SectorClients.ColumnNames.ContactMail;
					ht[ContactMobile] = _SectorClients.ColumnNames.ContactMobile;
					ht[LogoPath] = _SectorClients.ColumnNames.LogoPath;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ClientID = "s_ClientID";
            public const string Name = "s_Name";
            public const string Tele = "s_Tele";
            public const string Fax = "s_Fax";
            public const string Mail = "s_Mail";
            public const string Address = "s_Address";
            public const string Website = "s_Website";
            public const string ContactName = "s_ContactName";
            public const string ContactTele = "s_ContactTele";
            public const string ContactMail = "s_ContactMail";
            public const string ContactMobile = "s_ContactMobile";
            public const string LogoPath = "s_LogoPath";

		}
		#endregion		
		
		#region Properties
	
		public virtual int ClientID
	    {
			get
	        {
				return base.Getint(ColumnNames.ClientID);
			}
			set
	        {
				base.Setint(ColumnNames.ClientID, value);
			}
		}

		public virtual string Name
	    {
			get
	        {
				return base.Getstring(ColumnNames.Name);
			}
			set
	        {
				base.Setstring(ColumnNames.Name, value);
			}
		}

		public virtual string Tele
	    {
			get
	        {
				return base.Getstring(ColumnNames.Tele);
			}
			set
	        {
				base.Setstring(ColumnNames.Tele, value);
			}
		}

		public virtual string Fax
	    {
			get
	        {
				return base.Getstring(ColumnNames.Fax);
			}
			set
	        {
				base.Setstring(ColumnNames.Fax, value);
			}
		}

		public virtual string Mail
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mail);
			}
			set
	        {
				base.Setstring(ColumnNames.Mail, value);
			}
		}

		public virtual string Address
	    {
			get
	        {
				return base.Getstring(ColumnNames.Address);
			}
			set
	        {
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual string Website
	    {
			get
	        {
				return base.Getstring(ColumnNames.Website);
			}
			set
	        {
				base.Setstring(ColumnNames.Website, value);
			}
		}

		public virtual string ContactName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactName);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactName, value);
			}
		}

		public virtual string ContactTele
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactTele);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactTele, value);
			}
		}

		public virtual string ContactMail
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactMail);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactMail, value);
			}
		}

		public virtual string ContactMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactMobile, value);
			}
		}

		public virtual string LogoPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.LogoPath);
			}
			set
	        {
				base.Setstring(ColumnNames.LogoPath, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ClientID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ClientID) ? string.Empty : base.GetintAsString(ColumnNames.ClientID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ClientID);
				else
					this.ClientID = base.SetintAsString(ColumnNames.ClientID, value);
			}
		}

		public virtual string s_Name
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Name) ? string.Empty : base.GetstringAsString(ColumnNames.Name);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Name);
				else
					this.Name = base.SetstringAsString(ColumnNames.Name, value);
			}
		}

		public virtual string s_Tele
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tele) ? string.Empty : base.GetstringAsString(ColumnNames.Tele);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tele);
				else
					this.Tele = base.SetstringAsString(ColumnNames.Tele, value);
			}
		}

		public virtual string s_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fax) ? string.Empty : base.GetstringAsString(ColumnNames.Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fax);
				else
					this.Fax = base.SetstringAsString(ColumnNames.Fax, value);
			}
		}

		public virtual string s_Mail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mail) ? string.Empty : base.GetstringAsString(ColumnNames.Mail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mail);
				else
					this.Mail = base.SetstringAsString(ColumnNames.Mail, value);
			}
		}

		public virtual string s_Address
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_Website
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Website) ? string.Empty : base.GetstringAsString(ColumnNames.Website);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Website);
				else
					this.Website = base.SetstringAsString(ColumnNames.Website, value);
			}
		}

		public virtual string s_ContactName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactName) ? string.Empty : base.GetstringAsString(ColumnNames.ContactName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactName);
				else
					this.ContactName = base.SetstringAsString(ColumnNames.ContactName, value);
			}
		}

		public virtual string s_ContactTele
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactTele) ? string.Empty : base.GetstringAsString(ColumnNames.ContactTele);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactTele);
				else
					this.ContactTele = base.SetstringAsString(ColumnNames.ContactTele, value);
			}
		}

		public virtual string s_ContactMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactMail) ? string.Empty : base.GetstringAsString(ColumnNames.ContactMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactMail);
				else
					this.ContactMail = base.SetstringAsString(ColumnNames.ContactMail, value);
			}
		}

		public virtual string s_ContactMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactMobile) ? string.Empty : base.GetstringAsString(ColumnNames.ContactMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactMobile);
				else
					this.ContactMobile = base.SetstringAsString(ColumnNames.ContactMobile, value);
			}
		}

		public virtual string s_LogoPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LogoPath) ? string.Empty : base.GetstringAsString(ColumnNames.LogoPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LogoPath);
				else
					this.LogoPath = base.SetstringAsString(ColumnNames.LogoPath, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ClientID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Name
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tele
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tele, Parameters.Tele);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mail, Parameters.Mail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Website
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactTele
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactTele, Parameters.ContactTele);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactMail, Parameters.ContactMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactMobile, Parameters.ContactMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LogoPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LogoPath, Parameters.LogoPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public WhereParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public WhereParameter Tele
		    {
				get
		        {
					if(_Tele_W == null)
	        	    {
						_Tele_W = TearOff.Tele;
					}
					return _Tele_W;
				}
			}

			public WhereParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public WhereParameter Mail
		    {
				get
		        {
					if(_Mail_W == null)
	        	    {
						_Mail_W = TearOff.Mail;
					}
					return _Mail_W;
				}
			}

			public WhereParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public WhereParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public WhereParameter ContactTele
		    {
				get
		        {
					if(_ContactTele_W == null)
	        	    {
						_ContactTele_W = TearOff.ContactTele;
					}
					return _ContactTele_W;
				}
			}

			public WhereParameter ContactMail
		    {
				get
		        {
					if(_ContactMail_W == null)
	        	    {
						_ContactMail_W = TearOff.ContactMail;
					}
					return _ContactMail_W;
				}
			}

			public WhereParameter ContactMobile
		    {
				get
		        {
					if(_ContactMobile_W == null)
	        	    {
						_ContactMobile_W = TearOff.ContactMobile;
					}
					return _ContactMobile_W;
				}
			}

			public WhereParameter LogoPath
		    {
				get
		        {
					if(_LogoPath_W == null)
	        	    {
						_LogoPath_W = TearOff.LogoPath;
					}
					return _LogoPath_W;
				}
			}

			private WhereParameter _ClientID_W = null;
			private WhereParameter _Name_W = null;
			private WhereParameter _Tele_W = null;
			private WhereParameter _Fax_W = null;
			private WhereParameter _Mail_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _Website_W = null;
			private WhereParameter _ContactName_W = null;
			private WhereParameter _ContactTele_W = null;
			private WhereParameter _ContactMail_W = null;
			private WhereParameter _ContactMobile_W = null;
			private WhereParameter _LogoPath_W = null;

			public void WhereClauseReset()
			{
				_ClientID_W = null;
				_Name_W = null;
				_Tele_W = null;
				_Fax_W = null;
				_Mail_W = null;
				_Address_W = null;
				_Website_W = null;
				_ContactName_W = null;
				_ContactTele_W = null;
				_ContactMail_W = null;
				_ContactMobile_W = null;
				_LogoPath_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ClientID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ClientID, Parameters.ClientID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Name
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Name, Parameters.Name);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tele
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tele, Parameters.Tele);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mail, Parameters.Mail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Address
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Address, Parameters.Address);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Website
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Website, Parameters.Website);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactTele
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactTele, Parameters.ContactTele);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactMail, Parameters.ContactMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactMobile, Parameters.ContactMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LogoPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LogoPath, Parameters.LogoPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ClientID
		    {
				get
		        {
					if(_ClientID_W == null)
	        	    {
						_ClientID_W = TearOff.ClientID;
					}
					return _ClientID_W;
				}
			}

			public AggregateParameter Name
		    {
				get
		        {
					if(_Name_W == null)
	        	    {
						_Name_W = TearOff.Name;
					}
					return _Name_W;
				}
			}

			public AggregateParameter Tele
		    {
				get
		        {
					if(_Tele_W == null)
	        	    {
						_Tele_W = TearOff.Tele;
					}
					return _Tele_W;
				}
			}

			public AggregateParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public AggregateParameter Mail
		    {
				get
		        {
					if(_Mail_W == null)
	        	    {
						_Mail_W = TearOff.Mail;
					}
					return _Mail_W;
				}
			}

			public AggregateParameter Address
		    {
				get
		        {
					if(_Address_W == null)
	        	    {
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public AggregateParameter Website
		    {
				get
		        {
					if(_Website_W == null)
	        	    {
						_Website_W = TearOff.Website;
					}
					return _Website_W;
				}
			}

			public AggregateParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public AggregateParameter ContactTele
		    {
				get
		        {
					if(_ContactTele_W == null)
	        	    {
						_ContactTele_W = TearOff.ContactTele;
					}
					return _ContactTele_W;
				}
			}

			public AggregateParameter ContactMail
		    {
				get
		        {
					if(_ContactMail_W == null)
	        	    {
						_ContactMail_W = TearOff.ContactMail;
					}
					return _ContactMail_W;
				}
			}

			public AggregateParameter ContactMobile
		    {
				get
		        {
					if(_ContactMobile_W == null)
	        	    {
						_ContactMobile_W = TearOff.ContactMobile;
					}
					return _ContactMobile_W;
				}
			}

			public AggregateParameter LogoPath
		    {
				get
		        {
					if(_LogoPath_W == null)
	        	    {
						_LogoPath_W = TearOff.LogoPath;
					}
					return _LogoPath_W;
				}
			}

			private AggregateParameter _ClientID_W = null;
			private AggregateParameter _Name_W = null;
			private AggregateParameter _Tele_W = null;
			private AggregateParameter _Fax_W = null;
			private AggregateParameter _Mail_W = null;
			private AggregateParameter _Address_W = null;
			private AggregateParameter _Website_W = null;
			private AggregateParameter _ContactName_W = null;
			private AggregateParameter _ContactTele_W = null;
			private AggregateParameter _ContactMail_W = null;
			private AggregateParameter _ContactMobile_W = null;
			private AggregateParameter _LogoPath_W = null;

			public void AggregateClauseReset()
			{
				_ClientID_W = null;
				_Name_W = null;
				_Tele_W = null;
				_Fax_W = null;
				_Mail_W = null;
				_Address_W = null;
				_Website_W = null;
				_ContactName_W = null;
				_ContactTele_W = null;
				_ContactMail_W = null;
				_ContactMobile_W = null;
				_LogoPath_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorClientsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ClientID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorClientsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SectorClientsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ClientID);
			p.SourceColumn = ColumnNames.ClientID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Name);
			p.SourceColumn = ColumnNames.Name;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tele);
			p.SourceColumn = ColumnNames.Tele;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fax);
			p.SourceColumn = ColumnNames.Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mail);
			p.SourceColumn = ColumnNames.Mail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Address);
			p.SourceColumn = ColumnNames.Address;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Website);
			p.SourceColumn = ColumnNames.Website;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactName);
			p.SourceColumn = ColumnNames.ContactName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactTele);
			p.SourceColumn = ColumnNames.ContactTele;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactMail);
			p.SourceColumn = ColumnNames.ContactMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactMobile);
			p.SourceColumn = ColumnNames.ContactMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LogoPath);
			p.SourceColumn = ColumnNames.LogoPath;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
