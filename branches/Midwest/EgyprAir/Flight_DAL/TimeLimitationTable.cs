
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _TimeLimitationTable : SqlClientEntity
	{
		public _TimeLimitationTable()
		{
			this.QuerySource = "TimeLimitationTable";
			this.MappingName = "TimeLimitationTable";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TimeLimitationTableLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TimeLimitationTableID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TimeLimitationTableID, TimeLimitationTableID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TimeLimitationTableLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TimeLimitationTableID
			{
				get
				{
					return new SqlParameter("@TimeLimitationTableID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TimeIntervalFrom
			{
				get
				{
					return new SqlParameter("@TimeIntervalFrom", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TimeIntervalTo
			{
				get
				{
					return new SqlParameter("@TimeIntervalTo", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter NoOfSectors
			{
				get
				{
					return new SqlParameter("@NoOfSectors", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter NoOfHours
			{
				get
				{
					return new SqlParameter("@NoOfHours", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsAcclimatized
			{
				get
				{
					return new SqlParameter("@IsAcclimatized", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TimeLimitationTableID = "TimeLimitationTableID";
            public const string TimeIntervalFrom = "TimeIntervalFrom";
            public const string TimeIntervalTo = "TimeIntervalTo";
            public const string NoOfSectors = "NoOfSectors";
            public const string NoOfHours = "NoOfHours";
            public const string IsAcclimatized = "IsAcclimatized";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TimeLimitationTableID] = _TimeLimitationTable.PropertyNames.TimeLimitationTableID;
					ht[TimeIntervalFrom] = _TimeLimitationTable.PropertyNames.TimeIntervalFrom;
					ht[TimeIntervalTo] = _TimeLimitationTable.PropertyNames.TimeIntervalTo;
					ht[NoOfSectors] = _TimeLimitationTable.PropertyNames.NoOfSectors;
					ht[NoOfHours] = _TimeLimitationTable.PropertyNames.NoOfHours;
					ht[IsAcclimatized] = _TimeLimitationTable.PropertyNames.IsAcclimatized;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TimeLimitationTableID = "TimeLimitationTableID";
            public const string TimeIntervalFrom = "TimeIntervalFrom";
            public const string TimeIntervalTo = "TimeIntervalTo";
            public const string NoOfSectors = "NoOfSectors";
            public const string NoOfHours = "NoOfHours";
            public const string IsAcclimatized = "IsAcclimatized";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TimeLimitationTableID] = _TimeLimitationTable.ColumnNames.TimeLimitationTableID;
					ht[TimeIntervalFrom] = _TimeLimitationTable.ColumnNames.TimeIntervalFrom;
					ht[TimeIntervalTo] = _TimeLimitationTable.ColumnNames.TimeIntervalTo;
					ht[NoOfSectors] = _TimeLimitationTable.ColumnNames.NoOfSectors;
					ht[NoOfHours] = _TimeLimitationTable.ColumnNames.NoOfHours;
					ht[IsAcclimatized] = _TimeLimitationTable.ColumnNames.IsAcclimatized;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TimeLimitationTableID = "s_TimeLimitationTableID";
            public const string TimeIntervalFrom = "s_TimeIntervalFrom";
            public const string TimeIntervalTo = "s_TimeIntervalTo";
            public const string NoOfSectors = "s_NoOfSectors";
            public const string NoOfHours = "s_NoOfHours";
            public const string IsAcclimatized = "s_IsAcclimatized";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TimeLimitationTableID
	    {
			get
	        {
				return base.Getint(ColumnNames.TimeLimitationTableID);
			}
			set
	        {
				base.Setint(ColumnNames.TimeLimitationTableID, value);
			}
		}

		public virtual DateTime TimeIntervalFrom
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TimeIntervalFrom);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TimeIntervalFrom, value);
			}
		}

		public virtual DateTime TimeIntervalTo
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TimeIntervalTo);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TimeIntervalTo, value);
			}
		}

		public virtual short NoOfSectors
	    {
			get
	        {
				return base.Getshort(ColumnNames.NoOfSectors);
			}
			set
	        {
				base.Setshort(ColumnNames.NoOfSectors, value);
			}
		}

		public virtual DateTime NoOfHours
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.NoOfHours);
			}
			set
	        {
				base.SetDateTime(ColumnNames.NoOfHours, value);
			}
		}

		public virtual bool IsAcclimatized
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsAcclimatized);
			}
			set
	        {
				base.Setbool(ColumnNames.IsAcclimatized, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TimeLimitationTableID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TimeLimitationTableID) ? string.Empty : base.GetintAsString(ColumnNames.TimeLimitationTableID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TimeLimitationTableID);
				else
					this.TimeLimitationTableID = base.SetintAsString(ColumnNames.TimeLimitationTableID, value);
			}
		}

		public virtual string s_TimeIntervalFrom
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TimeIntervalFrom) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TimeIntervalFrom);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TimeIntervalFrom);
				else
					this.TimeIntervalFrom = base.SetDateTimeAsString(ColumnNames.TimeIntervalFrom, value);
			}
		}

		public virtual string s_TimeIntervalTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TimeIntervalTo) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TimeIntervalTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TimeIntervalTo);
				else
					this.TimeIntervalTo = base.SetDateTimeAsString(ColumnNames.TimeIntervalTo, value);
			}
		}

		public virtual string s_NoOfSectors
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoOfSectors) ? string.Empty : base.GetshortAsString(ColumnNames.NoOfSectors);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoOfSectors);
				else
					this.NoOfSectors = base.SetshortAsString(ColumnNames.NoOfSectors, value);
			}
		}

		public virtual string s_NoOfHours
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoOfHours) ? string.Empty : base.GetDateTimeAsString(ColumnNames.NoOfHours);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoOfHours);
				else
					this.NoOfHours = base.SetDateTimeAsString(ColumnNames.NoOfHours, value);
			}
		}

		public virtual string s_IsAcclimatized
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsAcclimatized) ? string.Empty : base.GetboolAsString(ColumnNames.IsAcclimatized);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsAcclimatized);
				else
					this.IsAcclimatized = base.SetboolAsString(ColumnNames.IsAcclimatized, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TimeLimitationTableID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TimeLimitationTableID, Parameters.TimeLimitationTableID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TimeIntervalFrom
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TimeIntervalFrom, Parameters.TimeIntervalFrom);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TimeIntervalTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TimeIntervalTo, Parameters.TimeIntervalTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoOfSectors
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoOfSectors, Parameters.NoOfSectors);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoOfHours
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoOfHours, Parameters.NoOfHours);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsAcclimatized
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsAcclimatized, Parameters.IsAcclimatized);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TimeLimitationTableID
		    {
				get
		        {
					if(_TimeLimitationTableID_W == null)
	        	    {
						_TimeLimitationTableID_W = TearOff.TimeLimitationTableID;
					}
					return _TimeLimitationTableID_W;
				}
			}

			public WhereParameter TimeIntervalFrom
		    {
				get
		        {
					if(_TimeIntervalFrom_W == null)
	        	    {
						_TimeIntervalFrom_W = TearOff.TimeIntervalFrom;
					}
					return _TimeIntervalFrom_W;
				}
			}

			public WhereParameter TimeIntervalTo
		    {
				get
		        {
					if(_TimeIntervalTo_W == null)
	        	    {
						_TimeIntervalTo_W = TearOff.TimeIntervalTo;
					}
					return _TimeIntervalTo_W;
				}
			}

			public WhereParameter NoOfSectors
		    {
				get
		        {
					if(_NoOfSectors_W == null)
	        	    {
						_NoOfSectors_W = TearOff.NoOfSectors;
					}
					return _NoOfSectors_W;
				}
			}

			public WhereParameter NoOfHours
		    {
				get
		        {
					if(_NoOfHours_W == null)
	        	    {
						_NoOfHours_W = TearOff.NoOfHours;
					}
					return _NoOfHours_W;
				}
			}

			public WhereParameter IsAcclimatized
		    {
				get
		        {
					if(_IsAcclimatized_W == null)
	        	    {
						_IsAcclimatized_W = TearOff.IsAcclimatized;
					}
					return _IsAcclimatized_W;
				}
			}

			private WhereParameter _TimeLimitationTableID_W = null;
			private WhereParameter _TimeIntervalFrom_W = null;
			private WhereParameter _TimeIntervalTo_W = null;
			private WhereParameter _NoOfSectors_W = null;
			private WhereParameter _NoOfHours_W = null;
			private WhereParameter _IsAcclimatized_W = null;

			public void WhereClauseReset()
			{
				_TimeLimitationTableID_W = null;
				_TimeIntervalFrom_W = null;
				_TimeIntervalTo_W = null;
				_NoOfSectors_W = null;
				_NoOfHours_W = null;
				_IsAcclimatized_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TimeLimitationTableID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TimeLimitationTableID, Parameters.TimeLimitationTableID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TimeIntervalFrom
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TimeIntervalFrom, Parameters.TimeIntervalFrom);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TimeIntervalTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TimeIntervalTo, Parameters.TimeIntervalTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoOfSectors
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfSectors, Parameters.NoOfSectors);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoOfHours
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoOfHours, Parameters.NoOfHours);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsAcclimatized
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsAcclimatized, Parameters.IsAcclimatized);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TimeLimitationTableID
		    {
				get
		        {
					if(_TimeLimitationTableID_W == null)
	        	    {
						_TimeLimitationTableID_W = TearOff.TimeLimitationTableID;
					}
					return _TimeLimitationTableID_W;
				}
			}

			public AggregateParameter TimeIntervalFrom
		    {
				get
		        {
					if(_TimeIntervalFrom_W == null)
	        	    {
						_TimeIntervalFrom_W = TearOff.TimeIntervalFrom;
					}
					return _TimeIntervalFrom_W;
				}
			}

			public AggregateParameter TimeIntervalTo
		    {
				get
		        {
					if(_TimeIntervalTo_W == null)
	        	    {
						_TimeIntervalTo_W = TearOff.TimeIntervalTo;
					}
					return _TimeIntervalTo_W;
				}
			}

			public AggregateParameter NoOfSectors
		    {
				get
		        {
					if(_NoOfSectors_W == null)
	        	    {
						_NoOfSectors_W = TearOff.NoOfSectors;
					}
					return _NoOfSectors_W;
				}
			}

			public AggregateParameter NoOfHours
		    {
				get
		        {
					if(_NoOfHours_W == null)
	        	    {
						_NoOfHours_W = TearOff.NoOfHours;
					}
					return _NoOfHours_W;
				}
			}

			public AggregateParameter IsAcclimatized
		    {
				get
		        {
					if(_IsAcclimatized_W == null)
	        	    {
						_IsAcclimatized_W = TearOff.IsAcclimatized;
					}
					return _IsAcclimatized_W;
				}
			}

			private AggregateParameter _TimeLimitationTableID_W = null;
			private AggregateParameter _TimeIntervalFrom_W = null;
			private AggregateParameter _TimeIntervalTo_W = null;
			private AggregateParameter _NoOfSectors_W = null;
			private AggregateParameter _NoOfHours_W = null;
			private AggregateParameter _IsAcclimatized_W = null;

			public void AggregateClauseReset()
			{
				_TimeLimitationTableID_W = null;
				_TimeIntervalFrom_W = null;
				_TimeIntervalTo_W = null;
				_NoOfSectors_W = null;
				_NoOfHours_W = null;
				_IsAcclimatized_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeLimitationTableInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TimeLimitationTableID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeLimitationTableUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TimeLimitationTableDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TimeLimitationTableID);
			p.SourceColumn = ColumnNames.TimeLimitationTableID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TimeLimitationTableID);
			p.SourceColumn = ColumnNames.TimeLimitationTableID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TimeIntervalFrom);
			p.SourceColumn = ColumnNames.TimeIntervalFrom;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TimeIntervalTo);
			p.SourceColumn = ColumnNames.TimeIntervalTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoOfSectors);
			p.SourceColumn = ColumnNames.NoOfSectors;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NoOfHours);
			p.SourceColumn = ColumnNames.NoOfHours;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsAcclimatized);
			p.SourceColumn = ColumnNames.IsAcclimatized;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
