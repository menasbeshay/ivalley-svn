
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Flight_DAL
{
	public abstract class _Flight : SqlClientEntity
	{
		public _Flight()
		{
			this.QuerySource = "Flight";
			this.MappingName = "Flight";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_FlightLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int FlightID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.FlightID, FlightID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_FlightLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter FlightID
			{
				get
				{
					return new SqlParameter("@FlightID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FlightDate
			{
				get
				{
					return new SqlParameter("@FlightDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AirCraft_AirPlaneID
			{
				get
				{
					return new SqlParameter("@AirCraft_AirPlaneID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FlightNo
			{
				get
				{
					return new SqlParameter("@FlightNo", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter IsHeavy
			{
				get
				{
					return new SqlParameter("@IsHeavy", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter Comment
			{
				get
				{
					return new SqlParameter("@Comment", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter CreatedDate
			{
				get
				{
					return new SqlParameter("@CreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastModifiedDate
			{
				get
				{
					return new SqlParameter("@LastModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsHeavyCrew
			{
				get
				{
					return new SqlParameter("@IsHeavyCrew", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsPAX
			{
				get
				{
					return new SqlParameter("@IsPAX", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsReturnFlight
			{
				get
				{
					return new SqlParameter("@IsReturnFlight", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ReturnFlightID
			{
				get
				{
					return new SqlParameter("@ReturnFlightID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FlightTypeID
			{
				get
				{
					return new SqlParameter("@FlightTypeID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string FlightID = "FlightID";
            public const string FlightDate = "FlightDate";
            public const string AirCraft_AirPlaneID = "AirCraft_AirPlaneID";
            public const string FlightNo = "FlightNo";
            public const string IsHeavy = "IsHeavy";
            public const string Comment = "Comment";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string IsHeavyCrew = "IsHeavyCrew";
            public const string IsPAX = "IsPAX";
            public const string IsReturnFlight = "IsReturnFlight";
            public const string ReturnFlightID = "ReturnFlightID";
            public const string FlightTypeID = "FlightTypeID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FlightID] = _Flight.PropertyNames.FlightID;
					ht[FlightDate] = _Flight.PropertyNames.FlightDate;
					ht[AirCraft_AirPlaneID] = _Flight.PropertyNames.AirCraft_AirPlaneID;
					ht[FlightNo] = _Flight.PropertyNames.FlightNo;
					ht[IsHeavy] = _Flight.PropertyNames.IsHeavy;
					ht[Comment] = _Flight.PropertyNames.Comment;
					ht[CreatedBy] = _Flight.PropertyNames.CreatedBy;
					ht[ModifiedBy] = _Flight.PropertyNames.ModifiedBy;
					ht[CreatedDate] = _Flight.PropertyNames.CreatedDate;
					ht[LastModifiedDate] = _Flight.PropertyNames.LastModifiedDate;
					ht[IsHeavyCrew] = _Flight.PropertyNames.IsHeavyCrew;
					ht[IsPAX] = _Flight.PropertyNames.IsPAX;
					ht[IsReturnFlight] = _Flight.PropertyNames.IsReturnFlight;
					ht[ReturnFlightID] = _Flight.PropertyNames.ReturnFlightID;
					ht[FlightTypeID] = _Flight.PropertyNames.FlightTypeID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string FlightID = "FlightID";
            public const string FlightDate = "FlightDate";
            public const string AirCraft_AirPlaneID = "AirCraft_AirPlaneID";
            public const string FlightNo = "FlightNo";
            public const string IsHeavy = "IsHeavy";
            public const string Comment = "Comment";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedBy = "ModifiedBy";
            public const string CreatedDate = "CreatedDate";
            public const string LastModifiedDate = "LastModifiedDate";
            public const string IsHeavyCrew = "IsHeavyCrew";
            public const string IsPAX = "IsPAX";
            public const string IsReturnFlight = "IsReturnFlight";
            public const string ReturnFlightID = "ReturnFlightID";
            public const string FlightTypeID = "FlightTypeID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FlightID] = _Flight.ColumnNames.FlightID;
					ht[FlightDate] = _Flight.ColumnNames.FlightDate;
					ht[AirCraft_AirPlaneID] = _Flight.ColumnNames.AirCraft_AirPlaneID;
					ht[FlightNo] = _Flight.ColumnNames.FlightNo;
					ht[IsHeavy] = _Flight.ColumnNames.IsHeavy;
					ht[Comment] = _Flight.ColumnNames.Comment;
					ht[CreatedBy] = _Flight.ColumnNames.CreatedBy;
					ht[ModifiedBy] = _Flight.ColumnNames.ModifiedBy;
					ht[CreatedDate] = _Flight.ColumnNames.CreatedDate;
					ht[LastModifiedDate] = _Flight.ColumnNames.LastModifiedDate;
					ht[IsHeavyCrew] = _Flight.ColumnNames.IsHeavyCrew;
					ht[IsPAX] = _Flight.ColumnNames.IsPAX;
					ht[IsReturnFlight] = _Flight.ColumnNames.IsReturnFlight;
					ht[ReturnFlightID] = _Flight.ColumnNames.ReturnFlightID;
					ht[FlightTypeID] = _Flight.ColumnNames.FlightTypeID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string FlightID = "s_FlightID";
            public const string FlightDate = "s_FlightDate";
            public const string AirCraft_AirPlaneID = "s_AirCraft_AirPlaneID";
            public const string FlightNo = "s_FlightNo";
            public const string IsHeavy = "s_IsHeavy";
            public const string Comment = "s_Comment";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string CreatedDate = "s_CreatedDate";
            public const string LastModifiedDate = "s_LastModifiedDate";
            public const string IsHeavyCrew = "s_IsHeavyCrew";
            public const string IsPAX = "s_IsPAX";
            public const string IsReturnFlight = "s_IsReturnFlight";
            public const string ReturnFlightID = "s_ReturnFlightID";
            public const string FlightTypeID = "s_FlightTypeID";

		}
		#endregion		
		
		#region Properties
	
		public virtual int FlightID
	    {
			get
	        {
				return base.Getint(ColumnNames.FlightID);
			}
			set
	        {
				base.Setint(ColumnNames.FlightID, value);
			}
		}

		public virtual DateTime FlightDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FlightDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FlightDate, value);
			}
		}

		public virtual int AirCraft_AirPlaneID
	    {
			get
	        {
				return base.Getint(ColumnNames.AirCraft_AirPlaneID);
			}
			set
	        {
				base.Setint(ColumnNames.AirCraft_AirPlaneID, value);
			}
		}

		public virtual string FlightNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.FlightNo);
			}
			set
	        {
				base.Setstring(ColumnNames.FlightNo, value);
			}
		}

		public virtual bool IsHeavy
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsHeavy);
			}
			set
	        {
				base.Setbool(ColumnNames.IsHeavy, value);
			}
		}

		public virtual string Comment
	    {
			get
	        {
				return base.Getstring(ColumnNames.Comment);
			}
			set
	        {
				base.Setstring(ColumnNames.Comment, value);
			}
		}

		public virtual Guid CreatedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.CreatedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.CreatedBy, value);
			}
		}

		public virtual Guid ModifiedBy
	    {
			get
	        {
				return base.GetGuid(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.SetGuid(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual DateTime CreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreatedDate, value);
			}
		}

		public virtual DateTime LastModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual bool IsHeavyCrew
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsHeavyCrew);
			}
			set
	        {
				base.Setbool(ColumnNames.IsHeavyCrew, value);
			}
		}

		public virtual bool IsPAX
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsPAX);
			}
			set
	        {
				base.Setbool(ColumnNames.IsPAX, value);
			}
		}

		public virtual bool IsReturnFlight
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsReturnFlight);
			}
			set
	        {
				base.Setbool(ColumnNames.IsReturnFlight, value);
			}
		}

		public virtual int ReturnFlightID
	    {
			get
	        {
				return base.Getint(ColumnNames.ReturnFlightID);
			}
			set
	        {
				base.Setint(ColumnNames.ReturnFlightID, value);
			}
		}

		public virtual int FlightTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.FlightTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.FlightTypeID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_FlightID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightID) ? string.Empty : base.GetintAsString(ColumnNames.FlightID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightID);
				else
					this.FlightID = base.SetintAsString(ColumnNames.FlightID, value);
			}
		}

		public virtual string s_FlightDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FlightDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightDate);
				else
					this.FlightDate = base.SetDateTimeAsString(ColumnNames.FlightDate, value);
			}
		}

		public virtual string s_AirCraft_AirPlaneID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AirCraft_AirPlaneID) ? string.Empty : base.GetintAsString(ColumnNames.AirCraft_AirPlaneID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AirCraft_AirPlaneID);
				else
					this.AirCraft_AirPlaneID = base.SetintAsString(ColumnNames.AirCraft_AirPlaneID, value);
			}
		}

		public virtual string s_FlightNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightNo) ? string.Empty : base.GetstringAsString(ColumnNames.FlightNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightNo);
				else
					this.FlightNo = base.SetstringAsString(ColumnNames.FlightNo, value);
			}
		}

		public virtual string s_IsHeavy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsHeavy) ? string.Empty : base.GetboolAsString(ColumnNames.IsHeavy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsHeavy);
				else
					this.IsHeavy = base.SetboolAsString(ColumnNames.IsHeavy, value);
			}
		}

		public virtual string s_Comment
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Comment) ? string.Empty : base.GetstringAsString(ColumnNames.Comment);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Comment);
				else
					this.Comment = base.SetstringAsString(ColumnNames.Comment, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetGuidAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetGuidAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetGuidAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_CreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedDate);
				else
					this.CreatedDate = base.SetDateTimeAsString(ColumnNames.CreatedDate, value);
			}
		}

		public virtual string s_LastModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastModifiedDate);
				else
					this.LastModifiedDate = base.SetDateTimeAsString(ColumnNames.LastModifiedDate, value);
			}
		}

		public virtual string s_IsHeavyCrew
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsHeavyCrew) ? string.Empty : base.GetboolAsString(ColumnNames.IsHeavyCrew);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsHeavyCrew);
				else
					this.IsHeavyCrew = base.SetboolAsString(ColumnNames.IsHeavyCrew, value);
			}
		}

		public virtual string s_IsPAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsPAX) ? string.Empty : base.GetboolAsString(ColumnNames.IsPAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsPAX);
				else
					this.IsPAX = base.SetboolAsString(ColumnNames.IsPAX, value);
			}
		}

		public virtual string s_IsReturnFlight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsReturnFlight) ? string.Empty : base.GetboolAsString(ColumnNames.IsReturnFlight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsReturnFlight);
				else
					this.IsReturnFlight = base.SetboolAsString(ColumnNames.IsReturnFlight, value);
			}
		}

		public virtual string s_ReturnFlightID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReturnFlightID) ? string.Empty : base.GetintAsString(ColumnNames.ReturnFlightID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReturnFlightID);
				else
					this.ReturnFlightID = base.SetintAsString(ColumnNames.ReturnFlightID, value);
			}
		}

		public virtual string s_FlightTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FlightTypeID) ? string.Empty : base.GetintAsString(ColumnNames.FlightTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FlightTypeID);
				else
					this.FlightTypeID = base.SetintAsString(ColumnNames.FlightTypeID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter FlightID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightID, Parameters.FlightID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightDate, Parameters.FlightDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AirCraft_AirPlaneID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AirCraft_AirPlaneID, Parameters.AirCraft_AirPlaneID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsHeavy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsHeavy, Parameters.IsHeavy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Comment
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Comment, Parameters.Comment);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsHeavyCrew
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsHeavyCrew, Parameters.IsHeavyCrew);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsPAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsPAX, Parameters.IsPAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsReturnFlight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsReturnFlight, Parameters.IsReturnFlight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReturnFlightID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReturnFlightID, Parameters.ReturnFlightID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FlightTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FlightTypeID, Parameters.FlightTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter FlightID
		    {
				get
		        {
					if(_FlightID_W == null)
	        	    {
						_FlightID_W = TearOff.FlightID;
					}
					return _FlightID_W;
				}
			}

			public WhereParameter FlightDate
		    {
				get
		        {
					if(_FlightDate_W == null)
	        	    {
						_FlightDate_W = TearOff.FlightDate;
					}
					return _FlightDate_W;
				}
			}

			public WhereParameter AirCraft_AirPlaneID
		    {
				get
		        {
					if(_AirCraft_AirPlaneID_W == null)
	        	    {
						_AirCraft_AirPlaneID_W = TearOff.AirCraft_AirPlaneID;
					}
					return _AirCraft_AirPlaneID_W;
				}
			}

			public WhereParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public WhereParameter IsHeavy
		    {
				get
		        {
					if(_IsHeavy_W == null)
	        	    {
						_IsHeavy_W = TearOff.IsHeavy;
					}
					return _IsHeavy_W;
				}
			}

			public WhereParameter Comment
		    {
				get
		        {
					if(_Comment_W == null)
	        	    {
						_Comment_W = TearOff.Comment;
					}
					return _Comment_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public WhereParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public WhereParameter IsHeavyCrew
		    {
				get
		        {
					if(_IsHeavyCrew_W == null)
	        	    {
						_IsHeavyCrew_W = TearOff.IsHeavyCrew;
					}
					return _IsHeavyCrew_W;
				}
			}

			public WhereParameter IsPAX
		    {
				get
		        {
					if(_IsPAX_W == null)
	        	    {
						_IsPAX_W = TearOff.IsPAX;
					}
					return _IsPAX_W;
				}
			}

			public WhereParameter IsReturnFlight
		    {
				get
		        {
					if(_IsReturnFlight_W == null)
	        	    {
						_IsReturnFlight_W = TearOff.IsReturnFlight;
					}
					return _IsReturnFlight_W;
				}
			}

			public WhereParameter ReturnFlightID
		    {
				get
		        {
					if(_ReturnFlightID_W == null)
	        	    {
						_ReturnFlightID_W = TearOff.ReturnFlightID;
					}
					return _ReturnFlightID_W;
				}
			}

			public WhereParameter FlightTypeID
		    {
				get
		        {
					if(_FlightTypeID_W == null)
	        	    {
						_FlightTypeID_W = TearOff.FlightTypeID;
					}
					return _FlightTypeID_W;
				}
			}

			private WhereParameter _FlightID_W = null;
			private WhereParameter _FlightDate_W = null;
			private WhereParameter _AirCraft_AirPlaneID_W = null;
			private WhereParameter _FlightNo_W = null;
			private WhereParameter _IsHeavy_W = null;
			private WhereParameter _Comment_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _CreatedDate_W = null;
			private WhereParameter _LastModifiedDate_W = null;
			private WhereParameter _IsHeavyCrew_W = null;
			private WhereParameter _IsPAX_W = null;
			private WhereParameter _IsReturnFlight_W = null;
			private WhereParameter _ReturnFlightID_W = null;
			private WhereParameter _FlightTypeID_W = null;

			public void WhereClauseReset()
			{
				_FlightID_W = null;
				_FlightDate_W = null;
				_AirCraft_AirPlaneID_W = null;
				_FlightNo_W = null;
				_IsHeavy_W = null;
				_Comment_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_IsHeavyCrew_W = null;
				_IsPAX_W = null;
				_IsReturnFlight_W = null;
				_ReturnFlightID_W = null;
				_FlightTypeID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter FlightID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightID, Parameters.FlightID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightDate, Parameters.FlightDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AirCraft_AirPlaneID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AirCraft_AirPlaneID, Parameters.AirCraft_AirPlaneID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightNo, Parameters.FlightNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsHeavy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsHeavy, Parameters.IsHeavy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Comment
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Comment, Parameters.Comment);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedDate, Parameters.CreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastModifiedDate, Parameters.LastModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsHeavyCrew
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsHeavyCrew, Parameters.IsHeavyCrew);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsPAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPAX, Parameters.IsPAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsReturnFlight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsReturnFlight, Parameters.IsReturnFlight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReturnFlightID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReturnFlightID, Parameters.ReturnFlightID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FlightTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FlightTypeID, Parameters.FlightTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter FlightID
		    {
				get
		        {
					if(_FlightID_W == null)
	        	    {
						_FlightID_W = TearOff.FlightID;
					}
					return _FlightID_W;
				}
			}

			public AggregateParameter FlightDate
		    {
				get
		        {
					if(_FlightDate_W == null)
	        	    {
						_FlightDate_W = TearOff.FlightDate;
					}
					return _FlightDate_W;
				}
			}

			public AggregateParameter AirCraft_AirPlaneID
		    {
				get
		        {
					if(_AirCraft_AirPlaneID_W == null)
	        	    {
						_AirCraft_AirPlaneID_W = TearOff.AirCraft_AirPlaneID;
					}
					return _AirCraft_AirPlaneID_W;
				}
			}

			public AggregateParameter FlightNo
		    {
				get
		        {
					if(_FlightNo_W == null)
	        	    {
						_FlightNo_W = TearOff.FlightNo;
					}
					return _FlightNo_W;
				}
			}

			public AggregateParameter IsHeavy
		    {
				get
		        {
					if(_IsHeavy_W == null)
	        	    {
						_IsHeavy_W = TearOff.IsHeavy;
					}
					return _IsHeavy_W;
				}
			}

			public AggregateParameter Comment
		    {
				get
		        {
					if(_Comment_W == null)
	        	    {
						_Comment_W = TearOff.Comment;
					}
					return _Comment_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter CreatedDate
		    {
				get
		        {
					if(_CreatedDate_W == null)
	        	    {
						_CreatedDate_W = TearOff.CreatedDate;
					}
					return _CreatedDate_W;
				}
			}

			public AggregateParameter LastModifiedDate
		    {
				get
		        {
					if(_LastModifiedDate_W == null)
	        	    {
						_LastModifiedDate_W = TearOff.LastModifiedDate;
					}
					return _LastModifiedDate_W;
				}
			}

			public AggregateParameter IsHeavyCrew
		    {
				get
		        {
					if(_IsHeavyCrew_W == null)
	        	    {
						_IsHeavyCrew_W = TearOff.IsHeavyCrew;
					}
					return _IsHeavyCrew_W;
				}
			}

			public AggregateParameter IsPAX
		    {
				get
		        {
					if(_IsPAX_W == null)
	        	    {
						_IsPAX_W = TearOff.IsPAX;
					}
					return _IsPAX_W;
				}
			}

			public AggregateParameter IsReturnFlight
		    {
				get
		        {
					if(_IsReturnFlight_W == null)
	        	    {
						_IsReturnFlight_W = TearOff.IsReturnFlight;
					}
					return _IsReturnFlight_W;
				}
			}

			public AggregateParameter ReturnFlightID
		    {
				get
		        {
					if(_ReturnFlightID_W == null)
	        	    {
						_ReturnFlightID_W = TearOff.ReturnFlightID;
					}
					return _ReturnFlightID_W;
				}
			}

			public AggregateParameter FlightTypeID
		    {
				get
		        {
					if(_FlightTypeID_W == null)
	        	    {
						_FlightTypeID_W = TearOff.FlightTypeID;
					}
					return _FlightTypeID_W;
				}
			}

			private AggregateParameter _FlightID_W = null;
			private AggregateParameter _FlightDate_W = null;
			private AggregateParameter _AirCraft_AirPlaneID_W = null;
			private AggregateParameter _FlightNo_W = null;
			private AggregateParameter _IsHeavy_W = null;
			private AggregateParameter _Comment_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _CreatedDate_W = null;
			private AggregateParameter _LastModifiedDate_W = null;
			private AggregateParameter _IsHeavyCrew_W = null;
			private AggregateParameter _IsPAX_W = null;
			private AggregateParameter _IsReturnFlight_W = null;
			private AggregateParameter _ReturnFlightID_W = null;
			private AggregateParameter _FlightTypeID_W = null;

			public void AggregateClauseReset()
			{
				_FlightID_W = null;
				_FlightDate_W = null;
				_AirCraft_AirPlaneID_W = null;
				_FlightNo_W = null;
				_IsHeavy_W = null;
				_Comment_W = null;
				_CreatedBy_W = null;
				_ModifiedBy_W = null;
				_CreatedDate_W = null;
				_LastModifiedDate_W = null;
				_IsHeavyCrew_W = null;
				_IsPAX_W = null;
				_IsReturnFlight_W = null;
				_ReturnFlightID_W = null;
				_FlightTypeID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FlightInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.FlightID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FlightUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FlightDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.FlightID);
			p.SourceColumn = ColumnNames.FlightID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.FlightID);
			p.SourceColumn = ColumnNames.FlightID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightDate);
			p.SourceColumn = ColumnNames.FlightDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AirCraft_AirPlaneID);
			p.SourceColumn = ColumnNames.AirCraft_AirPlaneID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightNo);
			p.SourceColumn = ColumnNames.FlightNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsHeavy);
			p.SourceColumn = ColumnNames.IsHeavy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Comment);
			p.SourceColumn = ColumnNames.Comment;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedDate);
			p.SourceColumn = ColumnNames.CreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastModifiedDate);
			p.SourceColumn = ColumnNames.LastModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsHeavyCrew);
			p.SourceColumn = ColumnNames.IsHeavyCrew;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsPAX);
			p.SourceColumn = ColumnNames.IsPAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsReturnFlight);
			p.SourceColumn = ColumnNames.IsReturnFlight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReturnFlightID);
			p.SourceColumn = ColumnNames.ReturnFlightID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FlightTypeID);
			p.SourceColumn = ColumnNames.FlightTypeID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
